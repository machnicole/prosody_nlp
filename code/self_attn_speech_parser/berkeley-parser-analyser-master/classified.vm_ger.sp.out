# Time of run:
# Mon Jul  5 19:41:24 2021
# Command:
# ./berkeley_parse_analyser/classify_german_vm.py sample_data/vm_ger_with_speech_output_dev.txt sample_data/dev_ger.trees classified.vm_ger.sp
#
Printing tree transformations
Sentence 1:
0 Initial errors
0 on fringe, 0 iterations

Sentence 2:
0 Initial errors
0 on fringe, 0 iterations

Sentence 3:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		(VF die frage)
		(LK ist)
		[01;31m(NF[00m
			(SIMPX
				(LK haben)
				(MF sie irgendwelche praferierten termine von sich aus))[01;31m)[00m))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VF', 'LK', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'VAFIN', 'VAFIN', 'PPER', 'PIAT', 'ADJA', 'NN', 'APPR', 'PRF', 'APZR'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (1, 12), 'span': (4, 12), 'left siblings': ['VF', 'LK'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ja die frage ist haben sie irgendwelche praferierten termine von sich aus)

Sentence 4:
1 Initial errors
0 on fringe, 1 iterations
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX es sieht so aus das der juli eigentlich schon ziemlich voll ist)
	[01;31m(SIMPX[00m
		(VF da)
		(LK hatte)
		(MF ich eigentlich nur noch den elften und zwolften freitag und samstag)
		(VC anzubieten)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PPER', 'VVFIN', 'ADV', 'PTKVZ', 'KOUS', 'ART', 'NN', 'ADV', 'ADV', 'ADV', 'ADJD', 'VAFIN', 'ADV', 'VAFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'ART', 'NN', 'KON', 'NN', 'NN', 'KON', 'NN', 'VVIZU'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 27), 'span': (13, 27), 'left siblings': ['DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP also es sieht so aus das der juli eigentlich schon ziemlich voll ist da hatte ich eigentlich nur noch den elften und zwolften freitag und samstag anzubieten)

Sentence 5:
0 Initial errors
0 on fringe, 0 iterations

Sentence 6:
0 Initial errors
0 on fringe, 0 iterations

Sentence 7:
0 Initial errors
0 on fringe, 0 iterations

Sentence 8:
0 Initial errors
0 on fringe, 0 iterations

Sentence 9:
0 Initial errors
0 on fringe, 0 iterations

Sentence 10:
0 Initial errors
0 on fringe, 0 iterations

Sentence 11:
0 Initial errors
0 on fringe, 0 iterations

Sentence 12:
0 Initial errors
0 on fringe, 0 iterations

Sentence 13:
0 Initial errors
0 on fringe, 0 iterations

Sentence 14:
3 Initial errors
0 on fringe, 2 iterations
2 Error:NP Attachment
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		(VF ich)
		(LK denke)
		(NF [01;33m(PX[00m
			(SIMPX
				(VF
					(PX
						(APPR in)
						[01;31m(NX[00m
							(NX anbetracht) [01;33mPX)[00m
							(NX der knappen zeit)[01;31m)[00m))
				(LK konnte)
				(MF
					(NX man)
					(NX die tage)
					(ADVX sicherlich)
					[01;36m(PX[00m
						(PX durch fliegen)
						(ADJX am effektivsten)[01;36m)[00m)
				(VC nutzen)))))
Step:NP Attachment
{'new_parent': 'PX', 'new_family': ['APPR', 'NX', 'NX'], 'mover info': [('NX', (4, 5))], 'old_family': ['NX', 'NX'], 'start left siblings': [], 'auto preterminals': ('APPR', 'NN', 'ART', 'ADJA', 'NN'), 'start right siblings': ['NX'], 'end left siblings': ['APPR'], 'auto preterminal span': (3, 8), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'NX', 'POS confusion': ('NN', 'NN'), 'added and moved': True, 'end right siblings': ['NX'], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP
	(DM ja)
	(SIMPX
		(VF ich)
		(LK denke)
		(NF
			(SIMPX
				(VF in anbetracht der knappen zeit)
				(LK konnte)
				(MF
					(NX man)
					(NX die tage)
					(ADVX sicherlich)
					[01;36m(PX[00m
						(PX durch fliegen)
						(ADJX am effektivsten)[01;36m)[00m)
				(VC nutzen)))))
Step:Modifier Attachment
{'subtrees': ['PX', 'ADJX'], 'family': ['NX', 'NX', 'ADVX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NN', 'PTKA', 'ADJD'), 'right siblings': [], 'left siblings': [(NX (PIS man)), (NX (ART die) (NN tage)), (ADVX (ADV sicherlich))], 'auto preterminal span': (13, 17), 'span': (13, 17), 'parent': 'MF', 'label': 'PX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP ja ich denke in anbetracht der knappen zeit konnte man die tage sicherlich durch fliegen am effektivsten nutzen)

Sentence 15:
0 Initial errors
0 on fringe, 0 iterations

Sentence 16:
15 Initial errors
0 on fringe, 10 iterations
3 Error:Modifier Attachment
2 Error:Different label
2 Error:UNSET move
2 Error:Modifier Attachment
1 Error:UNSET add
1 Error:Unary
1 Error:PP Attachment
1 Error:UNSET remove
1 Error:Clause Attachment
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich ja)
		(VC vorschlagen)
		[01;36m(SIMPX[00m
			[01;36m(NF[00m
				(SIMPX
					(VF es)
					(LK gibt)
					[01;36m(MF[00m
						[01;31m(MF[00m
							(NX
								(NN fluge))[01;31m)[00m
						[01;31m(NF[00m
							[01;31m(PX[00m
								(ADVX schon)
								[01;36m(PX[00m
									(APPR ab)
									(NX sechs uhr morgens)[01;36m)[00m[01;31m)[00m[01;31m)[00m[01;36m)[00m)
				(NF das wir wirklich um sechs uhr losfliegen)[01;36m)[00m[01;36m)[00m)
	[01;31m(SIMPX[00m
		(VF dann)
		(LK sind)
		[01;31m(MF[00m [01;33m(MF (MF[00m
			(NX wir)
			[01;33m(ADJX[00m (PX in zwei stunden)[01;31m)[00m[01;31m)[00m
	[01;31m(ADVX[00m
		(ADV spater)[01;31m)[00m [01;33mADJX) MF)[00m
	[01;36m(VF[00m [01;31m(DM[00m
		(ADVX
			(ADV also))[01;31m)[00m[01;36m)[00m
	(SIMPX sind wir um acht in hannover)) [01;33mMF)[00m
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'PX', 'ADVX'], 'mover info': [('ADVX', (27, 28))], 'old_family': ['DM', 'SIMPX', 'SIMPX', 'ADVX', 'DM', 'SIMPX'], 'start left siblings': ['DM', 'SIMPX', 'SIMPX'], 'auto preterminals': ('PTKANT', 'ADV', 'VAFIN', 'PPER', 'ADV', 'VVINF', 'PPER', 'VVFIN', 'NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'KOUS', 'PPER', 'ADV', 'APPR', 'CARD', 'NN', 'VVFIN', 'ADV', 'VAFIN', 'PPER', 'APPR', 'CARD', 'NN', 'ADV', 'ADV', 'VAFIN', 'PPER', 'APPR', 'CARD', 'APPR', 'NE'), 'start right siblings': ['DM', 'SIMPX'], 'end left siblings': ['NX', 'PX'], 'auto preterminal span': (0, 35), 'adding node already present': False, 'movers': ['ADVX'], 'old_parent': 'TOP', 'POS confusion': ('ADV', 'ADV'), 'added and moved': True, 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'VF'}
(TOP
	(DM ja)
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich ja)
		(VC vorschlagen)
		[01;36m(SIMPX[00m
			[01;36m(NF[00m
				(SIMPX
					(VF es)
					(LK gibt)
					[01;36m(MF[00m
						[01;31m(MF[00m
							(NX
								(NN fluge))[01;31m)[00m
						[01;31m(NF[00m
							[01;31m(PX[00m
								(ADVX schon)
								[01;36m(PX[00m
									(APPR ab)
									(NX sechs uhr morgens)[01;36m)[00m[01;31m)[00m[01;31m)[00m[01;36m)[00m)
				(NF das wir wirklich um sechs uhr losfliegen)[01;36m)[00m[01;36m)[00m)
	[01;31m(SIMPX[00m
		(VF dann)
		(LK sind)
		(MF [01;33m(MF[00m
			(NX wir)
			(ADJX
				(PX in zwei stunden)
				[01;31m(ADVX[00m
					(ADV spater)[01;31m)[00m))[01;31m)[00m
	[01;36m(VF[00m [01;31m(DM[00m
		(ADVX
			(ADV also))[01;31m)[00m[01;36m)[00m
	(SIMPX sind wir um acht in hannover)) [01;33mMF)[00m
Step:Different label
{'family': ['DM', 'SIMPX', 'SIMPX', 'VF', 'SIMPX'], 'auto preterminal span': (28, 29), 'span': (28, 29), 'subtrees': ['ADVX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('ADV',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('DM', 'VF')}
(TOP
	(DM ja)
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich ja)
		(VC vorschlagen)
		[01;36m(SIMPX[00m
			[01;36m(NF[00m
				(SIMPX
					(VF es)
					(LK gibt)
					[01;36m(MF[00m
						[01;31m(MF[00m
							(NX
								(NN fluge))[01;31m)[00m
						[01;31m(NF[00m
							[01;31m(PX[00m
								(ADVX schon)
								[01;36m(PX[00m
									(APPR ab)
									(NX sechs uhr morgens)[01;36m)[00m[01;31m)[00m[01;31m)[00m[01;36m)[00m)
				(NF das wir wirklich um sechs uhr losfliegen)[01;36m)[00m[01;36m)[00m)
	[01;31m(SIMPX[00m
		(VF dann)
		(LK sind)
		(MF [01;33m(MF[00m
			(NX wir)
			(ADJX
				(PX in zwei stunden)
				[01;31m(ADVX[00m
					(ADV spater)[01;31m)[00m))[01;31m)[00m
	(VF also)
	(SIMPX sind wir um acht in hannover)) [01;33mMF)[00m
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'NF'], 'mover info': [('NF', (9, 14))], 'old_family': ['VF', 'LK', 'MF', 'NF'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('PPER', 'VVFIN', 'NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV'), 'start right siblings': [], 'end left siblings': ['NX'], 'auto preterminal span': (6, 14), 'movers': ['NF'], 'old_parent': 'SIMPX', 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich ja)
		(VC vorschlagen)
		[01;36m(SIMPX[00m
			[01;36m(NF[00m
				(SIMPX
					(VF es)
					(LK gibt)
					(MF
						(NX fluge)
						[01;31m(NF[00m
							[01;31m(PX[00m
								(ADVX schon)
								[01;36m(PX[00m
									(APPR ab)
									(NX sechs uhr morgens)[01;36m)[00m[01;31m)[00m[01;31m)[00m))
				(NF das wir wirklich um sechs uhr losfliegen)[01;36m)[00m[01;36m)[00m)
	[01;31m(SIMPX[00m
		(VF dann)
		(LK sind)
		(MF [01;33m(MF[00m
			(NX wir)
			(ADJX
				(PX in zwei stunden)
				[01;31m(ADVX[00m
					(ADV spater)[01;31m)[00m))[01;31m)[00m
	(VF also)
	(SIMPX sind wir um acht in hannover)) [01;33mMF)[00m
Step:Modifier Attachment
{'new_parent': 'NF', 'new_family': ['ADVX', 'PX'], 'mover info': [('ADVX', (9, 10))], 'old_family': ['ADVX', 'APPR', 'NX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'APPR', 'CARD', 'NN', 'ADV'), 'start right siblings': ['APPR', 'NX'], 'end left siblings': [], 'auto preterminal span': (9, 14), 'movers': ['ADVX'], 'old_parent': 'PX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['PX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich ja)
		(VC vorschlagen)
		[01;36m(SIMPX[00m
			[01;36m(NF[00m
				(SIMPX
					(VF es)
					(LK gibt)
					(MF
						(NX fluge)
						[01;31m(NF[00m
							(ADVX schon)
							(PX ab sechs uhr morgens)[01;31m)[00m))
				(NF das wir wirklich um sechs uhr losfliegen)[01;36m)[00m[01;36m)[00m)
	[01;31m(SIMPX[00m
		(VF dann)
		(LK sind)
		(MF [01;33m(MF[00m
			(NX wir)
			(ADJX
				(PX in zwei stunden)
				[01;31m(ADVX[00m
					(ADV spater)[01;31m)[00m))[01;31m)[00m
	(VF also)
	(SIMPX sind wir um acht in hannover)) [01;33mMF)[00m
Step:UNSET add
{'subtrees': ['SIMPX', 'NF'], 'family': ['VF', 'LK', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'KOUS', 'PPER', 'ADV', 'APPR', 'CARD', 'NN', 'VVFIN'), 'right siblings': [], 'left siblings': [(VF (ADVX (ADV dann))), (LK (VXFIN (VAFIN wurde))), (MF (NX (PPER ich)) (ADVX (ADV ja))), (VC (VXINF (VVINF vorschlagen)))], 'auto preterminal span': (6, 21), 'span': (6, 21), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich ja)
		(VC vorschlagen)
		[01;36m(SIMPX[00m
			(NF
				(SIMPX
					(VF es)
					(LK gibt)
					(MF
						(NX fluge)
						[01;31m(NF[00m
							(ADVX schon)
							(PX ab sechs uhr morgens)[01;31m)[00m))
				(NF das wir wirklich um sechs uhr losfliegen))[01;36m)[00m)
	[01;31m(SIMPX[00m
		(VF dann)
		(LK sind)
		(MF [01;33m(MF[00m
			(NX wir)
			(ADJX
				(PX in zwei stunden)
				[01;31m(ADVX[00m
					(ADV spater)[01;31m)[00m))[01;31m)[00m
	(VF also)
	(SIMPX sind wir um acht in hannover)) [01;33mMF)[00m
Step:Unary
{'subtrees': ['NF'], 'family': ['VF', 'LK', 'MF', 'VC', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'KOUS', 'PPER', 'ADV', 'APPR', 'CARD', 'NN', 'VVFIN'), 'right siblings': [], 'left siblings': [(VF (ADVX (ADV dann))), (LK (VXFIN (VAFIN wurde))), (MF (NX (PPER ich)) (ADVX (ADV ja))), (VC (VXINF (VVINF vorschlagen)))], 'auto preterminal span': (6, 21), 'span': (6, 21), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich ja)
		(VC vorschlagen)
		(SIMPX
			(NF
				(SIMPX
					(VF es)
					(LK gibt)
					(MF
						(NX fluge)
						[01;31m(NF[00m
							(ADVX schon)
							(PX ab sechs uhr morgens)[01;31m)[00m))
				(NF das wir wirklich um sechs uhr losfliegen))))
	[01;31m(SIMPX[00m
		(VF dann)
		(LK sind)
		(MF [01;33m(MF[00m
			(NX wir)
			(ADJX
				(PX in zwei stunden)
				[01;31m(ADVX[00m
					(ADV spater)[01;31m)[00m))[01;31m)[00m
	(VF also)
	(SIMPX sind wir um acht in hannover)) [01;33mMF)[00m
Step:PP Attachment
{'subtrees': ['ADVX', 'PX'], 'family': ['NX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (8, 14), 'span': (9, 14), 'left siblings': ['NX'], 'label': 'NF', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX dann wurde ich ja vorschlagen es gibt fluge schon ab sechs uhr morgens das wir wirklich um sechs uhr losfliegen)
	[01;31m(SIMPX[00m
		(VF dann)
		(LK sind)
		(MF [01;33m(MF[00m
			(NX wir)
			(ADJX
				(PX in zwei stunden)
				[01;31m(ADVX[00m
					(ADV spater)[01;31m)[00m))[01;31m)[00m
	(VF also)
	(SIMPX sind wir um acht in hannover)) [01;33mMF)[00m
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['DM', 'SIMPX', 'SIMPX', 'VF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'VAFIN', 'PPER', 'ADV', 'VVINF', 'PPER', 'VVFIN', 'NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'KOUS', 'PPER', 'ADV', 'APPR', 'CARD', 'NN', 'VVFIN', 'ADV', 'VAFIN', 'PPER', 'APPR', 'CARD', 'NN', 'ADV', 'ADV', 'VAFIN', 'PPER', 'APPR', 'CARD', 'APPR', 'NE'), 'right siblings': ['VF', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 35), 'span': (21, 28), 'left siblings': ['DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX dann wurde ich ja vorschlagen es gibt fluge schon ab sechs uhr morgens das wir wirklich um sechs uhr losfliegen)
	(VF dann)
	(LK sind)
	[01;36m(MF[00m
		(MF
			(NX wir)
			(ADJX
				(PX in zwei stunden)
				[01;31m(ADVX[00m
					(ADV spater)[01;31m)[00m))
		(VF also)
		(SIMPX sind wir um acht in hannover)[01;36m)[00m)
Step:Clause Attachment
{'subtrees': ['MF', 'VF', 'SIMPX'], 'family': ['DM', 'SIMPX', 'VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'APPR', 'CARD', 'NN', 'ADV', 'ADV', 'VAFIN', 'PPER', 'APPR', 'CARD', 'APPR', 'NE'), 'right siblings': [], 'left siblings': [(DM (PTKANT ja)), (SIMPX (VF (ADVX (ADV dann))) (LK (VXFIN (VAFIN wurde))) (MF (NX (PPER ich)) (ADVX (ADV ja))) (VC (VXINF (VVINF vorschlagen))) (SIMPX (NF (SIMPX (VF (NX (PPER es))) (LK (VXFIN (VVFIN gibt))) (MF (NX (NN fluge)) (ADVX (ADV schon)) (PX (APPR ab) (NX (NX (ADJX (CARD sechs)) (NN uhr)) (ADVX (ADV morgens)))))) (NF (SIMPX (C (KOUS das)) (MF (NX (PPER wir)) (ADVX (ADV wirklich)) (PX (APPR um) (NX (ADJX (CARD sechs)) (NN uhr)))) (VC (VXFIN (VVFIN losfliegen)))))))), (VF (ADVX (ADV dann))), (LK (VXFIN (VAFIN sind)))], 'auto preterminal span': (23, 35), 'span': (23, 35), 'parent': 'TOP', 'label': 'MF', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX dann wurde ich ja vorschlagen es gibt fluge schon ab sechs uhr morgens das wir wirklich um sechs uhr losfliegen)
	(VF dann)
	(LK sind)
	(MF
		(MF
			(NX wir)
			(ADJX
				(PX in zwei stunden)
				[01;31m(ADVX[00m
					(ADV spater)[01;31m)[00m))
		(VF also)
		(SIMPX sind wir um acht in hannover)))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['PX', 'ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('APPR', 'CARD', 'NN', 'ADV'), 'right siblings': [], 'parent': 'ADJX', 'auto preterminal span': (24, 28), 'span': (27, 28), 'left siblings': ['PX'], 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP ja dann wurde ich ja vorschlagen es gibt fluge schon ab sechs uhr morgens das wir wirklich um sechs uhr losfliegen dann sind wir in zwei stunden spater also sind wir um acht in hannover)

Sentence 17:
13 Initial errors
0 on fringe, 8 iterations
3 Error:Clause Attachment
2 Error:Different label
2 Error:Different label
2 Error:UNSET move
1 Error:Modifier Attachment
1 Error:Unary
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			(C bis)
			[01;31m(MF[00m [01;33m(FKOORD (MF[00m
				(NX
					(PPER wir))[01;31m)[00m[01;31m)[00m
		[01;31m(SIMPX[00m
			(VF dann) [01;33mMF)[00m
			(FKOORD
				(LKM trinken wir noch einen kaffee)
				(KON und)
				[01;36m(LKMVCN[00m [01;31m(FKOORD[00m
					(LK konnen)
					(FKOORD
						(MVC dann gleich zu unsrer filiale fahren)
						(KON und)
						[01;36m(MVC[00m [01;31m(MVCN[00m
							[01;36m(MF[00m
								[01;36m(ADVX[00m
									(MF dort)
									[01;31m(VC[00m
										(VXINF
											(VVINF anfangen))[01;31m)[00m[01;36m)[00m[01;36m)[00m
							(NF zu arbeiten)[01;31m)[00m[01;36m)[00m)[01;31m)[00m[01;36m)[00m)[01;31m)[00m) [01;33mFKOORD)[00m[01;36m)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['C', 'MF', 'SIMPX'], 'mover info': [('SIMPX', (2, 21))], 'old_family': ['SIMPX', 'SIMPX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('KOUS', 'PPER', 'ADV', 'VVFIN', 'PPER', 'ADV', 'ART', 'NN', 'KON', 'VMFIN', 'ADV', 'ADV', 'APPR', 'PPOSAT', 'NN', 'VVINF', 'KON', 'ADV', 'VVINF', 'PTKZU', 'VVINF'), 'start right siblings': [], 'end left siblings': ['C', 'MF'], 'auto preterminal span': (0, 21), 'adding node already present': False, 'movers': ['SIMPX'], 'old_parent': 'TOP', 'added and moved': True, 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move', 'added label': 'MVC'}
(TOP
	(SIMPX
		(C bis)
		(FKOORD [01;33m(MF[00m
			[01;31m(MF[00m
				(NX
					(PPER wir))[01;31m)[00m
			[01;31m(SIMPX[00m
				(VF dann) [01;33mMF)[00m
				(FKOORD
					(LKM trinken wir noch einen kaffee)
					(KON und)
					[01;36m(LKMVCN[00m [01;31m(FKOORD[00m
						(LK konnen)
						(FKOORD
							(MVC dann gleich zu unsrer filiale fahren)
							(KON und)
							[01;36m(MVC[00m [01;31m(MVCN[00m
								[01;36m(MF[00m
									[01;36m(ADVX[00m
										(MF dort)
										[01;31m(VC[00m
											(VXINF
												(VVINF anfangen))[01;31m)[00m[01;36m)[00m[01;36m)[00m
								(NF zu arbeiten)[01;31m)[00m[01;36m)[00m)[01;31m)[00m[01;36m)[00m)[01;31m)[00m)))
Step:Different label
{'family': ['LKM', 'KON', 'LKMVCN'], 'auto preterminal span': (9, 21), 'span': (9, 21), 'subtrees': ['LK', 'FKOORD'], 'parent': 'FKOORD', 'over_word': False, 'auto preterminals': ('VMFIN', 'ADV', 'ADV', 'APPR', 'PPOSAT', 'NN', 'VVINF', 'KON', 'ADV', 'VVINF', 'PTKZU', 'VVINF'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('FKOORD', 'LKMVCN')}
(TOP
	(SIMPX
		(C bis)
		(FKOORD [01;33m(MF[00m
			[01;31m(MF[00m
				(NX
					(PPER wir))[01;31m)[00m
			[01;31m(SIMPX[00m
				(VF dann) [01;33mMF)[00m
				(FKOORD
					(LKM trinken wir noch einen kaffee)
					(KON und)
					(LKMVCN
						(LK konnen)
						(FKOORD
							(MVC dann gleich zu unsrer filiale fahren)
							(KON und)
							[01;36m(MVC[00m [01;31m(MVCN[00m
								[01;36m(MF[00m
									[01;36m(ADVX[00m
										(MF dort)
										[01;31m(VC[00m
											(VXINF
												(VVINF anfangen))[01;31m)[00m[01;36m)[00m[01;36m)[00m
								(NF zu arbeiten)[01;31m)[00m[01;36m)[00m)))[01;31m)[00m)))
Step:Different label
{'family': ['MVC', 'KON', 'MVC'], 'auto preterminal span': (17, 21), 'span': (17, 21), 'subtrees': ['MF', 'VC', 'NF'], 'parent': 'FKOORD', 'over_word': False, 'auto preterminals': ('ADV', 'VVINF', 'PTKZU', 'VVINF'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('MVCN', 'MVC')}
(TOP
	(SIMPX
		(C bis)
		(FKOORD [01;33m(MF[00m
			[01;31m(MF[00m
				(NX
					(PPER wir))[01;31m)[00m
			[01;31m(SIMPX[00m
				(VF dann) [01;33mMF)[00m
				(FKOORD
					(LKM trinken wir noch einen kaffee)
					(KON und)
					(LKMVCN
						(LK konnen)
						(FKOORD
							(MVC dann gleich zu unsrer filiale fahren)
							(KON und)
							(MVC
								[01;36m(MF[00m
									[01;36m(ADVX[00m
										(MF dort)
										[01;31m(VC[00m
											(VXINF
												(VVINF anfangen))[01;31m)[00m[01;36m)[00m[01;36m)[00m
								(NF zu arbeiten)))))[01;31m)[00m)))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'VF'], 'mover info': [('VF', (2, 3))], 'old_family': ['VF', 'FKOORD'], 'start left siblings': [], 'auto preterminals': ('PPER', 'ADV', 'VVFIN', 'PPER', 'ADV', 'ART', 'NN', 'KON', 'VMFIN', 'ADV', 'ADV', 'APPR', 'PPOSAT', 'NN', 'VVINF', 'KON', 'ADV', 'VVINF', 'PTKZU', 'VVINF'), 'start right siblings': ['FKOORD'], 'end left siblings': ['NX'], 'auto preterminal span': (1, 21), 'movers': ['VF'], 'old_parent': 'SIMPX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(C bis)
		(FKOORD
			(MF wir dann)
			[01;31m(SIMPX[00m
				(FKOORD
					(LKM trinken wir noch einen kaffee)
					(KON und)
					(LKMVCN
						(LK konnen)
						(FKOORD
							(MVC dann gleich zu unsrer filiale fahren)
							(KON und)
							(MVC
								[01;36m(MF[00m
									[01;36m(ADVX[00m
										(MF dort)
										[01;31m(VC[00m
											(VXINF
												(VVINF anfangen))[01;31m)[00m[01;36m)[00m[01;36m)[00m
								(NF zu arbeiten)))))[01;31m)[00m)))
Step:Modifier Attachment
{'subtrees': ['MF', 'VC'], 'family': ['ADVX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVINF'), 'right siblings': [(NF (SIMPX (VC (VXINF (PTKZU zu) (VVINF arbeiten)))))], 'left siblings': [], 'auto preterminal span': (17, 19), 'span': (17, 19), 'parent': 'MVC', 'label': 'ADVX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(C bis)
		(FKOORD
			(MF wir dann)
			[01;31m(SIMPX[00m
				(FKOORD
					(LKM trinken wir noch einen kaffee)
					(KON und)
					(LKMVCN
						(LK konnen)
						(FKOORD
							(MVC dann gleich zu unsrer filiale fahren)
							(KON und)
							(MVC
								[01;36m(MF[00m
									(ADVX
										(MF dort)
										[01;31m(VC[00m
											(VXINF
												(VVINF anfangen))[01;31m)[00m)[01;36m)[00m
								(NF zu arbeiten)))))[01;31m)[00m)))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVINF'), 'right siblings': [(NF (SIMPX (VC (VXINF (PTKZU zu) (VVINF arbeiten)))))], 'left siblings': [], 'auto preterminal span': (17, 19), 'span': (17, 19), 'parent': 'MVC', 'label': 'MF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(C bis)
		(FKOORD
			(MF wir dann)
			[01;31m(SIMPX[00m
				(FKOORD
					(LKM trinken wir noch einen kaffee)
					(KON und)
					(LKMVCN
						(LK konnen)
						(FKOORD
							(MVC dann gleich zu unsrer filiale fahren)
							(KON und)
							(MVC
								(MF
									(ADVX
										(MF dort)
										[01;31m(VC[00m
											(VXINF
												(VVINF anfangen))[01;31m)[00m))
								(NF zu arbeiten)))))[01;31m)[00m)))
Step:Unary
{'subtrees': ['FKOORD'], 'family': ['MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'VVFIN', 'PPER', 'ADV', 'ART', 'NN', 'KON', 'VMFIN', 'ADV', 'ADV', 'APPR', 'PPOSAT', 'NN', 'VVINF', 'KON', 'ADV', 'VVINF', 'PTKZU', 'VVINF'), 'right siblings': [], 'parent': 'FKOORD', 'auto preterminal span': (1, 21), 'span': (3, 21), 'left siblings': ['MF'], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(C bis)
		(FKOORD
			(MF wir dann)
			(FKOORD
				(LKM trinken wir noch einen kaffee)
				(KON und)
				(LKMVCN
					(LK konnen)
					(FKOORD
						(MVC dann gleich zu unsrer filiale fahren)
						(KON und)
						(MVC
							(MF
								(ADVX
									(MF dort)
									[01;31m(VC[00m
										(VXINF
											(VVINF anfangen))[01;31m)[00m))
							(NF zu arbeiten))))))))
Step:Unary
{'subtrees': ['VXINF'], 'family': ['MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVINF'), 'right siblings': [], 'parent': 'ADVX', 'auto preterminal span': (17, 19), 'span': (18, 19), 'left siblings': ['MF'], 'label': 'VC', 'classified_type': 'Unary', 'type': 'remove'}
(TOP bis wir dann trinken wir noch einen kaffee und konnen dann gleich zu unsrer filiale fahren und dort anfangen zu arbeiten)

Sentence 18:
0 Initial errors
0 on fringe, 0 iterations

Sentence 19:
5 Initial errors
0 on fringe, 4 iterations
2 Error:Single Word Phrase
1 Error:Unary
1 Error:UNSET remove
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX das wurde ja bedeuten das wir am eine ubernachtung in hannover brauchten)
	[01;31m(SIMPX[00m
		[01;36m(VXFIN[00m [01;31m(VC[00m
			[01;31m(VXINF[00m
				(VVPP vorausgesetzt)[01;31m)[00m[01;31m)[00m[01;36m)[00m
		[01;31m(NF[00m
			(SIMPX
				(VF wir)
				(LK kriegen)
				(MF dann am dienstag abend noch den flug nach berlin))[01;31m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'family': ['VXFIN'], 'auto preterminal span': (12, 13), 'span': (12, 13), 'subtrees': ['VVPP'], 'parent': 'VC', 'over_word': True, 'auto preterminals': ('VVPP',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VXINF', 'VXFIN')}
(TOP
	(SIMPX das wurde ja bedeuten das wir am eine ubernachtung in hannover brauchten)
	[01;31m(SIMPX[00m
		[01;31m(VC[00m
			(VXFIN
				(VVPP vorausgesetzt))[01;31m)[00m
		[01;31m(NF[00m
			(SIMPX
				(VF wir)
				(LK kriegen)
				(MF dann am dienstag abend noch den flug nach berlin))[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['VXFIN'], 'family': ['VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVPP', 'PPER', 'VVFIN', 'ADV', 'APPRART', 'NN', 'ADV', 'ADV', 'ART', 'NN', 'APPR', 'NE'), 'right siblings': ['NF'], 'parent': 'SIMPX', 'auto preterminal span': (12, 24), 'span': (12, 13), 'left siblings': [], 'label': 'VC', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX das wurde ja bedeuten das wir am eine ubernachtung in hannover brauchten)
	[01;31m(SIMPX[00m
		(VXFIN vorausgesetzt)
		[01;31m(NF[00m
			(SIMPX
				(VF wir)
				(LK kriegen)
				(MF dann am dienstag abend noch den flug nach berlin))[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VXFIN', 'NF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VAFIN', 'ADV', 'VVINF', 'KOUS', 'PPER', 'APPRART', 'ART', 'NN', 'APPR', 'NE', 'VVFIN', 'VVPP', 'PPER', 'VVFIN', 'ADV', 'APPRART', 'NN', 'ADV', 'ADV', 'ART', 'NN', 'APPR', 'NE'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 24), 'span': (12, 24), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX das wurde ja bedeuten das wir am eine ubernachtung in hannover brauchten)
	(VXFIN vorausgesetzt)
	[01;31m(NF[00m
		(SIMPX
			(VF wir)
			(LK kriegen)
			(MF dann am dienstag abend noch den flug nach berlin))[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['SIMPX', 'VXFIN', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VAFIN', 'ADV', 'VVINF', 'KOUS', 'PPER', 'APPRART', 'ART', 'NN', 'APPR', 'NE', 'VVFIN', 'VVPP', 'PPER', 'VVFIN', 'ADV', 'APPRART', 'NN', 'ADV', 'ADV', 'ART', 'NN', 'APPR', 'NE'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 24), 'span': (13, 24), 'left siblings': ['SIMPX', 'VXFIN'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP das wurde ja bedeuten das wir am eine ubernachtung in hannover brauchten vorausgesetzt wir kriegen dann am dienstag abend noch den flug nach berlin)

Sentence 20:
1 Initial errors
0 on fringe, 1 iterations
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX meine sekretarin hat mir hier schon drei hotels rausgesucht)
	(SIMPX
		(LK haben)
		(MF
			(NX sie)
			[01;36m(NX[00m
				(NX irgendwelche vorstellungen)
				(PX davon)[01;36m)[00m)
		(NF wie das hotel aussehen sollte))
	(DM oder))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PIAT', 'NN', 'PROP'), 'right siblings': [], 'left siblings': [(NX (PPER sie))], 'auto preterminal span': (11, 14), 'span': (11, 14), 'parent': 'MF', 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP meine sekretarin hat mir hier schon drei hotels rausgesucht haben sie irgendwelche vorstellungen davon wie das hotel aussehen sollte oder)

Sentence 21:
11 Initial errors
0 on fringe, 8 iterations
4 Error:Clause Attachment
1 Error:UNSET add
1 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:Unary
1 Error:Unary
1 Error:Clause Attachment
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m [01;33m(SIMPX[00m
			(VF ich)
			(LK wurde)
			[01;31m(MF[00m [01;33m(MF[00m
				(ADVX
					(ADVX ganz)
					(ADV gerne))[01;31m)[00m[01;31m)[00m
		[01;31m(SIMPX[00m
			[01;31m(C[00m
				(KOUS wenn)[01;31m)[00m
			[01;31m(MF[00m
				(PX
					(APPR nach)
					(NX so einem harten arbeitstag))[01;31m)[00m[01;31m)[00m [01;33mMF)[00m[01;36m)[00m
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(SIMPX
				(C wenn)
				(MF es da eine sauna)
				(VC gabe))[01;31m)[00m [01;33mSIMPX)[00m
		[01;36m(SIMPX[00m
			(VF ich)
			(LK wurde)
			(MF ganz gern in die sauna)
			(VC gehen)
			(NF dann kurz)[01;36m)[00m[01;31m)[00m)
Step:Clause Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'SIMPX'], 'mover info': [('SIMPX', (5, 11))], 'old_family': ['DM', 'SIMPX', 'SIMPX', 'SIMPX'], 'start left siblings': ['DM', 'SIMPX'], 'auto preterminals': ('ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'KOUS', 'APPR', 'ADV', 'ART', 'ADJA', 'NN', 'KOUS', 'PPER', 'ADV', 'ART', 'NN', 'VVFIN', 'PPER', 'VAFIN', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'VVINF', 'ADV', 'ADV'), 'start right siblings': ['SIMPX'], 'end left siblings': ['ADVX'], 'auto preterminal span': (0, 27), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(DM also)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK wurde)
		(MF
			(ADVX ganz gerne)
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(KOUS wenn)[01;31m)[00m
				[01;31m(MF[00m
					(PX
						(APPR nach)
						(NX so einem harten arbeitstag))[01;31m)[00m[01;31m)[00m))
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(SIMPX
				(C wenn)
				(MF es da eine sauna)
				(VC gabe))[01;31m)[00m [01;33mSIMPX)[00m
		[01;36m(SIMPX[00m
			(VF ich)
			(LK wurde)
			(MF ganz gern in die sauna)
			(VC gehen)
			(NF dann kurz)[01;36m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC', 'NF'], 'family': ['LV', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'VVINF', 'ADV', 'ADV'), 'right siblings': [], 'left siblings': [(LV (SIMPX (C (KOUS wenn)) (MF (NX (PPER es)) (ADVX (ADV da)) (NX (ART eine) (NN sauna))) (VC (VXFIN (VVFIN gabe)))))], 'auto preterminal span': (17, 27), 'span': (17, 27), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK wurde)
		(MF
			(ADVX ganz gerne)
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(KOUS wenn)[01;31m)[00m
				[01;31m(MF[00m
					(PX
						(APPR nach)
						(NX so einem harten arbeitstag))[01;31m)[00m[01;31m)[00m))
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(SIMPX
				(C wenn)
				(MF es da eine sauna)
				(VC gabe))[01;31m)[00m [01;33mSIMPX)[00m
		(SIMPX ich wurde ganz gern in die sauna gehen dann kurz)[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['KOUS'], 'family': ['C', 'MF'], 'over_word': True, 'over words': True, 'auto preterminals': ('KOUS', 'APPR', 'ADV', 'ART', 'ADJA', 'NN'), 'right siblings': ['MF'], 'parent': 'SIMPX', 'auto preterminal span': (5, 11), 'span': (5, 6), 'left siblings': [], 'label': 'C', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK wurde)
		(MF
			(ADVX ganz gerne)
			[01;31m(SIMPX[00m
				(KOUS wenn)
				[01;31m(MF[00m
					(PX
						(APPR nach)
						(NX so einem harten arbeitstag))[01;31m)[00m[01;31m)[00m))
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(SIMPX
				(C wenn)
				(MF es da eine sauna)
				(VC gabe))[01;31m)[00m [01;33mSIMPX)[00m
		(SIMPX ich wurde ganz gern in die sauna gehen dann kurz)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['KOUS', 'MF'], 'family': ['ADVX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'KOUS', 'APPR', 'ADV', 'ART', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (3, 11), 'span': (5, 11), 'left siblings': ['ADVX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK wurde)
		(MF
			(ADVX ganz gerne)
			(KOUS wenn)
			[01;31m(MF[00m
				(PX
					(APPR nach)
					(NX so einem harten arbeitstag))[01;31m)[00m))
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(SIMPX
				(C wenn)
				(MF es da eine sauna)
				(VC gabe))[01;31m)[00m [01;33mSIMPX)[00m
		(SIMPX ich wurde ganz gern in die sauna gehen dann kurz)[01;31m)[00m)
Step:Unary
{'subtrees': ['PX'], 'family': ['ADVX', 'KOUS', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'KOUS', 'APPR', 'ADV', 'ART', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (3, 11), 'span': (6, 11), 'left siblings': ['ADVX', 'KOUS'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM also)
	[01;33m(SIMPX[00m (SIMPX ich wurde ganz gerne wenn nach so einem harten arbeitstag)
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(SIMPX
				(C wenn)
				(MF es da eine sauna)
				(VC gabe))[01;31m)[00m [01;33mSIMPX)[00m
		(SIMPX ich wurde ganz gern in die sauna gehen dann kurz)[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['LV', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ADV', 'ART', 'NN', 'VVFIN', 'PPER', 'VAFIN', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'VVINF', 'ADV', 'ADV'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (11, 27), 'span': (11, 17), 'left siblings': [], 'label': 'LV', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM also)
	[01;33m(SIMPX[00m (SIMPX ich wurde ganz gerne wenn nach so einem harten arbeitstag)
	[01;31m(SIMPX[00m
		(SIMPX wenn es da eine sauna gabe) [01;33mSIMPX)[00m
		(SIMPX ich wurde ganz gern in die sauna gehen dann kurz)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'KOUS', 'APPR', 'ADV', 'ART', 'ADJA', 'NN', 'KOUS', 'PPER', 'ADV', 'ART', 'NN', 'VVFIN', 'PPER', 'VAFIN', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'VVINF', 'ADV', 'ADV'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 27), 'span': (11, 27), 'left siblings': ['DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(DM also)
	[01;36m(SIMPX[00m
		(SIMPX ich wurde ganz gerne wenn nach so einem harten arbeitstag)
		(SIMPX wenn es da eine sauna gabe)[01;36m)[00m
	(SIMPX ich wurde ganz gern in die sauna gehen dann kurz))
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'ADV', 'KOUS', 'APPR', 'ADV', 'ART', 'ADJA', 'NN', 'KOUS', 'PPER', 'ADV', 'ART', 'NN', 'VVFIN'), 'right siblings': [(SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VAFIN wurde))) (MF (ADVX (ADVX (ADV ganz)) (ADV gern)) (PX (APPR in) (NX (ART die) (NN sauna)))) (VC (VXINF (VVINF gehen))) (NF (ADVX (ADV dann)) (ADVX (ADV kurz))))], 'left siblings': [(DM (ADVX (ADV also)))], 'auto preterminal span': (1, 17), 'span': (1, 17), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP also ich wurde ganz gerne wenn nach so einem harten arbeitstag wenn es da eine sauna gabe ich wurde ganz gern in die sauna gehen dann kurz)

Sentence 22:
0 Initial errors
0 on fringe, 0 iterations

Sentence 23:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX
		(VF es)
		(LK gabe)
		(MF
			[01;31m(NX[00m
				(NX eines mit sauna)
				(NX ein anderes mit hallenbad)[01;31m)[00m)))
Step:Unary
{'subtrees': ['NX', 'NX'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PIS', 'APPR', 'NN', 'ART', 'PIS', 'APPR', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (3, 10), 'span': (3, 10), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP also es gabe eines mit sauna ein anderes mit hallenbad)

Sentence 24:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Different label
1 Error:Modifier Attachment
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(ADVX[00m
	(TOP
		[01;31m(NX[00m
			[01;36m(ADVX[00m
				(ADVX scheinbar)
				(ADVX nicht)[01;36m)[00m
			[01;31m(NX[00m
				(NX beides)
				(ADVX zusammen)[01;31m)[00m[01;31m)[00m)[01;36m)[00m
Step:Different label
{'family': ['ADVX'], 'auto preterminal span': (0, 4), 'span': (0, 4), 'subtrees': ['ADVX', 'ADVX', 'NX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('ADV', 'PTKNEG', 'PIS', 'ADV'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('NX', 'ADVX')}
(TOP
	(ADVX
		[01;36m(ADVX[00m
			(ADVX scheinbar)
			(ADVX nicht)[01;36m)[00m
		[01;31m(NX[00m
			(NX beides)
			(ADVX zusammen)[01;31m)[00m))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PTKNEG'), 'right siblings': [(NX (NX (PIS beides)) (ADVX (ADV zusammen)))], 'left siblings': [], 'auto preterminal span': (0, 2), 'span': (0, 2), 'parent': 'ADVX', 'label': 'ADVX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(ADVX
		(ADVX scheinbar nicht)
		[01;31m(NX[00m
			(NX beides)
			(ADVX zusammen)[01;31m)[00m))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PTKNEG', 'PIS', 'ADV'), 'right siblings': [], 'parent': 'ADVX', 'auto preterminal span': (0, 4), 'span': (2, 4), 'left siblings': ['ADVX'], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP scheinbar nicht beides zusammen)

Sentence 25:
0 Initial errors
0 on fringe, 0 iterations

Sentence 26:
0 Initial errors
0 on fringe, 0 iterations

Sentence 27:
0 Initial errors
0 on fringe, 0 iterations

Sentence 28:
0 Initial errors
0 on fringe, 0 iterations

Sentence 29:
9 Initial errors
0 on fringe, 9 iterations
1 Error:Unary
1 Error:Unary
1 Error:Clause Attachment
1 Error:UNSET remove
1 Error:Modifier Attachment
1 Error:Modifier Attachment
1 Error:Unary
1 Error:Single Word Phrase
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		(KOORD aber)
		[01;31m(VF[00m
			[01;31m(PX[00m
				(PX dafur)
				[01;31m(SIMPX[00m
					(C das)
					[01;31m(MF[00m
						(NX wir)
						(NX die woche)
						(ADVX dann)
						[01;33m(ADVX[00m (ADVX so)[01;31m)[00m
					[01;31m(VC[00m
						[01;31m(VXFIN[00m
							(VVFIN vollpacken)[01;31m)[00m[01;31m)[00m [01;33mADVX)[00m
					[01;31m(NF[00m
						(PX
							(APPR mit)
							(NX terminen))[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
		(LK ware)
		(MF das sicherlich okay)[01;31m)[00m)
Step:Unary
{'subtrees': ['KOORD', 'VF', 'LK', 'MF'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PROP', 'KOUS', 'PPER', 'ART', 'NN', 'ADV', 'ADV', 'VVFIN', 'APPR', 'NN', 'VAFIN', 'PDS', 'ADV', 'ADJD'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 15), 'span': (0, 15), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(KOORD aber)
	[01;31m(VF[00m
		[01;31m(PX[00m
			(PX dafur)
			[01;31m(SIMPX[00m
				(C das)
				[01;31m(MF[00m
					(NX wir)
					(NX die woche)
					(ADVX dann)
					[01;33m(ADVX[00m (ADVX so)[01;31m)[00m
				[01;31m(VC[00m
					[01;31m(VXFIN[00m
						(VVFIN vollpacken)[01;31m)[00m[01;31m)[00m [01;33mADVX)[00m
				[01;31m(NF[00m
					(PX
						(APPR mit)
						(NX terminen))[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(LK ware)
	(MF das sicherlich okay))
Step:Unary
{'subtrees': ['PX'], 'family': ['KOORD', 'VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PROP', 'KOUS', 'PPER', 'ART', 'NN', 'ADV', 'ADV', 'VVFIN', 'APPR', 'NN', 'VAFIN', 'PDS', 'ADV', 'ADJD'), 'right siblings': ['LK', 'MF'], 'parent': 'TOP', 'auto preterminal span': (0, 15), 'span': (1, 11), 'left siblings': ['KOORD'], 'label': 'VF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(KOORD aber)
	[01;31m(PX[00m
		(PX dafur)
		[01;31m(SIMPX[00m
			(C das)
			[01;31m(MF[00m
				(NX wir)
				(NX die woche)
				(ADVX dann)
				[01;33m(ADVX[00m (ADVX so)[01;31m)[00m
			[01;31m(VC[00m
				[01;31m(VXFIN[00m
					(VVFIN vollpacken)[01;31m)[00m[01;31m)[00m [01;33mADVX)[00m
			[01;31m(NF[00m
				(PX
					(APPR mit)
					(NX terminen))[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(LK ware)
	(MF das sicherlich okay))
Step:Clause Attachment
{'subtrees': ['PX', 'SIMPX'], 'family': ['KOORD', 'PX', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PROP', 'KOUS', 'PPER', 'ART', 'NN', 'ADV', 'ADV', 'VVFIN', 'APPR', 'NN', 'VAFIN', 'PDS', 'ADV', 'ADJD'), 'right siblings': ['LK', 'MF'], 'parent': 'TOP', 'auto preterminal span': (0, 15), 'span': (1, 11), 'left siblings': ['KOORD'], 'label': 'PX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(KOORD aber)
	(PX dafur)
	[01;31m(SIMPX[00m
		(C das)
		[01;31m(MF[00m
			(NX wir)
			(NX die woche)
			(ADVX dann)
			[01;33m(ADVX[00m (ADVX so)[01;31m)[00m
		[01;31m(VC[00m
			[01;31m(VXFIN[00m
				(VVFIN vollpacken)[01;31m)[00m[01;31m)[00m [01;33mADVX)[00m
		[01;31m(NF[00m
			(PX
				(APPR mit)
				(NX terminen))[01;31m)[00m[01;31m)[00m
	(LK ware)
	(MF das sicherlich okay))
Step:UNSET remove
{'subtrees': ['C', 'MF', 'VC', 'NF'], 'family': ['KOORD', 'PX', 'SIMPX', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PROP', 'KOUS', 'PPER', 'ART', 'NN', 'ADV', 'ADV', 'VVFIN', 'APPR', 'NN', 'VAFIN', 'PDS', 'ADV', 'ADJD'), 'right siblings': ['LK', 'MF'], 'parent': 'TOP', 'auto preterminal span': (0, 15), 'span': (2, 11), 'left siblings': ['KOORD', 'PX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(KOORD aber)
	(PX dafur)
	(C das)
	[01;31m(MF[00m
		(NX wir)
		(NX die woche)
		(ADVX dann)
		[01;33m(ADVX[00m (ADVX so)[01;31m)[00m
	[01;31m(VC[00m
		[01;31m(VXFIN[00m
			(VVFIN vollpacken)[01;31m)[00m[01;31m)[00m [01;33mADVX)[00m
	[01;31m(NF[00m
		(PX
			(APPR mit)
			(NX terminen))[01;31m)[00m
	(LK ware)
	(MF das sicherlich okay))
Step:Modifier Attachment
{'subtrees': ['NX', 'NX', 'ADVX', 'ADVX'], 'family': ['KOORD', 'PX', 'C', 'MF', 'VC', 'NF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PROP', 'KOUS', 'PPER', 'ART', 'NN', 'ADV', 'ADV', 'VVFIN', 'APPR', 'NN', 'VAFIN', 'PDS', 'ADV', 'ADJD'), 'right siblings': ['VC', 'NF', 'LK', 'MF'], 'parent': 'TOP', 'auto preterminal span': (0, 15), 'span': (3, 8), 'left siblings': ['KOORD', 'PX', 'C'], 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(KOORD aber)
	(PX dafur)
	(C das)
	(NX wir)
	(NX die woche)
	(ADVX dann)
	[01;36m(ADVX[00m
		(ADVX so)
		[01;31m(VC[00m
			[01;31m(VXFIN[00m
				(VVFIN vollpacken)[01;31m)[00m[01;31m)[00m[01;36m)[00m
	[01;31m(NF[00m
		(PX
			(APPR mit)
			(NX terminen))[01;31m)[00m
	(LK ware)
	(MF das sicherlich okay))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'VC'], 'family': ['KOORD', 'PX', 'C', 'NX', 'NX', 'ADVX', 'ADVX', 'NF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN'), 'right siblings': [(NF (PX (APPR mit) (NX (NN terminen)))), (LK (VXFIN (VAFIN ware))), (MF (NX (PDS das)) (ADVX (ADV sicherlich)) (ADJX (ADJD okay)))], 'left siblings': [(KOORD (KON aber)), (PX (PROP dafur)), (C (KOUS das)), (NX (PPER wir)), (NX (ART die) (NN woche)), (ADVX (ADV dann))], 'auto preterminal span': (7, 9), 'span': (7, 9), 'parent': 'TOP', 'label': 'ADVX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(KOORD aber)
	(PX dafur)
	(C das)
	(NX wir)
	(NX die woche)
	(ADVX dann)
	(ADVX
		(ADVX so)
		[01;31m(VC[00m
			[01;31m(VXFIN[00m
				(VVFIN vollpacken)[01;31m)[00m[01;31m)[00m)
	[01;31m(NF[00m
		(PX
			(APPR mit)
			(NX terminen))[01;31m)[00m
	(LK ware)
	(MF das sicherlich okay))
Step:Unary
{'subtrees': ['VXFIN'], 'family': ['ADVX', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN'), 'right siblings': [], 'parent': 'ADVX', 'auto preterminal span': (7, 9), 'span': (8, 9), 'left siblings': ['ADVX'], 'label': 'VC', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(KOORD aber)
	(PX dafur)
	(C das)
	(NX wir)
	(NX die woche)
	(ADVX dann)
	(ADVX
		(ADVX so)
		[01;31m(VXFIN[00m
			(VVFIN vollpacken)[01;31m)[00m)
	[01;31m(NF[00m
		(PX
			(APPR mit)
			(NX terminen))[01;31m)[00m
	(LK ware)
	(MF das sicherlich okay))
Step:Single Word Phrase
{'subtrees': ['VVFIN'], 'family': ['ADVX', 'VXFIN'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV', 'VVFIN'), 'right siblings': [], 'parent': 'ADVX', 'auto preterminal span': (7, 9), 'span': (8, 9), 'left siblings': ['ADVX'], 'label': 'VXFIN', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(KOORD aber)
	(PX dafur)
	(C das)
	(NX wir)
	(NX die woche)
	(ADVX dann)
	(ADVX so vollpacken)
	[01;31m(NF[00m
		(PX
			(APPR mit)
			(NX terminen))[01;31m)[00m
	(LK ware)
	(MF das sicherlich okay))
Step:Unary
{'subtrees': ['PX'], 'family': ['KOORD', 'PX', 'C', 'NX', 'NX', 'ADVX', 'ADVX', 'NF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PROP', 'KOUS', 'PPER', 'ART', 'NN', 'ADV', 'ADV', 'VVFIN', 'APPR', 'NN', 'VAFIN', 'PDS', 'ADV', 'ADJD'), 'right siblings': ['LK', 'MF'], 'parent': 'TOP', 'auto preterminal span': (0, 15), 'span': (9, 11), 'left siblings': ['KOORD', 'PX', 'C', 'NX', 'NX', 'ADVX', 'ADVX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP aber dafur das wir die woche dann so vollpacken mit terminen ware das sicherlich okay)

Sentence 30:
0 Initial errors
0 on fringe, 0 iterations

Sentence 31:
5 Initial errors
0 on fringe, 3 iterations
2 Error:Different label
2 Error:Different label
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(P[00m
			(SIMPX es scheint mir sowieso gunstig)
			(KOUS weil)
			(SIMPX
				(VF ich)
				(LK sehe)
				(MF grade)
				(NF
					(SIMPX
						(C das)
						(MF
							(NX es)
							(ADVX auch)
							(PX
								(APPR in)
								(NX
									(NX der nahe)
									[01;36m(PX[00m
										(APPRART beim)
										(NX des hauptbahnhofs)[01;36m)[00m)))
						(VC ist)
						[01;36m(R[00m
							(NF
								[01;31m(SIMPX[00m
									(C was)
									(MF dann sicherlich ja auch verkehrsgunstig)
									(VC ist)[01;31m)[00m)[01;36m)[00m)))[01;31m)[00m)[01;36m)[00m
Step:Different label
{'family': ['SIMPX'], 'auto preterminal span': (0, 26), 'span': (0, 26), 'subtrees': ['SIMPX', 'KOUS', 'SIMPX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('PPER', 'VVFIN', 'PPER', 'ADV', 'ADJD', 'KOUS', 'PPER', 'VVFIN', 'ADV', 'KOUS', 'PPER', 'ADV', 'APPR', 'ART', 'NN', 'APPRART', 'ART', 'NN', 'VAFIN', 'PWS', 'ADV', 'ADV', 'ADV', 'ADV', 'ADJD', 'VAFIN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('P', 'SIMPX')}
(TOP
	(SIMPX
		(SIMPX es scheint mir sowieso gunstig)
		(KOUS weil)
		(SIMPX
			(VF ich)
			(LK sehe)
			(MF grade)
			(NF
				(SIMPX
					(C das)
					(MF
						(NX es)
						(ADVX auch)
						(PX
							(APPR in)
							(NX
								(NX der nahe)
								[01;36m(PX[00m
									(APPRART beim)
									(NX des hauptbahnhofs)[01;36m)[00m)))
					(VC ist)
					[01;36m(R[00m
						(NF
							[01;31m(SIMPX[00m
								(C was)
								(MF dann sicherlich ja auch verkehrsgunstig)
								(VC ist)[01;31m)[00m)[01;36m)[00m)))))
Step:Different label
{'family': ['R'], 'auto preterminal span': (19, 26), 'span': (19, 26), 'subtrees': ['C', 'MF', 'VC'], 'parent': 'NF', 'over_word': False, 'auto preterminals': ('PWS', 'ADV', 'ADV', 'ADV', 'ADV', 'ADJD', 'VAFIN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('SIMPX', 'R')}
(TOP
	(SIMPX
		(SIMPX es scheint mir sowieso gunstig)
		(KOUS weil)
		(SIMPX
			(VF ich)
			(LK sehe)
			(MF grade)
			(NF
				(SIMPX
					(C das)
					(MF
						(NX es)
						(ADVX auch)
						(PX
							(APPR in)
							(NX
								(NX der nahe)
								[01;36m(PX[00m
									(APPRART beim)
									(NX des hauptbahnhofs)[01;36m)[00m)))
					(VC ist)
					(NF was dann sicherlich ja auch verkehrsgunstig ist))))))
Step:UNSET add
{'subtrees': ['APPRART', 'NX'], 'family': ['NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(NX (ART der) (NN nahe))], 'auto preterminal span': (15, 18), 'span': (15, 18), 'parent': 'NX', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP es scheint mir sowieso gunstig weil ich sehe grade das es auch in der nahe beim des hauptbahnhofs ist was dann sicherlich ja auch verkehrsgunstig ist)

Sentence 32:
0 Initial errors
0 on fringe, 0 iterations

Sentence 33:
2 Initial errors
0 on fringe, 2 iterations
1 Error:UNSET remove
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		(LK kummern)
		(MF sie sich um die fluge)[01;31m)[00m
	[01;31m(SIMPX[00m
		(LK ginge)
		(MF das)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['LK', 'MF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'PRF', 'APPR', 'ART', 'NN', 'VVFIN', 'PDS'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 8), 'span': (0, 6), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(LK kummern)
	(MF sie sich um die fluge)
	[01;31m(SIMPX[00m
		(LK ginge)
		(MF das)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['LK', 'MF'], 'family': ['LK', 'MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'PRF', 'APPR', 'ART', 'NN', 'VVFIN', 'PDS'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 8), 'span': (6, 8), 'left siblings': ['LK', 'MF'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP kummern sie sich um die fluge ginge das)

Sentence 34:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Clause Attachment
1 Error:UNSET add
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;36m(SIMPX[00m
		(SIMPX ich kummere mich um die fluge)
		[01;31m(SIMPX[00m
			[01;31m(KOORD[00m
				(KON und)[01;31m)[00m
			[01;36m(SIMPX[00m
				(VF wir)
				(LK checken)
				(MF mal)
				(NF ob wir dienstag abend oder mittwoch morgen nach berlin fliegen konnen)[01;36m)[00m[01;31m)[00m[01;36m)[00m
	(SIMPX und ich gebe ihnen dann noch bescheid))
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'KOORD', 'VF', 'LK', 'MF', 'NF'], 'mover info': [('SIMPX', (1, 7))], 'old_family': ['DM', 'SIMPX', 'SIMPX', 'SIMPX'], 'start left siblings': ['DM'], 'auto preterminals': ('PTKANT', 'PPER', 'VVFIN', 'PRF', 'APPR', 'ART', 'NN', 'KON', 'PPER', 'VVFIN', 'ADV', 'KOUS', 'PPER', 'NN', 'ADV', 'KON', 'NN', 'ADV', 'APPR', 'NE', 'VVINF', 'VMFIN', 'KON', 'PPER', 'VVFIN', 'PPER', 'ADV', 'ADV', 'NN'), 'start right siblings': ['SIMPX', 'SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 29), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': ['KOORD', 'VF', 'LK', 'MF', 'NF'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		(SIMPX ich kummere mich um die fluge)
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF wir)
			(LK checken)
			(MF mal)
			(NF ob wir dienstag abend oder mittwoch morgen nach berlin fliegen konnen)[01;36m)[00m)
	(SIMPX und ich gebe ihnen dann noch bescheid))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'NF'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'KOUS', 'PPER', 'NN', 'ADV', 'KON', 'NN', 'ADV', 'APPR', 'NE', 'VVINF', 'VMFIN'), 'right siblings': [], 'left siblings': [(SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VVFIN kummere))) (MF (NX (PRF mich)) (PX (APPR um) (NX (ART die) (NN fluge))))), (KOORD (KON und))], 'auto preterminal span': (8, 22), 'span': (8, 22), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX
		(SIMPX ich kummere mich um die fluge)
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		(SIMPX wir checken mal ob wir dienstag abend oder mittwoch morgen nach berlin fliegen konnen))
	(SIMPX und ich gebe ihnen dann noch bescheid))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('PPER', 'VVFIN', 'PRF', 'APPR', 'ART', 'NN', 'KON', 'PPER', 'VVFIN', 'ADV', 'KOUS', 'PPER', 'NN', 'ADV', 'KON', 'NN', 'ADV', 'APPR', 'NE', 'VVINF', 'VMFIN'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (1, 22), 'span': (7, 8), 'left siblings': ['SIMPX'], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP ja ich kummere mich um die fluge und wir checken mal ob wir dienstag abend oder mittwoch morgen nach berlin fliegen konnen und ich gebe ihnen dann noch bescheid)

Sentence 35:
0 Initial errors
0 on fringe, 0 iterations

Sentence 36:
0 Initial errors
0 on fringe, 0 iterations

Sentence 37:
0 Initial errors
0 on fringe, 0 iterations

Sentence 38:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX [01;33m(NX[00m
		(VF
			(NX
				(NX dienstag abend)
				(KON oder)
				[01;31m(NX[00m
					(NX mittwoch) [01;33mNX)[00m
					(ADVX morgen)[01;31m)[00m))
		(LK muste)
		(MF man ja dann)
		(VC sagen))
	(DM genau))
Step:Modifier Attachment
{'new_parent': 'VF', 'new_family': ['NX', 'ADVX'], 'mover info': [('ADVX', (5, 6))], 'old_family': ['NX', 'ADVX'], 'start left siblings': ['NX'], 'auto preterminals': ('NN', 'ADV', 'KON', 'NN', 'ADV'), 'start right siblings': [], 'end left siblings': ['NX'], 'auto preterminal span': (1, 6), 'adding node already present': False, 'movers': ['ADVX'], 'old_parent': 'NX', 'POS confusion': ('ADV', 'ADV'), 'added and moved': True, 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'NX'}
(TOP also dienstag abend oder mittwoch morgen muste man ja dann sagen genau)

Sentence 39:
3 Initial errors
0 on fringe, 2 iterations
2 Error:Modifier Attachment
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich mit dem hotelbuchen einfach noch)
		(VC warten)
		(NF
			(SIMPX
				(C bis)
				[01;36m(NX[00m
					(MF
						[01;31m(NX[00m
							(PDS das)[01;31m)[00m
						[01;31m(ADJX[00m
							(ADJD geklart)[01;31m)[00m)[01;36m)[00m
				(VC ist)))))
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['PDS', 'ADJX'], 'mover info': [('ADJX', (11, 12))], 'old_family': ['NX', 'ADJX'], 'start left siblings': ['NX'], 'auto preterminals': ('PDS', 'ADJD'), 'start right siblings': [], 'end left siblings': ['PDS'], 'auto preterminal span': (10, 12), 'movers': ['ADJX'], 'old_parent': 'MF', 'POS confusion': ('ADJD', 'ADJD'), 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich mit dem hotelbuchen einfach noch)
		(VC warten)
		(NF
			(SIMPX
				(C bis)
				(MF
					(NX
						(PDS das)
						[01;31m(ADJX[00m
							(ADJD geklart)[01;31m)[00m))
				(VC ist)))))
Step:Single Word Phrase
{'subtrees': ['ADJD'], 'family': ['PDS', 'ADJX'], 'over_word': True, 'over words': True, 'auto preterminals': ('PDS', 'ADJD'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (10, 12), 'span': (11, 12), 'left siblings': ['PDS'], 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP dann wurde ich mit dem hotelbuchen einfach noch warten bis das geklart ist)

Sentence 40:
0 Initial errors
0 on fringe, 0 iterations

Sentence 41:
0 Initial errors
0 on fringe, 0 iterations

Sentence 42:
0 Initial errors
0 on fringe, 0 iterations

Sentence 43:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Single Word Phrase
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		(MF
			(ADVX dann)
			(ADVX eben)
			(NX
				(ADJX
					[01;31m(ADJX[00m
						(CARD ein)[01;31m)[00m
					(KON oder)
					(ADJX zwei))
				(NN nachte)))
		(VC buchen)))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['KOORD', 'MF', 'VC'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'ADV', 'ADV', 'CARD', 'KON', 'CARD', 'NN', 'VVINF'), 'right siblings': ['MF', 'VC'], 'parent': 'SIMPX', 'auto preterminal span': (0, 8), 'span': (0, 1), 'left siblings': [], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(SIMPX
		(KON und)
		(MF
			(ADVX dann)
			(ADVX eben)
			(NX
				(ADJX
					[01;31m(ADJX[00m
						(CARD ein)[01;31m)[00m
					(KON oder)
					(ADJX zwei))
				(NN nachte)))
		(VC buchen)))
Step:Single Word Phrase
{'subtrees': ['CARD'], 'family': ['ADJX', 'KON', 'ADJX'], 'over_word': True, 'over words': True, 'auto preterminals': ('CARD', 'KON', 'CARD'), 'right siblings': ['KON', 'ADJX'], 'parent': 'ADJX', 'auto preterminal span': (3, 6), 'span': (3, 4), 'left siblings': [], 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP und dann eben ein oder zwei nachte buchen)

Sentence 44:
16 Initial errors
0 on fringe, 10 iterations
3 Error:NP Attachment
4 Error:UNSET move
2 Error:Single Word Phrase
1 Error:UNSET add
1 Error:UNSET add
1 Error:UNSET add
1 Error:UNSET add
1 Error:UNSET remove
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM gut)
	(ADVX dann)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF dann)
		(LK schlage)
		[01;31m(MF[00m [01;33m(MF[00m
			(NX
				(PPER ich))[01;31m)[00m
		[01;36m(PX[00m
			[01;33m(PX (PX[00m (VC vor)
			(NX mitte)[01;36m)[00m
		(APPR [01;33m(PX[00m bis)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(VF[00m
					[01;31m(PX[00m
						[01;36m(NX[00m [01;31m(ADVX[00m
							(ADV spatestens)[01;31m)[00m [01;33mPX) PX)[00m[01;36m)[00m
						[01;36m(PX[00m
							(APPR bis)
							(NX mitte nachster woche)[01;36m)[00m[01;31m)[00m[01;31m)[00m [01;33mPX) MF) SIMPX)[00m
				[01;36m(SIMPX[00m
					(LK haben)
					(MF wir sie)
					(VC informiert)[01;36m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(SIMPX das muste ja dann auch noch reichen wenn wir erst im august))
Step:NP Attachment
{'new_parent': 'PX', 'new_family': ['VC', 'NX', 'APPR', 'ADVX', 'APPR', 'NX'], 'mover info': [('VC', (5, 6)), ('NX', (6, 7)), ('APPR', (7, 8))], 'old_family': ['VF', 'LK', 'MF', 'VC', 'NX', 'APPR', 'NF'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'PTKVZ', 'NN', 'APPR', 'ADV', 'APPR', 'NN', 'ADJA', 'NN', 'VAFIN', 'PPER', 'PPER', 'VVPP'), 'start right siblings': ['NF'], 'end left siblings': [], 'auto preterminal span': (2, 17), 'adding node already present': False, 'movers': ['VC', 'NX', 'APPR'], 'old_parent': 'SIMPX', 'added and moved': True, 'end right siblings': ['ADVX', 'APPR', 'NX'], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'SIMPX'}
(TOP
	(DM gut)
	(ADVX dann)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF dann)
		(LK schlage)
		[01;31m(MF[00m [01;33m(MF[00m
			(NX
				(PPER ich))[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(VF[00m
					(PX
						(PX
							[01;36m(PX[00m
								(VC vor)
								(NX mitte)[01;36m)[00m
							[01;36m(PX[00m
								(APPR bis)
								[01;36m(NX[00m [01;31m(ADVX[00m
									(ADV spatestens)[01;31m)[00m[01;36m)[00m[01;36m)[00m)
						[01;36m(PX[00m
							(APPR bis)
							(NX mitte nachster woche)[01;36m)[00m)[01;31m)[00m [01;33mMF) SIMPX)[00m
				[01;36m(SIMPX[00m
					(LK haben)
					(MF wir sie)
					(VC informiert)[01;36m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(SIMPX das muste ja dann auch noch reichen wenn wir erst im august))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'VF'], 'mover info': [('VF', (5, 13))], 'old_family': ['VF', 'LK', 'MF', 'VC'], 'start left siblings': [], 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'PTKVZ', 'NN', 'APPR', 'ADV', 'APPR', 'NN', 'ADJA', 'NN', 'VAFIN', 'PPER', 'PPER', 'VVPP'), 'start right siblings': ['LK', 'MF', 'VC'], 'end left siblings': ['NX'], 'auto preterminal span': (2, 17), 'movers': ['VF'], 'old_parent': 'SIMPX', 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM gut)
	(ADVX dann)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK schlage)
			(MF
				(NX ich)
				[01;31m(VF[00m
					(PX
						(PX
							[01;36m(PX[00m
								(VC vor)
								(NX mitte)[01;36m)[00m
							[01;36m(PX[00m
								(APPR bis)
								[01;36m(NX[00m [01;31m(ADVX[00m
									(ADV spatestens)[01;31m)[00m[01;36m)[00m[01;36m)[00m)
						[01;36m(PX[00m
							(APPR bis)
							(NX mitte nachster woche)[01;36m)[00m)[01;31m)[00m)[01;36m)[00m
		[01;31m(NF[00m
			(SIMPX
				(LK haben)
				(MF wir sie)
				(VC informiert))[01;31m)[00m[01;31m)[00m
	(SIMPX das muste ja dann auch noch reichen wenn wir erst im august))
Step:Single Word Phrase
{'family': ['VC', 'NX', 'APPR', 'NX'], 'auto preterminal span': (8, 9), 'span': (8, 9), 'subtrees': ['ADV'], 'parent': 'PX', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'NX')}
(TOP
	(DM gut)
	(ADVX dann)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK schlage)
			(MF
				(NX ich)
				[01;31m(VF[00m
					(PX
						(PX
							[01;36m(PX[00m
								(VC vor)
								(NX mitte)[01;36m)[00m
							[01;36m(PX[00m
								(APPR bis)
								(NX spatestens)[01;36m)[00m)
						[01;36m(PX[00m
							(APPR bis)
							(NX mitte nachster woche)[01;36m)[00m)[01;31m)[00m)[01;36m)[00m
		[01;31m(NF[00m
			(SIMPX
				(LK haben)
				(MF wir sie)
				(VC informiert))[01;31m)[00m[01;31m)[00m
	(SIMPX das muste ja dann auch noch reichen wenn wir erst im august))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'PTKVZ', 'NN', 'APPR', 'ADV', 'APPR', 'NN', 'ADJA', 'NN'), 'right siblings': [(NF (SIMPX (LK (VXFIN (VAFIN haben))) (MF (NX (PPER wir)) (NX (PPER sie))) (VC (VXINF (VVPP informiert)))))], 'left siblings': [], 'auto preterminal span': (2, 13), 'span': (2, 13), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM gut)
	(ADVX dann)
	[01;31m(SIMPX[00m
		(SIMPX
			(VF dann)
			(LK schlage)
			(MF
				(NX ich)
				[01;31m(VF[00m
					(PX
						(PX
							[01;36m(PX[00m
								(VC vor)
								(NX mitte)[01;36m)[00m
							[01;36m(PX[00m
								(APPR bis)
								(NX spatestens)[01;36m)[00m)
						[01;36m(PX[00m
							(APPR bis)
							(NX mitte nachster woche)[01;36m)[00m)[01;31m)[00m))
		[01;31m(NF[00m
			(SIMPX
				(LK haben)
				(MF wir sie)
				(VC informiert))[01;31m)[00m[01;31m)[00m
	(SIMPX das muste ja dann auch noch reichen wenn wir erst im august))
Step:UNSET add
{'subtrees': ['VC', 'NX'], 'family': ['PX', 'APPR', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKVZ', 'NN'), 'right siblings': [(APPR bis), (NX (ADV spatestens))], 'left siblings': [], 'auto preterminal span': (5, 7), 'span': (5, 7), 'parent': 'PX', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM gut)
	(ADVX dann)
	[01;31m(SIMPX[00m
		(SIMPX
			(VF dann)
			(LK schlage)
			(MF
				(NX ich)
				[01;31m(VF[00m
					(PX
						(PX
							(PX vor mitte)
							[01;36m(PX[00m
								(APPR bis)
								(NX spatestens)[01;36m)[00m)
						[01;36m(PX[00m
							(APPR bis)
							(NX mitte nachster woche)[01;36m)[00m)[01;31m)[00m))
		[01;31m(NF[00m
			(SIMPX
				(LK haben)
				(MF wir sie)
				(VC informiert))[01;31m)[00m[01;31m)[00m
	(SIMPX das muste ja dann auch noch reichen wenn wir erst im august))
Step:UNSET add
{'subtrees': ['APPR', 'NX'], 'family': ['PX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ADV'), 'right siblings': [], 'left siblings': [(PX (VC (PTKVZ vor)) (NX (NN mitte)))], 'auto preterminal span': (7, 9), 'span': (7, 9), 'parent': 'PX', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM gut)
	(ADVX dann)
	[01;31m(SIMPX[00m
		(SIMPX
			(VF dann)
			(LK schlage)
			(MF
				(NX ich)
				[01;31m(VF[00m
					(PX
						(PX vor mitte bis spatestens)
						[01;36m(PX[00m
							(APPR bis)
							(NX mitte nachster woche)[01;36m)[00m)[01;31m)[00m))
		[01;31m(NF[00m
			(SIMPX
				(LK haben)
				(MF wir sie)
				(VC informiert))[01;31m)[00m[01;31m)[00m
	(SIMPX das muste ja dann auch noch reichen wenn wir erst im august))
Step:UNSET add
{'subtrees': ['APPR', 'NX'], 'family': ['PX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NN', 'ADJA', 'NN'), 'right siblings': [], 'left siblings': [(PX (PX (VC (PTKVZ vor)) (NX (NN mitte))) (PX (APPR bis) (NX (ADV spatestens))))], 'auto preterminal span': (9, 13), 'span': (9, 13), 'parent': 'PX', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM gut)
	(ADVX dann)
	[01;31m(SIMPX[00m
		(SIMPX
			(VF dann)
			(LK schlage)
			(MF
				(NX ich)
				[01;31m(VF[00m
					(PX
						(PX vor mitte bis spatestens)
						(PX bis mitte nachster woche))[01;31m)[00m))
		[01;31m(NF[00m
			(SIMPX
				(LK haben)
				(MF wir sie)
				(VC informiert))[01;31m)[00m[01;31m)[00m
	(SIMPX das muste ja dann auch noch reichen wenn wir erst im august))
Step:UNSET remove
{'subtrees': ['SIMPX', 'NF'], 'family': ['DM', 'ADVX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADV', 'ADV', 'VVFIN', 'PPER', 'PTKVZ', 'NN', 'APPR', 'ADV', 'APPR', 'NN', 'ADJA', 'NN', 'VAFIN', 'PPER', 'PPER', 'VVPP', 'PDS', 'VMFIN', 'ADV', 'ADV', 'ADV', 'ADV', 'VVINF', 'KOUS', 'PPER', 'ADV', 'APPRART', 'NN'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 29), 'span': (2, 17), 'left siblings': ['DM', 'ADVX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM gut)
	(ADVX dann)
	(SIMPX
		(VF dann)
		(LK schlage)
		(MF
			(NX ich)
			[01;31m(VF[00m
				(PX
					(PX vor mitte bis spatestens)
					(PX bis mitte nachster woche))[01;31m)[00m))
	[01;31m(NF[00m
		(SIMPX
			(LK haben)
			(MF wir sie)
			(VC informiert))[01;31m)[00m
	(SIMPX das muste ja dann auch noch reichen wenn wir erst im august))
Step:Unary
{'subtrees': ['PX'], 'family': ['NX', 'VF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'PTKVZ', 'NN', 'APPR', 'ADV', 'APPR', 'NN', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (4, 13), 'span': (5, 13), 'left siblings': ['NX'], 'label': 'VF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM gut)
	(ADVX dann)
	(SIMPX dann schlage ich vor mitte bis spatestens bis mitte nachster woche)
	[01;31m(NF[00m
		(SIMPX
			(LK haben)
			(MF wir sie)
			(VC informiert))[01;31m)[00m
	(SIMPX das muste ja dann auch noch reichen wenn wir erst im august))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['DM', 'ADVX', 'SIMPX', 'NF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADV', 'ADV', 'VVFIN', 'PPER', 'PTKVZ', 'NN', 'APPR', 'ADV', 'APPR', 'NN', 'ADJA', 'NN', 'VAFIN', 'PPER', 'PPER', 'VVPP', 'PDS', 'VMFIN', 'ADV', 'ADV', 'ADV', 'ADV', 'VVINF', 'KOUS', 'PPER', 'ADV', 'APPRART', 'NN'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 29), 'span': (13, 17), 'left siblings': ['DM', 'ADVX', 'SIMPX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP gut dann dann schlage ich vor mitte bis spatestens bis mitte nachster woche haben wir sie informiert das muste ja dann auch noch reichen wenn wir erst im august)

Sentence 45:
0 Initial errors
0 on fringe, 0 iterations

Sentence 46:
8 Initial errors
0 on fringe, 7 iterations
2 Error:Modifier Attachment
1 Error:UNSET add
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:Unary
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF die frage)
			(LK ist)
			(MF jetzt noch)[01;36m)[00m
		[01;31m(SIMPX[00m
			(VF man)
			(LK hat)
			(MF
				(NX mir)
				[01;31m(PX[00m
					(ADVX hier)
					[01;36m(PX[00m
						(APPR bei)
						(NX der mappe)[01;36m)[00m[01;31m)[00m
				(ADVX auch)
				(NX einige informationen uber sehenswurdigkeiten und veranstaltungen))
			(VC hingelegt)[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(SIMPX[00m
					(LK haben)
					(MF sie da auch interesse)[01;31m)[00m
				(SIMPX soll ich da irgendwas buchen)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'PX', 'ADVX', 'NX'], 'mover info': [('ADVX', (8, 9))], 'old_family': ['ADVX', 'APPR', 'NX'], 'start left siblings': [], 'auto preterminals': ('PPER', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'PIAT', 'NN', 'APPR', 'NN', 'KON', 'NN'), 'start right siblings': ['APPR', 'NX'], 'end left siblings': ['NX'], 'auto preterminal span': (7, 19), 'movers': ['ADVX'], 'old_parent': 'PX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['PX', 'ADVX', 'NX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF die frage)
			(LK ist)
			(MF jetzt noch)[01;36m)[00m
		[01;31m(SIMPX[00m
			(VF man)
			(LK hat)
			(MF mir hier bei der mappe auch einige informationen uber sehenswurdigkeiten und veranstaltungen)
			(VC hingelegt)[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(SIMPX[00m
					(LK haben)
					(MF sie da auch interesse)[01;31m)[00m
				(SIMPX soll ich da irgendwas buchen)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'VAFIN', 'ADV', 'ADV'), 'right siblings': [(SIMPX (VF (NX (PIS man))) (LK (VXFIN (VAFIN hat))) (MF (NX (PPER mir)) (ADVX (ADV hier)) (PX (APPR bei) (NX (ART der) (NN mappe))) (ADVX (ADV auch)) (NX (NX (PIAT einige) (NN informationen)) (PX (APPR uber) (NX (NX (NN sehenswurdigkeiten)) (KON und) (NX (NN veranstaltungen)))))) (VC (VXINF (VVPP hingelegt)))), (NF (SIMPX (SIMPX (LK (VXFIN (VAFIN haben))) (MF (NX (PPER sie)) (ADVX (ADV da)) (ADVX (ADV auch)) (NX (NN interesse)))) (SIMPX (LK (VXFIN (VMFIN soll))) (MF (NX (PPER ich)) (ADVX (ADV da)) (NX (PIS irgendwas))) (VC (VXINF (VVINF buchen))))))], 'left siblings': [], 'auto preterminal span': (0, 5), 'span': (0, 5), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX die frage ist jetzt noch)
		[01;31m(SIMPX[00m
			(VF man)
			(LK hat)
			(MF mir hier bei der mappe auch einige informationen uber sehenswurdigkeiten und veranstaltungen)
			(VC hingelegt)[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(SIMPX[00m
					(LK haben)
					(MF sie da auch interesse)[01;31m)[00m
				(SIMPX soll ich da irgendwas buchen)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX', 'SIMPX', 'NF'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'VAFIN', 'ADV', 'ADV', 'PIS', 'VAFIN', 'PPER', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'PIAT', 'NN', 'APPR', 'NN', 'KON', 'NN', 'VVPP', 'VAFIN', 'PPER', 'ADV', 'ADV', 'NN', 'VMFIN', 'PPER', 'ADV', 'PIS', 'VVINF'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 30), 'span': (0, 30), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX die frage ist jetzt noch)
	[01;31m(SIMPX[00m
		(VF man)
		(LK hat)
		(MF mir hier bei der mappe auch einige informationen uber sehenswurdigkeiten und veranstaltungen)
		(VC hingelegt)[01;31m)[00m
	[01;31m(NF[00m
		[01;31m(SIMPX[00m
			[01;31m(SIMPX[00m
				(LK haben)
				(MF sie da auch interesse)[01;31m)[00m
			(SIMPX soll ich da irgendwas buchen)[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['SIMPX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'VAFIN', 'ADV', 'ADV', 'PIS', 'VAFIN', 'PPER', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'PIAT', 'NN', 'APPR', 'NN', 'KON', 'NN', 'VVPP', 'VAFIN', 'PPER', 'ADV', 'ADV', 'NN', 'VMFIN', 'PPER', 'ADV', 'PIS', 'VVINF'), 'right siblings': ['NF'], 'parent': 'TOP', 'auto preterminal span': (0, 30), 'span': (5, 20), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX die frage ist jetzt noch)
	(VF man)
	(LK hat)
	(MF mir hier bei der mappe auch einige informationen uber sehenswurdigkeiten und veranstaltungen)
	(VC hingelegt)
	[01;31m(NF[00m
		[01;31m(SIMPX[00m
			[01;31m(SIMPX[00m
				(LK haben)
				(MF sie da auch interesse)[01;31m)[00m
			(SIMPX soll ich da irgendwas buchen)[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['LK', 'MF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'PPER', 'ADV', 'ADV', 'NN', 'VMFIN', 'PPER', 'ADV', 'PIS', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (20, 30), 'span': (20, 25), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX die frage ist jetzt noch)
	(VF man)
	(LK hat)
	(MF mir hier bei der mappe auch einige informationen uber sehenswurdigkeiten und veranstaltungen)
	(VC hingelegt)
	[01;31m(NF[00m
		[01;31m(SIMPX[00m
			(LK haben)
			(MF sie da auch interesse)
			(SIMPX soll ich da irgendwas buchen)[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['LK', 'MF', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'PPER', 'ADV', 'ADV', 'NN', 'VMFIN', 'PPER', 'ADV', 'PIS', 'VVINF'), 'right siblings': [], 'parent': 'NF', 'auto preterminal span': (20, 30), 'span': (20, 30), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX die frage ist jetzt noch)
	(VF man)
	(LK hat)
	(MF mir hier bei der mappe auch einige informationen uber sehenswurdigkeiten und veranstaltungen)
	(VC hingelegt)
	[01;31m(NF[00m
		(LK haben)
		(MF sie da auch interesse)
		(SIMPX soll ich da irgendwas buchen)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['LK', 'MF', 'SIMPX'], 'family': ['SIMPX', 'VF', 'LK', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'VAFIN', 'ADV', 'ADV', 'PIS', 'VAFIN', 'PPER', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'PIAT', 'NN', 'APPR', 'NN', 'KON', 'NN', 'VVPP', 'VAFIN', 'PPER', 'ADV', 'ADV', 'NN', 'VMFIN', 'PPER', 'ADV', 'PIS', 'VVINF'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 30), 'span': (20, 30), 'left siblings': ['SIMPX', 'VF', 'LK', 'MF', 'VC'], 'label': 'NF', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP die frage ist jetzt noch man hat mir hier bei der mappe auch einige informationen uber sehenswurdigkeiten und veranstaltungen hingelegt haben sie da auch interesse soll ich da irgendwas buchen)

Sentence 47:
0 Initial errors
0 on fringe, 0 iterations

Sentence 48:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK hatte)
		(MF
			(NX
				[01;36m(ADVX[00m [01;31m(ADJX[00m
					(ADJA grose)[01;31m)[00m[01;36m)[00m
				(NN lust)))
		(NF ins theater zu gehen))
	(NX aber nicht so was ganz schweres))
Step:Single Word Phrase
{'family': ['ADVX', 'NN'], 'auto preterminal span': (3, 4), 'span': (3, 4), 'subtrees': ['ADJA'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('ADJA',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'ADVX')}
(TOP also ich hatte grose lust ins theater zu gehen aber nicht so was ganz schweres)

Sentence 49:
8 Initial errors
0 on fringe, 6 iterations
2 Error:Different label
2 Error:Single Word Phrase
1 Error:UNSET add
1 Error:Single Word Phrase
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK weis)
		[01;36m(ADJX[00m [01;31m(MF[00m
			[01;31m(ADVX[00m
				(ADV zufallig)[01;31m)[00m[01;31m)[00m[01;36m)[00m
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;36m(NX[00m [01;31m(C[00m
					(KOUS das)[01;31m)[00m[01;36m)[00m
				(MF
					[01;36m(PX[00m
						(PX im letzten monat)
						(NX woyzek)[01;36m)[00m
					(ADVX da))
				(VC gegeben wurde)[01;31m)[00m[01;31m)[00m)
	(SIMPX das ware mir ein bischen zu anstrengend))
Step:Different label
{'family': ['VF', 'LK', 'ADJX', 'NF'], 'auto preterminal span': (3, 4), 'span': (3, 4), 'subtrees': ['ADVX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('ADV',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('MF', 'ADJX')}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK weis)
		(ADJX
			[01;31m(ADVX[00m
				(ADV zufallig)[01;31m)[00m)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;36m(NX[00m [01;31m(C[00m
					(KOUS das)[01;31m)[00m[01;36m)[00m
				(MF
					[01;36m(PX[00m
						(PX im letzten monat)
						(NX woyzek)[01;36m)[00m
					(ADVX da))
				(VC gegeben wurde)[01;31m)[00m[01;31m)[00m)
	(SIMPX das ware mir ein bischen zu anstrengend))
Step:Single Word Phrase
{'family': ['NX', 'MF', 'VC'], 'auto preterminal span': (4, 5), 'span': (4, 5), 'subtrees': ['KOUS'], 'parent': 'SIMPX', 'over_word': True, 'auto preterminals': ('KOUS',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('C', 'NX')}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK weis)
		(ADJX
			[01;31m(ADVX[00m
				(ADV zufallig)[01;31m)[00m)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(NX das)
				(MF
					[01;36m(PX[00m
						(PX im letzten monat)
						(NX woyzek)[01;36m)[00m
					(ADVX da))
				(VC gegeben wurde)[01;31m)[00m[01;31m)[00m)
	(SIMPX das ware mir ein bischen zu anstrengend))
Step:UNSET add
{'subtrees': ['PX', 'NX'], 'family': ['PX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'ADJA', 'NN', 'NE'), 'right siblings': [(ADVX (ADV da))], 'left siblings': [], 'auto preterminal span': (5, 9), 'span': (5, 9), 'parent': 'MF', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK weis)
		(ADJX
			[01;31m(ADVX[00m
				(ADV zufallig)[01;31m)[00m)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(NX das)
				(MF im letzten monat woyzek da)
				(VC gegeben wurde)[01;31m)[00m[01;31m)[00m)
	(SIMPX das ware mir ein bischen zu anstrengend))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV',), 'right siblings': [], 'parent': 'ADJX', 'auto preterminal span': (3, 4), 'span': (3, 4), 'left siblings': [], 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK weis)
		(ADJX zufallig)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(NX das)
				(MF im letzten monat woyzek da)
				(VC gegeben wurde)[01;31m)[00m[01;31m)[00m)
	(SIMPX das ware mir ein bischen zu anstrengend))
Step:Unary
{'subtrees': ['NX', 'MF', 'VC'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'APPRART', 'ADJA', 'NN', 'NE', 'ADV', 'VVPP', 'VAFIN'), 'right siblings': [], 'parent': 'NF', 'auto preterminal span': (4, 12), 'span': (4, 12), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK weis)
		(ADJX zufallig)
		[01;31m(NF[00m
			(NX das)
			(MF im letzten monat woyzek da)
			(VC gegeben wurde)[01;31m)[00m)
	(SIMPX das ware mir ein bischen zu anstrengend))
Step:UNSET remove
{'subtrees': ['NX', 'MF', 'VC'], 'family': ['VF', 'LK', 'ADJX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'KOUS', 'APPRART', 'ADJA', 'NN', 'NE', 'ADV', 'VVPP', 'VAFIN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (1, 12), 'span': (4, 12), 'left siblings': ['VF', 'LK', 'ADJX'], 'label': 'NF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP also ich weis zufallig das im letzten monat woyzek da gegeben wurde das ware mir ein bischen zu anstrengend)

Sentence 50:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Co-ordination
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF vielleicht)
		(LK finden)
		(MF
			(NX wir)
			(NX
				(NX so was)
				(PX
					(APPR in)
					(NX [01;33m(NX[00m
						(NX richtung)
						[01;31m(NX[00m
							(NX musical) [01;33mNX)[00m
							(KON oder)
							(NX variete)[01;31m)[00m))))))
Step:Co-ordination
{'new_parent': 'PX', 'new_family': ['APPR', 'NX', 'KON', 'NX'], 'mover info': [('KON', (8, 9)), ('NX', (9, 10))], 'old_family': ['NX', 'KON', 'NX'], 'start left siblings': ['NX'], 'auto preterminals': ('APPR', 'NN', 'NN', 'KON', 'NN'), 'start right siblings': [], 'end left siblings': ['APPR', 'NX'], 'auto preterminal span': (5, 10), 'adding node already present': False, 'movers': ['KON', 'NX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'Co-ordination', 'type': 'move', 'added label': 'NX'}
(TOP vielleicht finden wir so was in richtung musical oder variete)

Sentence 51:
9 Initial errors
0 on fringe, 8 iterations
2 Error:PP Attachment
1 Error:Unary
1 Error:UNSET remove
1 Error:Modifier Attachment
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX
		(VF unter den angeboten)
		(LK sind)
		[01;31m(MF[00m
			[01;31m(PX[00m
				(APPR in)
				[01;31m(NX[00m [01;33m(NX[00m
					(NX diese richtung)
					[01;31m(NX[00m
						(ART der)
						(ADJX darstellenden)
						(NN kunste)[01;31m)[00m[01;31m)[00m[01;31m)[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					(ADJX zwei)
					(NN kategorien)[01;31m)[00m
				[01;31m(NX[00m
					(NX opernbesuche)
					(KON und)
					[01;33m(NX[00m (NX gospelkonzert)[01;31m)[00m[01;31m)[00m
			(PX an dem abend)[01;31m)[00m [01;33mNX) NX)[00m
		(VC zu buchen)))
Step:PP Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'NX', 'NX', 'PX'], 'mover info': [('NX', (11, 16)), ('PX', (16, 19))], 'old_family': ['PX', 'NX', 'PX'], 'start left siblings': ['PX'], 'auto preterminals': ('APPR', 'PDAT', 'NN', 'ART', 'ADJA', 'NN', 'CARD', 'NN', 'NN', 'KON', 'NN', 'APPR', 'ART', 'NN'), 'start right siblings': [], 'end left siblings': ['NX', 'NX'], 'auto preterminal span': (5, 19), 'movers': ['NX', 'PX'], 'old_parent': 'MF', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(DM also)
	(SIMPX
		(VF unter den angeboten)
		(LK sind)
		[01;31m(MF[00m
			[01;31m(PX[00m
				(APPR in)
				(NX
					(NX diese richtung)
					[01;31m(NX[00m
						(ART der)
						(ADJX darstellenden)
						(NN kunste)[01;31m)[00m
					[01;31m(NX[00m
						[01;31m(NX[00m
							(ADJX zwei)
							(NN kategorien)[01;31m)[00m
						[01;31m(NX[00m
							(NX opernbesuche)
							(KON und)
							[01;33m(NX[00m (NX gospelkonzert)[01;31m)[00m[01;31m)[00m
					(PX an dem abend))[01;31m)[00m[01;31m)[00m [01;33mNX)[00m
		(VC zu buchen)))
Step:Unary
{'subtrees': ['APPR', 'NX'], 'family': ['PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'PDAT', 'NN', 'ART', 'ADJA', 'NN', 'CARD', 'NN', 'NN', 'KON', 'NN', 'APPR', 'ART', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (5, 19), 'span': (5, 19), 'left siblings': [], 'label': 'PX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX
		(VF unter den angeboten)
		(LK sind)
		[01;31m(MF[00m
			(APPR in)
			(NX
				(NX diese richtung)
				[01;31m(NX[00m
					(ART der)
					(ADJX darstellenden)
					(NN kunste)[01;31m)[00m
				[01;31m(NX[00m
					[01;31m(NX[00m
						(ADJX zwei)
						(NN kategorien)[01;31m)[00m
					[01;31m(NX[00m
						(NX opernbesuche)
						(KON und)
						[01;33m(NX[00m (NX gospelkonzert)[01;31m)[00m[01;31m)[00m
				(PX an dem abend))[01;31m)[00m [01;33mNX)[00m
		(VC zu buchen)))
Step:UNSET remove
{'subtrees': ['APPR', 'NX'], 'family': ['VF', 'LK', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'VAFIN', 'APPR', 'PDAT', 'NN', 'ART', 'ADJA', 'NN', 'CARD', 'NN', 'NN', 'KON', 'NN', 'APPR', 'ART', 'NN', 'PTKZU', 'VVINF'), 'right siblings': ['VC'], 'parent': 'SIMPX', 'auto preterminal span': (1, 21), 'span': (5, 19), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX
		(VF unter den angeboten)
		(LK sind)
		(APPR in)
		(NX
			(NX diese richtung)
			[01;31m(NX[00m
				(ART der)
				(ADJX darstellenden)
				(NN kunste)[01;31m)[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					(ADJX zwei)
					(NN kategorien)[01;31m)[00m
				[01;31m(NX[00m
					(NX opernbesuche)
					(KON und)
					[01;33m(NX[00m (NX gospelkonzert)[01;31m)[00m[01;31m)[00m
			(PX an dem abend)) [01;33mNX)[00m
		(VC zu buchen)))
Step:Modifier Attachment
{'subtrees': ['ART', 'ADJX', 'NN'], 'family': ['NX', 'NX', 'NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDAT', 'NN', 'ART', 'ADJA', 'NN', 'CARD', 'NN', 'NN', 'KON', 'NN', 'APPR', 'ART', 'NN'), 'right siblings': ['NX', 'PX'], 'parent': 'NX', 'auto preterminal span': (6, 19), 'span': (8, 11), 'left siblings': ['NX'], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX
		(VF unter den angeboten)
		(LK sind)
		(APPR in)
		(NX
			(NX diese richtung)
			(ART der)
			(ADJX darstellenden)
			(NN kunste)
			[01;31m(NX[00m
				[01;31m(NX[00m
					(ADJX zwei)
					(NN kategorien)[01;31m)[00m
				[01;31m(NX[00m
					(NX opernbesuche)
					(KON und)
					[01;33m(NX[00m (NX gospelkonzert)[01;31m)[00m[01;31m)[00m
			(PX an dem abend)) [01;33mNX)[00m
		(VC zu buchen)))
Step:UNSET remove
{'subtrees': ['ADJX', 'NN'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'NN', 'NN', 'KON', 'NN'), 'right siblings': ['NX'], 'parent': 'NX', 'auto preterminal span': (11, 16), 'span': (11, 13), 'left siblings': [], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX
		(VF unter den angeboten)
		(LK sind)
		(APPR in)
		(NX
			(NX diese richtung)
			(ART der)
			(ADJX darstellenden)
			(NN kunste)
			[01;31m(NX[00m
				(ADJX zwei)
				(NN kategorien)
				[01;31m(NX[00m
					(NX opernbesuche)
					(KON und)
					[01;33m(NX[00m (NX gospelkonzert)[01;31m)[00m[01;31m)[00m
			(PX an dem abend)) [01;33mNX)[00m
		(VC zu buchen)))
Step:UNSET remove
{'subtrees': ['ADJX', 'NN', 'NX'], 'family': ['NX', 'ART', 'ADJX', 'NN', 'NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDAT', 'NN', 'ART', 'ADJA', 'NN', 'CARD', 'NN', 'NN', 'KON', 'NN', 'APPR', 'ART', 'NN'), 'right siblings': ['PX'], 'parent': 'NX', 'auto preterminal span': (6, 19), 'span': (11, 16), 'left siblings': ['NX', 'ART', 'ADJX', 'NN'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX
		(VF unter den angeboten)
		(LK sind)
		(APPR in)
		(NX
			(NX diese richtung)
			(ART der)
			(ADJX darstellenden)
			(NN kunste)
			(ADJX zwei)
			(NN kategorien)
			[01;31m(NX[00m
				(NX opernbesuche)
				(KON und)
				[01;33m(NX[00m (NX gospelkonzert)[01;31m)[00m
			(PX an dem abend)) [01;33mNX)[00m
		(VC zu buchen)))
Step:UNSET remove
{'subtrees': ['NX', 'KON', 'NX'], 'family': ['NX', 'ART', 'ADJX', 'NN', 'ADJX', 'NN', 'NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDAT', 'NN', 'ART', 'ADJA', 'NN', 'CARD', 'NN', 'NN', 'KON', 'NN', 'APPR', 'ART', 'NN'), 'right siblings': ['PX'], 'parent': 'NX', 'auto preterminal span': (6, 19), 'span': (13, 16), 'left siblings': ['NX', 'ART', 'ADJX', 'NN', 'ADJX', 'NN'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX
		(VF unter den angeboten)
		(LK sind)
		(APPR in)
		(NX
			(NX diese richtung)
			(ART der)
			(ADJX darstellenden)
			(NN kunste)
			(ADJX zwei)
			(NN kategorien)
			(NX opernbesuche)
			(KON und)
			[01;36m(NX[00m
				(NX gospelkonzert)
				(PX an dem abend)[01;36m)[00m)
		(VC zu buchen)))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['NX', 'ART', 'ADJX', 'NN', 'ADJX', 'NN', 'NX', 'KON', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(NX (PDAT diese) (NN richtung)), (ART der), (ADJX (ADJA darstellenden)), (NN kunste), (ADJX (CARD zwei)), (NN kategorien), (NX (NN opernbesuche)), (KON und)], 'auto preterminal span': (15, 19), 'span': (15, 19), 'parent': 'NX', 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP also unter den angeboten sind in diese richtung der darstellenden kunste zwei kategorien opernbesuche und gospelkonzert an dem abend zu buchen)

Sentence 52:
0 Initial errors
0 on fringe, 0 iterations

Sentence 53:
0 Initial errors
0 on fringe, 0 iterations

Sentence 54:
0 Initial errors
0 on fringe, 0 iterations

Sentence 55:
0 Initial errors
0 on fringe, 0 iterations

Sentence 56:
0 Initial errors
0 on fringe, 0 iterations

Sentence 57:
0 Initial errors
0 on fringe, 0 iterations

Sentence 58:
0 Initial errors
0 on fringe, 0 iterations

Sentence 59:
6 Initial errors
0 on fringe, 3 iterations
3 Error:Clause Attachment
2 Error:Co-ordination
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(VF ich)
			(LK denke)
			[01;33m(SIMPX (NF[00m (NF dann ist es am sinnvollsten wenn wir die restlichen dinge vertagen bis zu unserem nachsten telefonat)[01;31m)[00m
		(SIMPX
			(C das)
			(MF wir dann)
			(VC fixieren)
			(NF
				(SIMPX
					(C wie)
					(MF
						(NX das)
						(PX [01;33m(PX[00m
							(APPR mit)
							[01;31m(NX[00m
								(NX den buchungen der hotels) [01;33mPX)[00m
								(KON und)
								(ADVX so weiter)[01;31m)[00m))
					(VC aussehen sollte))))[01;36m)[00m) [01;33mNF) SIMPX)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'NF', 'SIMPX'], 'mover info': [('SIMPX', (19, 35))], 'old_family': ['DM', 'SIMPX', 'SIMPX'], 'start left siblings': ['DM', 'SIMPX'], 'auto preterminals': ('PTKANT', 'PPER', 'VVFIN', 'ADV', 'VAFIN', 'PPER', 'PTKA', 'ADJD', 'KOUS', 'PPER', 'ART', 'ADJA', 'NN', 'VVFIN', 'APPR', 'APPR', 'PPOSAT', 'ADJA', 'NN', 'KOUS', 'PPER', 'ADV', 'VVFIN', 'KOUS', 'PDS', 'APPR', 'ART', 'NN', 'ART', 'NN', 'KON', 'ADV', 'ADV', 'VVINF', 'VMFIN'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'NF'], 'auto preterminal span': (0, 35), 'adding node already present': False, 'movers': ['SIMPX'], 'old_parent': 'TOP', 'added and moved': True, 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move', 'added label': 'SIMPX'}
(TOP
	(DM ja)
	(SIMPX
		(VF ich)
		(LK denke)
		[01;36m(SIMPX[00m
			(NF
				(NF dann ist es am sinnvollsten wenn wir die restlichen dinge vertagen bis zu unserem nachsten telefonat)
				(SIMPX
					(C das)
					(MF wir dann)
					(VC fixieren)
					(NF
						(SIMPX
							(C wie)
							(MF
								(NX das)
								(PX [01;33m(PX[00m
									(APPR mit)
									[01;31m(NX[00m
										(NX den buchungen der hotels) [01;33mPX)[00m
										(KON und)
										(ADVX so weiter)[01;31m)[00m))
							(VC aussehen sollte)))))[01;36m)[00m))
Step:Co-ordination
{'new_parent': 'MF', 'new_family': ['NX', 'PX', 'KON', 'ADVX'], 'mover info': [('KON', (30, 31)), ('ADVX', (31, 33))], 'old_family': ['NX', 'KON', 'ADVX'], 'start left siblings': ['NX'], 'auto preterminals': ('PDS', 'APPR', 'ART', 'NN', 'ART', 'NN', 'KON', 'ADV', 'ADV'), 'start right siblings': [], 'end left siblings': ['NX', 'PX'], 'auto preterminal span': (24, 33), 'adding node already present': False, 'movers': ['KON', 'ADVX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'Co-ordination', 'type': 'move', 'added label': 'PX'}
(TOP
	(DM ja)
	(SIMPX
		(VF ich)
		(LK denke)
		[01;36m(SIMPX[00m
			(NF
				(NF dann ist es am sinnvollsten wenn wir die restlichen dinge vertagen bis zu unserem nachsten telefonat)
				(SIMPX das wir dann fixieren wie das mit den buchungen der hotels und so weiter aussehen sollte))[01;36m)[00m))
Step:Unary
{'subtrees': ['NF'], 'family': ['VF', 'LK', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'PTKA', 'ADJD', 'KOUS', 'PPER', 'ART', 'ADJA', 'NN', 'VVFIN', 'APPR', 'APPR', 'PPOSAT', 'ADJA', 'NN', 'KOUS', 'PPER', 'ADV', 'VVFIN', 'KOUS', 'PDS', 'APPR', 'ART', 'NN', 'ART', 'NN', 'KON', 'ADV', 'ADV', 'VVINF', 'VMFIN'), 'right siblings': [], 'left siblings': [(VF (NX (PPER ich))), (LK (VXFIN (VVFIN denke)))], 'auto preterminal span': (3, 35), 'span': (3, 35), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'add'}
(TOP ja ich denke dann ist es am sinnvollsten wenn wir die restlichen dinge vertagen bis zu unserem nachsten telefonat das wir dann fixieren wie das mit den buchungen der hotels und so weiter aussehen sollte)

Sentence 60:
0 Initial errors
0 on fringe, 0 iterations

Sentence 61:
0 Initial errors
0 on fringe, 0 iterations

Sentence 62:
0 Initial errors
0 on fringe, 0 iterations

Sentence 63:
5 Initial errors
0 on fringe, 4 iterations
2 Error:Modifier Attachment
1 Error:UNSET add
1 Error:Single Word Phrase
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK setze)
		(MF
			(NX mich)
			(ADVX also)
			[01;31m(NX[00m
				(ADVX spatestens)
				[01;36m(NX[00m
					(NX mitte)
					(NX nachste woche)[01;36m)[00m[01;31m)[00m
			(PX mit ihnen)
			(PX in verbindung)))
	[01;31m(SIMPX[00m
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK machen)
			(MF wir alles weitere so)
			(NF wie besprochen)[01;36m)[00m[01;31m)[00m)
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'ADVX', 'NX', 'PX', 'PX'], 'mover info': [('ADVX', (4, 5))], 'old_family': ['ADVX', 'NX', 'NX'], 'start left siblings': [], 'auto preterminals': ('PRF', 'ADV', 'ADV', 'NN', 'ADJA', 'NN', 'APPR', 'PPER', 'APPR', 'NN'), 'start right siblings': ['NX', 'NX'], 'end left siblings': ['NX', 'ADVX'], 'auto preterminal span': (2, 12), 'movers': ['ADVX'], 'old_parent': 'NX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['NX', 'PX', 'PX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(SIMPX ich setze mich also spatestens mitte nachste woche mit ihnen in verbindung)
	[01;31m(SIMPX[00m
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK machen)
			(MF wir alles weitere so)
			(NF wie besprochen)[01;36m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'NF'], 'family': ['KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'PIS', 'NN', 'ADV', 'KOUS', 'VVPP'), 'right siblings': [], 'left siblings': [(KOORD (KON und))], 'auto preterminal span': (13, 21), 'span': (13, 21), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX ich setze mich also spatestens mitte nachste woche mit ihnen in verbindung)
	[01;31m(SIMPX[00m
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		(SIMPX dann machen wir alles weitere so wie besprochen)[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'ADV', 'VVFIN', 'PPER', 'PIS', 'NN', 'ADV', 'KOUS', 'VVPP'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (12, 21), 'span': (12, 13), 'left siblings': [], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(SIMPX ich setze mich also spatestens mitte nachste woche mit ihnen in verbindung)
	[01;31m(SIMPX[00m
		(KON und)
		(SIMPX dann machen wir alles weitere so wie besprochen)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['KON', 'SIMPX'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PRF', 'ADV', 'ADV', 'NN', 'ADJA', 'NN', 'APPR', 'PPER', 'APPR', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'PIS', 'NN', 'ADV', 'KOUS', 'VVPP'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 21), 'span': (12, 21), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP ich setze mich also spatestens mitte nachste woche mit ihnen in verbindung und dann machen wir alles weitere so wie besprochen)

Sentence 64:
0 Initial errors
0 on fringe, 0 iterations

Sentence 65:
0 Initial errors
0 on fringe, 0 iterations

Sentence 66:
0 Initial errors
0 on fringe, 0 iterations

Sentence 67:
0 Initial errors
0 on fringe, 0 iterations

Sentence 68:
3 Initial errors
0 on fringe, 3 iterations
1 Error:Modifier Attachment
1 Error:Unary
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM gut)
	[01;36m(SIMPX[00m
		(ADVX dann)
		[01;31m(DM[00m
			(NX
				(PIDAT vielen)
				(NN dank))[01;31m)[00m
		[01;31m(ADVX[00m
			(ADVX erst)
			(ADVX mal)[01;31m)[00m[01;36m)[00m
	(DM und auf wiedersehen))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'DM', 'ADVX'], 'family': ['DM', 'DM', 'SIMPX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PIDAT', 'NN', 'ADV', 'ADV'), 'right siblings': [(DM (PX (KON und) (PX (APPR auf) (NX (NN wiedersehen)))))], 'left siblings': [(DM (PTKANT ja)), (DM (ITJ gut))], 'auto preterminal span': (2, 7), 'span': (2, 7), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(DM ja)
	(DM gut)
	(SIMPX
		(ADVX dann)
		[01;31m(DM[00m
			(NX
				(PIDAT vielen)
				(NN dank))[01;31m)[00m
		[01;31m(ADVX[00m
			(ADVX erst)
			(ADVX mal)[01;31m)[00m)
	(DM und auf wiedersehen))
Step:Unary
{'subtrees': ['NX'], 'family': ['ADVX', 'DM', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PIDAT', 'NN', 'ADV', 'ADV'), 'right siblings': ['ADVX'], 'parent': 'SIMPX', 'auto preterminal span': (2, 7), 'span': (3, 5), 'left siblings': ['ADVX'], 'label': 'DM', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(DM gut)
	(SIMPX
		(ADVX dann)
		(NX vielen dank)
		[01;31m(ADVX[00m
			(ADVX erst)
			(ADVX mal)[01;31m)[00m)
	(DM und auf wiedersehen))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX'], 'family': ['ADVX', 'NX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PIDAT', 'NN', 'ADV', 'ADV'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (2, 7), 'span': (5, 7), 'left siblings': ['ADVX', 'NX'], 'label': 'ADVX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP ja gut dann vielen dank erst mal und auf wiedersehen)

Sentence 69:
0 Initial errors
0 on fringe, 0 iterations

Sentence 70:
0 Initial errors
0 on fringe, 0 iterations

Sentence 71:
5 Initial errors
0 on fringe, 3 iterations
3 Error:PP Attachment
1 Error:Modifier Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(VF (PX[00m
	[01;31m(PX[00m
		(PX bis zum wiederhoren)
		(ADVX dann)[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(PX
				(APPRART am)
				(NX telefon))[01;31m)[00m [01;33mPX) VF)[00m
		(LK nehme)
		(MF ich)
		(VC an)[01;31m)[00m)
Step:PP Attachment
{'new_parent': 'VF', 'new_family': ['PX', 'PX'], 'mover info': [('PX', (0, 4))], 'old_family': ['PX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('APPR', 'APPRART', 'NN', 'ADV', 'APPRART', 'NN', 'VVFIN', 'PPER', 'PTKVZ'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 9), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'TOP', 'added and moved': True, 'end right siblings': ['PX'], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP
	[01;31m(SIMPX[00m
		(PX
			(VF
				[01;31m(PX[00m
					(PX bis zum wiederhoren)
					(ADVX dann)[01;31m)[00m
				(PX am telefon)))
		(LK nehme)
		(MF ich)
		(VC an)[01;31m)[00m)
Step:Modifier Attachment
{'subtrees': ['PX', 'ADVX'], 'family': ['PX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'APPRART', 'NN', 'ADV', 'APPRART', 'NN'), 'right siblings': ['PX'], 'parent': 'VF', 'auto preterminal span': (0, 6), 'span': (0, 4), 'left siblings': [], 'label': 'PX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	[01;31m(SIMPX[00m
		(PX bis zum wiederhoren dann am telefon)
		(LK nehme)
		(MF ich)
		(VC an)[01;31m)[00m)
Step:Unary
{'subtrees': ['PX', 'LK', 'MF', 'VC'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'APPRART', 'NN', 'ADV', 'APPRART', 'NN', 'VVFIN', 'PPER', 'PTKVZ'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 9), 'span': (0, 9), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP bis zum wiederhoren dann am telefon nehme ich an)

Sentence 72:
0 Initial errors
0 on fringe, 0 iterations

Sentence 73:
0 Initial errors
0 on fringe, 0 iterations

Sentence 74:
0 Initial errors
0 on fringe, 0 iterations

Sentence 75:
0 Initial errors
0 on fringe, 0 iterations

Sentence 76:
0 Initial errors
0 on fringe, 0 iterations

Sentence 77:
0 Initial errors
0 on fringe, 0 iterations

Sentence 78:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Single Word Phrase
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(DM[00m
		(ITJ ach)
		[01;36m(DM[00m
			(ITJ gut)[01;36m)[00m[01;31m)[00m
	(DM herr doll))
Step:Single Word Phrase
{'subtrees': ['ITJ'], 'family': ['ITJ', 'DM'], 'over_word': True, 'over words': True, 'auto preterminals': ('ITJ',), 'right siblings': [], 'left siblings': [(ITJ ach)], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'DM', 'label': 'DM', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	[01;31m(DM[00m
		(ITJ ach)
		(DM gut)[01;31m)[00m
	(DM herr doll))
Step:UNSET remove
{'subtrees': ['ITJ', 'DM'], 'family': ['DM', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ITJ', 'NN', 'NE'), 'right siblings': ['DM'], 'parent': 'TOP', 'auto preterminal span': (0, 4), 'span': (0, 2), 'left siblings': [], 'label': 'DM', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ach gut herr doll)

Sentence 79:
8 Initial errors
0 on fringe, 7 iterations
2 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:Unary
1 Error:UNSET remove
1 Error:Co-ordination
1 Error:UNSET remove
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM aha)
	(DM ach gut)
	(SIMPX
		(VF das)
		(LK hort)
		(MF sich immer so)
		(VC an)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(KOUS als)
					(KOUS ob)[01;31m)[00m
				(MF [01;33m(MF[00m
					(NX das)
					[01;31m(NX[00m
						[01;31m(NX[00m
							(NX nix) [01;33mMF)[00m
							(NX halbes)[01;31m)[00m
						(KON und)
						(NX
							(NX nix)
							[01;36m(ADJX[00m [01;31m(NX[00m
								(NN ganzes)[01;31m)[00m[01;36m)[00m)[01;31m)[00m)
				(VC ist)[01;31m)[00m[01;31m)[00m)
	(SIMPX oder wie sehe ich das))
Step:Single Word Phrase
{'family': ['NX', 'ADJX'], 'auto preterminal span': (16, 17), 'span': (16, 17), 'subtrees': ['NN'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('NN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP
	(DM aha)
	(DM ach gut)
	(SIMPX
		(VF das)
		(LK hort)
		(MF sich immer so)
		(VC an)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(KOUS als)
					(KOUS ob)[01;31m)[00m
				(MF [01;33m(MF[00m
					(NX das)
					[01;31m(NX[00m
						[01;31m(NX[00m
							(NX nix) [01;33mMF)[00m
							(NX halbes)[01;31m)[00m
						(KON und)
						(NX nix ganzes)[01;31m)[00m)
				(VC ist)[01;31m)[00m[01;31m)[00m)
	(SIMPX oder wie sehe ich das))
Step:UNSET remove
{'subtrees': ['KOUS', 'KOUS'], 'family': ['C', 'MF', 'VC'], 'over_word': False, 'over words': True, 'auto preterminals': ('KOUS', 'KOUS', 'PDS', 'PIS', 'NN', 'KON', 'PIS', 'NN', 'VAFIN'), 'right siblings': ['MF', 'VC'], 'parent': 'SIMPX', 'auto preterminal span': (9, 18), 'span': (9, 11), 'left siblings': [], 'label': 'C', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM aha)
	(DM ach gut)
	(SIMPX
		(VF das)
		(LK hort)
		(MF sich immer so)
		(VC an)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(KOUS als)
				(KOUS ob)
				(MF [01;33m(MF[00m
					(NX das)
					[01;31m(NX[00m
						[01;31m(NX[00m
							(NX nix) [01;33mMF)[00m
							(NX halbes)[01;31m)[00m
						(KON und)
						(NX nix ganzes)[01;31m)[00m)
				(VC ist)[01;31m)[00m[01;31m)[00m)
	(SIMPX oder wie sehe ich das))
Step:Unary
{'subtrees': ['KOUS', 'KOUS', 'MF', 'VC'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'KOUS', 'PDS', 'PIS', 'NN', 'KON', 'PIS', 'NN', 'VAFIN'), 'right siblings': [], 'parent': 'NF', 'auto preterminal span': (9, 18), 'span': (9, 18), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM aha)
	(DM ach gut)
	(SIMPX
		(VF das)
		(LK hort)
		(MF sich immer so)
		(VC an)
		[01;31m(NF[00m
			(KOUS als)
			(KOUS ob)
			(MF [01;33m(MF[00m
				(NX das)
				[01;31m(NX[00m
					[01;31m(NX[00m
						(NX nix) [01;33mMF)[00m
						(NX halbes)[01;31m)[00m
					(KON und)
					(NX nix ganzes)[01;31m)[00m)
			(VC ist)[01;31m)[00m)
	(SIMPX oder wie sehe ich das))
Step:UNSET remove
{'subtrees': ['KOUS', 'KOUS', 'MF', 'VC'], 'family': ['VF', 'LK', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VVFIN', 'PRF', 'ADV', 'ADV', 'PTKVZ', 'KOUS', 'KOUS', 'PDS', 'PIS', 'NN', 'KON', 'PIS', 'NN', 'VAFIN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (3, 18), 'span': (9, 18), 'left siblings': ['VF', 'LK', 'MF', 'VC'], 'label': 'NF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM aha)
	(DM ach gut)
	(SIMPX
		(VF das)
		(LK hort)
		(MF sich immer so)
		(VC an)
		(KOUS als)
		(KOUS ob)
		(MF [01;33m(MF[00m
			(NX das)
			[01;31m(NX[00m
				[01;31m(NX[00m
					(NX nix) [01;33mMF)[00m
					(NX halbes)[01;31m)[00m
				(KON und)
				(NX nix ganzes)[01;31m)[00m)
		(VC ist))
	(SIMPX oder wie sehe ich das))
Step:Co-ordination
{'subtrees': ['NX', 'NX'], 'family': ['NX', 'KON', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PIS', 'NN', 'KON', 'PIS', 'NN'), 'right siblings': ['KON', 'NX'], 'parent': 'NX', 'auto preterminal span': (12, 17), 'span': (12, 14), 'left siblings': [], 'label': 'NX', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP
	(DM aha)
	(DM ach gut)
	(SIMPX
		(VF das)
		(LK hort)
		(MF sich immer so)
		(VC an)
		(KOUS als)
		(KOUS ob)
		(MF [01;33m(MF[00m
			(NX das)
			[01;31m(NX[00m
				(NX nix) [01;33mMF)[00m
				(NX halbes)
				(KON und)
				(NX nix ganzes)[01;31m)[00m)
		(VC ist))
	(SIMPX oder wie sehe ich das))
Step:UNSET remove
{'subtrees': ['NX', 'NX', 'KON', 'NX'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'PIS', 'NN', 'KON', 'PIS', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (11, 17), 'span': (12, 17), 'left siblings': ['NX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM aha)
	(DM ach gut)
	(SIMPX
		(VF das)
		(LK hort)
		(MF sich immer so)
		(VC an)
		(KOUS als)
		(KOUS ob)
		(MF
			[01;36m(MF[00m
				(NX das)
				(NX nix)[01;36m)[00m
			(NX halbes)
			(KON und)
			(NX nix ganzes))
		(VC ist))
	(SIMPX oder wie sehe ich das))
Step:UNSET add
{'subtrees': ['NX', 'NX'], 'family': ['MF', 'NX', 'KON', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'PIS'), 'right siblings': [(NX (NN halbes)), (KON und), (NX (NX (PIS nix)) (ADJX (NN ganzes)))], 'left siblings': [], 'auto preterminal span': (11, 13), 'span': (11, 13), 'parent': 'MF', 'label': 'MF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP aha ach gut das hort sich immer so an als ob das nix halbes und nix ganzes ist oder wie sehe ich das)

Sentence 80:
0 Initial errors
0 on fringe, 0 iterations

Sentence 81:
3 Initial errors
0 on fringe, 2 iterations
2 Error:Single Word Phrase
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK finde)
		(NF
			(SIMPX
				(VF wir)
				(LK sollten)
				(MF
					(NX uns)
					[01;36m(ADJX[00m
						(ADJX dringend)
						[01;36m(ADVX[00m [01;31m(PX[00m
							(PROP druber)[01;31m)[00m[01;36m)[00m[01;36m)[00m)
				(VC einigen)
				(NF wann denn die geschaftsreise losgehen soll)))))
Step:Single Word Phrase
{'family': ['NX', 'ADJX', 'ADVX'], 'auto preterminal span': (6, 7), 'span': (6, 7), 'subtrees': ['PROP'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('PROP',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('PX', 'ADVX')}
(TOP
	(SIMPX
		(VF ich)
		(LK finde)
		(NF
			(SIMPX
				(VF wir)
				(LK sollten)
				(MF
					(NX uns)
					[01;36m(ADJX[00m
						(ADJX dringend)
						(ADVX druber)[01;36m)[00m)
				(VC einigen)
				(NF wann denn die geschaftsreise losgehen soll)))))
Step:Modifier Attachment
{'subtrees': ['ADJX', 'ADVX'], 'family': ['NX', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJD', 'PROP'), 'right siblings': [], 'left siblings': [(NX (PRF uns))], 'auto preterminal span': (5, 7), 'span': (5, 7), 'parent': 'MF', 'label': 'ADJX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP ich finde wir sollten uns dringend druber einigen wann denn die geschaftsreise losgehen soll)

Sentence 82:
0 Initial errors
0 on fringe, 0 iterations

Sentence 83:
0 Initial errors
0 on fringe, 0 iterations

Sentence 84:
0 Initial errors
0 on fringe, 0 iterations

Sentence 85:
0 Initial errors
0 on fringe, 0 iterations

Sentence 86:
3 Initial errors
0 on fringe, 3 iterations
1 Error:UNSET add
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK ware)
			(MF es ja am besten)[01;36m)[00m
		[01;31m(NF[00m
			(SIMPX
				(VF wir)
				(LK nahmen)
				(MF das wochenende))[01;31m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'ADV', 'PTKA', 'ADJD'), 'right siblings': [(NF (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VVFIN nahmen))) (MF (NX (ART das) (NN wochenende)))))], 'left siblings': [], 'auto preterminal span': (0, 6), 'span': (0, 6), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX dann ware es ja am besten)
		[01;31m(NF[00m
			(SIMPX
				(VF wir)
				(LK nahmen)
				(MF das wochenende))[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX', 'NF'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'ADV', 'PTKA', 'ADJD', 'PPER', 'VVFIN', 'ART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 10), 'span': (0, 10), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX dann ware es ja am besten)
	[01;31m(NF[00m
		(SIMPX
			(VF wir)
			(LK nahmen)
			(MF das wochenende))[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'ADV', 'PTKA', 'ADJD', 'PPER', 'VVFIN', 'ART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 10), 'span': (6, 10), 'left siblings': ['SIMPX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP dann ware es ja am besten wir nahmen das wochenende)

Sentence 87:
2 Initial errors
0 on fringe, 2 iterations
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(VF vielleicht)
			(LK konnen)
			(MF wir ja noch ein bischen)
			(VC verlangern)[01;36m)[00m
		[01;31m(NF[00m
			(NX
				(ADJX eineinhalb)
				(NN tage))[01;31m)[00m))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ART', 'PIS', 'VVINF'), 'right siblings': [(NF (NX (ADJX (CARD eineinhalb)) (NN tage)))], 'left siblings': [], 'auto preterminal span': (0, 8), 'span': (0, 8), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX vielleicht konnen wir ja noch ein bischen verlangern)
		[01;31m(NF[00m
			(NX
				(ADJX eineinhalb)
				(NN tage))[01;31m)[00m))
Step:Unary
{'subtrees': ['NX'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ART', 'PIS', 'VVINF', 'CARD', 'NN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 10), 'span': (8, 10), 'left siblings': ['SIMPX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP vielleicht konnen wir ja noch ein bischen verlangern eineinhalb tage)

Sentence 88:
0 Initial errors
0 on fringe, 0 iterations

Sentence 89:
0 Initial errors
0 on fringe, 0 iterations

Sentence 90:
0 Initial errors
0 on fringe, 0 iterations

Sentence 91:
0 Initial errors
0 on fringe, 0 iterations

Sentence 92:
3 Initial errors
0 on fringe, 3 iterations
1 Error:UNSET add
1 Error:Single Word Phrase
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX sie wissen doch mit ihnen fahre ich so gern immer weg)
	[01;31m(SIMPX[00m
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF sie)
			(LK bestehen)
			(MF immer auf diese eineinhalb tage)[01;36m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'APPR', 'PDAT', 'CARD', 'NN'), 'right siblings': [], 'left siblings': [(KOORD (KON und))], 'auto preterminal span': (12, 19), 'span': (12, 19), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX sie wissen doch mit ihnen fahre ich so gern immer weg)
	[01;31m(SIMPX[00m
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		(SIMPX sie bestehen immer auf diese eineinhalb tage)[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'PPER', 'VVFIN', 'ADV', 'APPR', 'PDAT', 'CARD', 'NN'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (11, 19), 'span': (11, 12), 'left siblings': [], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(SIMPX sie wissen doch mit ihnen fahre ich so gern immer weg)
	[01;31m(SIMPX[00m
		(KON und)
		(SIMPX sie bestehen immer auf diese eineinhalb tage)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['KON', 'SIMPX'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'APPR', 'PPER', 'VVFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'PTKVZ', 'KON', 'PPER', 'VVFIN', 'ADV', 'APPR', 'PDAT', 'CARD', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 19), 'span': (11, 19), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP sie wissen doch mit ihnen fahre ich so gern immer weg und sie bestehen immer auf diese eineinhalb tage)

Sentence 93:
0 Initial errors
0 on fringe, 0 iterations

Sentence 94:
7 Initial errors
0 on fringe, 2 iterations
5 Error:NP Attachment
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP [01;33m(VF (NX[00m
		(NX geschaft)
		[01;31m(SIMPX[00m
			[01;31m(VF[00m
				(NX
					(NN geschaft))[01;31m)[00m [01;33mNX) VF)[00m
			(LK ist)
			[01;36m(ADJX[00m
				(MF
					[01;31m(NX[00m
						(NN geschaft)[01;31m)[00m)[01;36m)[00m[01;31m)[00m)[01;36m)[00m
Step:NP Attachment
{'new_parent': 'VF', 'new_family': ['NX', 'NX'], 'mover info': [('NX', (0, 1))], 'old_family': ['NX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('NN', 'NN', 'VAFIN', 'NN'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 4), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'TOP', 'POS confusion': ('NN', 'NN'), 'added and moved': True, 'end right siblings': ['NX'], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'ADJX'}
(TOP
	(SIMPX
		(NX geschaft geschaft)
		(LK ist)
		[01;36m(ADJX[00m
			(MF
				[01;31m(NX[00m
					(NN geschaft)[01;31m)[00m)[01;36m)[00m))
Step:Single Word Phrase
{'family': ['ADJX'], 'auto preterminal span': (3, 4), 'span': (3, 4), 'subtrees': ['NN'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('NN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP geschaft geschaft ist geschaft)

Sentence 95:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(NX[00m
		(DM
			(ITJ schade))[01;36m)[00m
	(DM frau schmidt))
Step:Unary
{'subtrees': ['DM'], 'family': ['NX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ',), 'right siblings': [(DM (NX (NN frau) (NE schmidt)))], 'left siblings': [], 'auto preterminal span': (0, 1), 'span': (0, 1), 'parent': 'TOP', 'label': 'NX', 'classified_type': 'Unary', 'type': 'add'}
(TOP schade frau schmidt)

Sentence 96:
0 Initial errors
0 on fringe, 0 iterations

Sentence 97:
0 Initial errors
0 on fringe, 0 iterations

Sentence 98:
0 Initial errors
0 on fringe, 0 iterations

Sentence 99:
4 Initial errors
0 on fringe, 3 iterations
2 Error:PP Attachment
1 Error:Unary
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;36m(VF[00m
			(PX
				(APPRART im)
				(NX august))[01;36m)[00m
		(DM ja)
		[01;31m(SIMPX[00m
			(LK gibt)
			(MF
				(NX es)
				(ADVX da)
				[01;36m(NX[00m
					(NX einen romantischen termin)
					(PX im august)[01;36m)[00m)[01;31m)[00m)[01;36m)[00m
Step:PP Attachment
{'new_parent': 'SIMPX', 'new_family': ['PX', 'DM', 'LK', 'MF'], 'mover info': [('PX', (0, 2)), ('DM', (2, 3))], 'old_family': ['PX', 'DM', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('APPRART', 'NN', 'PTKANT', 'VVFIN', 'PPER', 'ADV', 'ART', 'ADJA', 'NN', 'APPRART', 'NN'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 11), 'movers': ['PX', 'DM'], 'old_parent': 'TOP', 'end right siblings': ['LK', 'MF'], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		[01;36m(VF[00m
			(PX
				(APPRART im)
				(NX august))[01;36m)[00m
		(DM ja)
		(LK gibt)
		(MF
			(NX es)
			(ADVX da)
			[01;36m(NX[00m
				(NX einen romantischen termin)
				(PX im august)[01;36m)[00m)))
Step:Unary
{'subtrees': ['PX'], 'family': ['VF', 'DM', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'NN'), 'right siblings': [(DM (PTKANT ja)), (LK (VXFIN (VVFIN gibt))), (MF (NX (PPER es)) (ADVX (ADV da)) (NX (ART einen) (ADJX (ADJA romantischen)) (NN termin)) (PX (APPRART im) (NX (NN august))))], 'left siblings': [], 'auto preterminal span': (0, 2), 'span': (0, 2), 'parent': 'SIMPX', 'label': 'VF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(VF im august)
		(DM ja)
		(LK gibt)
		(MF
			(NX es)
			(ADVX da)
			[01;36m(NX[00m
				(NX einen romantischen termin)
				(PX im august)[01;36m)[00m)))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['NX', 'ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'ADJA', 'NN', 'APPRART', 'NN'), 'right siblings': [], 'left siblings': [(NX (PPER es)), (ADVX (ADV da))], 'auto preterminal span': (6, 11), 'span': (6, 11), 'parent': 'MF', 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP im august ja gibt es da einen romantischen termin im august)

Sentence 100:
0 Initial errors
0 on fringe, 0 iterations

Sentence 101:
0 Initial errors
0 on fringe, 0 iterations

Sentence 102:
0 Initial errors
0 on fringe, 0 iterations

Sentence 103:
0 Initial errors
0 on fringe, 0 iterations

Sentence 104:
0 Initial errors
0 on fringe, 0 iterations

Sentence 105:
0 Initial errors
0 on fringe, 0 iterations

Sentence 106:
0 Initial errors
0 on fringe, 0 iterations

Sentence 107:
0 Initial errors
0 on fringe, 0 iterations

Sentence 108:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Different label
1 Error:UNSET add
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(LK konnen)
			(MF sie ja gleich ein doppelzimmer)
			(VC nehmen)[01;36m)[00m
		[01;36m(DM[00m [01;31m(NF[00m
			(NX
				(NN frau)
				(NE schmidt))[01;31m)[00m[01;36m)[00m[01;31m)[00m
	(DM oder))
Step:Different label
{'family': ['LK', 'MF', 'VC', 'DM'], 'auto preterminal span': (8, 10), 'span': (8, 10), 'subtrees': ['NX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('NN', 'NE'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('NF', 'DM')}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(LK konnen)
			(MF sie ja gleich ein doppelzimmer)
			(VC nehmen)[01;36m)[00m
		(DM frau schmidt)[01;31m)[00m
	(DM oder))
Step:UNSET add
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['SIMPX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'ADV', 'ADV', 'ART', 'NN', 'VVINF'), 'right siblings': [(DM (NX (NN frau) (NE schmidt)))], 'left siblings': [], 'auto preterminal span': (1, 8), 'span': (1, 8), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		(SIMPX konnen sie ja gleich ein doppelzimmer nehmen)
		(DM frau schmidt)[01;31m)[00m
	(DM oder))
Step:UNSET remove
{'subtrees': ['SIMPX', 'DM'], 'family': ['DM', 'SIMPX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ART', 'NN', 'VVINF', 'NN', 'NE', 'ITJ'), 'right siblings': ['DM'], 'parent': 'TOP', 'auto preterminal span': (0, 11), 'span': (1, 10), 'left siblings': ['DM'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ja konnen sie ja gleich ein doppelzimmer nehmen frau schmidt oder)

Sentence 109:
0 Initial errors
0 on fringe, 0 iterations

Sentence 110:
1 Initial errors
0 on fringe, 1 iterations
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM nein)
	(SIMPX wir konnen auch einzelzimmer nehmen)
	[01;31m(SIMPX[00m
		(VF an dem)
		(LK soll)
		(MF es ja nicht)
		(VC liegen)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'VMFIN', 'ADV', 'NN', 'VVINF', 'APPR', 'PDS', 'VMFIN', 'PPER', 'ADV', 'PTKNEG', 'VVINF'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 13), 'span': (6, 13), 'left siblings': ['DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP nein wir konnen auch einzelzimmer nehmen an dem soll es ja nicht liegen)

Sentence 111:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(ADVX[00m
		(ADVX nicht)
		(SIMPX das sie dann)[01;31m)[00m)
Step:Unary
{'subtrees': ['ADVX', 'SIMPX'], 'family': ['ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKNEG', 'KOUS', 'PPER', 'ADV'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 4), 'span': (0, 4), 'left siblings': [], 'label': 'ADVX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP nicht das sie dann)

Sentence 112:
0 Initial errors
0 on fringe, 0 iterations

Sentence 113:
0 Initial errors
0 on fringe, 0 iterations

Sentence 114:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Clause Attachment
1 Error:UNSET add
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX konnen sie sich dann bitte um den flug kummern)
		[01;31m(SIMPX[00m
			[01;31m(KOORD[00m
				(KON oder)[01;31m)[00m
			[01;36m(SIMPX[00m
				(LK wollen)
				(MF sie mit dem zug)
				(VC reisen)[01;36m)[00m[01;31m)[00m)[01;36m)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'KOORD', 'LK', 'MF', 'VC'], 'mover info': [('SIMPX', (0, 9))], 'old_family': ['SIMPX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('VMFIN', 'PPER', 'PRF', 'ADV', 'PTKANT', 'APPR', 'ART', 'NN', 'VVINF', 'KON', 'VMFIN', 'PPER', 'APPR', 'ART', 'NN', 'VVINF'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 16), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': ['KOORD', 'LK', 'MF', 'VC'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(SIMPX konnen sie sich dann bitte um den flug kummern)
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		[01;36m(SIMPX[00m
			(LK wollen)
			(MF sie mit dem zug)
			(VC reisen)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'APPR', 'ART', 'NN', 'VVINF'), 'right siblings': [], 'left siblings': [(SIMPX (LK (VXFIN (VMFIN konnen))) (MF (NX (PPER sie)) (NX (PRF sich)) (ADVX (ADV dann)) (ADVX (PTKANT bitte)) (PX (APPR um) (NX (ART den) (NN flug)))) (VC (VXINF (VVINF kummern)))), (KOORD (KON oder))], 'auto preterminal span': (10, 16), 'span': (10, 16), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX konnen sie sich dann bitte um den flug kummern)
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		(SIMPX wollen sie mit dem zug reisen)))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('VMFIN', 'PPER', 'PRF', 'ADV', 'PTKANT', 'APPR', 'ART', 'NN', 'VVINF', 'KON', 'VMFIN', 'PPER', 'APPR', 'ART', 'NN', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (0, 16), 'span': (9, 10), 'left siblings': ['SIMPX'], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP konnen sie sich dann bitte um den flug kummern oder wollen sie mit dem zug reisen)

Sentence 115:
0 Initial errors
0 on fringe, 0 iterations

Sentence 116:
3 Initial errors
0 on fringe, 2 iterations
2 Error:Different label
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK denke)
		[01;36m(DM[00m [01;31m(MF[00m
			[01;31m(ADVX[00m
				(ADV ja)[01;31m)[00m[01;31m)[00m[01;36m)[00m
		(NF im zug ist viel romantischer)))
Step:Different label
{'family': ['VF', 'LK', 'DM', 'NF'], 'auto preterminal span': (2, 3), 'span': (2, 3), 'subtrees': ['ADVX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('ADV',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('MF', 'DM')}
(TOP
	(SIMPX
		(VF ich)
		(LK denke)
		(DM
			[01;31m(ADVX[00m
				(ADV ja)[01;31m)[00m)
		(NF im zug ist viel romantischer)))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV',), 'right siblings': [], 'parent': 'DM', 'auto preterminal span': (2, 3), 'span': (2, 3), 'left siblings': [], 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP ich denke ja im zug ist viel romantischer)

Sentence 117:
0 Initial errors
0 on fringe, 0 iterations

Sentence 118:
1 Initial errors
0 on fringe, 1 iterations
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM gut)
	(SIMPX
		(VF dann)
		(SIMPX lassen wir)
		[01;36m(SIMPX[00m
			(LK konnen)
			(MF wir uns besser)
			(VC unterhalten)[01;36m)[00m)
	(DM ja))
Step:UNSET add
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['VF', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'PRF', 'ADJD', 'VVINF'), 'right siblings': [], 'left siblings': [(VF (ADVX (ADV dann))), (SIMPX (LK (VXFIN (VVFIN lassen))) (MF (NX (PPER wir))))], 'auto preterminal span': (5, 10), 'span': (5, 10), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP ja gut dann lassen wir konnen wir uns besser unterhalten ja)

Sentence 119:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM gut)
	[01;31m(NX[00m
		[01;36m(DM[00m
			(ADVX
				(ADV also))[01;36m)[00m
		(NX den zug)[01;31m)[00m)
Step:Unary
{'subtrees': ['ADVX'], 'family': ['DM', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV',), 'right siblings': [(NX (ART den) (NN zug))], 'left siblings': [], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'NX', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM gut)
	[01;31m(NX[00m
		(DM also)
		(NX den zug)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['DM', 'NX'], 'family': ['DM', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADV', 'ART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 4), 'span': (1, 4), 'left siblings': ['DM'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP gut also den zug)

Sentence 120:
0 Initial errors
0 on fringe, 0 iterations

Sentence 121:
8 Initial errors
0 on fringe, 6 iterations
2 Error:Single Word Phrase
2 Error:Clause Attachment
1 Error:UNSET add
1 Error:PP Attachment
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	(SIMPX
		(VF ich)
		(LK wurde)
		(VC sagen)
		[01;31m(NF[00m
			[01;31m(P[00m
				[01;36m(NF[00m
					(SIMPX
						(VF
							(SIMPX
								(C damit)
								(MF
									(NX wir)
									(ADVX auch)
									[01;36m(NX[00m
										(NX was)
										(PX von der zugfahrt)[01;36m)[00m)
								(VC haben)))
						(LK fahren)
						(MF wir nicht zu fruh)
						(VC los)) [01;33mSIMPX)[00m[01;36m)[00m
				(KOUS weil)
				(SIMPX
					(VF sonst)
					(LK bin)
					(MF
						(NX ich)
						[01;36m(VC[00m [01;36m(VXINF[00m [01;31m(ADJX[00m
							(ADJD unausgeschlafen)[01;31m)[00m[01;36m)[00m[01;36m)[00m))[01;31m)[00m[01;31m)[00m)
	(SIMPX da haben sie dann von mir nix))
Step:Single Word Phrase
{'family': ['NX', 'VXINF'], 'auto preterminal span': (21, 22), 'span': (21, 22), 'subtrees': ['ADJD'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'VXINF')}
(TOP [01;33m(SIMPX[00m
	(SIMPX
		(VF ich)
		(LK wurde)
		(VC sagen)
		[01;31m(NF[00m
			[01;31m(P[00m
				[01;36m(NF[00m
					(SIMPX
						(VF
							(SIMPX
								(C damit)
								(MF
									(NX wir)
									(ADVX auch)
									[01;36m(NX[00m
										(NX was)
										(PX von der zugfahrt)[01;36m)[00m)
								(VC haben)))
						(LK fahren)
						(MF wir nicht zu fruh)
						(VC los)) [01;33mSIMPX)[00m[01;36m)[00m
				(KOUS weil)
				(SIMPX
					(VF sonst)
					(LK bin)
					(MF
						(NX ich)
						[01;36m(VC[00m
							(VXINF
								(ADJD unausgeschlafen))[01;36m)[00m))[01;31m)[00m[01;31m)[00m)
	(SIMPX da haben sie dann von mir nix))
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'VC', 'NF', 'KOUS', 'SIMPX'], 'mover info': [('KOUS', (17, 18)), ('SIMPX', (18, 22))], 'old_family': ['SIMPX', 'KOUS', 'SIMPX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('PPER', 'VAFIN', 'VVINF', 'KOUS', 'PPER', 'ADV', 'PIS', 'APPR', 'ART', 'NN', 'VAFIN', 'VVFIN', 'PPER', 'PTKNEG', 'PTKA', 'ADJD', 'PTKVZ', 'KOUS', 'ADV', 'VAFIN', 'PPER', 'ADJD'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'VC', 'NF'], 'auto preterminal span': (0, 22), 'movers': ['KOUS', 'SIMPX'], 'old_parent': 'P', 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(VF ich)
			(LK wurde)
			(VC sagen)
			(NF
				[01;31m(P[00m
					(SIMPX
						(VF
							(SIMPX
								(C damit)
								(MF
									(NX wir)
									(ADVX auch)
									[01;36m(NX[00m
										(NX was)
										(PX von der zugfahrt)[01;36m)[00m)
								(VC haben)))
						(LK fahren)
						(MF wir nicht zu fruh)
						(VC los))[01;31m)[00m)[01;36m)[00m
		(KOUS weil)
		(SIMPX
			(VF sonst)
			(LK bin)
			(MF
				(NX ich)
				[01;36m(VC[00m
					(VXINF
						(ADJD unausgeschlafen))[01;36m)[00m)))
	(SIMPX da haben sie dann von mir nix))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'VC', 'NF'], 'family': ['SIMPX', 'KOUS', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'VVINF', 'KOUS', 'PPER', 'ADV', 'PIS', 'APPR', 'ART', 'NN', 'VAFIN', 'VVFIN', 'PPER', 'PTKNEG', 'PTKA', 'ADJD', 'PTKVZ'), 'right siblings': [(KOUS weil), (SIMPX (VF (ADVX (ADV sonst))) (LK (VXFIN (VAFIN bin))) (MF (NX (PPER ich)) (VXINF (ADJD unausgeschlafen))))], 'left siblings': [], 'auto preterminal span': (0, 17), 'span': (0, 17), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(VF ich)
			(LK wurde)
			(VC sagen)
			(NF
				[01;31m(P[00m
					(SIMPX
						(VF
							(SIMPX
								(C damit)
								(MF
									(NX wir)
									(ADVX auch)
									[01;36m(NX[00m
										(NX was)
										(PX von der zugfahrt)[01;36m)[00m)
								(VC haben)))
						(LK fahren)
						(MF wir nicht zu fruh)
						(VC los))[01;31m)[00m))
		(KOUS weil)
		(SIMPX
			(VF sonst)
			(LK bin)
			(MF
				(NX ich)
				[01;36m(VC[00m
					(VXINF
						(ADJD unausgeschlafen))[01;36m)[00m)))
	(SIMPX da haben sie dann von mir nix))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['NX', 'ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PIS', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(NX (PPER wir)), (ADVX (ADV auch))], 'auto preterminal span': (6, 10), 'span': (6, 10), 'parent': 'MF', 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(VF ich)
			(LK wurde)
			(VC sagen)
			(NF
				[01;31m(P[00m
					(SIMPX
						(VF damit wir auch was von der zugfahrt haben)
						(LK fahren)
						(MF wir nicht zu fruh)
						(VC los))[01;31m)[00m))
		(KOUS weil)
		(SIMPX
			(VF sonst)
			(LK bin)
			(MF
				(NX ich)
				[01;36m(VC[00m
					(VXINF
						(ADJD unausgeschlafen))[01;36m)[00m)))
	(SIMPX da haben sie dann von mir nix))
Step:Unary
{'subtrees': ['VXINF'], 'family': ['NX', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJD',), 'right siblings': [], 'left siblings': [(NX (PPER ich))], 'auto preterminal span': (21, 22), 'span': (21, 22), 'parent': 'MF', 'label': 'VC', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(VF ich)
			(LK wurde)
			(VC sagen)
			(NF
				[01;31m(P[00m
					(SIMPX
						(VF damit wir auch was von der zugfahrt haben)
						(LK fahren)
						(MF wir nicht zu fruh)
						(VC los))[01;31m)[00m))
		(KOUS weil)
		(SIMPX sonst bin ich unausgeschlafen))
	(SIMPX da haben sie dann von mir nix))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['P'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ADV', 'PIS', 'APPR', 'ART', 'NN', 'VAFIN', 'VVFIN', 'PPER', 'PTKNEG', 'PTKA', 'ADJD', 'PTKVZ'), 'right siblings': [], 'parent': 'NF', 'auto preterminal span': (3, 17), 'span': (3, 17), 'left siblings': [], 'label': 'P', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ich wurde sagen damit wir auch was von der zugfahrt haben fahren wir nicht zu fruh los weil sonst bin ich unausgeschlafen da haben sie dann von mir nix)

Sentence 122:
0 Initial errors
0 on fringe, 0 iterations

Sentence 123:
0 Initial errors
0 on fringe, 0 iterations

Sentence 124:
0 Initial errors
0 on fringe, 0 iterations

Sentence 125:
0 Initial errors
0 on fringe, 0 iterations

Sentence 126:
0 Initial errors
0 on fringe, 0 iterations

Sentence 127:
0 Initial errors
0 on fringe, 0 iterations

Sentence 128:
0 Initial errors
0 on fringe, 0 iterations

Sentence 129:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Different label
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF sie)
			(LK horen)
			(MF sich heute so formlich)
			(VC an)[01;36m)[00m
		[01;36m(DM[00m [01;31m(NF[00m
			(NX
				(NN frau)
				(NE schmidt))[01;31m)[00m[01;36m)[00m[01;31m)[00m)
Step:Different label
{'family': ['VF', 'LK', 'MF', 'VC', 'DM'], 'auto preterminal span': (7, 9), 'span': (7, 9), 'subtrees': ['NX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('NN', 'NE'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('NF', 'DM')}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF sie)
			(LK horen)
			(MF sich heute so formlich)
			(VC an)[01;36m)[00m
		(DM frau schmidt)[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['SIMPX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PRF', 'ADV', 'ADV', 'ADJD', 'PTKVZ'), 'right siblings': [(DM (NX (NN frau) (NE schmidt)))], 'left siblings': [], 'auto preterminal span': (0, 7), 'span': (0, 7), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX sie horen sich heute so formlich an)
		(DM frau schmidt)[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX', 'DM'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PRF', 'ADV', 'ADV', 'ADJD', 'PTKVZ', 'NN', 'NE'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 9), 'span': (0, 9), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP sie horen sich heute so formlich an frau schmidt)

Sentence 130:
3 Initial errors
0 on fringe, 3 iterations
1 Error:Unary
1 Error:UNSET add
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK ist)
		(MF
			(NX ihnen)
			(NX eine laus)
			[01;36m(MF[00m
				(PX
					(APPR uber)
					(NX die leber))[01;36m)[00m)
		(VC gelaufen))
	(SIMPX
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF wie)
			(LK sehe)
			(MF ich das)[01;36m)[00m))
Step:Unary
{'subtrees': ['PX'], 'family': ['NX', 'NX', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(NX (PPER ihnen)), (NX (ART eine) (NN laus))], 'auto preterminal span': (4, 7), 'span': (4, 7), 'parent': 'MF', 'label': 'MF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX ist ihnen eine laus uber die leber gelaufen)
	(SIMPX
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF wie)
			(LK sehe)
			(MF ich das)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PWAV', 'VVFIN', 'PPER', 'PDS'), 'right siblings': [], 'left siblings': [(KOORD (KON oder))], 'auto preterminal span': (9, 13), 'span': (9, 13), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX ist ihnen eine laus uber die leber gelaufen)
	(SIMPX
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		(SIMPX wie sehe ich das)))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'PWAV', 'VVFIN', 'PPER', 'PDS'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (8, 13), 'span': (8, 9), 'left siblings': [], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP ist ihnen eine laus uber die leber gelaufen oder wie sehe ich das)

Sentence 131:
0 Initial errors
0 on fringe, 0 iterations

Sentence 132:
3 Initial errors
0 on fringe, 2 iterations
2 Error:Clause Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			(LK wissen)
			(MF sie)[01;31m)[00m
		[01;36m(NF[00m
			(SIMPX
				(LK kommen)
				(MF sie doch lieber)
				(VC mit))[01;36m)[00m)[01;36m)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['LK', 'MF', 'SIMPX'], 'mover info': [('SIMPX', (2, 7))], 'old_family': ['SIMPX', 'SIMPX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('VVFIN', 'PPER', 'VVIMP', 'PPER', 'ADV', 'ADV', 'PTKVZ'), 'start right siblings': [], 'end left siblings': ['LK', 'MF'], 'auto preterminal span': (0, 7), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(LK wissen)
		(MF sie)
		[01;36m(NF[00m
			(SIMPX
				(LK kommen)
				(MF sie doch lieber)
				(VC mit))[01;36m)[00m))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVIMP', 'PPER', 'ADV', 'ADV', 'PTKVZ'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VVFIN wissen))), (MF (NX (PPER sie)))], 'auto preterminal span': (2, 7), 'span': (2, 7), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP wissen sie kommen sie doch lieber mit)

Sentence 133:
0 Initial errors
0 on fringe, 0 iterations

Sentence 134:
0 Initial errors
0 on fringe, 0 iterations

Sentence 135:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Different label
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF sie)
			(LK wollen)
			(MF abends noch was)
			(VC unternehmen)[01;36m)[00m
		[01;36m(DM[00m [01;31m(NF[00m
			(NX
				(NN frau)
				(NE schmidt))[01;31m)[00m[01;36m)[00m[01;31m)[00m)
Step:Different label
{'family': ['VF', 'LK', 'MF', 'VC', 'DM'], 'auto preterminal span': (6, 8), 'span': (6, 8), 'subtrees': ['NX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('NN', 'NE'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('NF', 'DM')}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF sie)
			(LK wollen)
			(MF abends noch was)
			(VC unternehmen)[01;36m)[00m
		(DM frau schmidt)[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['SIMPX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'ADV', 'PIS', 'VVINF'), 'right siblings': [(DM (NX (NN frau) (NE schmidt)))], 'left siblings': [], 'auto preterminal span': (0, 6), 'span': (0, 6), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX sie wollen abends noch was unternehmen)
		(DM frau schmidt)[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX', 'DM'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'ADV', 'PIS', 'VVINF', 'NN', 'NE'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 8), 'span': (0, 8), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP sie wollen abends noch was unternehmen frau schmidt)

Sentence 136:
0 Initial errors
0 on fringe, 0 iterations

Sentence 137:
0 Initial errors
0 on fringe, 0 iterations

Sentence 138:
5 Initial errors
0 on fringe, 3 iterations
2 Error:Single Word Phrase
2 Error:UNSET move
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF bisher)
		(LK haben)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX sie)
				(ADVX immer)[01;31m)[00m
			[01;36m(ADJX[00m [01;31m(VC[00m
				[01;31m(VXINF[00m
					(VVPP abgelehnt)[01;31m)[00m[01;31m)[00m[01;36m)[00m[01;36m)[00m))
Step:Single Word Phrase
{'family': ['ADJX'], 'auto preterminal span': (4, 5), 'span': (4, 5), 'subtrees': ['VVPP'], 'parent': 'VC', 'over_word': True, 'auto preterminals': ('VVPP',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VXINF', 'ADJX')}
(TOP
	(SIMPX
		(VF bisher)
		(LK haben)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX sie)
				(ADVX immer)[01;31m)[00m
			[01;31m(VC[00m
				(ADJX
					(VVPP abgelehnt))[01;31m)[00m[01;36m)[00m))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'VC'], 'mover info': [('VC', (4, 5))], 'old_family': ['VF', 'LK', 'MF', 'VC'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'ADV', 'VVPP'), 'start right siblings': [], 'end left siblings': ['NX', 'ADVX'], 'auto preterminal span': (0, 5), 'movers': ['VC'], 'old_parent': 'SIMPX', 'POS confusion': ('VVPP', 'VVPP'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(VF bisher)
		(LK haben)
		(MF
			(NX sie)
			(ADVX immer)
			[01;31m(VC[00m
				(ADJX
					(VVPP abgelehnt))[01;31m)[00m)))
Step:Unary
{'subtrees': ['ADJX'], 'family': ['NX', 'ADVX', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'VVPP'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 5), 'span': (4, 5), 'left siblings': ['NX', 'ADVX'], 'label': 'VC', 'classified_type': 'Unary', 'type': 'remove'}
(TOP bisher haben sie immer abgelehnt)

Sentence 139:
0 Initial errors
0 on fringe, 0 iterations

Sentence 140:
0 Initial errors
0 on fringe, 0 iterations

Sentence 141:
0 Initial errors
0 on fringe, 0 iterations

Sentence 142:
0 Initial errors
0 on fringe, 0 iterations

Sentence 143:
0 Initial errors
0 on fringe, 0 iterations

Sentence 144:
0 Initial errors
0 on fringe, 0 iterations

Sentence 145:
0 Initial errors
0 on fringe, 0 iterations

Sentence 146:
0 Initial errors
0 on fringe, 0 iterations

Sentence 147:
0 Initial errors
0 on fringe, 0 iterations

Sentence 148:
6 Initial errors
0 on fringe, 4 iterations
2 Error:Clause Attachment
2 Error:NP Attachment
1 Error:UNSET add
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX und jetzt kann ich ihnen das gleich schon)
		[01;31m(SIMPX[00m
			[01;31m(KOORD[00m
				(KON oder)[01;31m)[00m
			[01;36m(SIMPX[00m
				(LK habe)
				[01;36m(MF[00m
					[01;31m(MF[00m
						(NX ich)
						(NX das)
						(ADVX schon)[01;31m)[00m
					(NX erfahrung)[01;36m)[00m
				(VC gebracht)[01;36m)[00m[01;31m)[00m)[01;36m)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'KOORD', 'LK', 'MF', 'NX', 'VC'], 'mover info': [('SIMPX', (0, 8))], 'old_family': ['SIMPX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('KON', 'ADV', 'VMFIN', 'PPER', 'PPER', 'PDS', 'ADV', 'ADV', 'KON', 'VAFIN', 'PPER', 'PDS', 'ADV', 'NN', 'VVPP'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 15), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': ['KOORD', 'LK', 'MF', 'NX', 'VC'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(SIMPX und jetzt kann ich ihnen das gleich schon)
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		[01;36m(SIMPX[00m
			(LK habe)
			[01;36m(MF[00m
				[01;31m(MF[00m
					(NX ich)
					(NX das)
					(ADVX schon)[01;31m)[00m
				(NX erfahrung)[01;36m)[00m
			(VC gebracht)[01;36m)[00m))
Step:NP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'ADVX', 'NX'], 'mover info': [('NX', (13, 14))], 'old_family': ['SIMPX', 'KOORD', 'LK', 'MF', 'NX', 'VC'], 'start left siblings': ['SIMPX', 'KOORD', 'LK', 'MF'], 'auto preterminals': ('KON', 'ADV', 'VMFIN', 'PPER', 'PPER', 'PDS', 'ADV', 'ADV', 'KON', 'VAFIN', 'PPER', 'PDS', 'ADV', 'NN', 'VVPP'), 'start right siblings': ['VC'], 'end left siblings': ['NX', 'NX', 'ADVX'], 'auto preterminal span': (0, 15), 'movers': ['NX'], 'old_parent': 'SIMPX', 'POS confusion': ('NN', 'NN'), 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(SIMPX und jetzt kann ich ihnen das gleich schon)
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		[01;36m(SIMPX[00m
			(LK habe)
			(MF ich das schon erfahrung)
			(VC gebracht)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'PPER', 'PDS', 'ADV', 'NN', 'VVPP'), 'right siblings': [], 'left siblings': [(SIMPX (KOORD (KON und)) (VF (ADVX (ADV jetzt))) (LK (VXFIN (VMFIN kann))) (MF (NX (PPER ich)) (NX (PPER ihnen)) (NX (PDS das)) (ADVX (ADV gleich)) (ADVX (ADV schon)))), (KOORD (KON oder))], 'auto preterminal span': (9, 15), 'span': (9, 15), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX und jetzt kann ich ihnen das gleich schon)
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		(SIMPX habe ich das schon erfahrung gebracht)))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'ADV', 'VMFIN', 'PPER', 'PPER', 'PDS', 'ADV', 'ADV', 'KON', 'VAFIN', 'PPER', 'PDS', 'ADV', 'NN', 'VVPP'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (0, 15), 'span': (8, 9), 'left siblings': ['SIMPX'], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP und jetzt kann ich ihnen das gleich schon oder habe ich das schon erfahrung gebracht)

Sentence 149:
1 Initial errors
0 on fringe, 1 iterations
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK reserviere)
		(MF
			(ADVX dann)
			(ADVX dort)
			[01;31m(NX[00m
				(NX zwei platze)
				(PX zum essen)[01;31m)[00m)))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['ADVX', 'ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'CARD', 'NN', 'APPRART', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 8), 'span': (4, 8), 'left siblings': ['ADVX', 'ADVX'], 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP ich reserviere dann dort zwei platze zum essen)

Sentence 150:
0 Initial errors
0 on fringe, 0 iterations

Sentence 151:
0 Initial errors
0 on fringe, 0 iterations

Sentence 152:
0 Initial errors
0 on fringe, 0 iterations

Sentence 153:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(DM[00m
	(TOP
		(PX
			(APPR bis)
			(NX august)))[01;36m)[00m
Step:Unary
{'subtrees': ['PX'], 'family': ['DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NN'), 'right siblings': [], 'left siblings': [], 'auto preterminal span': (0, 2), 'span': (0, 2), 'parent': 'TOP', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP bis august)

Sentence 154:
0 Initial errors
0 on fringe, 0 iterations

Sentence 155:
6 Initial errors
0 on fringe, 5 iterations
2 Error:UNSET move
1 Error:Single Word Phrase
1 Error:Unary
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM auf wiedersehen)
	[01;31m(DM[00m
		[01;31m(NX[00m
			[01;36m(NX[00m
				[01;36m(DM[00m
					(NN fraulein)[01;36m)[00m[01;36m)[00m
			[01;36m(NX[00m
				[01;36m(DM[00m
					(NE schmidt)[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m)
Step:UNSET move
{'new_parent': 'DM', 'new_family': ['NN', 'NX'], 'mover info': [('NN', (2, 3))], 'old_family': ['NN', 'NE'], 'start left siblings': [], 'auto preterminals': ('NN', 'NE'), 'start right siblings': ['NE'], 'end left siblings': [], 'auto preterminal span': (2, 4), 'movers': ['NN'], 'old_parent': 'NX', 'POS confusion': ('NN', 'NN'), 'end right siblings': ['NX'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM auf wiedersehen)
	[01;31m(DM[00m
		[01;36m(NX[00m
			[01;36m(DM[00m
				(NN fraulein)[01;36m)[00m[01;36m)[00m
		[01;36m(DM[00m
			(NX
				(NE schmidt))[01;36m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['NN'], 'family': ['DM', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('NN',), 'right siblings': [(NX (NE schmidt))], 'left siblings': [], 'auto preterminal span': (2, 3), 'span': (2, 3), 'parent': 'DM', 'label': 'DM', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM auf wiedersehen)
	[01;31m(DM[00m
		[01;36m(NX[00m
			(DM
				(NN fraulein))[01;36m)[00m
		[01;36m(DM[00m
			(NX
				(NE schmidt))[01;36m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['DM'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN',), 'right siblings': [(NX (NE schmidt))], 'left siblings': [], 'auto preterminal span': (2, 3), 'span': (2, 3), 'parent': 'DM', 'label': 'NX', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM auf wiedersehen)
	[01;31m(DM[00m
		(NX fraulein)
		[01;36m(DM[00m
			(NX
				(NE schmidt))[01;36m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['NX'], 'family': ['NX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE',), 'right siblings': [], 'left siblings': [(NX (DM (NN fraulein)))], 'auto preterminal span': (3, 4), 'span': (3, 4), 'parent': 'DM', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM auf wiedersehen)
	[01;31m(DM[00m
		(NX fraulein)
		(DM schmidt)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['NX', 'DM'], 'family': ['DM', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NN', 'NN', 'NE'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 4), 'span': (2, 4), 'left siblings': ['DM'], 'label': 'DM', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP auf wiedersehen fraulein schmidt)

Sentence 156:
0 Initial errors
0 on fringe, 0 iterations

Sentence 157:
0 Initial errors
0 on fringe, 0 iterations

Sentence 158:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		(MF
			(PX
				(APPR seit)
				(NX
					[01;31m(ADJX[00m
						(ADJA langerer)[01;31m)[00m
					(NN zeit)))
			(ADVX nicht mehr))
		(VC gesehen)))
Step:Single Word Phrase
{'subtrees': ['ADJA'], 'family': ['ADJX', 'NN'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADJA', 'NN'), 'right siblings': ['NN'], 'parent': 'NX', 'auto preterminal span': (2, 4), 'span': (2, 3), 'left siblings': [], 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP ja seit langerer zeit nicht mehr gesehen)

Sentence 159:
0 Initial errors
0 on fringe, 0 iterations

Sentence 160:
0 Initial errors
0 on fringe, 0 iterations

Sentence 161:
0 Initial errors
0 on fringe, 0 iterations

Sentence 162:
0 Initial errors
0 on fringe, 0 iterations

Sentence 163:
1 Initial errors
0 on fringe, 1 iterations
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX bei mir sieht es etwas eng aus)
	(SIMPX
		(VF ich)
		(LK konnte)
		(MF
			(PX
				[01;36m(PX[00m
					(PX in der zweiten juniwoche)
					(PX in der letzten juliwoche)[01;36m)[00m
				(KON oder)
				(PX in der ersten augustwoche)))))
Step:PP Attachment
{'subtrees': ['PX', 'PX'], 'family': ['PX', 'KON', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'ADJA', 'NN', 'APPR', 'ART', 'ADJA', 'NN'), 'right siblings': [(KON oder), (PX (APPR in) (NX (ART der) (ADJX (ADJA ersten)) (NN augustwoche)))], 'left siblings': [], 'auto preterminal span': (11, 19), 'span': (11, 19), 'parent': 'PX', 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP ja also bei mir sieht es etwas eng aus ich konnte in der zweiten juniwoche in der letzten juliwoche oder in der ersten augustwoche)

Sentence 164:
0 Initial errors
0 on fringe, 0 iterations

Sentence 165:
0 Initial errors
0 on fringe, 0 iterations

Sentence 166:
0 Initial errors
0 on fringe, 0 iterations

Sentence 167:
0 Initial errors
0 on fringe, 0 iterations

Sentence 168:
0 Initial errors
0 on fringe, 0 iterations

Sentence 169:
0 Initial errors
0 on fringe, 0 iterations

Sentence 170:
0 Initial errors
0 on fringe, 0 iterations

Sentence 171:
2 Initial errors
0 on fringe, 1 iterations
2 Error:UNSET move
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX nix)
				(PX gegen sonntag abend)[01;31m)[00m
			(VC einzuwenden)[01;36m)[00m))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'PX', 'VC'], 'mover info': [('VC', (6, 7))], 'old_family': ['VF', 'LK', 'MF', 'VC'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('PPER', 'VAFIN', 'PIS', 'APPR', 'NN', 'ADV', 'VVIZU'), 'start right siblings': [], 'end left siblings': ['NX', 'PX'], 'auto preterminal span': (0, 7), 'movers': ['VC'], 'old_parent': 'SIMPX', 'POS confusion': ('VVIZU', 'VVIZU'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP ich habe nix gegen sonntag abend einzuwenden)

Sentence 172:
0 Initial errors
0 on fringe, 0 iterations

Sentence 173:
0 Initial errors
0 on fringe, 0 iterations

Sentence 174:
0 Initial errors
0 on fringe, 0 iterations

Sentence 175:
0 Initial errors
0 on fringe, 0 iterations

Sentence 176:
17 Initial errors
0 on fringe, 14 iterations
2 Error:Single Word Phrase
2 Error:UNSET move
1 Error:Single Word Phrase
1 Error:Single Word Phrase
1 Error:UNSET add
1 Error:Unary
1 Error:PP Attachment
2 Error:Modifier Attachment
1 Error:PP Attachment
1 Error:Clause Attachment
1 Error:Unary
1 Error:UNSET remove
1 Error:Modifier Attachment
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(LK fahren)
			(MF wir wieder mit dem zug)[01;36m)[00m
		[01;31m(NF[00m [01;33m(PX[00m
			[01;31m(ADVX[00m
				(ADVX vielleicht)
				(ADVX abends)
				[01;31m(PX[00m
					(PX so um achtzehn uhr) [01;33mPX)[00m
					[01;33m(SIMPX[00m (ADVX so zirka)[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(LK muste)
		(MF ich dann noch mal)
		(VC nachkucken) [01;33mSIMPX)[00m
		[01;36m(DM[00m [01;31m(NF[00m
			[01;31m(ADJX[00m
				(ADJD genau)[01;31m)[00m[01;31m)[00m[01;36m)[00m[01;31m)[00m
	(PX
		[01;36m(ADVX[00m
			(KON aber)[01;36m)[00m
		(ADVX so)
		[01;36m(ADVX[00m
			(ADV so)[01;36m)[00m
		[01;31m(PX[00m
			[01;31m(PX[00m
				(APPR um)
				[01;33m(NX[00m (NX den dreh)[01;31m)[00m
			(ADVX rum)[01;31m)[00m) [01;33mNX)[00m
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK waren)
		(MF
			(NX wir)
			(PX
				(ADVX so)
				(APPR um)
				[01;36m(PX[00m
					(APPR um)
					(NX halb elf)[01;36m)[00m)
			(PX in hannover)))
	(SIMPX da konnten wir noch was unternehmen))
Step:Single Word Phrase
{'family': ['DM'], 'auto preterminal span': (21, 22), 'span': (21, 22), 'subtrees': ['ADJD'], 'parent': 'NF', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'DM')}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(LK fahren)
			(MF wir wieder mit dem zug)[01;36m)[00m
		[01;31m(NF[00m [01;33m(PX[00m
			[01;31m(ADVX[00m
				(ADVX vielleicht)
				(ADVX abends)
				[01;31m(PX[00m
					(PX so um achtzehn uhr) [01;33mPX)[00m
					[01;33m(SIMPX[00m (ADVX so zirka)[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(LK muste)
		(MF ich dann noch mal)
		(VC nachkucken) [01;33mSIMPX)[00m
		[01;31m(NF[00m
			(DM
				(ADJD genau))[01;31m)[00m[01;31m)[00m
	(PX
		[01;36m(ADVX[00m
			(KON aber)[01;36m)[00m
		(ADVX so)
		[01;36m(ADVX[00m
			(ADV so)[01;36m)[00m
		[01;31m(PX[00m
			[01;31m(PX[00m
				(APPR um)
				[01;33m(NX[00m (NX den dreh)[01;31m)[00m
			(ADVX rum)[01;31m)[00m) [01;33mNX)[00m
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK waren)
		(MF
			(NX wir)
			(PX
				(ADVX so)
				(APPR um)
				[01;36m(PX[00m
					(APPR um)
					(NX halb elf)[01;36m)[00m)
			(PX in hannover)))
	(SIMPX da konnten wir noch was unternehmen))
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['NF', 'LK', 'MF', 'VC', 'NF'], 'mover info': [('NF', (7, 15))], 'old_family': ['LK', 'MF', 'NF'], 'start left siblings': ['LK', 'MF'], 'auto preterminals': ('PTKANT', 'VVFIN', 'PPER', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'ADV', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'VVINF', 'ADJD', 'KON', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'KON', 'ADV', 'VAFIN', 'PPER', 'ADV', 'APPR', 'APPR', 'ADJD', 'CARD', 'APPR', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'PIS', 'VVINF'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (0, 46), 'movers': ['NF'], 'old_parent': 'SIMPX', 'end right siblings': ['LK', 'MF', 'VC', 'NF'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX fahren wir wieder mit dem zug)
	[01;31m(SIMPX[00m [01;33m(PX[00m
		[01;31m(NF[00m
			[01;31m(ADVX[00m
				(ADVX vielleicht)
				(ADVX abends)
				[01;31m(PX[00m
					(PX so um achtzehn uhr) [01;33mPX)[00m
					[01;33m(SIMPX[00m (ADVX so zirka)[01;31m)[00m[01;31m)[00m[01;31m)[00m
		(LK muste)
		(MF ich dann noch mal)
		(VC nachkucken) [01;33mSIMPX)[00m
		[01;31m(NF[00m
			(DM
				(ADJD genau))[01;31m)[00m[01;31m)[00m
	(PX
		[01;36m(ADVX[00m
			(KON aber)[01;36m)[00m
		(ADVX so)
		[01;36m(ADVX[00m
			(ADV so)[01;36m)[00m
		[01;31m(PX[00m
			[01;31m(PX[00m
				(APPR um)
				[01;33m(NX[00m (NX den dreh)[01;31m)[00m
			(ADVX rum)[01;31m)[00m) [01;33mNX)[00m
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK waren)
		(MF
			(NX wir)
			(PX
				(ADVX so)
				(APPR um)
				[01;36m(PX[00m
					(APPR um)
					(NX halb elf)[01;36m)[00m)
			(PX in hannover)))
	(SIMPX da konnten wir noch was unternehmen))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['ADVX', 'ADVX', 'ADV', 'PX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON',), 'right siblings': [(ADVX (ADV so)), (ADV so), (PX (PX (APPR um) (NX (ART den) (NN dreh))) (ADVX (ADV rum)))], 'left siblings': [], 'auto preterminal span': (22, 23), 'span': (22, 23), 'parent': 'PX', 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX fahren wir wieder mit dem zug)
	[01;31m(SIMPX[00m [01;33m(PX[00m
		[01;31m(NF[00m
			[01;31m(ADVX[00m
				(ADVX vielleicht)
				(ADVX abends)
				[01;31m(PX[00m
					(PX so um achtzehn uhr) [01;33mPX)[00m
					[01;33m(SIMPX[00m (ADVX so zirka)[01;31m)[00m[01;31m)[00m[01;31m)[00m
		(LK muste)
		(MF ich dann noch mal)
		(VC nachkucken) [01;33mSIMPX)[00m
		[01;31m(NF[00m
			(DM
				(ADJD genau))[01;31m)[00m[01;31m)[00m
	(PX
		(ADVX aber)
		(ADVX so)
		[01;36m(ADVX[00m
			(ADV so)[01;36m)[00m
		[01;31m(PX[00m
			[01;31m(PX[00m
				(APPR um)
				[01;33m(NX[00m (NX den dreh)[01;31m)[00m
			(ADVX rum)[01;31m)[00m) [01;33mNX)[00m
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK waren)
		(MF
			(NX wir)
			(PX
				(ADVX so)
				(APPR um)
				[01;36m(PX[00m
					(APPR um)
					(NX halb elf)[01;36m)[00m)
			(PX in hannover)))
	(SIMPX da konnten wir noch was unternehmen))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['ADVX', 'ADVX', 'ADVX', 'PX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV',), 'right siblings': [(PX (PX (APPR um) (NX (ART den) (NN dreh))) (ADVX (ADV rum)))], 'left siblings': [(ADVX (KON aber)), (ADVX (ADV so))], 'auto preterminal span': (24, 25), 'span': (24, 25), 'parent': 'PX', 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX fahren wir wieder mit dem zug)
	[01;31m(SIMPX[00m [01;33m(PX[00m
		[01;31m(NF[00m
			[01;31m(ADVX[00m
				(ADVX vielleicht)
				(ADVX abends)
				[01;31m(PX[00m
					(PX so um achtzehn uhr) [01;33mPX)[00m
					[01;33m(SIMPX[00m (ADVX so zirka)[01;31m)[00m[01;31m)[00m[01;31m)[00m
		(LK muste)
		(MF ich dann noch mal)
		(VC nachkucken) [01;33mSIMPX)[00m
		[01;31m(NF[00m
			(DM
				(ADJD genau))[01;31m)[00m[01;31m)[00m
	(PX
		(ADVX aber)
		(ADVX so)
		(ADVX so)
		[01;31m(PX[00m
			[01;31m(PX[00m
				(APPR um)
				[01;33m(NX[00m (NX den dreh)[01;31m)[00m
			(ADVX rum)[01;31m)[00m) [01;33mNX)[00m
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK waren)
		(MF
			(NX wir)
			(PX
				(ADVX so)
				(APPR um)
				[01;36m(PX[00m
					(APPR um)
					(NX halb elf)[01;36m)[00m)
			(PX in hannover)))
	(SIMPX da konnten wir noch was unternehmen))
Step:UNSET add
{'subtrees': ['APPR', 'NX'], 'family': ['ADVX', 'APPR', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ADJD', 'CARD'), 'right siblings': [], 'left siblings': [(ADVX (ADV so)), (APPR um)], 'auto preterminal span': (35, 38), 'span': (35, 38), 'parent': 'PX', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX fahren wir wieder mit dem zug)
	[01;31m(SIMPX[00m [01;33m(PX[00m
		[01;31m(NF[00m
			[01;31m(ADVX[00m
				(ADVX vielleicht)
				(ADVX abends)
				[01;31m(PX[00m
					(PX so um achtzehn uhr) [01;33mPX)[00m
					[01;33m(SIMPX[00m (ADVX so zirka)[01;31m)[00m[01;31m)[00m[01;31m)[00m
		(LK muste)
		(MF ich dann noch mal)
		(VC nachkucken) [01;33mSIMPX)[00m
		[01;31m(NF[00m
			(DM
				(ADJD genau))[01;31m)[00m[01;31m)[00m
	(PX
		(ADVX aber)
		(ADVX so)
		(ADVX so)
		[01;31m(PX[00m
			[01;31m(PX[00m
				(APPR um)
				[01;33m(NX[00m (NX den dreh)[01;31m)[00m
			(ADVX rum)[01;31m)[00m) [01;33mNX)[00m
	(SIMPX und dann waren wir so um um halb elf in hannover)
	(SIMPX da konnten wir noch was unternehmen))
Step:Unary
{'subtrees': ['ADVX', 'ADVX', 'PX'], 'family': ['ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'ADV'), 'right siblings': [], 'parent': 'NF', 'auto preterminal span': (7, 15), 'span': (7, 15), 'left siblings': [], 'label': 'ADVX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX fahren wir wieder mit dem zug)
	[01;31m(SIMPX[00m [01;33m(PX[00m
		[01;31m(NF[00m
			(ADVX vielleicht)
			(ADVX abends)
			[01;31m(PX[00m
				(PX so um achtzehn uhr) [01;33mPX)[00m
				[01;33m(SIMPX[00m (ADVX so zirka)[01;31m)[00m[01;31m)[00m
		(LK muste)
		(MF ich dann noch mal)
		(VC nachkucken) [01;33mSIMPX)[00m
		[01;31m(NF[00m
			(DM
				(ADJD genau))[01;31m)[00m[01;31m)[00m
	(PX
		(ADVX aber)
		(ADVX so)
		(ADVX so)
		[01;31m(PX[00m
			[01;31m(PX[00m
				(APPR um)
				[01;33m(NX[00m (NX den dreh)[01;31m)[00m
			(ADVX rum)[01;31m)[00m) [01;33mNX)[00m
	(SIMPX und dann waren wir so um um halb elf in hannover)
	(SIMPX da konnten wir noch was unternehmen))
Step:PP Attachment
{'subtrees': ['ADVX', 'ADVX', 'PX'], 'family': ['NF', 'LK', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'VVINF', 'ADJD'), 'right siblings': ['LK', 'MF', 'VC', 'NF'], 'parent': 'SIMPX', 'auto preterminal span': (7, 22), 'span': (7, 15), 'left siblings': [], 'label': 'NF', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX fahren wir wieder mit dem zug)
	[01;31m(SIMPX[00m [01;33m(PX[00m
		(ADVX vielleicht)
		(ADVX abends)
		[01;31m(PX[00m
			(PX so um achtzehn uhr) [01;33mPX)[00m
			[01;33m(SIMPX[00m (ADVX so zirka)[01;31m)[00m
		(LK muste)
		(MF ich dann noch mal)
		(VC nachkucken) [01;33mSIMPX)[00m
		[01;31m(NF[00m
			(DM
				(ADJD genau))[01;31m)[00m[01;31m)[00m
	(PX
		(ADVX aber)
		(ADVX so)
		(ADVX so)
		[01;31m(PX[00m
			[01;31m(PX[00m
				(APPR um)
				[01;33m(NX[00m (NX den dreh)[01;31m)[00m
			(ADVX rum)[01;31m)[00m) [01;33mNX)[00m
	(SIMPX und dann waren wir so um um halb elf in hannover)
	(SIMPX da konnten wir noch was unternehmen))
Step:Modifier Attachment
{'new_parent': 'SIMPX', 'new_family': ['ADVX', 'ADVX', 'PX', 'ADVX', 'LK', 'MF', 'VC', 'NF'], 'mover info': [('ADVX', (13, 15))], 'old_family': ['PX', 'ADVX'], 'start left siblings': ['PX'], 'auto preterminals': ('ADV', 'ADV', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'VVINF', 'ADJD'), 'start right siblings': [], 'end left siblings': ['ADVX', 'ADVX', 'PX'], 'auto preterminal span': (7, 22), 'adding node already present': False, 'movers': ['ADVX'], 'old_parent': 'PX', 'added and moved': True, 'end right siblings': ['LK', 'MF', 'VC', 'NF'], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'SIMPX'}
(TOP
	(DM ja)
	(SIMPX fahren wir wieder mit dem zug)
	[01;31m(SIMPX[00m
		[01;36m(PX[00m
			(ADVX vielleicht)
			(ADVX abends)
			(PX so um achtzehn uhr)[01;36m)[00m
		(SIMPX so zirka muste ich dann noch mal nachkucken)
		[01;31m(NF[00m
			(DM
				(ADJD genau))[01;31m)[00m[01;31m)[00m
	(PX
		(ADVX aber)
		(ADVX so)
		(ADVX so)
		[01;31m(PX[00m
			[01;31m(PX[00m
				(APPR um)
				[01;33m(NX[00m (NX den dreh)[01;31m)[00m
			(ADVX rum)[01;31m)[00m) [01;33mNX)[00m
	(SIMPX und dann waren wir so um um halb elf in hannover)
	(SIMPX da konnten wir noch was unternehmen))
Step:PP Attachment
{'subtrees': ['ADVX', 'ADVX', 'PX'], 'family': ['PX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'ADV', 'APPR', 'CARD', 'NN'), 'right siblings': [(SIMPX (ADVX (ADVX (ADV so)) (ADV zirka)) (LK (VXFIN (VMFIN muste))) (MF (NX (PPER ich)) (ADVX (ADV dann)) (ADVX (ADV noch)) (ADVX (ADV mal))) (VC (VXINF (VVINF nachkucken)))), (NF (DM (ADJD genau)))], 'left siblings': [], 'auto preterminal span': (7, 13), 'span': (7, 13), 'parent': 'SIMPX', 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX fahren wir wieder mit dem zug)
	[01;31m(SIMPX[00m
		(PX vielleicht abends so um achtzehn uhr)
		(SIMPX so zirka muste ich dann noch mal nachkucken)
		[01;31m(NF[00m
			(DM
				(ADJD genau))[01;31m)[00m[01;31m)[00m
	(PX
		(ADVX aber)
		(ADVX so)
		(ADVX so)
		[01;31m(PX[00m
			[01;31m(PX[00m
				(APPR um)
				[01;33m(NX[00m (NX den dreh)[01;31m)[00m
			(ADVX rum)[01;31m)[00m) [01;33mNX)[00m
	(SIMPX und dann waren wir so um um halb elf in hannover)
	(SIMPX da konnten wir noch was unternehmen))
Step:Clause Attachment
{'subtrees': ['PX', 'SIMPX', 'NF'], 'family': ['DM', 'SIMPX', 'SIMPX', 'PX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'VVFIN', 'PPER', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'ADV', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'VVINF', 'ADJD', 'KON', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'KON', 'ADV', 'VAFIN', 'PPER', 'ADV', 'APPR', 'APPR', 'ADJD', 'CARD', 'APPR', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'PIS', 'VVINF'), 'right siblings': ['PX', 'SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 46), 'span': (7, 22), 'left siblings': ['DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX fahren wir wieder mit dem zug)
	(PX vielleicht abends so um achtzehn uhr)
	(SIMPX so zirka muste ich dann noch mal nachkucken)
	[01;31m(NF[00m
		(DM
			(ADJD genau))[01;31m)[00m
	(PX
		(ADVX aber)
		(ADVX so)
		(ADVX so)
		[01;31m(PX[00m
			[01;31m(PX[00m
				(APPR um)
				[01;33m(NX[00m (NX den dreh)[01;31m)[00m
			(ADVX rum)[01;31m)[00m) [01;33mNX)[00m
	(SIMPX und dann waren wir so um um halb elf in hannover)
	(SIMPX da konnten wir noch was unternehmen))
Step:Unary
{'subtrees': ['DM'], 'family': ['DM', 'SIMPX', 'PX', 'SIMPX', 'NF', 'PX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'VVFIN', 'PPER', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'ADV', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'VVINF', 'ADJD', 'KON', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'KON', 'ADV', 'VAFIN', 'PPER', 'ADV', 'APPR', 'APPR', 'ADJD', 'CARD', 'APPR', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'PIS', 'VVINF'), 'right siblings': ['PX', 'SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 46), 'span': (21, 22), 'left siblings': ['DM', 'SIMPX', 'PX', 'SIMPX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX fahren wir wieder mit dem zug)
	(PX vielleicht abends so um achtzehn uhr)
	(SIMPX so zirka muste ich dann noch mal nachkucken)
	(DM genau)
	(PX
		(ADVX aber)
		(ADVX so)
		(ADVX so)
		[01;31m(PX[00m
			[01;31m(PX[00m
				(APPR um)
				[01;33m(NX[00m (NX den dreh)[01;31m)[00m
			(ADVX rum)[01;31m)[00m) [01;33mNX)[00m
	(SIMPX und dann waren wir so um um halb elf in hannover)
	(SIMPX da konnten wir noch was unternehmen))
Step:UNSET remove
{'subtrees': ['APPR', 'NX'], 'family': ['PX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'ADV'), 'right siblings': ['ADVX'], 'parent': 'PX', 'auto preterminal span': (25, 29), 'span': (25, 28), 'left siblings': [], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX fahren wir wieder mit dem zug)
	(PX vielleicht abends so um achtzehn uhr)
	(SIMPX so zirka muste ich dann noch mal nachkucken)
	(DM genau)
	(PX
		(ADVX aber)
		(ADVX so)
		(ADVX so)
		[01;31m(PX[00m
			(APPR um)
			[01;36m(NX[00m
				(NX den dreh)
				(ADVX rum)[01;36m)[00m[01;31m)[00m)
	(SIMPX und dann waren wir so um um halb elf in hannover)
	(SIMPX da konnten wir noch was unternehmen))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX'], 'family': ['APPR', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'ADV'), 'right siblings': [], 'left siblings': [(APPR um)], 'auto preterminal span': (26, 29), 'span': (26, 29), 'parent': 'PX', 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX fahren wir wieder mit dem zug)
	(PX vielleicht abends so um achtzehn uhr)
	(SIMPX so zirka muste ich dann noch mal nachkucken)
	(DM genau)
	(PX
		(ADVX aber)
		(ADVX so)
		(ADVX so)
		[01;31m(PX[00m
			(APPR um)
			(NX den dreh rum)[01;31m)[00m)
	(SIMPX und dann waren wir so um um halb elf in hannover)
	(SIMPX da konnten wir noch was unternehmen))
Step:UNSET remove
{'subtrees': ['APPR', 'NX'], 'family': ['ADVX', 'ADVX', 'ADVX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'ADV'), 'right siblings': [], 'parent': 'PX', 'auto preterminal span': (22, 29), 'span': (25, 29), 'left siblings': ['ADVX', 'ADVX', 'ADVX'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ja fahren wir wieder mit dem zug vielleicht abends so um achtzehn uhr so zirka muste ich dann noch mal nachkucken genau aber so so um den dreh rum und dann waren wir so um um halb elf in hannover da konnten wir noch was unternehmen)

Sentence 177:
0 Initial errors
0 on fringe, 0 iterations

Sentence 178:
0 Initial errors
0 on fringe, 0 iterations

Sentence 179:
0 Initial errors
0 on fringe, 0 iterations

Sentence 180:
0 Initial errors
0 on fringe, 0 iterations

Sentence 181:
0 Initial errors
0 on fringe, 0 iterations

Sentence 182:
0 Initial errors
0 on fringe, 0 iterations

Sentence 183:
0 Initial errors
0 on fringe, 0 iterations

Sentence 184:
0 Initial errors
0 on fringe, 0 iterations

Sentence 185:
0 Initial errors
0 on fringe, 0 iterations

Sentence 186:
6 Initial errors
0 on fringe, 2 iterations
4 Error:UNSET move
2 Error:Different label
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM ja)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF das)
			(LK war)
			(MF sehr nett)[01;36m)[00m
		[01;36m(VF[00m [01;31m(NF[00m [01;33m(SIMPX[00m
			(NX
				(ADJX letztes)
				(NN mal))[01;31m)[00m[01;36m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(LK mochte)
		(MF ich ganz gerne wieder)
		(VC hingehen)[01;31m)[00m) [01;33mSIMPX)[00m
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['NF', 'LK', 'MF', 'VC'], 'mover info': [('NF', (6, 8))], 'old_family': ['VF', 'LK', 'MF', 'NF'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('PTKANT', 'PTKANT', 'PDS', 'VAFIN', 'ADV', 'ADJD', 'ADJA', 'NN', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'VVINF'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (0, 14), 'movers': ['NF'], 'old_parent': 'SIMPX', 'end right siblings': ['LK', 'MF', 'VC'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM ja)
	(DM ja)
	(SIMPX das war sehr nett)
	(SIMPX
		[01;36m(VF[00m [01;31m(NF[00m
			(NX
				(ADJX letztes)
				(NN mal))[01;31m)[00m[01;36m)[00m
		(LK mochte)
		(MF ich ganz gerne wieder)
		(VC hingehen)))
Step:Different label
{'family': ['VF', 'LK', 'MF', 'VC'], 'auto preterminal span': (6, 8), 'span': (6, 8), 'subtrees': ['NX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('ADJA', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('NF', 'VF')}
(TOP ja ja das war sehr nett letztes mal mochte ich ganz gerne wieder hingehen)

Sentence 187:
0 Initial errors
0 on fringe, 0 iterations

Sentence 188:
0 Initial errors
0 on fringe, 0 iterations

Sentence 189:
0 Initial errors
0 on fringe, 0 iterations

Sentence 190:
0 Initial errors
0 on fringe, 0 iterations

Sentence 191:
0 Initial errors
0 on fringe, 0 iterations

Sentence 192:
0 Initial errors
0 on fringe, 0 iterations

Sentence 193:
0 Initial errors
0 on fringe, 0 iterations

Sentence 194:
0 Initial errors
0 on fringe, 0 iterations

Sentence 195:
0 Initial errors
0 on fringe, 0 iterations

Sentence 196:
0 Initial errors
0 on fringe, 0 iterations

Sentence 197:
0 Initial errors
0 on fringe, 0 iterations

Sentence 198:
0 Initial errors
0 on fringe, 0 iterations

Sentence 199:
0 Initial errors
0 on fringe, 0 iterations

Sentence 200:
0 Initial errors
0 on fringe, 0 iterations

Sentence 201:
0 Initial errors
0 on fringe, 0 iterations

Sentence 202:
0 Initial errors
0 on fringe, 0 iterations

Sentence 203:
0 Initial errors
0 on fringe, 0 iterations

Sentence 204:
0 Initial errors
0 on fringe, 0 iterations

Sentence 205:
13 Initial errors
0 on fringe, 7 iterations
4 Error:NP Attachment
2 Error:Single Word Phrase
2 Error:PP Attachment
2 Error:UNSET move
1 Error:UNSET add
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX ich denke wir sollten es einfach mal ausprobieren)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF wir)
		(LK hatten)
		(VC gesagt)
		(NF
			(SIMPX
				(VF anderthalb tage)
				(LK fahren)
				[01;31m(MF[00m
					[01;36m(MF[00m
						(NX wir)
						(PX nach hannover)[01;36m)[00m
					[01;36m(NF[00m
						(PX [01;33m(PX[00m
							(APPRART im)
							[01;31m(NX[00m [01;33m(NX (NX[00m
								(NX zeitraum)
								[01;31m(NX[00m
									[01;31m(NX[00m
										(NX januar) [01;33mNX)[00m
										(NX februar)
										(NX marz)[01;31m)[00m [01;33mNX) PX)[00m
									[01;36m(VXINF[00m [01;36m(VC[00m [01;31m(NX[00m
										(CARD achtundneunzig)[01;31m)[00m[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m)[01;36m)[00m[01;31m)[00m))[01;31m)[00m)
Step:NP Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'NX', 'NX', 'NX'], 'mover info': [('NX', (20, 21))], 'old_family': ['NX', 'NX'], 'start left siblings': [], 'auto preterminals': ('NN', 'NN', 'NN', 'NN', 'CARD'), 'start right siblings': ['NX'], 'end left siblings': [], 'auto preterminal span': (20, 25), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'NX', 'POS confusion': ('NN', 'NN'), 'added and moved': True, 'end right siblings': ['NX', 'NX', 'NX'], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'VXINF'}
(TOP
	(DM also)
	(SIMPX ich denke wir sollten es einfach mal ausprobieren)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF wir)
		(LK hatten)
		(VC gesagt)
		(NF
			(SIMPX
				(VF anderthalb tage)
				(LK fahren)
				[01;31m(MF[00m
					[01;36m(MF[00m
						(NX wir)
						(PX nach hannover)[01;36m)[00m
					[01;36m(NF[00m
						(PX [01;33m(PX[00m
							(APPRART im)
							[01;31m(NX[00m
								(NX zeitraum januar februar marz) [01;33mPX)[00m
								[01;36m(VXINF[00m [01;36m(VC[00m [01;31m(NX[00m
									(CARD achtundneunzig)[01;31m)[00m[01;36m)[00m[01;36m)[00m[01;31m)[00m)[01;36m)[00m[01;31m)[00m))[01;31m)[00m)
Step:Single Word Phrase
{'family': ['NX', 'VC'], 'auto preterminal span': (24, 25), 'span': (24, 25), 'subtrees': ['CARD'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('CARD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'VC')}
(TOP
	(DM also)
	(SIMPX ich denke wir sollten es einfach mal ausprobieren)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF wir)
		(LK hatten)
		(VC gesagt)
		(NF
			(SIMPX
				(VF anderthalb tage)
				(LK fahren)
				[01;31m(MF[00m
					[01;36m(MF[00m
						(NX wir)
						(PX nach hannover)[01;36m)[00m
					[01;36m(NF[00m
						(PX [01;33m(PX[00m
							(APPRART im)
							[01;31m(NX[00m
								(NX zeitraum januar februar marz) [01;33mPX)[00m
								[01;36m(VXINF[00m
									(VC
										(CARD achtundneunzig))[01;36m)[00m[01;31m)[00m)[01;36m)[00m[01;31m)[00m))[01;31m)[00m)
Step:PP Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'PX'], 'mover info': [('PX', (19, 25))], 'old_family': ['NX', 'PX', 'PX'], 'start left siblings': ['NX', 'PX'], 'auto preterminals': ('CARD', 'NN', 'VVFIN', 'PPER', 'APPR', 'NE', 'APPRART', 'NN', 'NN', 'NN', 'NN', 'CARD'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (13, 25), 'movers': ['PX'], 'old_parent': 'MF', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(DM also)
	(SIMPX ich denke wir sollten es einfach mal ausprobieren)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF wir)
		(LK hatten)
		(VC gesagt)
		(NF
			(SIMPX
				(VF anderthalb tage)
				(LK fahren)
				(MF wir nach hannover)
				[01;36m(NF[00m
					(PX [01;33m(PX[00m
						(APPRART im)
						[01;31m(NX[00m
							(NX zeitraum januar februar marz) [01;33mPX)[00m
							[01;36m(VXINF[00m
								(VC
									(CARD achtundneunzig))[01;36m)[00m[01;31m)[00m)[01;36m)[00m))[01;31m)[00m)
Step:UNSET move
{'new_parent': 'PX', 'new_family': ['APPRART', 'NX', 'VC'], 'mover info': [('VC', (24, 25))], 'old_family': ['NX', 'VC'], 'start left siblings': ['NX'], 'auto preterminals': ('APPRART', 'NN', 'NN', 'NN', 'NN', 'CARD'), 'start right siblings': [], 'end left siblings': ['APPRART', 'NX'], 'auto preterminal span': (19, 25), 'adding node already present': False, 'movers': ['VC'], 'old_parent': 'NX', 'POS confusion': ('CARD', 'CARD'), 'added and moved': True, 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'VXINF'}
(TOP
	(DM also)
	(SIMPX ich denke wir sollten es einfach mal ausprobieren)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF wir)
		(LK hatten)
		(VC gesagt)
		(NF
			(SIMPX
				(VF anderthalb tage)
				(LK fahren)
				(MF wir nach hannover)
				(NF
					(PX
						[01;36m(PX[00m
							(APPRART im)
							(NX zeitraum januar februar marz)[01;36m)[00m
						[01;36m(VXINF[00m
							(VC
								(CARD achtundneunzig))[01;36m)[00m))))[01;31m)[00m)
Step:UNSET add
{'subtrees': ['APPRART', 'NX'], 'family': ['PX', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'NN', 'NN', 'NN', 'NN'), 'right siblings': [(VC (CARD achtundneunzig))], 'left siblings': [], 'auto preterminal span': (19, 24), 'span': (19, 24), 'parent': 'PX', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX ich denke wir sollten es einfach mal ausprobieren)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF wir)
		(LK hatten)
		(VC gesagt)
		(NF
			(SIMPX
				(VF anderthalb tage)
				(LK fahren)
				(MF wir nach hannover)
				(NF
					(PX
						(PX im zeitraum januar februar marz)
						[01;36m(VXINF[00m
							(VC
								(CARD achtundneunzig))[01;36m)[00m))))[01;31m)[00m)
Step:Unary
{'subtrees': ['VC'], 'family': ['PX', 'VXINF'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD',), 'right siblings': [], 'left siblings': [(PX (APPRART im) (NX (NX (NX (NN zeitraum)) (NX (NN januar))) (NX (NN februar)) (NX (NN marz))))], 'auto preterminal span': (24, 25), 'span': (24, 25), 'parent': 'PX', 'label': 'VXINF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX ich denke wir sollten es einfach mal ausprobieren)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF wir)
		(LK hatten)
		(VC gesagt)
		(NF anderthalb tage fahren wir nach hannover im zeitraum januar februar marz achtundneunzig)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['KOORD', 'VF', 'LK', 'VC', 'NF'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PPER', 'VVFIN', 'PPER', 'VMFIN', 'PPER', 'ADV', 'ADV', 'VVINF', 'KON', 'PPER', 'VAFIN', 'VVPP', 'CARD', 'NN', 'VVFIN', 'PPER', 'APPR', 'NE', 'APPRART', 'NN', 'NN', 'NN', 'NN', 'CARD'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 25), 'span': (9, 25), 'left siblings': ['DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP also ich denke wir sollten es einfach mal ausprobieren und wir hatten gesagt anderthalb tage fahren wir nach hannover im zeitraum januar februar marz achtundneunzig)

Sentence 206:
0 Initial errors
0 on fringe, 0 iterations

Sentence 207:
0 Initial errors
0 on fringe, 0 iterations

Sentence 208:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wir)
		(LK konnten)
		(MF
			[01;31m(PX[00m
				(ADVX gleich)
				[01;36m(PX[00m
					(APPR zu)
					(NX beginn des januar)[01;36m)[00m[01;31m)[00m)
		(VC versuchen)
		(NF einen termin zu finden)))
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'PX'], 'mover info': [('ADVX', (2, 3))], 'old_family': ['ADVX', 'APPR', 'NX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'APPR', 'NN', 'ART', 'NN'), 'start right siblings': ['APPR', 'NX'], 'end left siblings': [], 'auto preterminal span': (2, 7), 'movers': ['ADVX'], 'old_parent': 'PX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['PX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP wir konnten gleich zu beginn des januar versuchen einen termin zu finden)

Sentence 209:
7 Initial errors
0 on fringe, 6 iterations
2 Error:Single Word Phrase
1 Error:Unary
1 Error:UNSET add
1 Error:UNSET remove
1 Error:PP Attachment
1 Error:NP Internal Structure
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM okay)
	(NX januar)
	[01;31m(SIMPX[00m
		(LV wenn ich in meinen terminkalender schaue)
		(VF da)
		(LK habe)
		(MF
			(NX ich)
			[01;36m(NX[00m
				[01;36m(VXINF[00m [01;36m(VC[00m [01;31m(ADVX[00m
					(ADV absurderweise)[01;31m)[00m[01;36m)[00m[01;36m)[00m
				(NX freitag und samstag)[01;36m)[00m)[01;31m)[00m
	(SIMPX
		(KOORD aber)
		(VF ich)
		(LK denke)
		(NF
			(SIMPX
				(VF unsre geschaftspartner)
				(LK haben)
				(MF [01;33m(NX[00m
					(NX samstag)
					[01;31m(NX[00m
						(NX kein interesse) [01;33mNX)[00m
						(PX an unserm besuch)[01;31m)[00m)))))
Step:Single Word Phrase
{'family': ['NX', 'VC', 'NX'], 'auto preterminal span': (11, 12), 'span': (11, 12), 'subtrees': ['ADV'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'VC')}
(TOP
	(DM okay)
	(NX januar)
	[01;31m(SIMPX[00m
		(LV wenn ich in meinen terminkalender schaue)
		(VF da)
		(LK habe)
		(MF
			(NX ich)
			[01;36m(NX[00m
				[01;36m(VXINF[00m
					(VC
						(ADV absurderweise))[01;36m)[00m
				(NX freitag und samstag)[01;36m)[00m)[01;31m)[00m
	(SIMPX
		(KOORD aber)
		(VF ich)
		(LK denke)
		(NF
			(SIMPX
				(VF unsre geschaftspartner)
				(LK haben)
				(MF [01;33m(NX[00m
					(NX samstag)
					[01;31m(NX[00m
						(NX kein interesse) [01;33mNX)[00m
						(PX an unserm besuch)[01;31m)[00m)))))
Step:Unary
{'subtrees': ['VC'], 'family': ['NX', 'VXINF', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV',), 'right siblings': [(NX (NX (NN freitag)) (KON und) (NX (NN samstag)))], 'left siblings': [(NX (PPER ich))], 'auto preterminal span': (11, 12), 'span': (11, 12), 'parent': 'MF', 'label': 'VXINF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM okay)
	(NX januar)
	[01;31m(SIMPX[00m
		(LV wenn ich in meinen terminkalender schaue)
		(VF da)
		(LK habe)
		(MF
			(NX ich)
			[01;36m(NX[00m
				(VXINF absurderweise)
				(NX freitag und samstag)[01;36m)[00m)[01;31m)[00m
	(SIMPX
		(KOORD aber)
		(VF ich)
		(LK denke)
		(NF
			(SIMPX
				(VF unsre geschaftspartner)
				(LK haben)
				(MF [01;33m(NX[00m
					(NX samstag)
					[01;31m(NX[00m
						(NX kein interesse) [01;33mNX)[00m
						(PX an unserm besuch)[01;31m)[00m)))))
Step:UNSET add
{'subtrees': ['VXINF', 'NX'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'NN', 'KON', 'NN'), 'right siblings': [], 'left siblings': [(NX (PPER ich))], 'auto preterminal span': (11, 15), 'span': (11, 15), 'parent': 'MF', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM okay)
	(NX januar)
	[01;31m(SIMPX[00m
		(LV wenn ich in meinen terminkalender schaue)
		(VF da)
		(LK habe)
		(MF ich absurderweise freitag und samstag)[01;31m)[00m
	(SIMPX
		(KOORD aber)
		(VF ich)
		(LK denke)
		(NF
			(SIMPX
				(VF unsre geschaftspartner)
				(LK haben)
				(MF [01;33m(NX[00m
					(NX samstag)
					[01;31m(NX[00m
						(NX kein interesse) [01;33mNX)[00m
						(PX an unserm besuch)[01;31m)[00m)))))
Step:UNSET remove
{'subtrees': ['LV', 'VF', 'LK', 'MF'], 'family': ['DM', 'NX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'NN', 'KOUS', 'PPER', 'APPR', 'PPOSAT', 'NN', 'VVFIN', 'ADV', 'VAFIN', 'PPER', 'ADV', 'NN', 'KON', 'NN', 'KON', 'PPER', 'VVFIN', 'PPOSAT', 'NN', 'VAFIN', 'NN', 'PIAT', 'NN', 'APPR', 'PPOSAT', 'NN'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 27), 'span': (2, 15), 'left siblings': ['DM', 'NX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM okay)
	(NX januar)
	(LV wenn ich in meinen terminkalender schaue)
	(VF da)
	(LK habe)
	(MF ich absurderweise freitag und samstag)
	(SIMPX
		(KOORD aber)
		(VF ich)
		(LK denke)
		(NF
			(SIMPX
				(VF unsre geschaftspartner)
				(LK haben)
				(MF [01;33m(NX[00m
					(NX samstag)
					[01;31m(NX[00m
						(NX kein interesse) [01;33mNX)[00m
						(PX an unserm besuch)[01;31m)[00m)))))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'PIAT', 'NN', 'APPR', 'PPOSAT', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (21, 27), 'span': (22, 27), 'left siblings': ['NX'], 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(DM okay)
	(NX januar)
	(LV wenn ich in meinen terminkalender schaue)
	(VF da)
	(LK habe)
	(MF ich absurderweise freitag und samstag)
	(SIMPX
		(KOORD aber)
		(VF ich)
		(LK denke)
		(NF
			(SIMPX
				(VF unsre geschaftspartner)
				(LK haben)
				(MF
					[01;36m(NX[00m
						(NX samstag)
						(NX kein interesse)[01;36m)[00m
					(PX an unserm besuch))))))
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'PIAT', 'NN'), 'right siblings': [(PX (APPR an) (NX (PPOSAT unserm) (NN besuch)))], 'left siblings': [], 'auto preterminal span': (21, 24), 'span': (21, 24), 'parent': 'MF', 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'add'}
(TOP okay januar wenn ich in meinen terminkalender schaue da habe ich absurderweise freitag und samstag aber ich denke unsre geschaftspartner haben samstag kein interesse an unserm besuch)

Sentence 210:
0 Initial errors
0 on fringe, 0 iterations

Sentence 211:
0 Initial errors
0 on fringe, 0 iterations

Sentence 212:
0 Initial errors
0 on fringe, 0 iterations

Sentence 213:
0 Initial errors
0 on fringe, 0 iterations

Sentence 214:
0 Initial errors
0 on fringe, 0 iterations

Sentence 215:
0 Initial errors
0 on fringe, 0 iterations

Sentence 216:
0 Initial errors
0 on fringe, 0 iterations

Sentence 217:
0 Initial errors
0 on fringe, 0 iterations

Sentence 218:
14 Initial errors
0 on fringe, 8 iterations
3 Error:UNSET move
2 Error:Single Word Phrase
2 Error:Different label
2 Error:Single Word Phrase
2 Error:Modifier Attachment
1 Error:PP Attachment
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		[01;36m(ADVX[00m
			(VF
				[01;31m(NX[00m
					(NN siebenundzwanzigster)[01;31m)[00m)[01;36m)[00m
		(LK konnte)
		[01;31m(MF[00m
			(NX ich)
			[01;36m(PX[00m
				(ADVX naturlich)
				[01;31m(PX[00m
					(APPR nach)
					(NX
						(NX meinem zahnarzttermin)
						[01;36m(NX[00m [01;31m(R[00m
							[01;31m(C[00m
								(NX
									(PRELS der))[01;31m)[00m
							[01;36m(PX[00m
								[01;31m(MF[00m
									[01;31m(PX[00m
										(APPR um)
										[01;33m(NX[00m (NX acht uhr)[01;31m)[00m[01;31m)[00m
								(VC stattfindet)[01;36m)[00m[01;31m)[00m[01;36m)[00m)[01;31m)[00m [01;33mNX)[00m[01;36m)[00m
			(ADVX dann)[01;31m)[00m
		[01;36m(ADVX[00m [01;31m(VC[00m
			(PTKVZ weg)[01;31m)[00m[01;36m)[00m))
Step:UNSET move
{'new_parent': 'PX', 'new_family': ['APPR', 'NX', 'VC'], 'mover info': [('VC', (11, 12))], 'old_family': ['C', 'MF', 'VC'], 'start left siblings': ['C', 'MF'], 'auto preterminals': ('PRELS', 'APPR', 'CARD', 'NN', 'VVFIN'), 'start right siblings': [], 'end left siblings': ['APPR', 'NX'], 'auto preterminal span': (7, 12), 'adding node already present': False, 'movers': ['VC'], 'old_parent': 'R', 'POS confusion': ('VVFIN', 'VVFIN'), 'added and moved': True, 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'ADVX'}
(TOP
	(SIMPX
		[01;36m(ADVX[00m
			(VF
				[01;31m(NX[00m
					(NN siebenundzwanzigster)[01;31m)[00m)[01;36m)[00m
		(LK konnte)
		[01;31m(MF[00m
			(NX ich)
			[01;36m(PX[00m
				(ADVX naturlich)
				[01;31m(PX[00m
					(APPR nach)
					(NX
						(NX meinem zahnarzttermin)
						[01;36m(NX[00m [01;31m(R[00m
							[01;31m(C[00m
								(NX
									(PRELS der))[01;31m)[00m
							[01;31m(MF[00m
								(PX
									(APPR um)
									(NX acht uhr stattfindet))[01;31m)[00m[01;31m)[00m[01;36m)[00m)[01;31m)[00m[01;36m)[00m
			(ADVX dann)[01;31m)[00m
		[01;36m(ADVX[00m [01;31m(VC[00m
			(PTKVZ weg)[01;31m)[00m[01;36m)[00m))
Step:Single Word Phrase
{'family': ['ADVX'], 'auto preterminal span': (0, 1), 'span': (0, 1), 'subtrees': ['NN'], 'parent': 'VF', 'over_word': True, 'auto preterminals': ('NN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADVX')}
(TOP
	(SIMPX
		(VF siebenundzwanzigster)
		(LK konnte)
		[01;31m(MF[00m
			(NX ich)
			[01;36m(PX[00m
				(ADVX naturlich)
				[01;31m(PX[00m
					(APPR nach)
					(NX
						(NX meinem zahnarzttermin)
						[01;36m(NX[00m [01;31m(R[00m
							[01;31m(C[00m
								(NX
									(PRELS der))[01;31m)[00m
							[01;31m(MF[00m
								(PX
									(APPR um)
									(NX acht uhr stattfindet))[01;31m)[00m[01;31m)[00m[01;36m)[00m)[01;31m)[00m[01;36m)[00m
			(ADVX dann)[01;31m)[00m
		[01;36m(ADVX[00m [01;31m(VC[00m
			(PTKVZ weg)[01;31m)[00m[01;36m)[00m))
Step:Different label
{'family': ['NX', 'NX'], 'auto preterminal span': (7, 12), 'span': (7, 12), 'subtrees': ['C', 'MF'], 'parent': 'NX', 'over_word': False, 'auto preterminals': ('PRELS', 'APPR', 'CARD', 'NN', 'VVFIN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('R', 'NX')}
(TOP
	(SIMPX
		(VF siebenundzwanzigster)
		(LK konnte)
		[01;31m(MF[00m
			(NX ich)
			[01;36m(PX[00m
				(ADVX naturlich)
				[01;31m(PX[00m
					(APPR nach)
					(NX
						(NX meinem zahnarzttermin)
						(NX
							[01;31m(C[00m
								(NX
									(PRELS der))[01;31m)[00m
							[01;31m(MF[00m
								(PX
									(APPR um)
									(NX acht uhr stattfindet))[01;31m)[00m))[01;31m)[00m[01;36m)[00m
			(ADVX dann)[01;31m)[00m
		[01;36m(ADVX[00m [01;31m(VC[00m
			(PTKVZ weg)[01;31m)[00m[01;36m)[00m))
Step:Single Word Phrase
{'family': ['VF', 'LK', 'MF', 'ADVX'], 'auto preterminal span': (13, 14), 'span': (13, 14), 'subtrees': ['PTKVZ'], 'parent': 'SIMPX', 'over_word': True, 'auto preterminals': ('PTKVZ',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VC', 'ADVX')}
(TOP
	(SIMPX
		(VF siebenundzwanzigster)
		(LK konnte)
		[01;31m(MF[00m
			(NX ich)
			[01;36m(PX[00m
				(ADVX naturlich)
				[01;31m(PX[00m
					(APPR nach)
					(NX
						(NX meinem zahnarzttermin)
						(NX
							[01;31m(C[00m
								(NX
									(PRELS der))[01;31m)[00m
							[01;31m(MF[00m
								(PX
									(APPR um)
									(NX acht uhr stattfindet))[01;31m)[00m))[01;31m)[00m[01;36m)[00m
			(ADVX dann)[01;31m)[00m
		(ADVX weg)))
Step:Modifier Attachment
{'new_parent': 'PX', 'new_family': ['ADVX', 'APPR', 'NX'], 'mover info': [('ADVX', (3, 4))], 'old_family': ['NX', 'ADVX', 'PX', 'ADVX'], 'start left siblings': ['NX'], 'auto preterminals': ('PPER', 'ADV', 'APPR', 'PPOSAT', 'NN', 'PRELS', 'APPR', 'CARD', 'NN', 'VVFIN', 'ADV'), 'start right siblings': ['PX', 'ADVX'], 'end left siblings': [], 'auto preterminal span': (2, 13), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['APPR', 'NX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(VF siebenundzwanzigster)
		(LK konnte)
		[01;31m(MF[00m
			(NX ich)
			(PX
				(ADVX naturlich)
				(APPR nach)
				(NX
					(NX meinem zahnarzttermin)
					(NX
						[01;31m(C[00m
							(NX
								(PRELS der))[01;31m)[00m
						[01;31m(MF[00m
							(PX
								(APPR um)
								(NX acht uhr stattfindet))[01;31m)[00m)))
			(ADVX dann)[01;31m)[00m
		(ADVX weg)))
Step:PP Attachment
{'subtrees': ['NX', 'PX', 'ADVX'], 'family': ['VF', 'LK', 'MF', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'VVFIN', 'PPER', 'ADV', 'APPR', 'PPOSAT', 'NN', 'PRELS', 'APPR', 'CARD', 'NN', 'VVFIN', 'ADV', 'PTKVZ'), 'right siblings': ['ADVX'], 'parent': 'SIMPX', 'auto preterminal span': (0, 14), 'span': (2, 13), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(SIMPX
		(VF siebenundzwanzigster)
		(LK konnte)
		(NX ich)
		(PX
			(ADVX naturlich)
			(APPR nach)
			(NX
				(NX meinem zahnarzttermin)
				(NX
					[01;31m(C[00m
						(NX
							(PRELS der))[01;31m)[00m
					[01;31m(MF[00m
						(PX
							(APPR um)
							(NX acht uhr stattfindet))[01;31m)[00m)))
		(ADVX dann)
		(ADVX weg)))
Step:Unary
{'subtrees': ['NX'], 'family': ['C', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PRELS', 'APPR', 'CARD', 'NN', 'VVFIN'), 'right siblings': ['MF'], 'parent': 'NX', 'auto preterminal span': (7, 12), 'span': (7, 8), 'left siblings': [], 'label': 'C', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(VF siebenundzwanzigster)
		(LK konnte)
		(NX ich)
		(PX
			(ADVX naturlich)
			(APPR nach)
			(NX
				(NX meinem zahnarzttermin)
				(NX
					(NX der)
					[01;31m(MF[00m
						(PX
							(APPR um)
							(NX acht uhr stattfindet))[01;31m)[00m)))
		(ADVX dann)
		(ADVX weg)))
Step:Unary
{'subtrees': ['PX'], 'family': ['NX', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PRELS', 'APPR', 'CARD', 'NN', 'VVFIN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (7, 12), 'span': (8, 12), 'left siblings': ['NX'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP siebenundzwanzigster konnte ich naturlich nach meinem zahnarzttermin der um acht uhr stattfindet dann weg)

Sentence 219:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Different label
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(NX[00m
	(TOP
		[01;31m(PX[00m
			(NX acht uhr morgens)
			(PX zum zahnarzt)[01;31m)[00m)[01;36m)[00m
Step:Different label
{'family': ['NX'], 'auto preterminal span': (0, 5), 'span': (0, 5), 'subtrees': ['NX', 'PX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('CARD', 'NN', 'ADV', 'APPRART', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('PX', 'NX')}
(TOP acht uhr morgens zum zahnarzt)

Sentence 220:
0 Initial errors
0 on fringe, 0 iterations

Sentence 221:
0 Initial errors
0 on fringe, 0 iterations

Sentence 222:
0 Initial errors
0 on fringe, 0 iterations

Sentence 223:
5 Initial errors
0 on fringe, 3 iterations
3 Error:NP Attachment
1 Error:UNSET add
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM okay)
	(ADVX dann)
	(DM ja)
	(DM nee)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF dann)
		(LK nehmen)
		[01;31m(MF[00m [01;33m(MF[00m
			(NX wir)
			(ADVX doch)
			[01;31m(NX[00m
				(NX siebenundzwanzigsten und achtundzwanzigsten) [01;33mMF) SIMPX)[00m
				(NX dienstag mittwoch)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:NP Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'NX'], 'mover info': [('NX', (11, 13))], 'old_family': ['NX', 'NX'], 'start left siblings': ['NX'], 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'ADV', 'NN', 'KON', 'NN', 'NN', 'NN'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (4, 13), 'movers': ['NX'], 'old_parent': 'NX', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	(DM okay)
	(ADVX dann)
	(DM ja)
	(DM nee)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK nehmen)
			(MF wir doch siebenundzwanzigsten und achtundzwanzigsten)[01;36m)[00m
		(NX dienstag mittwoch)[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'ADV', 'NN', 'KON', 'NN'), 'right siblings': [(NX (NX (NN dienstag)) (NX (NN mittwoch)))], 'left siblings': [], 'auto preterminal span': (4, 11), 'span': (4, 11), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM okay)
	(ADVX dann)
	(DM ja)
	(DM nee)
	[01;31m(SIMPX[00m
		(SIMPX dann nehmen wir doch siebenundzwanzigsten und achtundzwanzigsten)
		(NX dienstag mittwoch)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['SIMPX', 'NX'], 'family': ['DM', 'ADVX', 'DM', 'DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADV', 'PTKANT', 'PTKANT', 'ADV', 'VVFIN', 'PPER', 'ADV', 'NN', 'KON', 'NN', 'NN', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 13), 'span': (4, 13), 'left siblings': ['DM', 'ADVX', 'DM', 'DM'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP okay dann ja nee dann nehmen wir doch siebenundzwanzigsten und achtundzwanzigsten dienstag mittwoch)

Sentence 224:
0 Initial errors
0 on fringe, 0 iterations

Sentence 225:
1 Initial errors
0 on fringe, 1 iterations
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		(LK konnen)
		(MF wir um zehn uhr etwa)
		(VC wegfahren wegfliegen)[01;31m)[00m
	(PX je nachdem))
Step:UNSET remove
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['SIMPX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'APPR', 'CARD', 'NN', 'ADV', 'VVINF', 'VVINF', 'ADV', 'PROP'), 'right siblings': ['PX'], 'parent': 'TOP', 'auto preterminal span': (0, 10), 'span': (0, 8), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP konnen wir um zehn uhr etwa wegfahren wegfliegen je nachdem)

Sentence 226:
0 Initial errors
0 on fringe, 0 iterations

Sentence 227:
5 Initial errors
0 on fringe, 4 iterations
2 Error:Modifier Attachment
1 Error:UNSET add
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(C wenn)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(NX ich)
				(NX die verbindung) [01;33mSIMPX)[00m[01;36m)[00m
			[01;36m(DM[00m
				(ADVX
					(ADV also))[01;36m)[00m[01;31m)[00m[01;31m)[00m
	(SIMPX wir konnen zug oder flugzeug nehmen))
Step:Modifier Attachment
{'new_parent': 'SIMPX', 'new_family': ['C', 'MF', 'ADVX'], 'mover info': [('ADVX', (4, 5))], 'old_family': ['NX', 'NX', 'ADVX'], 'start left siblings': ['NX', 'NX'], 'auto preterminals': ('KOUS', 'PPER', 'ART', 'NN', 'ADV'), 'start right siblings': [], 'end left siblings': ['C', 'MF'], 'auto preterminal span': (0, 5), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(C wenn)
			(MF ich die verbindung)[01;36m)[00m
		[01;36m(DM[00m
			(ADVX
				(ADV also))[01;36m)[00m[01;31m)[00m
	(SIMPX wir konnen zug oder flugzeug nehmen))
Step:UNSET add
{'subtrees': ['C', 'MF'], 'family': ['SIMPX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ART', 'NN'), 'right siblings': [(ADVX (ADV also))], 'left siblings': [], 'auto preterminal span': (0, 4), 'span': (0, 4), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX wenn ich die verbindung)
		[01;36m(DM[00m
			(ADVX
				(ADV also))[01;36m)[00m[01;31m)[00m
	(SIMPX wir konnen zug oder flugzeug nehmen))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['SIMPX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV',), 'right siblings': [], 'left siblings': [(SIMPX (C (KOUS wenn)) (MF (NX (PPER ich)) (NX (ART die) (NN verbindung))))], 'auto preterminal span': (4, 5), 'span': (4, 5), 'parent': 'SIMPX', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX wenn ich die verbindung)
		(DM also)[01;31m)[00m
	(SIMPX wir konnen zug oder flugzeug nehmen))
Step:UNSET remove
{'subtrees': ['SIMPX', 'DM'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ART', 'NN', 'ADV', 'PPER', 'VMFIN', 'NN', 'KON', 'NN', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 11), 'span': (0, 5), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP wenn ich die verbindung also wir konnen zug oder flugzeug nehmen)

Sentence 228:
0 Initial errors
0 on fringe, 0 iterations

Sentence 229:
0 Initial errors
0 on fringe, 0 iterations

Sentence 230:
0 Initial errors
0 on fringe, 0 iterations

Sentence 231:
11 Initial errors
0 on fringe, 3 iterations
8 Error:Modifier Attachment
2 Error:Single Word Phrase
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX munchen hannover das sind knapp funf stunden)
	(DM ja)
	(DM also)
	[01;31m(DM[00m [01;33m(NX[00m
		(ADVX
			(ADV also))[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			[01;31m(NX[00m
				[01;31m(ADJX[00m
					[01;36m(NX[00m [01;31m(ADJX[00m
						(CARD vier)[01;31m)[00m [01;33mNX)[00m[01;36m)[00m
					[01;33m(SIMPX (VF (NX[00m (ADJX viereinhalb)[01;31m)[00m
				(NN stunden)[01;31m)[00m[01;31m)[00m [01;33mNX) VF)[00m
		(LK sehe)
		(MF ich)[01;31m)[00m) [01;33mSIMPX)[00m
Step:Modifier Attachment
{'new_parent': 'DM', 'new_family': ['ADVX', 'ADJX'], 'mover info': [('ADJX', (11, 12))], 'old_family': ['ADJX', 'ADJX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'NE', 'NE', 'PDS', 'VAFIN', 'ADV', 'CARD', 'NN', 'PTKANT', 'ADV', 'ADV', 'CARD', 'CARD', 'NN', 'VVFIN', 'PPER'), 'start right siblings': ['ADJX'], 'end left siblings': ['ADVX'], 'auto preterminal span': (0, 16), 'adding node already present': False, 'movers': ['ADJX'], 'old_parent': 'ADJX', 'POS confusion': ('CARD', 'CARD'), 'added and moved': True, 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'NX'}
(TOP
	(DM also)
	(SIMPX munchen hannover das sind knapp funf stunden)
	(DM ja)
	(DM also)
	(NX
		[01;31m(DM[00m
			(ADVX also)
			[01;36m(NX[00m [01;31m(ADJX[00m
				(CARD vier)[01;31m)[00m[01;36m)[00m[01;31m)[00m)
	(SIMPX viereinhalb stunden sehe ich))
Step:Single Word Phrase
{'family': ['ADVX', 'NX'], 'auto preterminal span': (11, 12), 'span': (11, 12), 'subtrees': ['CARD'], 'parent': 'DM', 'over_word': True, 'auto preterminals': ('CARD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'NX')}
(TOP
	(DM also)
	(SIMPX munchen hannover das sind knapp funf stunden)
	(DM ja)
	(DM also)
	(NX
		[01;31m(DM[00m
			(ADVX also)
			(NX vier)[01;31m)[00m)
	(SIMPX viereinhalb stunden sehe ich))
Step:Unary
{'subtrees': ['ADVX', 'NX'], 'family': ['DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'CARD'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (10, 12), 'span': (10, 12), 'left siblings': [], 'label': 'DM', 'classified_type': 'Unary', 'type': 'remove'}
(TOP also munchen hannover das sind knapp funf stunden ja also also vier viereinhalb stunden sehe ich)

Sentence 232:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(NX[00m
		(NX viereinhalb stunden fahrzeit)
		(PX nach hannover)[01;31m)[00m)
Step:Unary
{'subtrees': ['NX', 'PX'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'NN', 'NN', 'APPR', 'NE'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 5), 'span': (0, 5), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP viereinhalb stunden fahrzeit nach hannover)

Sentence 233:
4 Initial errors
0 on fringe, 2 iterations
3 Error:UNSET move
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK wird)
		[01;36m(PX[00m
			[01;36m(MF[00m
				[01;31m(MF[00m
					(ADJX
						(ADJD knapp))[01;31m)[00m
				[01;31m(NF[00m
					(PX
						(APPR ab)
						(NX zehn uhr))[01;31m)[00m[01;36m)[00m[01;36m)[00m))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['ADJX', 'NF'], 'mover info': [('NF', (2, 5))], 'old_family': ['LK', 'MF', 'NF'], 'start left siblings': ['LK', 'MF'], 'auto preterminals': ('VAFIN', 'ADJD', 'APPR', 'CARD', 'NN'), 'start right siblings': [], 'end left siblings': ['ADJX'], 'auto preterminal span': (0, 5), 'adding node already present': False, 'movers': ['NF'], 'old_parent': 'SIMPX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'PX'}
(TOP
	(SIMPX
		(LK wird)
		(PX
			(MF
				(ADJX knapp)
				[01;31m(NF[00m
					(PX
						(APPR ab)
						(NX zehn uhr))[01;31m)[00m))))
Step:Unary
{'subtrees': ['PX'], 'family': ['ADJX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJD', 'APPR', 'CARD', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (1, 5), 'span': (2, 5), 'left siblings': ['ADJX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP wird knapp ab zehn uhr)

Sentence 234:
3 Initial errors
0 on fringe, 3 iterations
1 Error:UNSET add
1 Error:NP Internal Structure
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(NX
		(ADVX knapp)
		[01;36m(NX[00m
			(ADJX zehn)
			(NN uhr)[01;36m)[00m)
	[01;31m(NX[00m
		(NX elf)
		(NX zwolf)
		(NX eins)
		(NX zwei)[01;31m)[00m
	[01;31m(SIMPX[00m
		(LK sind)
		(MF wir um drei uhr da)[01;31m)[00m)
Step:UNSET add
{'subtrees': ['ADJX', 'NN'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'NN'), 'right siblings': [], 'left siblings': [(ADVX (ADV knapp))], 'auto preterminal span': (1, 3), 'span': (1, 3), 'parent': 'NX', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(NX knapp zehn uhr)
	[01;31m(NX[00m
		(NX elf)
		(NX zwolf)
		(NX eins)
		(NX zwei)[01;31m)[00m
	[01;31m(SIMPX[00m
		(LK sind)
		(MF wir um drei uhr da)[01;31m)[00m)
Step:NP Internal Structure
{'subtrees': ['NX', 'NX', 'NX', 'NX'], 'family': ['NX', 'NX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'CARD', 'NN', 'CARD', 'CARD', 'CARD', 'CARD', 'VAFIN', 'PPER', 'APPR', 'CARD', 'NN', 'ADV'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 13), 'span': (3, 7), 'left siblings': ['NX'], 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'remove'}
(TOP
	(NX knapp zehn uhr)
	(NX elf)
	(NX zwolf)
	(NX eins)
	(NX zwei)
	[01;31m(SIMPX[00m
		(LK sind)
		(MF wir um drei uhr da)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['LK', 'MF'], 'family': ['NX', 'NX', 'NX', 'NX', 'NX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'CARD', 'NN', 'CARD', 'CARD', 'CARD', 'CARD', 'VAFIN', 'PPER', 'APPR', 'CARD', 'NN', 'ADV'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 13), 'span': (7, 13), 'left siblings': ['NX', 'NX', 'NX', 'NX', 'NX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP knapp zehn uhr elf zwolf eins zwei sind wir um drei uhr da)

Sentence 235:
5 Initial errors
0 on fringe, 2 iterations
4 Error:NP Attachment
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			(LK genugt)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX
					(PDS das))[01;31m)[00m[01;31m)[00m
		[01;31m(NX[00m
			(NX ein halber tag)
			(ADVX dann)
			(ADVX noch)[01;31m)[00m) [01;33mMF)[00m[01;36m)[00m
Step:NP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'NX'], 'mover info': [('NX', (2, 7))], 'old_family': ['SIMPX', 'NX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('VVFIN', 'PDS', 'ART', 'ADJA', 'NN', 'ADV', 'ADV'), 'start right siblings': [], 'end left siblings': ['NX'], 'auto preterminal span': (0, 7), 'movers': ['NX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(LK genugt)
		(MF
			(NX das)
			[01;31m(NX[00m
				(NX ein halber tag)
				(ADVX dann)
				(ADVX noch)[01;31m)[00m)))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX', 'ADVX'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'ART', 'ADJA', 'NN', 'ADV', 'ADV'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (1, 7), 'span': (2, 7), 'left siblings': ['NX'], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP genugt das ein halber tag dann noch)

Sentence 236:
5 Initial errors
0 on fringe, 4 iterations
2 Error:Single Word Phrase
1 Error:Clause Attachment
1 Error:Clause Attachment
1 Error:NP Internal Structure
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(SIMPX[00m
		(SIMPX das muste also)
		(SIMPX fur den ersten halben tag muste das eigentlich reichen)[01;36m)[00m
	(DM also)
	(NX die)
	[01;36m(SIMPX[00m
		(SIMPX
			(VF dann)
			(LK quetschen)
			(MF
				(NX wir)
				[01;36m(NX[00m
					(NX die termine)
					(NX ein bischen)[01;36m)[00m)
			(VC zusammen))
		(DM also)
		(SIMPX
			(VF da)
			(LK mussen)
			(MF
				(NX die leute)
				(ADVX jetzt)
				(ADVX auch)
				(ADVX mal)
				(ADJX
					[01;36m(NX[00m [01;31m(ADVX[00m
						(ADV etwas)[01;31m)[00m[01;36m)[00m
					(ADJD variabel)))
			(VC sein))[01;36m)[00m
	(SIMPX ich meine flexibel))
Step:Single Word Phrase
{'family': ['NX', 'ADJD'], 'auto preterminal span': (30, 31), 'span': (30, 31), 'subtrees': ['ADV'], 'parent': 'ADJX', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'NX')}
(TOP
	[01;36m(SIMPX[00m
		(SIMPX das muste also)
		(SIMPX fur den ersten halben tag muste das eigentlich reichen)[01;36m)[00m
	(DM also)
	(NX die)
	[01;36m(SIMPX[00m
		(SIMPX
			(VF dann)
			(LK quetschen)
			(MF
				(NX wir)
				[01;36m(NX[00m
					(NX die termine)
					(NX ein bischen)[01;36m)[00m)
			(VC zusammen))
		(DM also)
		(SIMPX da mussen die leute jetzt auch mal etwas variabel sein)[01;36m)[00m
	(SIMPX ich meine flexibel))
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX', 'DM', 'NX', 'SIMPX', 'DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VMFIN', 'ADV', 'APPR', 'ART', 'ADJA', 'ADJA', 'NN', 'VMFIN', 'PDS', 'ADV', 'VVINF'), 'right siblings': [(DM (ADVX (ADV also))), (NX (PDS die)), (SIMPX (VF (ADVX (ADV dann))) (LK (VXFIN (VVFIN quetschen))) (MF (NX (PPER wir)) (NX (ART die) (NN termine)) (NX (ART ein) (PIS bischen))) (VC (PTKVZ zusammen))), (DM (ADVX (ADV also))), (SIMPX (VF (ADVX (ADV da))) (LK (VXFIN (VMFIN mussen))) (MF (NX (ART die) (NN leute)) (ADVX (ADV jetzt)) (ADVX (ADV auch)) (ADVX (ADV mal)) (ADJX (NX (ADV etwas)) (ADJD variabel))) (VC (VXINF (VAINF sein)))), (SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VVFIN meine))) (MF (ADJX (ADJD flexibel))))], 'left siblings': [], 'auto preterminal span': (0, 12), 'span': (0, 12), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(SIMPX das muste also fur den ersten halben tag muste das eigentlich reichen)
	(DM also)
	(NX die)
	[01;36m(SIMPX[00m
		(SIMPX
			(VF dann)
			(LK quetschen)
			(MF
				(NX wir)
				[01;36m(NX[00m
					(NX die termine)
					(NX ein bischen)[01;36m)[00m)
			(VC zusammen))
		(DM also)
		(SIMPX da mussen die leute jetzt auch mal etwas variabel sein)[01;36m)[00m
	(SIMPX ich meine flexibel))
Step:Clause Attachment
{'subtrees': ['SIMPX', 'DM', 'SIMPX'], 'family': ['SIMPX', 'DM', 'NX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'ART', 'NN', 'ART', 'PIS', 'PTKVZ', 'ADV', 'ADV', 'VMFIN', 'ART', 'NN', 'ADV', 'ADV', 'ADV', 'ADV', 'ADJD', 'VAINF'), 'right siblings': [(SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VVFIN meine))) (MF (ADJX (ADJD flexibel))))], 'left siblings': [(SIMPX (SIMPX (VF (NX (PDS das))) (LK (VXFIN (VMFIN muste))) (MF (ADVX (ADV also)))) (SIMPX (VF (PX (APPR fur) (NX (ART den) (ADJX (ADJA ersten)) (ADJX (ADJA halben)) (NN tag)))) (LK (VXFIN (VMFIN muste))) (MF (NX (PDS das)) (ADVX (ADV eigentlich))) (VC (VXINF (VVINF reichen))))), (DM (ADVX (ADV also))), (NX (PDS die))], 'auto preterminal span': (14, 33), 'span': (14, 33), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(SIMPX das muste also fur den ersten halben tag muste das eigentlich reichen)
	(DM also)
	(NX die)
	(SIMPX
		(SIMPX
			(VF dann)
			(LK quetschen)
			(MF
				(NX wir)
				[01;36m(NX[00m
					(NX die termine)
					(NX ein bischen)[01;36m)[00m)
			(VC zusammen))
		(DM also)
		(SIMPX da mussen die leute jetzt auch mal etwas variabel sein))
	(SIMPX ich meine flexibel))
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'ART', 'PIS'), 'right siblings': [], 'left siblings': [(NX (PPER wir))], 'auto preterminal span': (17, 21), 'span': (17, 21), 'parent': 'MF', 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'add'}
(TOP das muste also fur den ersten halben tag muste das eigentlich reichen also die dann quetschen wir die termine ein bischen zusammen also da mussen die leute jetzt auch mal etwas variabel sein ich meine flexibel)

Sentence 237:
0 Initial errors
0 on fringe, 0 iterations

Sentence 238:
0 Initial errors
0 on fringe, 0 iterations

Sentence 239:
12 Initial errors
0 on fringe, 10 iterations
2 Error:Different label
2 Error:Different label
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:Clause Attachment
1 Error:Clause Attachment
1 Error:UNSET remove
1 Error:Clause Attachment
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM okay)
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(NX
				(ADJX siebenundzwanzigster)
				(NN januar))[01;31m)[00m
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKMVC[00m
				(LK fahren)
				(MF wir)
				(VC los)[01;31m)[00m
			(APPR um)
			[01;31m(LKM[00m
				(LK nehmen)
				[01;33m(MF[00m (MF den ice um zehn uhr)[01;31m)[00m
			[01;36m(SIMPX[00m [01;31m(LKM[00m
				(LK sind)
				(MF um funfzehn uhr in hannover)[01;31m)[00m [01;33mMF)[00m[01;36m)[00m
			[01;36m(SIMPX[00m [01;31m(LKM[00m
				(LK nehmen)
				(MF da ein taxi)[01;31m)[00m[01;36m)[00m
			(KON und)
			(KON und)
			(KON und)
			[01;33m(LKMVC[00m (LKMVC kommen rechtzeitig an)[01;31m)[00m[01;31m)[00m
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK wurden)
		(MF
			(NX wir)
			[01;31m(PX[00m
				(PX am achtundzwanzigsten)
				(ADVX abends)[01;31m)[00m
			(ADVX einfach)
			(ADVX wieder))
		(VC zuruckfahren))) [01;33mLKMVC)[00m
Step:Different label
{'family': ['LKMVC', 'APPR', 'LKM', 'SIMPX', 'LKM', 'KON', 'KON', 'KON', 'LKMVC'], 'auto preterminal span': (14, 20), 'span': (14, 20), 'subtrees': ['LK', 'MF'], 'parent': 'FKOORD', 'over_word': False, 'auto preterminals': ('VAFIN', 'APPR', 'CARD', 'NN', 'APPR', 'NE'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('LKM', 'SIMPX')}
(TOP
	(DM okay)
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(NX
				(ADJX siebenundzwanzigster)
				(NN januar))[01;31m)[00m
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKMVC[00m
				(LK fahren)
				(MF wir)
				(VC los)[01;31m)[00m
			(APPR um)
			[01;31m(LKM[00m
				(LK nehmen)
				[01;33m(MF[00m (MF den ice um zehn uhr)[01;31m)[00m
			(SIMPX sind um funfzehn uhr in hannover) [01;33mMF)[00m
			[01;36m(SIMPX[00m [01;31m(LKM[00m
				(LK nehmen)
				(MF da ein taxi)[01;31m)[00m[01;36m)[00m
			(KON und)
			(KON und)
			(KON und)
			[01;33m(LKMVC[00m (LKMVC kommen rechtzeitig an)[01;31m)[00m[01;31m)[00m
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK wurden)
		(MF
			(NX wir)
			[01;31m(PX[00m
				(PX am achtundzwanzigsten)
				(ADVX abends)[01;31m)[00m
			(ADVX einfach)
			(ADVX wieder))
		(VC zuruckfahren))) [01;33mLKMVC)[00m
Step:Different label
{'family': ['LKMVC', 'APPR', 'LKM', 'SIMPX', 'SIMPX', 'KON', 'KON', 'KON', 'LKMVC'], 'auto preterminal span': (20, 24), 'span': (20, 24), 'subtrees': ['LK', 'MF'], 'parent': 'FKOORD', 'over_word': False, 'auto preterminals': ('VVFIN', 'ADV', 'ART', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('LKM', 'SIMPX')}
(TOP
	(DM okay)
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(NX
				(ADJX siebenundzwanzigster)
				(NN januar))[01;31m)[00m
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKMVC[00m
				(LK fahren)
				(MF wir)
				(VC los)[01;31m)[00m
			(APPR um)
			[01;31m(LKM[00m
				(LK nehmen)
				[01;33m(MF[00m (MF den ice um zehn uhr)[01;31m)[00m
			(SIMPX sind um funfzehn uhr in hannover) [01;33mMF)[00m
			(SIMPX nehmen da ein taxi)
			(KON und)
			(KON und)
			(KON und)
			[01;33m(LKMVC[00m (LKMVC kommen rechtzeitig an)[01;31m)[00m[01;31m)[00m
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK wurden)
		(MF
			(NX wir)
			[01;31m(PX[00m
				(PX am achtundzwanzigsten)
				(ADVX abends)[01;31m)[00m
			(ADVX einfach)
			(ADVX wieder))
		(VC zuruckfahren))) [01;33mLKMVC)[00m
Step:Unary
{'subtrees': ['NX'], 'family': ['LV', 'VF', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJA', 'NN', 'ADV', 'VVFIN', 'PPER', 'PTKVZ', 'APPR', 'VVFIN', 'ART', 'NE', 'APPR', 'CARD', 'NN', 'VAFIN', 'APPR', 'CARD', 'NN', 'APPR', 'NE', 'VVFIN', 'ADV', 'ART', 'NN', 'KON', 'KON', 'KON', 'VVFIN', 'ADJD', 'PTKVZ'), 'right siblings': ['VF', 'FKOORD'], 'parent': 'SIMPX', 'auto preterminal span': (1, 30), 'span': (1, 3), 'left siblings': [], 'label': 'LV', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM okay)
	[01;31m(SIMPX[00m
		(NX siebenundzwanzigster januar)
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKMVC[00m
				(LK fahren)
				(MF wir)
				(VC los)[01;31m)[00m
			(APPR um)
			[01;31m(LKM[00m
				(LK nehmen)
				[01;33m(MF[00m (MF den ice um zehn uhr)[01;31m)[00m
			(SIMPX sind um funfzehn uhr in hannover) [01;33mMF)[00m
			(SIMPX nehmen da ein taxi)
			(KON und)
			(KON und)
			(KON und)
			[01;33m(LKMVC[00m (LKMVC kommen rechtzeitig an)[01;31m)[00m[01;31m)[00m
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK wurden)
		(MF
			(NX wir)
			[01;31m(PX[00m
				(PX am achtundzwanzigsten)
				(ADVX abends)[01;31m)[00m
			(ADVX einfach)
			(ADVX wieder))
		(VC zuruckfahren))) [01;33mLKMVC)[00m
Step:UNSET remove
{'subtrees': ['NX', 'VF', 'FKOORD'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADJA', 'NN', 'ADV', 'VVFIN', 'PPER', 'PTKVZ', 'APPR', 'VVFIN', 'ART', 'NE', 'APPR', 'CARD', 'NN', 'VAFIN', 'APPR', 'CARD', 'NN', 'APPR', 'NE', 'VVFIN', 'ADV', 'ART', 'NN', 'KON', 'KON', 'KON', 'VVFIN', 'ADJD', 'PTKVZ', 'KON', 'ADV', 'VAFIN', 'PPER', 'APPRART', 'NN', 'ADV', 'ADV', 'ADV', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 40), 'span': (1, 30), 'left siblings': ['DM'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM okay)
	(NX siebenundzwanzigster januar)
	(VF dann)
	[01;31m(FKOORD[00m
		[01;31m(LKMVC[00m
			(LK fahren)
			(MF wir)
			(VC los)[01;31m)[00m
		(APPR um)
		[01;31m(LKM[00m
			(LK nehmen)
			[01;33m(MF[00m (MF den ice um zehn uhr)[01;31m)[00m
		(SIMPX sind um funfzehn uhr in hannover) [01;33mMF)[00m
		(SIMPX nehmen da ein taxi)
		(KON und)
		(KON und)
		(KON und)
		[01;33m(LKMVC[00m (LKMVC kommen rechtzeitig an)[01;31m)[00m
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK wurden)
		(MF
			(NX wir)
			[01;31m(PX[00m
				(PX am achtundzwanzigsten)
				(ADVX abends)[01;31m)[00m
			(ADVX einfach)
			(ADVX wieder))
		(VC zuruckfahren))) [01;33mLKMVC)[00m
Step:UNSET remove
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['LKMVC', 'APPR', 'LKM', 'SIMPX', 'SIMPX', 'KON', 'KON', 'KON', 'LKMVC'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'PTKVZ', 'APPR', 'VVFIN', 'ART', 'NE', 'APPR', 'CARD', 'NN', 'VAFIN', 'APPR', 'CARD', 'NN', 'APPR', 'NE', 'VVFIN', 'ADV', 'ART', 'NN', 'KON', 'KON', 'KON', 'VVFIN', 'ADJD', 'PTKVZ'), 'right siblings': ['APPR', 'LKM', 'SIMPX', 'SIMPX', 'KON', 'KON', 'KON', 'LKMVC'], 'parent': 'FKOORD', 'auto preterminal span': (4, 30), 'span': (4, 7), 'left siblings': [], 'label': 'LKMVC', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM okay)
	(NX siebenundzwanzigster januar)
	(VF dann)
	[01;31m(FKOORD[00m
		(LK fahren)
		(MF wir)
		(VC los)
		(APPR um)
		[01;31m(LKM[00m
			(LK nehmen)
			[01;33m(MF[00m (MF den ice um zehn uhr)[01;31m)[00m
		(SIMPX sind um funfzehn uhr in hannover) [01;33mMF)[00m
		(SIMPX nehmen da ein taxi)
		(KON und)
		(KON und)
		(KON und)
		[01;33m(LKMVC[00m (LKMVC kommen rechtzeitig an)[01;31m)[00m
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK wurden)
		(MF
			(NX wir)
			[01;31m(PX[00m
				(PX am achtundzwanzigsten)
				(ADVX abends)[01;31m)[00m
			(ADVX einfach)
			(ADVX wieder))
		(VC zuruckfahren))) [01;33mLKMVC)[00m
Step:Clause Attachment
{'subtrees': ['LK', 'MF', 'VC', 'APPR', 'LKM', 'SIMPX', 'SIMPX', 'KON', 'KON', 'KON', 'LKMVC'], 'family': ['DM', 'NX', 'VF', 'FKOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADJA', 'NN', 'ADV', 'VVFIN', 'PPER', 'PTKVZ', 'APPR', 'VVFIN', 'ART', 'NE', 'APPR', 'CARD', 'NN', 'VAFIN', 'APPR', 'CARD', 'NN', 'APPR', 'NE', 'VVFIN', 'ADV', 'ART', 'NN', 'KON', 'KON', 'KON', 'VVFIN', 'ADJD', 'PTKVZ', 'KON', 'ADV', 'VAFIN', 'PPER', 'APPRART', 'NN', 'ADV', 'ADV', 'ADV', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 40), 'span': (4, 30), 'left siblings': ['DM', 'NX', 'VF'], 'label': 'FKOORD', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(DM okay)
	(NX siebenundzwanzigster januar)
	(VF dann)
	(LK fahren)
	(MF wir)
	(VC los)
	(APPR um)
	[01;31m(LKM[00m
		(LK nehmen)
		[01;33m(MF[00m (MF den ice um zehn uhr)[01;31m)[00m
	(SIMPX sind um funfzehn uhr in hannover) [01;33mMF)[00m
	(SIMPX nehmen da ein taxi)
	(KON und)
	(KON und)
	(KON und)
	[01;36m(LKMVC[00m
		(LKMVC kommen rechtzeitig an)
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK wurden)
			(MF
				(NX wir)
				[01;31m(PX[00m
					(PX am achtundzwanzigsten)
					(ADVX abends)[01;31m)[00m
				(ADVX einfach)
				(ADVX wieder))
			(VC zuruckfahren))[01;36m)[00m)
Step:Clause Attachment
{'subtrees': ['LKMVC', 'SIMPX'], 'family': ['DM', 'NX', 'VF', 'LK', 'MF', 'VC', 'APPR', 'LKM', 'SIMPX', 'SIMPX', 'KON', 'KON', 'KON', 'LKMVC'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'ADJD', 'PTKVZ', 'KON', 'ADV', 'VAFIN', 'PPER', 'APPRART', 'NN', 'ADV', 'ADV', 'ADV', 'VVINF'), 'right siblings': [], 'left siblings': [(DM (ITJ okay)), (NX (ADJX (ADJA siebenundzwanzigster)) (NN januar)), (VF (ADVX (ADV dann))), (LK (VXFIN (VVFIN fahren))), (MF (NX (PPER wir))), (VC (PTKVZ los)), (APPR um), (LKM (LK (VXFIN (VVFIN nehmen))) (MF (NX (ART den) (NE ice)) (PX (APPR um) (NX (ADJX (CARD zehn)) (NN uhr))))), (SIMPX (LK (VXFIN (VAFIN sind))) (MF (PX (APPR um) (NX (ADJX (CARD funfzehn)) (NN uhr))) (PX (APPR in) (NX (NE hannover))))), (SIMPX (LK (VXFIN (VVFIN nehmen))) (MF (ADVX (ADV da)) (NX (ART ein) (NN taxi)))), (KON und), (KON und), (KON und)], 'auto preterminal span': (27, 40), 'span': (27, 40), 'parent': 'TOP', 'label': 'LKMVC', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(DM okay)
	(NX siebenundzwanzigster januar)
	(VF dann)
	(LK fahren)
	(MF wir)
	(VC los)
	(APPR um)
	[01;31m(LKM[00m
		(LK nehmen)
		[01;33m(MF[00m (MF den ice um zehn uhr)[01;31m)[00m
	(SIMPX sind um funfzehn uhr in hannover) [01;33mMF)[00m
	(SIMPX nehmen da ein taxi)
	(KON und)
	(KON und)
	(KON und)
	(LKMVC
		(LKMVC kommen rechtzeitig an)
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK wurden)
			(MF
				(NX wir)
				[01;31m(PX[00m
					(PX am achtundzwanzigsten)
					(ADVX abends)[01;31m)[00m
				(ADVX einfach)
				(ADVX wieder))
			(VC zuruckfahren))))
Step:UNSET remove
{'subtrees': ['LK', 'MF'], 'family': ['DM', 'NX', 'VF', 'LK', 'MF', 'VC', 'APPR', 'LKM', 'SIMPX', 'SIMPX', 'KON', 'KON', 'KON', 'LKMVC'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADJA', 'NN', 'ADV', 'VVFIN', 'PPER', 'PTKVZ', 'APPR', 'VVFIN', 'ART', 'NE', 'APPR', 'CARD', 'NN', 'VAFIN', 'APPR', 'CARD', 'NN', 'APPR', 'NE', 'VVFIN', 'ADV', 'ART', 'NN', 'KON', 'KON', 'KON', 'VVFIN', 'ADJD', 'PTKVZ', 'KON', 'ADV', 'VAFIN', 'PPER', 'APPRART', 'NN', 'ADV', 'ADV', 'ADV', 'VVINF'), 'right siblings': ['SIMPX', 'SIMPX', 'KON', 'KON', 'KON', 'LKMVC'], 'parent': 'TOP', 'auto preterminal span': (0, 40), 'span': (8, 14), 'left siblings': ['DM', 'NX', 'VF', 'LK', 'MF', 'VC', 'APPR'], 'label': 'LKM', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM okay)
	(NX siebenundzwanzigster januar)
	(VF dann)
	(LK fahren)
	(MF wir)
	(VC los)
	(APPR um)
	(LK nehmen)
	[01;36m(MF[00m
		(MF den ice um zehn uhr)
		(SIMPX sind um funfzehn uhr in hannover)[01;36m)[00m
	(SIMPX nehmen da ein taxi)
	(KON und)
	(KON und)
	(KON und)
	(LKMVC
		(LKMVC kommen rechtzeitig an)
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK wurden)
			(MF
				(NX wir)
				[01;31m(PX[00m
					(PX am achtundzwanzigsten)
					(ADVX abends)[01;31m)[00m
				(ADVX einfach)
				(ADVX wieder))
			(VC zuruckfahren))))
Step:Clause Attachment
{'subtrees': ['MF', 'SIMPX'], 'family': ['DM', 'NX', 'VF', 'LK', 'MF', 'VC', 'APPR', 'LK', 'MF', 'SIMPX', 'KON', 'KON', 'KON', 'LKMVC'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NE', 'APPR', 'CARD', 'NN', 'VAFIN', 'APPR', 'CARD', 'NN', 'APPR', 'NE'), 'right siblings': [(SIMPX (LK (VXFIN (VVFIN nehmen))) (MF (ADVX (ADV da)) (NX (ART ein) (NN taxi)))), (KON und), (KON und), (KON und), (LKMVC (LKMVC (LK (VXFIN (VVFIN kommen))) (MF (ADJX (ADJD rechtzeitig))) (VC (PTKVZ an))) (SIMPX (KOORD (KON und)) (VF (ADVX (ADV dann))) (LK (VXFIN (VAFIN wurden))) (MF (NX (PPER wir)) (PX (PX (APPRART am) (NX (NN achtundzwanzigsten))) (ADVX (ADV abends))) (ADVX (ADV einfach)) (ADVX (ADV wieder))) (VC (VXINF (VVINF zuruckfahren)))))], 'left siblings': [(DM (ITJ okay)), (NX (ADJX (ADJA siebenundzwanzigster)) (NN januar)), (VF (ADVX (ADV dann))), (LK (VXFIN (VVFIN fahren))), (MF (NX (PPER wir))), (VC (PTKVZ los)), (APPR um), (LK (VXFIN (VVFIN nehmen)))], 'auto preterminal span': (9, 20), 'span': (9, 20), 'parent': 'TOP', 'label': 'MF', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(DM okay)
	(NX siebenundzwanzigster januar)
	(VF dann)
	(LK fahren)
	(MF wir)
	(VC los)
	(APPR um)
	(LK nehmen)
	(MF den ice um zehn uhr sind um funfzehn uhr in hannover)
	(SIMPX nehmen da ein taxi)
	(KON und)
	(KON und)
	(KON und)
	(LKMVC
		(LKMVC kommen rechtzeitig an)
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK wurden)
			(MF
				(NX wir)
				[01;31m(PX[00m
					(PX am achtundzwanzigsten)
					(ADVX abends)[01;31m)[00m
				(ADVX einfach)
				(ADVX wieder))
			(VC zuruckfahren))))
Step:Modifier Attachment
{'subtrees': ['PX', 'ADVX'], 'family': ['NX', 'PX', 'ADVX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'APPRART', 'NN', 'ADV', 'ADV', 'ADV'), 'right siblings': ['ADVX', 'ADVX'], 'parent': 'MF', 'auto preterminal span': (33, 39), 'span': (34, 37), 'left siblings': ['NX'], 'label': 'PX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP okay siebenundzwanzigster januar dann fahren wir los um nehmen den ice um zehn uhr sind um funfzehn uhr in hannover nehmen da ein taxi und und und kommen rechtzeitig an und dann wurden wir am achtundzwanzigsten abends einfach wieder zuruckfahren)

Sentence 240:
0 Initial errors
0 on fringe, 0 iterations

Sentence 241:
19 Initial errors
0 on fringe, 10 iterations
3 Error:Modifier Attachment
3 Error:PP Attachment
2 Error:Modifier Attachment
2 Error:PP Attachment
2 Error:PP Attachment
1 Error:UNSET remove
1 Error:Co-ordination
3 Error:UNSET move
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		(VF da)
		(LK gibt)
		[01;31m(MF[00m [01;33m(MF[00m
			(NX es)
			(NX einen flug)
			[01;33m(NX (NX (ADVX[00m (NX siebzehn uhr zwanzig)[01;31m)[00m[01;31m)[00m
	[01;31m(ADJX[00m
		(ADVX sogar) [01;33mADVX)[00m
		[01;31m(ADJX[00m
			(ADJX stundlich) [01;33mNX)[00m
			(PX bis einundzwanzig uhr zwanzig)[01;31m)[00m[01;31m)[00m [01;33mNX) MF)[00m
	(SIMPX
		(VF das)
		(LK heist)
		(NF [01;33m(SIMPX (NF[00m
			(SIMPX
				(VF wir)
				[01;31m(FKOORD[00m
					[01;31m(LKMVC[00m
						(LK konnen)
						[01;31m(MF[00m
							[01;36m(MF[00m
								(ADVX auch)
								(ADVX noch)
								(PX um zwanzig nach acht) [01;33mNF) SIMPX)[00m[01;36m)[00m
							[01;31m(SIMPX[00m [01;33m(FKOORD (LKMVC[00m
								(LK konnen)
								[01;31m(MF[00m [01;33m(MF[00m
									(NX
										(PPER wir))[01;31m)[00m[01;31m)[00m
							(PX in hannover)[01;31m)[00m [01;33mMF)[00m
						(VC abfliegen)[01;31m)[00m [01;33mLKMVC)[00m
					(KON und)
					(LKM sind in siebzig minuten in munchen)[01;31m)[00m)))) [01;33mFKOORD)[00m
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'NX', 'ADJX'], 'mover info': [('ADJX', (8, 14))], 'old_family': ['SIMPX', 'ADJX', 'SIMPX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'ART', 'NN', 'CARD', 'NN', 'CARD', 'ADV', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD', 'PDS', 'VVFIN', 'PPER', 'VMFIN', 'ADV', 'ADV', 'APPR', 'CARD', 'APPR', 'CARD', 'VMFIN', 'PPER', 'APPR', 'NE', 'VVINF', 'KON', 'VAFIN', 'APPR', 'CARD', 'NN', 'APPR', 'NE'), 'start right siblings': ['SIMPX'], 'end left siblings': ['NX', 'NX', 'NX'], 'auto preterminal span': (0, 36), 'adding node already present': False, 'movers': ['ADJX'], 'old_parent': 'TOP', 'added and moved': True, 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'MF'}
(TOP
	[01;31m(SIMPX[00m
		(VF da)
		(LK gibt)
		(MF
			(NX es)
			(NX einen flug)
			(NX [01;33m(NX (ADVX[00m
				(NX siebzehn uhr zwanzig)
				[01;31m(ADJX[00m
					(ADVX sogar) [01;33mADVX)[00m
					[01;31m(ADJX[00m
						(ADJX stundlich) [01;33mNX)[00m
						(PX bis einundzwanzig uhr zwanzig)[01;31m)[00m[01;31m)[00m))[01;31m)[00m
	(SIMPX
		(VF das)
		(LK heist)
		(NF [01;33m(SIMPX (NF[00m
			(SIMPX
				(VF wir)
				[01;31m(FKOORD[00m
					[01;31m(LKMVC[00m
						(LK konnen)
						[01;31m(MF[00m
							[01;36m(MF[00m
								(ADVX auch)
								(ADVX noch)
								(PX um zwanzig nach acht) [01;33mNF) SIMPX)[00m[01;36m)[00m
							[01;31m(SIMPX[00m [01;33m(FKOORD (LKMVC[00m
								(LK konnen)
								[01;31m(MF[00m [01;33m(MF[00m
									(NX
										(PPER wir))[01;31m)[00m[01;31m)[00m
							(PX in hannover)[01;31m)[00m [01;33mMF)[00m
						(VC abfliegen)[01;31m)[00m [01;33mLKMVC)[00m
					(KON und)
					(LKM sind in siebzig minuten in munchen)[01;31m)[00m)))) [01;33mFKOORD)[00m
Step:PP Attachment
{'new_parent': 'LKMVC', 'new_family': ['LK', 'MF', 'SIMPX', 'PX', 'VC'], 'mover info': [('SIMPX', (24, 26)), ('PX', (26, 28))], 'old_family': ['ADVX', 'ADVX', 'PX', 'SIMPX', 'PX'], 'start left siblings': ['ADVX', 'ADVX', 'PX'], 'auto preterminals': ('VMFIN', 'ADV', 'ADV', 'APPR', 'CARD', 'APPR', 'CARD', 'VMFIN', 'PPER', 'APPR', 'NE', 'VVINF'), 'start right siblings': [], 'end left siblings': ['LK', 'MF'], 'auto preterminal span': (17, 29), 'adding node already present': False, 'movers': ['SIMPX', 'PX'], 'old_parent': 'MF', 'added and moved': True, 'end right siblings': ['VC'], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'LKMVC'}
(TOP
	[01;31m(SIMPX[00m
		(VF da)
		(LK gibt)
		(MF
			(NX es)
			(NX einen flug)
			(NX [01;33m(NX (ADVX[00m
				(NX siebzehn uhr zwanzig)
				[01;31m(ADJX[00m
					(ADVX sogar) [01;33mADVX)[00m
					[01;31m(ADJX[00m
						(ADJX stundlich) [01;33mNX)[00m
						(PX bis einundzwanzig uhr zwanzig)[01;31m)[00m[01;31m)[00m))[01;31m)[00m
	(SIMPX
		(VF das)
		(LK heist)
		(NF [01;33m(SIMPX (NF[00m
			(SIMPX
				(VF wir)
				[01;31m(FKOORD[00m
					[01;31m(LKMVC[00m
						(LK konnen)
						(MF auch noch um zwanzig nach acht) [01;33mNF) SIMPX)[00m
						(LKMVC [01;33m(FKOORD[00m
							[01;31m(SIMPX[00m
								(LK konnen)
								[01;31m(MF[00m [01;33m(MF[00m
									(NX
										(PPER wir))[01;31m)[00m[01;31m)[00m
							(PX in hannover) [01;33mMF)[00m
							(VC abfliegen))[01;31m)[00m
					(KON und)
					(LKM sind in siebzig minuten in munchen)[01;31m)[00m)))) [01;33mFKOORD)[00m
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'ADVX', 'ADJX'], 'mover info': [('ADVX', (8, 9))], 'old_family': ['ADVX', 'ADJX'], 'start left siblings': [], 'auto preterminals': ('CARD', 'NN', 'CARD', 'ADV', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD'), 'start right siblings': ['ADJX'], 'end left siblings': ['NX'], 'auto preterminal span': (5, 14), 'adding node already present': False, 'movers': ['ADVX'], 'old_parent': 'ADJX', 'POS confusion': ('ADV', 'ADV'), 'added and moved': True, 'end right siblings': ['ADJX'], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'ADVX'}
(TOP
	[01;31m(SIMPX[00m
		(VF da)
		(LK gibt)
		(MF
			(NX es)
			(NX einen flug)
			(NX [01;33m(NX[00m
				(ADVX siebzehn uhr zwanzig sogar)
				[01;31m(ADJX[00m
					(ADJX stundlich) [01;33mNX)[00m
					(PX bis einundzwanzig uhr zwanzig)[01;31m)[00m))[01;31m)[00m
	(SIMPX
		(VF das)
		(LK heist)
		(NF [01;33m(SIMPX (NF[00m
			(SIMPX
				(VF wir)
				[01;31m(FKOORD[00m
					[01;31m(LKMVC[00m
						(LK konnen)
						(MF auch noch um zwanzig nach acht) [01;33mNF) SIMPX)[00m
						(LKMVC [01;33m(FKOORD[00m
							[01;31m(SIMPX[00m
								(LK konnen)
								[01;31m(MF[00m [01;33m(MF[00m
									(NX
										(PPER wir))[01;31m)[00m[01;31m)[00m
							(PX in hannover) [01;33mMF)[00m
							(VC abfliegen))[01;31m)[00m
					(KON und)
					(LKM sind in siebzig minuten in munchen)[01;31m)[00m)))) [01;33mFKOORD)[00m
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'NX', 'PX'], 'mover info': [('PX', (10, 14))], 'old_family': ['ADJX', 'PX'], 'start left siblings': ['ADJX'], 'auto preterminals': ('PPER', 'ART', 'NN', 'CARD', 'NN', 'CARD', 'ADV', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD'), 'start right siblings': [], 'end left siblings': ['NX', 'NX', 'NX'], 'auto preterminal span': (2, 14), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'ADJX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'NX'}
(TOP
	[01;31m(SIMPX[00m
		(VF da)
		(LK gibt)
		(MF es einen flug siebzehn uhr zwanzig sogar stundlich bis einundzwanzig uhr zwanzig)[01;31m)[00m
	(SIMPX
		(VF das)
		(LK heist)
		(NF [01;33m(SIMPX (NF[00m
			(SIMPX
				(VF wir)
				[01;31m(FKOORD[00m
					[01;31m(LKMVC[00m
						(LK konnen)
						(MF auch noch um zwanzig nach acht) [01;33mNF) SIMPX)[00m
						(LKMVC [01;33m(FKOORD[00m
							[01;31m(SIMPX[00m
								(LK konnen)
								[01;31m(MF[00m [01;33m(MF[00m
									(NX
										(PPER wir))[01;31m)[00m[01;31m)[00m
							(PX in hannover) [01;33mMF)[00m
							(VC abfliegen))[01;31m)[00m
					(KON und)
					(LKM sind in siebzig minuten in munchen)[01;31m)[00m)))) [01;33mFKOORD)[00m
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'PX'], 'mover info': [('PX', (26, 28))], 'old_family': ['SIMPX', 'PX', 'VC'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('VMFIN', 'PPER', 'APPR', 'NE', 'VVINF'), 'start right siblings': ['VC'], 'end left siblings': ['NX'], 'auto preterminal span': (24, 29), 'movers': ['PX'], 'old_parent': 'LKMVC', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		(VF da)
		(LK gibt)
		(MF es einen flug siebzehn uhr zwanzig sogar stundlich bis einundzwanzig uhr zwanzig)[01;31m)[00m
	(SIMPX
		(VF das)
		(LK heist)
		(NF [01;33m(SIMPX (NF[00m
			(SIMPX
				(VF wir)
				[01;31m(FKOORD[00m
					[01;31m(LKMVC[00m
						(LK konnen)
						(MF auch noch um zwanzig nach acht) [01;33mNF) SIMPX)[00m
						(LKMVC [01;33m(FKOORD[00m
							[01;31m(SIMPX[00m
								(LK konnen)
								(MF wir in hannover)[01;31m)[00m
							(VC abfliegen))[01;31m)[00m
					(KON und)
					(LKM sind in siebzig minuten in munchen)[01;31m)[00m)))) [01;33mFKOORD)[00m
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'ART', 'NN', 'CARD', 'NN', 'CARD', 'ADV', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD', 'PDS', 'VVFIN', 'PPER', 'VMFIN', 'ADV', 'ADV', 'APPR', 'CARD', 'APPR', 'CARD', 'VMFIN', 'PPER', 'APPR', 'NE', 'VVINF', 'KON', 'VAFIN', 'APPR', 'CARD', 'NN', 'APPR', 'NE'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 36), 'span': (0, 14), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(VF da)
	(LK gibt)
	(MF es einen flug siebzehn uhr zwanzig sogar stundlich bis einundzwanzig uhr zwanzig)
	(SIMPX
		(VF das)
		(LK heist)
		(NF [01;33m(SIMPX (NF[00m
			(SIMPX
				(VF wir)
				[01;31m(FKOORD[00m
					[01;31m(LKMVC[00m
						(LK konnen)
						(MF auch noch um zwanzig nach acht) [01;33mNF) SIMPX)[00m
						(LKMVC [01;33m(FKOORD[00m
							[01;31m(SIMPX[00m
								(LK konnen)
								(MF wir in hannover)[01;31m)[00m
							(VC abfliegen))[01;31m)[00m
					(KON und)
					(LKM sind in siebzig minuten in munchen)[01;31m)[00m)))) [01;33mFKOORD)[00m
Step:Co-ordination
{'subtrees': ['LK', 'MF', 'LKMVC'], 'family': ['LKMVC', 'KON', 'LKM'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'ADV', 'ADV', 'APPR', 'CARD', 'APPR', 'CARD', 'VMFIN', 'PPER', 'APPR', 'NE', 'VVINF', 'KON', 'VAFIN', 'APPR', 'CARD', 'NN', 'APPR', 'NE'), 'right siblings': ['KON', 'LKM'], 'parent': 'FKOORD', 'auto preterminal span': (17, 36), 'span': (17, 29), 'left siblings': [], 'label': 'LKMVC', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP
	(VF da)
	(LK gibt)
	(MF es einen flug siebzehn uhr zwanzig sogar stundlich bis einundzwanzig uhr zwanzig)
	(SIMPX
		(VF das)
		(LK heist)
		(NF [01;33m(SIMPX (NF[00m
			(SIMPX
				(VF wir)
				[01;31m(FKOORD[00m
					(LK konnen)
					(MF auch noch um zwanzig nach acht) [01;33mNF) SIMPX)[00m
					[01;36m(FKOORD[00m
						(LKMVC
							[01;31m(SIMPX[00m
								(LK konnen)
								(MF wir in hannover)[01;31m)[00m
							(VC abfliegen))
						(KON und)
						(LKM sind in siebzig minuten in munchen)[01;36m)[00m[01;31m)[00m))))
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'FKOORD'], 'mover info': [('LK', (17, 18)), ('MF', (18, 24))], 'old_family': ['LK', 'MF', 'LKMVC', 'KON', 'LKM'], 'start left siblings': [], 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'ADV', 'APPR', 'CARD', 'APPR', 'CARD', 'VMFIN', 'PPER', 'APPR', 'NE', 'VVINF', 'KON', 'VAFIN', 'APPR', 'CARD', 'NN', 'APPR', 'NE'), 'start right siblings': ['LKMVC', 'KON', 'LKM'], 'end left siblings': ['VF'], 'auto preterminal span': (16, 36), 'adding node already present': False, 'movers': ['LK', 'MF'], 'old_parent': 'FKOORD', 'added and moved': True, 'end right siblings': ['FKOORD'], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'SIMPX'}
(TOP
	(VF da)
	(LK gibt)
	(MF es einen flug siebzehn uhr zwanzig sogar stundlich bis einundzwanzig uhr zwanzig)
	(SIMPX
		(VF das)
		(LK heist)
		(NF
			(SIMPX
				[01;36m(SIMPX[00m
					(NF
						(VF wir)
						(LK konnen)
						(MF auch noch um zwanzig nach acht))[01;36m)[00m
				(FKOORD
					(LKMVC
						[01;31m(SIMPX[00m
							(LK konnen)
							(MF wir in hannover)[01;31m)[00m
						(VC abfliegen))
					(KON und)
					(LKM sind in siebzig minuten in munchen))))))
Step:Unary
{'subtrees': ['NF'], 'family': ['SIMPX', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'ADV', 'APPR', 'CARD', 'APPR', 'CARD'), 'right siblings': [(FKOORD (LKMVC (SIMPX (LK (VXFIN (VMFIN konnen))) (MF (NX (PPER wir)) (PX (APPR in) (NX (NE hannover))))) (VC (VXINF (VVINF abfliegen)))) (KON und) (LKM (LK (VXFIN (VAFIN sind))) (MF (PX (APPR in) (NX (ADJX (CARD siebzig)) (NN minuten))) (PX (APPR in) (NX (NE munchen))))))], 'left siblings': [], 'auto preterminal span': (16, 24), 'span': (16, 24), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(VF da)
	(LK gibt)
	(MF es einen flug siebzehn uhr zwanzig sogar stundlich bis einundzwanzig uhr zwanzig)
	(SIMPX
		(VF das)
		(LK heist)
		(NF
			(SIMPX
				(SIMPX wir konnen auch noch um zwanzig nach acht)
				(FKOORD
					(LKMVC
						[01;31m(SIMPX[00m
							(LK konnen)
							(MF wir in hannover)[01;31m)[00m
						(VC abfliegen))
					(KON und)
					(LKM sind in siebzig minuten in munchen))))))
Step:UNSET remove
{'subtrees': ['LK', 'MF'], 'family': ['SIMPX', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'APPR', 'NE', 'VVINF'), 'right siblings': ['VC'], 'parent': 'LKMVC', 'auto preterminal span': (24, 29), 'span': (24, 28), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP da gibt es einen flug siebzehn uhr zwanzig sogar stundlich bis einundzwanzig uhr zwanzig das heist wir konnen auch noch um zwanzig nach acht konnen wir in hannover abfliegen und sind in siebzig minuten in munchen)

Sentence 242:
0 Initial errors
0 on fringe, 0 iterations

Sentence 243:
0 Initial errors
0 on fringe, 0 iterations

Sentence 244:
0 Initial errors
0 on fringe, 0 iterations

Sentence 245:
0 Initial errors
0 on fringe, 0 iterations

Sentence 246:
0 Initial errors
0 on fringe, 0 iterations

Sentence 247:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(VF[00m
		(NX
			(NN hotels))[01;36m)[00m
	(DM ja)
	(SIMPX mussen wir mal kucken))
Step:Unary
{'subtrees': ['NX'], 'family': ['VF', 'DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN',), 'right siblings': [(DM (PTKANT ja)), (SIMPX (LK (VXFIN (VMFIN mussen))) (MF (NX (PPER wir)) (ADVX (ADV mal))) (VC (VXINF (VVINF kucken))))], 'left siblings': [], 'auto preterminal span': (0, 1), 'span': (0, 1), 'parent': 'TOP', 'label': 'VF', 'classified_type': 'Unary', 'type': 'add'}
(TOP hotels ja mussen wir mal kucken)

Sentence 248:
24 Initial errors
0 on fringe, 13 iterations
5 Error:NP Attachment
2 Error:Single Word Phrase
2 Error:Different label
2 Error:NP Attachment
4 Error:PP Attachment
2 Error:NP Attachment
1 Error:Unary
1 Error:NP Internal Structure
1 Error:Clause Attachment
1 Error:NP Internal Structure
1 Error:Co-ordination
1 Error:Modifier Attachment
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(VF ich)
		(LK habe)
		[01;31m(MF[00m [01;33m(MF (MF[00m
			(ADVX hier)
			(NX eine liste von meiner sekretarin)[01;31m)[00m[01;31m)[00m
	(NX drei moglichkeiten) [01;33mMF)[00m
	[01;31m(NX[00m
		[01;31m(NX[00m
			[01;36m(PX[00m [01;31m(NX[00m
				[01;36m(VC[00m [01;36m(VXINF[00m [01;31m(NX[00m
					(NE maritimhotel)[01;31m)[00m[01;36m)[00m[01;36m)[00m
				(PX am hauptbahnhof)[01;31m)[00m [01;33mMF) SIMPX)[00m[01;36m)[00m
			(NX funfzehn minuten zum zentrum)[01;31m)[00m
		(DM na ja)
		[01;31m(SIMPX[00m [01;33m(SIMPX[00m
			(VF garage)
			(LK brauchen)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX wir)
				(ADVX ja)
				(ADVX nicht)[01;31m)[00m[01;31m)[00m
		[01;31m(NX[00m [01;33m(NX[00m
			[01;36m(NX[00m
				(NX
					(ART ein)
					[01;31m(NX[00m
						(NX hotel) [01;33mNX)[00m
						(NX luisenhof)[01;31m)[00m)
				(NX funf minuten vom bahnhof) [01;33mMF) SIMPX)[00m[01;36m)[00m
			[01;31m(NX[00m
				(NX bar)
				(NX restaurant)
				(NX garage)[01;31m)[00m[01;31m)[00m
		[01;31m(ADJX[00m
			(NX alles)
			(ADJX uberflussig)[01;31m)[00m
		(KON und)
		[01;31m(NX[00m
			(PX direkt beim hauptbahnhof)
			(ADVX noch)
			[01;31m(NX[00m
				(NX ein hotel)
				(PX mit schwimm und dampfbad)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:NP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'ADVX', 'NX', 'NX'], 'mover info': [('NX', (24, 27)), ('NX', (27, 31))], 'old_family': ['NX', 'NX', 'NX'], 'start left siblings': [], 'auto preterminals': ('NE', 'APPRART', 'NN', 'CARD', 'NN', 'APPRART', 'NN', 'ITJ', 'PTKANT', 'NN', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ART', 'NN', 'NE', 'CARD', 'NN', 'APPRART', 'NN', 'NN', 'NN', 'NN', 'PIS', 'ADJD', 'KON', 'ADV', 'APPRART', 'NN', 'ADV', 'ART', 'NN', 'APPR', 'TRUNC', 'KON', 'NN'), 'start right siblings': ['NX'], 'end left siblings': ['NX', 'ADVX', 'ADVX'], 'auto preterminal span': (10, 47), 'movers': ['NX', 'NX'], 'old_parent': 'NX', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(VF ich)
		(LK habe)
		[01;31m(MF[00m [01;33m(MF (MF[00m
			(ADVX hier)
			(NX eine liste von meiner sekretarin)[01;31m)[00m[01;31m)[00m
	(NX drei moglichkeiten) [01;33mMF)[00m
	[01;31m(NX[00m
		[01;31m(NX[00m
			[01;36m(PX[00m [01;31m(NX[00m
				[01;36m(VC[00m [01;36m(VXINF[00m [01;31m(NX[00m
					(NE maritimhotel)[01;31m)[00m[01;36m)[00m[01;36m)[00m
				(PX am hauptbahnhof)[01;31m)[00m [01;33mMF) SIMPX)[00m[01;36m)[00m
			(NX funfzehn minuten zum zentrum)[01;31m)[00m
		(DM na ja)
		(SIMPX
			(VF garage)
			(LK brauchen)
			(MF
				(NX wir)
				(ADVX ja)
				(ADVX nicht)
				[01;36m(NX[00m
					(NX [01;33m(NX[00m
						(ART ein)
						[01;31m(NX[00m
							(NX hotel) [01;33mNX)[00m
							(NX luisenhof)[01;31m)[00m)
					(NX funf minuten vom bahnhof)[01;36m)[00m))
		[01;31m(NX[00m
			(NX bar)
			(NX restaurant)
			(NX garage)[01;31m)[00m
		[01;31m(ADJX[00m
			(NX alles)
			(ADJX uberflussig)[01;31m)[00m
		(KON und)
		[01;31m(NX[00m
			(PX direkt beim hauptbahnhof)
			(ADVX noch)
			[01;31m(NX[00m
				(NX ein hotel)
				(PX mit schwimm und dampfbad)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'family': ['VXINF', 'PX'], 'auto preterminal span': (10, 11), 'span': (10, 11), 'subtrees': ['NE'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('NE',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'VXINF')}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(VF ich)
		(LK habe)
		[01;31m(MF[00m [01;33m(MF (MF[00m
			(ADVX hier)
			(NX eine liste von meiner sekretarin)[01;31m)[00m[01;31m)[00m
	(NX drei moglichkeiten) [01;33mMF)[00m
	[01;31m(NX[00m
		[01;31m(NX[00m
			[01;36m(PX[00m [01;31m(NX[00m
				[01;36m(VC[00m
					(VXINF
						(NE maritimhotel))[01;36m)[00m
				(PX am hauptbahnhof)[01;31m)[00m [01;33mMF) SIMPX)[00m[01;36m)[00m
			(NX funfzehn minuten zum zentrum)[01;31m)[00m
		(DM na ja)
		(SIMPX
			(VF garage)
			(LK brauchen)
			(MF
				(NX wir)
				(ADVX ja)
				(ADVX nicht)
				[01;36m(NX[00m
					(NX [01;33m(NX[00m
						(ART ein)
						[01;31m(NX[00m
							(NX hotel) [01;33mNX)[00m
							(NX luisenhof)[01;31m)[00m)
					(NX funf minuten vom bahnhof)[01;36m)[00m))
		[01;31m(NX[00m
			(NX bar)
			(NX restaurant)
			(NX garage)[01;31m)[00m
		[01;31m(ADJX[00m
			(NX alles)
			(ADJX uberflussig)[01;31m)[00m
		(KON und)
		[01;31m(NX[00m
			(PX direkt beim hauptbahnhof)
			(ADVX noch)
			[01;31m(NX[00m
				(NX ein hotel)
				(PX mit schwimm und dampfbad)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:Different label
{'family': ['PX', 'NX'], 'auto preterminal span': (10, 13), 'span': (10, 13), 'subtrees': ['VXINF', 'PX'], 'parent': 'NX', 'over_word': False, 'auto preterminals': ('NE', 'APPRART', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('NX', 'PX')}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(VF ich)
		(LK habe)
		[01;31m(MF[00m [01;33m(MF (MF[00m
			(ADVX hier)
			(NX eine liste von meiner sekretarin)[01;31m)[00m[01;31m)[00m
	(NX drei moglichkeiten) [01;33mMF)[00m
	[01;31m(NX[00m
		[01;31m(NX[00m
			(PX
				[01;36m(VC[00m
					(VXINF
						(NE maritimhotel))[01;36m)[00m
				(PX am hauptbahnhof)) [01;33mMF) SIMPX)[00m
			(NX funfzehn minuten zum zentrum)[01;31m)[00m
		(DM na ja)
		(SIMPX
			(VF garage)
			(LK brauchen)
			(MF
				(NX wir)
				(ADVX ja)
				(ADVX nicht)
				[01;36m(NX[00m
					(NX [01;33m(NX[00m
						(ART ein)
						[01;31m(NX[00m
							(NX hotel) [01;33mNX)[00m
							(NX luisenhof)[01;31m)[00m)
					(NX funf minuten vom bahnhof)[01;36m)[00m))
		[01;31m(NX[00m
			(NX bar)
			(NX restaurant)
			(NX garage)[01;31m)[00m
		[01;31m(ADJX[00m
			(NX alles)
			(ADJX uberflussig)[01;31m)[00m
		(KON und)
		[01;31m(NX[00m
			(PX direkt beim hauptbahnhof)
			(ADVX noch)
			[01;31m(NX[00m
				(NX ein hotel)
				(PX mit schwimm und dampfbad)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:NP Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'NX', 'NX'], 'mover info': [('NX', (8, 10))], 'old_family': ['SIMPX', 'NX', 'NX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'ART', 'NN', 'APPR', 'PPOSAT', 'NN', 'CARD', 'NN', 'NE', 'APPRART', 'NN', 'CARD', 'NN', 'APPRART', 'NN', 'ITJ', 'PTKANT', 'NN', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ART', 'NN', 'NE', 'CARD', 'NN', 'APPRART', 'NN', 'NN', 'NN', 'NN', 'PIS', 'ADJD', 'KON', 'ADV', 'APPRART', 'NN', 'ADV', 'ART', 'NN', 'APPR', 'TRUNC', 'KON', 'NN'), 'start right siblings': ['NX'], 'end left siblings': ['ADVX', 'NX'], 'auto preterminal span': (0, 47), 'movers': ['NX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(VF ich)
		(LK habe)
		[01;33m(MF[00m (MF hier eine liste von meiner sekretarin drei moglichkeiten)[01;31m)[00m
	[01;31m(NX[00m
		[01;31m(NX[00m
			(PX
				[01;36m(VC[00m
					(VXINF
						(NE maritimhotel))[01;36m)[00m
				(PX am hauptbahnhof)) [01;33mMF) SIMPX)[00m
			(NX funfzehn minuten zum zentrum)[01;31m)[00m
		(DM na ja)
		(SIMPX
			(VF garage)
			(LK brauchen)
			(MF
				(NX wir)
				(ADVX ja)
				(ADVX nicht)
				[01;36m(NX[00m
					(NX [01;33m(NX[00m
						(ART ein)
						[01;31m(NX[00m
							(NX hotel) [01;33mNX)[00m
							(NX luisenhof)[01;31m)[00m)
					(NX funf minuten vom bahnhof)[01;36m)[00m))
		[01;31m(NX[00m
			(NX bar)
			(NX restaurant)
			(NX garage)[01;31m)[00m
		[01;31m(ADJX[00m
			(NX alles)
			(ADJX uberflussig)[01;31m)[00m
		(KON und)
		[01;31m(NX[00m
			(PX direkt beim hauptbahnhof)
			(ADVX noch)
			[01;31m(NX[00m
				(NX ein hotel)
				(PX mit schwimm und dampfbad)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:PP Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'PX'], 'mover info': [('PX', (10, 13))], 'old_family': ['PX', 'NX'], 'start left siblings': [], 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'ART', 'NN', 'APPR', 'PPOSAT', 'NN', 'CARD', 'NN', 'NE', 'APPRART', 'NN', 'CARD', 'NN', 'APPRART', 'NN', 'ITJ', 'PTKANT', 'NN', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ART', 'NN', 'NE', 'CARD', 'NN', 'APPRART', 'NN', 'NN', 'NN', 'NN', 'PIS', 'ADJD', 'KON', 'ADV', 'APPRART', 'NN', 'ADV', 'ART', 'NN', 'APPR', 'TRUNC', 'KON', 'NN'), 'start right siblings': ['NX'], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 47), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'NX'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		(MF
			(MF hier eine liste von meiner sekretarin drei moglichkeiten)
			(PX
				[01;36m(VC[00m
					(VXINF
						(NE maritimhotel))[01;36m)[00m
				(PX am hauptbahnhof))))
	[01;31m(NX[00m
		(NX funfzehn minuten zum zentrum)
		(DM na ja)
		(SIMPX
			(VF garage)
			(LK brauchen)
			(MF
				(NX wir)
				(ADVX ja)
				(ADVX nicht)
				[01;36m(NX[00m
					(NX [01;33m(NX[00m
						(ART ein)
						[01;31m(NX[00m
							(NX hotel) [01;33mNX)[00m
							(NX luisenhof)[01;31m)[00m)
					(NX funf minuten vom bahnhof)[01;36m)[00m))
		[01;31m(NX[00m
			(NX bar)
			(NX restaurant)
			(NX garage)[01;31m)[00m
		[01;31m(ADJX[00m
			(NX alles)
			(ADJX uberflussig)[01;31m)[00m
		(KON und)
		[01;31m(NX[00m
			(PX direkt beim hauptbahnhof)
			(ADVX noch)
			[01;31m(NX[00m
				(NX ein hotel)
				(PX mit schwimm und dampfbad)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:NP Attachment
{'new_parent': 'NX', 'new_family': ['ART', 'NX', 'NX'], 'mover info': [('NX', (25, 26))], 'old_family': ['NX', 'NX'], 'start left siblings': [], 'auto preterminals': ('ART', 'NN', 'NE'), 'start right siblings': ['NX'], 'end left siblings': ['ART'], 'auto preterminal span': (24, 27), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'NX', 'POS confusion': ('NN', 'NN'), 'added and moved': True, 'end right siblings': ['NX'], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'NX'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		(MF
			(MF hier eine liste von meiner sekretarin drei moglichkeiten)
			(PX
				[01;36m(VC[00m
					(VXINF
						(NE maritimhotel))[01;36m)[00m
				(PX am hauptbahnhof))))
	[01;31m(NX[00m
		(NX funfzehn minuten zum zentrum)
		(DM na ja)
		(SIMPX
			(VF garage)
			(LK brauchen)
			(MF
				(NX wir)
				(ADVX ja)
				(ADVX nicht)
				[01;36m(NX[00m
					(NX ein hotel luisenhof)
					(NX funf minuten vom bahnhof)[01;36m)[00m))
		[01;31m(NX[00m
			(NX bar)
			(NX restaurant)
			(NX garage)[01;31m)[00m
		[01;31m(ADJX[00m
			(NX alles)
			(ADJX uberflussig)[01;31m)[00m
		(KON und)
		[01;31m(NX[00m
			(PX direkt beim hauptbahnhof)
			(ADVX noch)
			[01;31m(NX[00m
				(NX ein hotel)
				(PX mit schwimm und dampfbad)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['VXINF'], 'family': ['VC', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE',), 'right siblings': [(PX (APPRART am) (NX (NN hauptbahnhof)))], 'left siblings': [], 'auto preterminal span': (10, 11), 'span': (10, 11), 'parent': 'PX', 'label': 'VC', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX ich habe hier eine liste von meiner sekretarin drei moglichkeiten maritimhotel am hauptbahnhof)
	[01;31m(NX[00m
		(NX funfzehn minuten zum zentrum)
		(DM na ja)
		(SIMPX
			(VF garage)
			(LK brauchen)
			(MF
				(NX wir)
				(ADVX ja)
				(ADVX nicht)
				[01;36m(NX[00m
					(NX ein hotel luisenhof)
					(NX funf minuten vom bahnhof)[01;36m)[00m))
		[01;31m(NX[00m
			(NX bar)
			(NX restaurant)
			(NX garage)[01;31m)[00m
		[01;31m(ADJX[00m
			(NX alles)
			(ADJX uberflussig)[01;31m)[00m
		(KON und)
		[01;31m(NX[00m
			(PX direkt beim hauptbahnhof)
			(ADVX noch)
			[01;31m(NX[00m
				(NX ein hotel)
				(PX mit schwimm und dampfbad)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['NX', 'ADVX', 'ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'NE', 'CARD', 'NN', 'APPRART', 'NN'), 'right siblings': [], 'left siblings': [(NX (PPER wir)), (ADVX (ADV ja)), (ADVX (PTKNEG nicht))], 'auto preterminal span': (24, 31), 'span': (24, 31), 'parent': 'MF', 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'add'}
(TOP
	(SIMPX ich habe hier eine liste von meiner sekretarin drei moglichkeiten maritimhotel am hauptbahnhof)
	[01;31m(NX[00m
		(NX funfzehn minuten zum zentrum)
		(DM na ja)
		(SIMPX garage brauchen wir ja nicht ein hotel luisenhof funf minuten vom bahnhof)
		[01;31m(NX[00m
			(NX bar)
			(NX restaurant)
			(NX garage)[01;31m)[00m
		[01;31m(ADJX[00m
			(NX alles)
			(ADJX uberflussig)[01;31m)[00m
		(KON und)
		[01;31m(NX[00m
			(PX direkt beim hauptbahnhof)
			(ADVX noch)
			[01;31m(NX[00m
				(NX ein hotel)
				(PX mit schwimm und dampfbad)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['NX', 'DM', 'SIMPX', 'NX', 'ADJX', 'KON', 'NX'], 'family': ['SIMPX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'ART', 'NN', 'APPR', 'PPOSAT', 'NN', 'CARD', 'NN', 'NE', 'APPRART', 'NN', 'CARD', 'NN', 'APPRART', 'NN', 'ITJ', 'PTKANT', 'NN', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ART', 'NN', 'NE', 'CARD', 'NN', 'APPRART', 'NN', 'NN', 'NN', 'NN', 'PIS', 'ADJD', 'KON', 'ADV', 'APPRART', 'NN', 'ADV', 'ART', 'NN', 'APPR', 'TRUNC', 'KON', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 47), 'span': (13, 47), 'left siblings': ['SIMPX'], 'label': 'NX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(SIMPX ich habe hier eine liste von meiner sekretarin drei moglichkeiten maritimhotel am hauptbahnhof)
	(NX funfzehn minuten zum zentrum)
	(DM na ja)
	(SIMPX garage brauchen wir ja nicht ein hotel luisenhof funf minuten vom bahnhof)
	[01;31m(NX[00m
		(NX bar)
		(NX restaurant)
		(NX garage)[01;31m)[00m
	[01;31m(ADJX[00m
		(NX alles)
		(ADJX uberflussig)[01;31m)[00m
	(KON und)
	[01;31m(NX[00m
		(PX direkt beim hauptbahnhof)
		(ADVX noch)
		[01;31m(NX[00m
			(NX ein hotel)
			(PX mit schwimm und dampfbad)[01;31m)[00m[01;31m)[00m)
Step:NP Internal Structure
{'subtrees': ['NX', 'NX', 'NX'], 'family': ['SIMPX', 'NX', 'DM', 'SIMPX', 'NX', 'ADJX', 'KON', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'ART', 'NN', 'APPR', 'PPOSAT', 'NN', 'CARD', 'NN', 'NE', 'APPRART', 'NN', 'CARD', 'NN', 'APPRART', 'NN', 'ITJ', 'PTKANT', 'NN', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ART', 'NN', 'NE', 'CARD', 'NN', 'APPRART', 'NN', 'NN', 'NN', 'NN', 'PIS', 'ADJD', 'KON', 'ADV', 'APPRART', 'NN', 'ADV', 'ART', 'NN', 'APPR', 'TRUNC', 'KON', 'NN'), 'right siblings': ['ADJX', 'KON', 'NX'], 'parent': 'TOP', 'auto preterminal span': (0, 47), 'span': (31, 34), 'left siblings': ['SIMPX', 'NX', 'DM', 'SIMPX'], 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'remove'}
(TOP
	(SIMPX ich habe hier eine liste von meiner sekretarin drei moglichkeiten maritimhotel am hauptbahnhof)
	(NX funfzehn minuten zum zentrum)
	(DM na ja)
	(SIMPX garage brauchen wir ja nicht ein hotel luisenhof funf minuten vom bahnhof)
	(NX bar)
	(NX restaurant)
	(NX garage)
	[01;31m(ADJX[00m
		(NX alles)
		(ADJX uberflussig)[01;31m)[00m
	(KON und)
	[01;31m(NX[00m
		(PX direkt beim hauptbahnhof)
		(ADVX noch)
		[01;31m(NX[00m
			(NX ein hotel)
			(PX mit schwimm und dampfbad)[01;31m)[00m[01;31m)[00m)
Step:Co-ordination
{'subtrees': ['NX', 'ADJX'], 'family': ['SIMPX', 'NX', 'DM', 'SIMPX', 'NX', 'NX', 'NX', 'ADJX', 'KON', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'ART', 'NN', 'APPR', 'PPOSAT', 'NN', 'CARD', 'NN', 'NE', 'APPRART', 'NN', 'CARD', 'NN', 'APPRART', 'NN', 'ITJ', 'PTKANT', 'NN', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ART', 'NN', 'NE', 'CARD', 'NN', 'APPRART', 'NN', 'NN', 'NN', 'NN', 'PIS', 'ADJD', 'KON', 'ADV', 'APPRART', 'NN', 'ADV', 'ART', 'NN', 'APPR', 'TRUNC', 'KON', 'NN'), 'right siblings': ['KON', 'NX'], 'parent': 'TOP', 'auto preterminal span': (0, 47), 'span': (34, 36), 'left siblings': ['SIMPX', 'NX', 'DM', 'SIMPX', 'NX', 'NX', 'NX'], 'label': 'ADJX', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP
	(SIMPX ich habe hier eine liste von meiner sekretarin drei moglichkeiten maritimhotel am hauptbahnhof)
	(NX funfzehn minuten zum zentrum)
	(DM na ja)
	(SIMPX garage brauchen wir ja nicht ein hotel luisenhof funf minuten vom bahnhof)
	(NX bar)
	(NX restaurant)
	(NX garage)
	(NX alles)
	(ADJX uberflussig)
	(KON und)
	[01;31m(NX[00m
		(PX direkt beim hauptbahnhof)
		(ADVX noch)
		[01;31m(NX[00m
			(NX ein hotel)
			(PX mit schwimm und dampfbad)[01;31m)[00m[01;31m)[00m)
Step:Modifier Attachment
{'subtrees': ['PX', 'ADVX', 'NX'], 'family': ['SIMPX', 'NX', 'DM', 'SIMPX', 'NX', 'NX', 'NX', 'NX', 'ADJX', 'KON', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'ART', 'NN', 'APPR', 'PPOSAT', 'NN', 'CARD', 'NN', 'NE', 'APPRART', 'NN', 'CARD', 'NN', 'APPRART', 'NN', 'ITJ', 'PTKANT', 'NN', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ART', 'NN', 'NE', 'CARD', 'NN', 'APPRART', 'NN', 'NN', 'NN', 'NN', 'PIS', 'ADJD', 'KON', 'ADV', 'APPRART', 'NN', 'ADV', 'ART', 'NN', 'APPR', 'TRUNC', 'KON', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 47), 'span': (37, 47), 'left siblings': ['SIMPX', 'NX', 'DM', 'SIMPX', 'NX', 'NX', 'NX', 'NX', 'ADJX', 'KON'], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX ich habe hier eine liste von meiner sekretarin drei moglichkeiten maritimhotel am hauptbahnhof)
	(NX funfzehn minuten zum zentrum)
	(DM na ja)
	(SIMPX garage brauchen wir ja nicht ein hotel luisenhof funf minuten vom bahnhof)
	(NX bar)
	(NX restaurant)
	(NX garage)
	(NX alles)
	(ADJX uberflussig)
	(KON und)
	(PX direkt beim hauptbahnhof)
	(ADVX noch)
	[01;31m(NX[00m
		(NX ein hotel)
		(PX mit schwimm und dampfbad)[01;31m)[00m)
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['SIMPX', 'NX', 'DM', 'SIMPX', 'NX', 'NX', 'NX', 'NX', 'ADJX', 'KON', 'PX', 'ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'ART', 'NN', 'APPR', 'PPOSAT', 'NN', 'CARD', 'NN', 'NE', 'APPRART', 'NN', 'CARD', 'NN', 'APPRART', 'NN', 'ITJ', 'PTKANT', 'NN', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ART', 'NN', 'NE', 'CARD', 'NN', 'APPRART', 'NN', 'NN', 'NN', 'NN', 'PIS', 'ADJD', 'KON', 'ADV', 'APPRART', 'NN', 'ADV', 'ART', 'NN', 'APPR', 'TRUNC', 'KON', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 47), 'span': (41, 47), 'left siblings': ['SIMPX', 'NX', 'DM', 'SIMPX', 'NX', 'NX', 'NX', 'NX', 'ADJX', 'KON', 'PX', 'ADVX'], 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP ich habe hier eine liste von meiner sekretarin drei moglichkeiten maritimhotel am hauptbahnhof funfzehn minuten zum zentrum na ja garage brauchen wir ja nicht ein hotel luisenhof funf minuten vom bahnhof bar restaurant garage alles uberflussig und direkt beim hauptbahnhof noch ein hotel mit schwimm und dampfbad)

Sentence 249:
0 Initial errors
0 on fringe, 0 iterations

Sentence 250:
0 Initial errors
0 on fringe, 0 iterations

Sentence 251:
6 Initial errors
0 on fringe, 4 iterations
2 Error:Single Word Phrase
1 Error:PP Attachment
2 Error:NP Attachment
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(PX[00m
	[01;36m(PX[00m
		(APPR mit)
		[01;31m(PX[00m
			[01;36m(NX[00m [01;31m(ADVX[00m
				(ADV naturlich)[01;31m)[00m [01;33mPX)[00m[01;36m)[00m
			[01;33m(PX[00m (PX mit schwimm und dampfbad)[01;31m)[00m
		(PX direkt am hauptbahnhof) [01;33mPX)[00m[01;36m)[00m
	(SIMPX das hort sich gut an))
Step:Single Word Phrase
{'family': ['NX', 'PX'], 'auto preterminal span': (1, 2), 'span': (1, 2), 'subtrees': ['ADV'], 'parent': 'PX', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'NX')}
(TOP [01;33m(PX[00m
	[01;36m(PX[00m
		(APPR mit)
		[01;31m(PX[00m
			(NX naturlich) [01;33mPX)[00m
			[01;33m(PX[00m (PX mit schwimm und dampfbad)[01;31m)[00m
		(PX direkt am hauptbahnhof) [01;33mPX)[00m[01;36m)[00m
	(SIMPX das hort sich gut an))
Step:PP Attachment
{'subtrees': ['APPR', 'PX', 'PX'], 'family': ['PX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ADV', 'APPR', 'TRUNC', 'KON', 'NN', 'ADV', 'APPRART', 'NN'), 'right siblings': [(SIMPX (VF (NX (PDS das))) (LK (VXFIN (VVFIN hort))) (MF (NX (PRF sich)) (ADJX (ADJD gut))) (VC (PTKVZ an)))], 'left siblings': [], 'auto preterminal span': (0, 9), 'span': (0, 9), 'parent': 'TOP', 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP [01;33m(PX[00m
	(PX
		(APPR mit)
		[01;31m(PX[00m
			(NX naturlich) [01;33mPX)[00m
			[01;33m(PX[00m (PX mit schwimm und dampfbad)[01;31m)[00m
		(PX direkt am hauptbahnhof)) [01;33mPX)[00m
	(SIMPX das hort sich gut an))
Step:NP Attachment
{'new_parent': 'PX', 'new_family': ['APPR', 'NX', 'PX', 'PX'], 'mover info': [('NX', (1, 2))], 'old_family': ['NX', 'PX'], 'start left siblings': [], 'auto preterminals': ('APPR', 'ADV', 'APPR', 'TRUNC', 'KON', 'NN', 'ADV', 'APPRART', 'NN'), 'start right siblings': ['PX'], 'end left siblings': ['APPR'], 'auto preterminal span': (0, 9), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'PX', 'POS confusion': ('ADV', 'ADV'), 'added and moved': True, 'end right siblings': ['PX', 'PX'], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP
	(PX
		(PX mit naturlich)
		[01;36m(PX[00m
			(PX mit schwimm und dampfbad)
			(PX direkt am hauptbahnhof)[01;36m)[00m)
	(SIMPX das hort sich gut an))
Step:PP Attachment
{'subtrees': ['PX', 'PX'], 'family': ['PX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'TRUNC', 'KON', 'NN', 'ADV', 'APPRART', 'NN'), 'right siblings': [], 'left siblings': [(PX (APPR mit) (NX (ADV naturlich)))], 'auto preterminal span': (2, 9), 'span': (2, 9), 'parent': 'PX', 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP mit naturlich mit schwimm und dampfbad direkt am hauptbahnhof das hort sich gut an)

Sentence 252:
0 Initial errors
0 on fringe, 0 iterations

Sentence 253:
6 Initial errors
0 on fringe, 3 iterations
4 Error:NP Attachment
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(NX[00m
		(NX einzelzimmer zwohundert achtundvierzig mark)
		[01;36m(NX[00m
			(KON und)
			(NX doppelzimmer)
			[01;36m(NX[00m [01;31m(PX[00m [01;33m(PX[00m
				(APPRART im)
				[01;31m(NX[00m
					(NX doppelzimmer) [01;33mPX)[00m
					(NX hundert dreiundvierzig)[01;31m)[00m[01;31m)[00m[01;36m)[00m[01;36m)[00m[01;31m)[00m)
Step:NP Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'KON', 'NX', 'PX', 'NX'], 'mover info': [('NX', (8, 10))], 'old_family': ['NX', 'NX'], 'start left siblings': ['NX'], 'auto preterminals': ('NN', 'CARD', 'CARD', 'NN', 'KON', 'NN', 'APPRART', 'NN', 'CARD', 'CARD'), 'start right siblings': [], 'end left siblings': ['NX', 'KON', 'NX', 'PX'], 'auto preterminal span': (0, 10), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'NX'}
(TOP
	[01;31m(NX[00m
		(NX einzelzimmer zwohundert achtundvierzig mark)
		[01;36m(NX[00m
			(KON und)
			(NX doppelzimmer)
			(NX im doppelzimmer hundert dreiundvierzig)[01;36m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['KON', 'NX', 'NX'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'NN', 'APPRART', 'NN', 'CARD', 'CARD'), 'right siblings': [], 'left siblings': [(NX (NX (NN einzelzimmer)) (NX (ADJX (CARD zwohundert) (CARD achtundvierzig)) (NN mark)))], 'auto preterminal span': (4, 10), 'span': (4, 10), 'parent': 'NX', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(NX[00m
		(NX einzelzimmer zwohundert achtundvierzig mark)
		(NX und doppelzimmer im doppelzimmer hundert dreiundvierzig)[01;31m)[00m)
Step:Unary
{'subtrees': ['NX', 'NX'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'CARD', 'CARD', 'NN', 'KON', 'NN', 'APPRART', 'NN', 'CARD', 'CARD'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 10), 'span': (0, 10), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP einzelzimmer zwohundert achtundvierzig mark und doppelzimmer im doppelzimmer hundert dreiundvierzig)

Sentence 254:
8 Initial errors
0 on fringe, 7 iterations
2 Error:Modifier Attachment
1 Error:Clause Attachment
1 Error:UNSET add
1 Error:Co-ordination
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	[01;36m(SIMPX[00m
		(SIMPX dann wurde ich lieber das einzelzimmer mal vorschlagen)
		(SIMPX [01;33m(SIMPX[00m
			(KOORD und)
			(C da)
			[01;31m(FKOORD[00m
				[01;31m(MVC[00m
					(MF wir es nicht selber)
					(VC bezahlen)[01;31m)[00m [01;33mSIMPX)[00m
				(KON und)
				(MVC wir schon dann lange im zug gesessen haben)[01;31m)[00m)[01;36m)[00m
	(DM also)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF ich)
		(LK wurde)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(NX
					(PPER es)) [01;33mSIMPX)[00m[01;36m)[00m
			(ADVX also)[01;31m)[00m[01;31m)[00m
	(SIMPX ich wurde es dann mal machen))
Step:Modifier Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'ADVX'], 'mover info': [('ADVX', (29, 30))], 'old_family': ['NX', 'ADVX'], 'start left siblings': ['NX'], 'auto preterminals': ('PPER', 'VAFIN', 'PPER', 'ADV'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (26, 30), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(DM also)
	[01;36m(SIMPX[00m
		(SIMPX dann wurde ich lieber das einzelzimmer mal vorschlagen)
		(SIMPX [01;33m(SIMPX[00m
			(KOORD und)
			(C da)
			[01;31m(FKOORD[00m
				[01;31m(MVC[00m
					(MF wir es nicht selber)
					(VC bezahlen)[01;31m)[00m [01;33mSIMPX)[00m
				(KON und)
				(MVC wir schon dann lange im zug gesessen haben)[01;31m)[00m)[01;36m)[00m
	(DM also)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF ich)
			(LK wurde)
			(MF es)[01;36m)[00m
		(ADVX also)[01;31m)[00m
	(SIMPX ich wurde es dann mal machen))
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['DM', 'SIMPX', 'DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'ADV', 'ART', 'NN', 'ADV', 'VVINF', 'KON', 'KOUS', 'PPER', 'PPER', 'PTKNEG', 'ADV', 'VVFIN', 'KON', 'PPER', 'ADV', 'ADV', 'ADJD', 'APPRART', 'NN', 'VVPP', 'VAFIN'), 'right siblings': [(DM (ADVX (ADV also))), (SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VAFIN wurde))) (MF (NX (PPER es))) (ADVX (ADV also))), (SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VAFIN wurde))) (MF (NX (PPER es)) (ADVX (ADV dann)) (ADVX (ADV mal))) (VC (VXINF (VVINF machen))))], 'left siblings': [(DM (ADVX (ADV also)))], 'auto preterminal span': (1, 25), 'span': (1, 25), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX
		(SIMPX dann wurde ich lieber das einzelzimmer mal vorschlagen)
		(SIMPX [01;33m(SIMPX[00m
			(KOORD und)
			(C da)
			[01;31m(FKOORD[00m
				[01;31m(MVC[00m
					(MF wir es nicht selber)
					(VC bezahlen)[01;31m)[00m [01;33mSIMPX)[00m
				(KON und)
				(MVC wir schon dann lange im zug gesessen haben)[01;31m)[00m))
	(DM also)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF ich)
			(LK wurde)
			(MF es)[01;36m)[00m
		(ADVX also)[01;31m)[00m
	(SIMPX ich wurde es dann mal machen))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'PPER'), 'right siblings': [(ADVX (ADV also))], 'left siblings': [], 'auto preterminal span': (26, 29), 'span': (26, 29), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX
		(SIMPX dann wurde ich lieber das einzelzimmer mal vorschlagen)
		(SIMPX [01;33m(SIMPX[00m
			(KOORD und)
			(C da)
			[01;31m(FKOORD[00m
				[01;31m(MVC[00m
					(MF wir es nicht selber)
					(VC bezahlen)[01;31m)[00m [01;33mSIMPX)[00m
				(KON und)
				(MVC wir schon dann lange im zug gesessen haben)[01;31m)[00m))
	(DM also)
	[01;31m(SIMPX[00m
		(SIMPX ich wurde es)
		(ADVX also)[01;31m)[00m
	(SIMPX ich wurde es dann mal machen))
Step:Co-ordination
{'subtrees': ['MF', 'VC'], 'family': ['MVC', 'KON', 'MVC'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'PPER', 'PTKNEG', 'ADV', 'VVFIN', 'KON', 'PPER', 'ADV', 'ADV', 'ADJD', 'APPRART', 'NN', 'VVPP', 'VAFIN'), 'right siblings': ['KON', 'MVC'], 'parent': 'FKOORD', 'auto preterminal span': (11, 25), 'span': (11, 16), 'left siblings': [], 'label': 'MVC', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX
		(SIMPX dann wurde ich lieber das einzelzimmer mal vorschlagen)
		(SIMPX [01;33m(SIMPX[00m
			(KOORD und)
			(C da)
			[01;31m(FKOORD[00m
				(MF wir es nicht selber)
				(VC bezahlen) [01;33mSIMPX)[00m
				(KON und)
				(MVC wir schon dann lange im zug gesessen haben)[01;31m)[00m))
	(DM also)
	[01;31m(SIMPX[00m
		(SIMPX ich wurde es)
		(ADVX also)[01;31m)[00m
	(SIMPX ich wurde es dann mal machen))
Step:UNSET remove
{'subtrees': ['MF', 'VC', 'KON', 'MVC'], 'family': ['KOORD', 'C', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'KOUS', 'PPER', 'PPER', 'PTKNEG', 'ADV', 'VVFIN', 'KON', 'PPER', 'ADV', 'ADV', 'ADJD', 'APPRART', 'NN', 'VVPP', 'VAFIN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (9, 25), 'span': (11, 25), 'left siblings': ['KOORD', 'C'], 'label': 'FKOORD', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX
		(SIMPX dann wurde ich lieber das einzelzimmer mal vorschlagen)
		(SIMPX
			[01;36m(SIMPX[00m
				(KOORD und)
				(C da)
				(MF wir es nicht selber)
				(VC bezahlen)[01;36m)[00m
			(KON und)
			(MVC wir schon dann lange im zug gesessen haben)))
	(DM also)
	[01;31m(SIMPX[00m
		(SIMPX ich wurde es)
		(ADVX also)[01;31m)[00m
	(SIMPX ich wurde es dann mal machen))
Step:UNSET add
{'subtrees': ['KOORD', 'C', 'MF', 'VC'], 'family': ['SIMPX', 'KON', 'MVC'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'KOUS', 'PPER', 'PPER', 'PTKNEG', 'ADV', 'VVFIN'), 'right siblings': [(KON und), (MVC (MF (NX (PPER wir)) (ADVX (ADV schon)) (ADVX (ADV dann)) (ADJX (ADJD lange)) (PX (APPRART im) (NX (NN zug)))) (VC (VXINF (VVPP gesessen)) (VXFIN (VAFIN haben))))], 'left siblings': [], 'auto preterminal span': (9, 16), 'span': (9, 16), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX dann wurde ich lieber das einzelzimmer mal vorschlagen und da wir es nicht selber bezahlen und wir schon dann lange im zug gesessen haben)
	(DM also)
	[01;31m(SIMPX[00m
		(SIMPX ich wurde es)
		(ADVX also)[01;31m)[00m
	(SIMPX ich wurde es dann mal machen))
Step:Modifier Attachment
{'subtrees': ['SIMPX', 'ADVX'], 'family': ['DM', 'SIMPX', 'DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'VAFIN', 'PPER', 'ADV', 'ART', 'NN', 'ADV', 'VVINF', 'KON', 'KOUS', 'PPER', 'PPER', 'PTKNEG', 'ADV', 'VVFIN', 'KON', 'PPER', 'ADV', 'ADV', 'ADJD', 'APPRART', 'NN', 'VVPP', 'VAFIN', 'ADV', 'PPER', 'VAFIN', 'PPER', 'ADV', 'PPER', 'VAFIN', 'PPER', 'ADV', 'ADV', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 36), 'span': (26, 30), 'left siblings': ['DM', 'SIMPX', 'DM'], 'label': 'SIMPX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP also dann wurde ich lieber das einzelzimmer mal vorschlagen und da wir es nicht selber bezahlen und wir schon dann lange im zug gesessen haben also ich wurde es also ich wurde es dann mal machen)

Sentence 255:
7 Initial errors
0 on fringe, 5 iterations
2 Error:Different label
2 Error:UNSET move
1 Error:UNSET add
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			(VF ich)
			(LK denke)
			[01;33m(MF[00m (MF auch)[01;31m)[00m
		[01;31m(DM[00m
			(NX
				(PPOSAT mein)
				(NE gott))[01;31m)[00m [01;33mMF)[00m
		[01;36m(R[00m [01;36m(NF[00m [01;31m(SIMPX[00m
			(C wer)
			(MF hier schon wieder eine nacht)
			(VC opfert)[01;31m)[00m[01;36m)[00m[01;36m)[00m)[01;36m)[00m
Step:Different label
{'family': ['SIMPX', 'DM', 'NF'], 'auto preterminal span': (5, 12), 'span': (5, 12), 'subtrees': ['C', 'MF', 'VC'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('PWS', 'ADV', 'ADV', 'ADV', 'ART', 'NN', 'VVFIN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('SIMPX', 'NF')}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			(VF ich)
			(LK denke)
			[01;33m(MF[00m (MF auch)[01;31m)[00m
		[01;31m(DM[00m
			(NX
				(PPOSAT mein)
				(NE gott))[01;31m)[00m [01;33mMF)[00m
		[01;36m(R[00m
			(NF
				(C wer)
				(MF hier schon wieder eine nacht)
				(VC opfert))[01;36m)[00m)[01;36m)[00m
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'DM', 'NF'], 'mover info': [('DM', (3, 5)), ('NF', (5, 12))], 'old_family': ['SIMPX', 'DM', 'NF'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'PPOSAT', 'NE', 'PWS', 'ADV', 'ADV', 'ADV', 'ART', 'NN', 'VVFIN'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 12), 'movers': ['DM', 'NF'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(VF ich)
		(LK denke)
		[01;36m(MF[00m
			(MF auch)
			[01;31m(DM[00m
				(NX
					(PPOSAT mein)
					(NE gott))[01;31m)[00m[01;36m)[00m
		[01;36m(R[00m
			(NF
				(C wer)
				(MF hier schon wieder eine nacht)
				(VC opfert))[01;36m)[00m))
Step:UNSET add
{'subtrees': ['MF', 'DM'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PPOSAT', 'NE'), 'right siblings': [(NF (C (NX (PWS wer))) (MF (ADVX (ADV hier)) (ADVX (ADV schon)) (ADVX (ADV wieder)) (NX (ART eine) (NN nacht))) (VC (VXFIN (VVFIN opfert))))], 'left siblings': [(VF (NX (PPER ich))), (LK (VXFIN (VVFIN denke)))], 'auto preterminal span': (2, 5), 'span': (2, 5), 'parent': 'SIMPX', 'label': 'MF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(VF ich)
		(LK denke)
		(MF
			(MF auch)
			[01;31m(DM[00m
				(NX
					(PPOSAT mein)
					(NE gott))[01;31m)[00m)
		[01;36m(R[00m
			(NF
				(C wer)
				(MF hier schon wieder eine nacht)
				(VC opfert))[01;36m)[00m))
Step:Unary
{'subtrees': ['NF'], 'family': ['VF', 'LK', 'MF', 'R'], 'over_word': False, 'over words': False, 'auto preterminals': ('PWS', 'ADV', 'ADV', 'ADV', 'ART', 'NN', 'VVFIN'), 'right siblings': [], 'left siblings': [(VF (NX (PPER ich))), (LK (VXFIN (VVFIN denke))), (MF (MF (ADVX (ADV auch))) (DM (NX (PPOSAT mein) (NE gott))))], 'auto preterminal span': (5, 12), 'span': (5, 12), 'parent': 'SIMPX', 'label': 'R', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(VF ich)
		(LK denke)
		(MF
			(MF auch)
			[01;31m(DM[00m
				(NX
					(PPOSAT mein)
					(NE gott))[01;31m)[00m)
		(R wer hier schon wieder eine nacht opfert)))
Step:Unary
{'subtrees': ['NX'], 'family': ['MF', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PPOSAT', 'NE'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 5), 'span': (3, 5), 'left siblings': ['MF'], 'label': 'DM', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ich denke auch mein gott wer hier schon wieder eine nacht opfert)

Sentence 256:
0 Initial errors
0 on fringe, 0 iterations

Sentence 257:
5 Initial errors
0 on fringe, 5 iterations
1 Error:Clause Attachment
1 Error:UNSET remove
1 Error:Clause Attachment
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX dann haben wir einen termin)
	(SIMPX wir haben einen zug)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK haben)
		[01;33m(NX (MF[00m (MF einen flug fur die ruckfahrt)[01;31m)[00m
	[01;31m(SIMPX[00m
		(VF wir)
		(LK haben)
		(MF ein hotel fur die nacht)[01;31m)[00m [01;33mMF) NX)[00m
	[01;36m(SIMPX[00m
		(SIMPX wir haben ein treffen)
		(SIMPX dann konnen wir uns jetzt noch uberlegen ob wir abends irgendwas machen wollen)[01;36m)[00m)
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['DM', 'SIMPX', 'SIMPX', 'SIMPX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ART', 'NN', 'ADV', 'VMFIN', 'PPER', 'PRF', 'ADV', 'ADV', 'VVINF', 'KOUS', 'PPER', 'ADV', 'PIS', 'VVINF', 'VMFIN'), 'right siblings': [], 'left siblings': [(DM (ADVX (ADV also))), (SIMPX (VF (ADVX (ADV dann))) (LK (VXFIN (VAFIN haben))) (MF (NX (PPER wir)) (NX (ART einen) (NN termin)))), (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VAFIN haben))) (MF (NX (ART einen) (NN zug)))), (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VAFIN haben))) (MF (NX (NX (ART einen) (NN flug)) (PX (APPR fur) (NX (ART die) (NN ruckfahrt)))))), (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VAFIN haben))) (MF (NX (NX (ART ein) (NN hotel)) (PX (APPR fur) (NX (ART die) (NN nacht))))))], 'auto preterminal span': (24, 41), 'span': (24, 41), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX dann haben wir einen termin)
	(SIMPX wir haben einen zug)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK haben)
		[01;33m(NX (MF[00m (MF einen flug fur die ruckfahrt)[01;31m)[00m
	[01;31m(SIMPX[00m
		(VF wir)
		(LK haben)
		(MF ein hotel fur die nacht)[01;31m)[00m [01;33mMF) NX)[00m
	(SIMPX wir haben ein treffen dann konnen wir uns jetzt noch uberlegen ob wir abends irgendwas machen wollen))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['DM', 'SIMPX', 'SIMPX', 'SIMPX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'VAFIN', 'PPER', 'ART', 'NN', 'PPER', 'VAFIN', 'ART', 'NN', 'PPER', 'VAFIN', 'ART', 'NN', 'APPR', 'ART', 'NN', 'PPER', 'VAFIN', 'ART', 'NN', 'APPR', 'ART', 'NN', 'PPER', 'VAFIN', 'ART', 'NN', 'ADV', 'VMFIN', 'PPER', 'PRF', 'ADV', 'ADV', 'VVINF', 'KOUS', 'PPER', 'ADV', 'PIS', 'VVINF', 'VMFIN'), 'right siblings': ['SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 41), 'span': (10, 17), 'left siblings': ['DM', 'SIMPX', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX dann haben wir einen termin)
	(SIMPX wir haben einen zug)
	(VF wir)
	(LK haben)
	[01;36m(NX[00m
		[01;36m(MF[00m
			(MF einen flug fur die ruckfahrt)
			[01;31m(SIMPX[00m
				(VF wir)
				(LK haben)
				(MF ein hotel fur die nacht)[01;31m)[00m[01;36m)[00m[01;36m)[00m
	(SIMPX wir haben ein treffen dann konnen wir uns jetzt noch uberlegen ob wir abends irgendwas machen wollen))
Step:Clause Attachment
{'subtrees': ['MF', 'SIMPX'], 'family': ['DM', 'SIMPX', 'SIMPX', 'VF', 'LK', 'MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'ART', 'NN', 'PPER', 'VAFIN', 'ART', 'NN', 'APPR', 'ART', 'NN'), 'right siblings': [(SIMPX (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VAFIN haben))) (MF (NX (ART ein) (NN treffen)))) (SIMPX (VF (ADVX (ADV dann))) (LK (VXFIN (VMFIN konnen))) (MF (NX (PPER wir)) (NX (PRF uns)) (ADVX (ADV jetzt)) (ADVX (ADV noch))) (VC (VXINF (VVINF uberlegen))) (NF (SIMPX (C (KOUS ob)) (MF (NX (PPER wir)) (ADVX (ADV abends)) (NX (PIS irgendwas))) (VC (VXINF (VVINF machen)) (VXFIN (VMFIN wollen)))))))], 'left siblings': [(DM (ADVX (ADV also))), (SIMPX (VF (ADVX (ADV dann))) (LK (VXFIN (VAFIN haben))) (MF (NX (PPER wir)) (NX (ART einen) (NN termin)))), (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VAFIN haben))) (MF (NX (ART einen) (NN zug)))), (VF (NX (PPER wir))), (LK (VXFIN (VAFIN haben)))], 'auto preterminal span': (12, 24), 'span': (12, 24), 'parent': 'TOP', 'label': 'MF', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX dann haben wir einen termin)
	(SIMPX wir haben einen zug)
	(VF wir)
	(LK haben)
	[01;36m(NX[00m
		(MF
			(MF einen flug fur die ruckfahrt)
			[01;31m(SIMPX[00m
				(VF wir)
				(LK haben)
				(MF ein hotel fur die nacht)[01;31m)[00m)[01;36m)[00m
	(SIMPX wir haben ein treffen dann konnen wir uns jetzt noch uberlegen ob wir abends irgendwas machen wollen))
Step:Unary
{'subtrees': ['MF'], 'family': ['DM', 'SIMPX', 'SIMPX', 'VF', 'LK', 'NX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'ART', 'NN', 'PPER', 'VAFIN', 'ART', 'NN', 'APPR', 'ART', 'NN'), 'right siblings': [(SIMPX (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VAFIN haben))) (MF (NX (ART ein) (NN treffen)))) (SIMPX (VF (ADVX (ADV dann))) (LK (VXFIN (VMFIN konnen))) (MF (NX (PPER wir)) (NX (PRF uns)) (ADVX (ADV jetzt)) (ADVX (ADV noch))) (VC (VXINF (VVINF uberlegen))) (NF (SIMPX (C (KOUS ob)) (MF (NX (PPER wir)) (ADVX (ADV abends)) (NX (PIS irgendwas))) (VC (VXINF (VVINF machen)) (VXFIN (VMFIN wollen)))))))], 'left siblings': [(DM (ADVX (ADV also))), (SIMPX (VF (ADVX (ADV dann))) (LK (VXFIN (VAFIN haben))) (MF (NX (PPER wir)) (NX (ART einen) (NN termin)))), (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VAFIN haben))) (MF (NX (ART einen) (NN zug)))), (VF (NX (PPER wir))), (LK (VXFIN (VAFIN haben)))], 'auto preterminal span': (12, 24), 'span': (12, 24), 'parent': 'TOP', 'label': 'NX', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX dann haben wir einen termin)
	(SIMPX wir haben einen zug)
	(VF wir)
	(LK haben)
	(NX
		(MF
			(MF einen flug fur die ruckfahrt)
			[01;31m(SIMPX[00m
				(VF wir)
				(LK haben)
				(MF ein hotel fur die nacht)[01;31m)[00m))
	(SIMPX wir haben ein treffen dann konnen wir uns jetzt noch uberlegen ob wir abends irgendwas machen wollen))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'ART', 'NN', 'PPER', 'VAFIN', 'ART', 'NN', 'APPR', 'ART', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (12, 24), 'span': (17, 24), 'left siblings': ['MF'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP also dann haben wir einen termin wir haben einen zug wir haben einen flug fur die ruckfahrt wir haben ein hotel fur die nacht wir haben ein treffen dann konnen wir uns jetzt noch uberlegen ob wir abends irgendwas machen wollen)

Sentence 258:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(ADVX
		(ADVX prinzipiell)
		[01;36m(ADVX[00m
			(ADV immer)[01;36m)[00m))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['ADVX', 'ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV',), 'right siblings': [], 'left siblings': [(ADVX (ADV prinzipiell))], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'ADVX', 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP prinzipiell immer)

Sentence 259:
8 Initial errors
0 on fringe, 6 iterations
2 Error:Single Word Phrase
2 Error:PP Attachment
1 Error:Modifier Attachment
1 Error:Unary
1 Error:PP Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		[01;36m(VF[00m
			[01;36m(ADVX[00m
				[01;31m(PARORD[00m
					(ADVX
						(ADV nur))[01;31m)[00m
				(VF wahrscheinlich)[01;36m)[00m[01;36m)[00m
		(LK wird)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX es)
				[01;33m(PX[00m (PX am dienstag)
				(ADJX etwas spater)[01;31m)[00m
			(DM ja)
			(PX am dienstag) [01;33mPX)[00m
			(ADJX etwas spater)[01;36m)[00m
		(NF
			(SIMPX
				(C bis)
				(FKOORD
					(MVC
						(MF wir uberhaupt)
						[01;36m(VXINF[00m
							(VC
								[01;31m(VXFIN[00m
									(VVFIN loskommen)[01;31m)[00m)[01;36m)[00m)
					(KON und)
					(MVC was unternehmen konnen)))))
	(DM also)
	(SIMPX fur viele veranstaltungen wird es eher zu spat werden))
Step:Single Word Phrase
{'family': ['VXINF'], 'auto preterminal span': (16, 17), 'span': (16, 17), 'subtrees': ['VVFIN'], 'parent': 'VC', 'over_word': True, 'auto preterminals': ('VVFIN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VXFIN', 'VXINF')}
(TOP
	(SIMPX
		[01;36m(VF[00m
			[01;36m(ADVX[00m
				[01;31m(PARORD[00m
					(ADVX
						(ADV nur))[01;31m)[00m
				(VF wahrscheinlich)[01;36m)[00m[01;36m)[00m
		(LK wird)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX es)
				[01;33m(PX[00m (PX am dienstag)
				(ADJX etwas spater)[01;31m)[00m
			(DM ja)
			(PX am dienstag) [01;33mPX)[00m
			(ADJX etwas spater)[01;36m)[00m
		(NF bis wir uberhaupt loskommen und was unternehmen konnen))
	(DM also)
	(SIMPX fur viele veranstaltungen wird es eher zu spat werden))
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'PX', 'ADJX', 'DM', 'PX', 'ADJX'], 'mover info': [('DM', (8, 9)), ('PX', (9, 11)), ('ADJX', (11, 13))], 'old_family': ['PARORD', 'VF', 'LK', 'MF', 'DM', 'PX', 'ADJX', 'NF'], 'start left siblings': ['PARORD', 'VF', 'LK', 'MF'], 'auto preterminals': ('ADV', 'ADV', 'VAFIN', 'PPER', 'APPRART', 'NN', 'ADV', 'ADJD', 'PTKANT', 'APPRART', 'NN', 'ADV', 'ADJD', 'KOUS', 'PPER', 'ADV', 'VVFIN', 'KON', 'PIS', 'VVINF', 'VMFIN'), 'start right siblings': ['NF'], 'end left siblings': ['NX', 'PX', 'ADJX'], 'auto preterminal span': (0, 21), 'movers': ['DM', 'PX', 'ADJX'], 'old_parent': 'SIMPX', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		[01;36m(VF[00m
			[01;36m(ADVX[00m
				[01;31m(PARORD[00m
					(ADVX
						(ADV nur))[01;31m)[00m
				(VF wahrscheinlich)[01;36m)[00m[01;36m)[00m
		(LK wird)
		(MF
			(NX es)
			[01;36m(PX[00m
				(PX am dienstag)
				(ADJX etwas spater)
				(DM ja)
				(PX am dienstag)[01;36m)[00m
			(ADJX etwas spater))
		(NF bis wir uberhaupt loskommen und was unternehmen konnen))
	(DM also)
	(SIMPX fur viele veranstaltungen wird es eher zu spat werden))
Step:Modifier Attachment
{'subtrees': ['PARORD', 'VF'], 'family': ['ADVX', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV'), 'right siblings': [(LK (VXFIN (VAFIN wird))), (MF (NX (PPER es)) (PX (APPRART am) (NX (NN dienstag))) (ADJX (ADVX (ADV etwas)) (ADJD spater)) (DM (PTKANT ja)) (PX (APPRART am) (NX (NN dienstag))) (ADJX (ADVX (ADV etwas)) (ADJD spater))), (NF (SIMPX (C (KOUS bis)) (FKOORD (MVC (MF (NX (PPER wir)) (ADVX (ADV uberhaupt))) (VC (VXINF (VVFIN loskommen)))) (KON und) (MVC (MF (NX (PIS was))) (VC (VXINF (VVINF unternehmen)) (VXFIN (VMFIN konnen)))))))], 'left siblings': [], 'auto preterminal span': (0, 2), 'span': (0, 2), 'parent': 'SIMPX', 'label': 'ADVX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(SIMPX
		[01;36m(VF[00m
			(ADVX
				[01;31m(PARORD[00m
					(ADVX
						(ADV nur))[01;31m)[00m
				(VF wahrscheinlich))[01;36m)[00m
		(LK wird)
		(MF
			(NX es)
			[01;36m(PX[00m
				(PX am dienstag)
				(ADJX etwas spater)
				(DM ja)
				(PX am dienstag)[01;36m)[00m
			(ADJX etwas spater))
		(NF bis wir uberhaupt loskommen und was unternehmen konnen))
	(DM also)
	(SIMPX fur viele veranstaltungen wird es eher zu spat werden))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV'), 'right siblings': [(LK (VXFIN (VAFIN wird))), (MF (NX (PPER es)) (PX (APPRART am) (NX (NN dienstag))) (ADJX (ADVX (ADV etwas)) (ADJD spater)) (DM (PTKANT ja)) (PX (APPRART am) (NX (NN dienstag))) (ADJX (ADVX (ADV etwas)) (ADJD spater))), (NF (SIMPX (C (KOUS bis)) (FKOORD (MVC (MF (NX (PPER wir)) (ADVX (ADV uberhaupt))) (VC (VXINF (VVFIN loskommen)))) (KON und) (MVC (MF (NX (PIS was))) (VC (VXINF (VVINF unternehmen)) (VXFIN (VMFIN konnen)))))))], 'left siblings': [], 'auto preterminal span': (0, 2), 'span': (0, 2), 'parent': 'SIMPX', 'label': 'VF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(VF
			(ADVX
				[01;31m(PARORD[00m
					(ADVX
						(ADV nur))[01;31m)[00m
				(VF wahrscheinlich)))
		(LK wird)
		(MF
			(NX es)
			[01;36m(PX[00m
				(PX am dienstag)
				(ADJX etwas spater)
				(DM ja)
				(PX am dienstag)[01;36m)[00m
			(ADJX etwas spater))
		(NF bis wir uberhaupt loskommen und was unternehmen konnen))
	(DM also)
	(SIMPX fur viele veranstaltungen wird es eher zu spat werden))
Step:PP Attachment
{'subtrees': ['PX', 'ADJX', 'DM', 'PX'], 'family': ['NX', 'PX', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'NN', 'ADV', 'ADJD', 'PTKANT', 'APPRART', 'NN'), 'right siblings': [(ADJX (ADVX (ADV etwas)) (ADJD spater))], 'left siblings': [(NX (PPER es))], 'auto preterminal span': (4, 11), 'span': (4, 11), 'parent': 'MF', 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(VF
			(ADVX
				[01;31m(PARORD[00m
					(ADVX
						(ADV nur))[01;31m)[00m
				(VF wahrscheinlich)))
		(LK wird)
		(MF es am dienstag etwas spater ja am dienstag etwas spater)
		(NF bis wir uberhaupt loskommen und was unternehmen konnen))
	(DM also)
	(SIMPX fur viele veranstaltungen wird es eher zu spat werden))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['PARORD', 'VF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV'), 'right siblings': ['VF'], 'parent': 'ADVX', 'auto preterminal span': (0, 2), 'span': (0, 1), 'left siblings': [], 'label': 'PARORD', 'classified_type': 'Unary', 'type': 'remove'}
(TOP nur wahrscheinlich wird es am dienstag etwas spater ja am dienstag etwas spater bis wir uberhaupt loskommen und was unternehmen konnen also fur viele veranstaltungen wird es eher zu spat werden)

Sentence 260:
12 Initial errors
0 on fringe, 9 iterations
2 Error:Different label
2 Error:Single Word Phrase
2 Error:Co-ordination
1 Error:Clause Attachment
1 Error:Unary
1 Error:Single Word Phrase
1 Error:Modifier Attachment
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	[01;36m(SIMPX[00m
		[01;31m(NX[00m
			(NX kino)
			(ADVX nicht)[01;31m)[00m
		[01;36m(SIMPX[00m [01;31m(NX[00m
			(NX theater)
			(ADVX nicht)[01;31m)[00m[01;36m)[00m[01;36m)[00m
	(ADVX dann)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(ADVX
				(ADV vielleicht))[01;31m)[00m
		(NX wir)
		(LK gehen)
		(MF
			(NX wir)
			(ADVX einfach)
			(PX in eine kneipe)
			(APPR nach)
			(ART der)
			[01;36m(NF[00m
				(PX
					(APPR nach)
					(NX dem meeting))[01;36m)[00m)[01;31m)[00m
	[01;36m(SIMPX[00m
		[01;36m(KOORD[00m
			(KON und)[01;36m)[00m
		(DM ja)
		[01;31m(SIMPX[00m
			(VF dann)
			(LK brauchen)
			(MF
				(NX wir)
				(ADVX nicht)
				(ADVX weiter)
				[01;36m(NX[00m [01;31m(ADJX[00m
					(ADJD grosartig)[01;31m)[00m[01;36m)[00m)
			(VC planen)[01;31m)[00m[01;36m)[00m)
Step:Different label
{'family': ['DM', 'NX', 'SIMPX', 'ADVX', 'SIMPX', 'KON', 'DM', 'SIMPX'], 'auto preterminal span': (3, 5), 'span': (3, 5), 'subtrees': ['NX', 'ADVX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('NN', 'PTKNEG'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('NX', 'SIMPX')}
(TOP
	(DM also)
	[01;36m(SIMPX[00m
		[01;31m(NX[00m
			(NX kino)
			(ADVX nicht)[01;31m)[00m
		(SIMPX theater nicht)[01;36m)[00m
	(ADVX dann)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(ADVX
				(ADV vielleicht))[01;31m)[00m
		(NX wir)
		(LK gehen)
		(MF
			(NX wir)
			(ADVX einfach)
			(PX in eine kneipe)
			(APPR nach)
			(ART der)
			[01;36m(NF[00m
				(PX
					(APPR nach)
					(NX dem meeting))[01;36m)[00m)[01;31m)[00m
	[01;36m(SIMPX[00m
		[01;36m(KOORD[00m
			(KON und)[01;36m)[00m
		(DM ja)
		[01;31m(SIMPX[00m
			(VF dann)
			(LK brauchen)
			(MF
				(NX wir)
				(ADVX nicht)
				(ADVX weiter)
				[01;36m(NX[00m [01;31m(ADJX[00m
					(ADJD grosartig)[01;31m)[00m[01;36m)[00m)
			(VC planen)[01;31m)[00m[01;36m)[00m)
Step:Single Word Phrase
{'family': ['NX', 'ADVX', 'ADVX', 'NX'], 'auto preterminal span': (26, 27), 'span': (26, 27), 'subtrees': ['ADJD'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'NX')}
(TOP
	(DM also)
	[01;36m(SIMPX[00m
		[01;31m(NX[00m
			(NX kino)
			(ADVX nicht)[01;31m)[00m
		(SIMPX theater nicht)[01;36m)[00m
	(ADVX dann)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(ADVX
				(ADV vielleicht))[01;31m)[00m
		(NX wir)
		(LK gehen)
		(MF
			(NX wir)
			(ADVX einfach)
			(PX in eine kneipe)
			(APPR nach)
			(ART der)
			[01;36m(NF[00m
				(PX
					(APPR nach)
					(NX dem meeting))[01;36m)[00m)[01;31m)[00m
	[01;36m(SIMPX[00m
		[01;36m(KOORD[00m
			(KON und)[01;36m)[00m
		(DM ja)
		[01;31m(SIMPX[00m
			(VF dann)
			(LK brauchen)
			(MF wir nicht weiter grosartig)
			(VC planen)[01;31m)[00m[01;36m)[00m)
Step:Co-ordination
{'new_parent': 'SIMPX', 'new_family': ['KON', 'DM', 'VF', 'LK', 'MF', 'VC'], 'mover info': [('KON', (19, 20)), ('DM', (20, 21))], 'old_family': ['DM', 'NX', 'SIMPX', 'ADVX', 'SIMPX', 'KON', 'DM', 'SIMPX'], 'start left siblings': ['DM', 'NX', 'SIMPX', 'ADVX', 'SIMPX'], 'auto preterminals': ('ADV', 'NN', 'PTKNEG', 'NN', 'PTKNEG', 'ADV', 'ADV', 'PPER', 'VVFIN', 'PPER', 'ADV', 'APPR', 'ART', 'NN', 'APPR', 'ART', 'APPR', 'ART', 'NN', 'KON', 'PTKANT', 'ADV', 'VVFIN', 'PPER', 'PTKNEG', 'ADV', 'ADJD', 'VVINF'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 28), 'movers': ['KON', 'DM'], 'old_parent': 'TOP', 'end right siblings': ['VF', 'LK', 'MF', 'VC'], 'classified_type': 'Co-ordination', 'type': 'move'}
(TOP
	(DM also)
	[01;36m(SIMPX[00m
		[01;31m(NX[00m
			(NX kino)
			(ADVX nicht)[01;31m)[00m
		(SIMPX theater nicht)[01;36m)[00m
	(ADVX dann)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(ADVX
				(ADV vielleicht))[01;31m)[00m
		(NX wir)
		(LK gehen)
		(MF
			(NX wir)
			(ADVX einfach)
			(PX in eine kneipe)
			(APPR nach)
			(ART der)
			[01;36m(NF[00m
				(PX
					(APPR nach)
					(NX dem meeting))[01;36m)[00m)[01;31m)[00m
	(SIMPX
		[01;36m(KOORD[00m
			(KON und)[01;36m)[00m
		(DM ja)
		(VF dann)
		(LK brauchen)
		(MF wir nicht weiter grosartig)
		(VC planen)))
Step:Clause Attachment
{'subtrees': ['NX', 'SIMPX'], 'family': ['DM', 'SIMPX', 'ADVX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'PTKNEG', 'NN', 'PTKNEG'), 'right siblings': [(ADVX (ADV dann)), (SIMPX (VF (ADVX (ADV vielleicht))) (NX (PPER wir)) (LK (VXFIN (VVFIN gehen))) (MF (NX (PPER wir)) (ADVX (ADV einfach)) (PX (APPR in) (NX (ART eine) (NN kneipe))) (APPR nach) (ART der) (PX (APPR nach) (NX (ART dem) (NN meeting))))), (SIMPX (KON und) (DM (PTKANT ja)) (VF (ADVX (ADV dann))) (LK (VXFIN (VVFIN brauchen))) (MF (NX (PPER wir)) (ADVX (PTKNEG nicht)) (ADVX (ADV weiter)) (NX (ADJD grosartig))) (VC (VXINF (VVINF planen))))], 'left siblings': [(DM (ADVX (ADV also)))], 'auto preterminal span': (1, 5), 'span': (1, 5), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX
		[01;31m(NX[00m
			(NX kino)
			(ADVX nicht)[01;31m)[00m
		(SIMPX theater nicht))
	(ADVX dann)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(ADVX
				(ADV vielleicht))[01;31m)[00m
		(NX wir)
		(LK gehen)
		(MF
			(NX wir)
			(ADVX einfach)
			(PX in eine kneipe)
			(APPR nach)
			(ART der)
			[01;36m(NF[00m
				(PX
					(APPR nach)
					(NX dem meeting))[01;36m)[00m)[01;31m)[00m
	(SIMPX
		[01;36m(KOORD[00m
			(KON und)[01;36m)[00m
		(DM ja)
		(VF dann)
		(LK brauchen)
		(MF wir nicht weiter grosartig)
		(VC planen)))
Step:Unary
{'subtrees': ['PX'], 'family': ['NX', 'ADVX', 'PX', 'APPR', 'ART', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(NX (PPER wir)), (ADVX (ADV einfach)), (PX (APPR in) (NX (ART eine) (NN kneipe))), (APPR nach), (ART der)], 'auto preterminal span': (16, 19), 'span': (16, 19), 'parent': 'MF', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX
		[01;31m(NX[00m
			(NX kino)
			(ADVX nicht)[01;31m)[00m
		(SIMPX theater nicht))
	(ADVX dann)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(ADVX
				(ADV vielleicht))[01;31m)[00m
		(NX wir)
		(LK gehen)
		(MF wir einfach in eine kneipe nach der nach dem meeting)[01;31m)[00m
	(SIMPX
		[01;36m(KOORD[00m
			(KON und)[01;36m)[00m
		(DM ja)
		(VF dann)
		(LK brauchen)
		(MF wir nicht weiter grosartig)
		(VC planen)))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['KOORD', 'DM', 'VF', 'LK', 'MF', 'VC'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON',), 'right siblings': [(DM (PTKANT ja)), (VF (ADVX (ADV dann))), (LK (VXFIN (VVFIN brauchen))), (MF (NX (PPER wir)) (ADVX (PTKNEG nicht)) (ADVX (ADV weiter)) (NX (ADJD grosartig))), (VC (VXINF (VVINF planen)))], 'left siblings': [], 'auto preterminal span': (19, 20), 'span': (19, 20), 'parent': 'SIMPX', 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX
		[01;31m(NX[00m
			(NX kino)
			(ADVX nicht)[01;31m)[00m
		(SIMPX theater nicht))
	(ADVX dann)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(ADVX
				(ADV vielleicht))[01;31m)[00m
		(NX wir)
		(LK gehen)
		(MF wir einfach in eine kneipe nach der nach dem meeting)[01;31m)[00m
	(SIMPX und ja dann brauchen wir nicht weiter grosartig planen))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX'], 'family': ['NX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'PTKNEG', 'NN', 'PTKNEG'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (1, 5), 'span': (1, 3), 'left siblings': [], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX kino nicht theater nicht)
	(ADVX dann)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(ADVX
				(ADV vielleicht))[01;31m)[00m
		(NX wir)
		(LK gehen)
		(MF wir einfach in eine kneipe nach der nach dem meeting)[01;31m)[00m
	(SIMPX und ja dann brauchen wir nicht weiter grosartig planen))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['VF', 'NX', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PPER', 'VVFIN', 'PPER', 'ADV', 'APPR', 'ART', 'NN', 'APPR', 'ART', 'APPR', 'ART', 'NN'), 'right siblings': ['NX', 'LK', 'MF'], 'parent': 'SIMPX', 'auto preterminal span': (6, 19), 'span': (6, 7), 'left siblings': [], 'label': 'VF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX kino nicht theater nicht)
	(ADVX dann)
	[01;31m(SIMPX[00m
		(ADVX vielleicht)
		(NX wir)
		(LK gehen)
		(MF wir einfach in eine kneipe nach der nach dem meeting)[01;31m)[00m
	(SIMPX und ja dann brauchen wir nicht weiter grosartig planen))
Step:UNSET remove
{'subtrees': ['ADVX', 'NX', 'LK', 'MF'], 'family': ['DM', 'SIMPX', 'ADVX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'NN', 'PTKNEG', 'NN', 'PTKNEG', 'ADV', 'ADV', 'PPER', 'VVFIN', 'PPER', 'ADV', 'APPR', 'ART', 'NN', 'APPR', 'ART', 'APPR', 'ART', 'NN', 'KON', 'PTKANT', 'ADV', 'VVFIN', 'PPER', 'PTKNEG', 'ADV', 'ADJD', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 28), 'span': (6, 19), 'left siblings': ['DM', 'SIMPX', 'ADVX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP also kino nicht theater nicht dann vielleicht wir gehen wir einfach in eine kneipe nach der nach dem meeting und ja dann brauchen wir nicht weiter grosartig planen)

Sentence 261:
0 Initial errors
0 on fringe, 0 iterations

Sentence 262:
0 Initial errors
0 on fringe, 0 iterations

Sentence 263:
0 Initial errors
0 on fringe, 0 iterations

Sentence 264:
0 Initial errors
0 on fringe, 0 iterations

Sentence 265:
0 Initial errors
0 on fringe, 0 iterations

Sentence 266:
0 Initial errors
0 on fringe, 0 iterations

Sentence 267:
0 Initial errors
0 on fringe, 0 iterations

Sentence 268:
0 Initial errors
0 on fringe, 0 iterations

Sentence 269:
0 Initial errors
0 on fringe, 0 iterations

Sentence 270:
10 Initial errors
0 on fringe, 6 iterations
4 Error:VP Attachment
2 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:Clause Attachment
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(LK danke)
		[01;31m(NF[00m [01;33m(SIMPX[00m
			[01;31m(SIMPX[00m
				(C das)
				(MF du so kurzfristig hier)
				[01;31m(VC[00m
					[01;36m(VC[00m [01;36m(VXFIN[00m [01;31m(VXINF[00m
						(VVPP runtergeschaut)[01;31m)[00m [01;33mSIMPX) SIMPX)[00m[01;36m)[00m[01;36m)[00m
					[01;31m(VXFIN[00m
						(VAFIN hast)[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(SIMPX wir mussen ja noch ein termin vereinbaren))
Step:VP Attachment
{'new_parent': 'NF', 'new_family': ['SIMPX', 'VXFIN'], 'mover info': [('VXFIN', (7, 8))], 'old_family': ['VXINF', 'VXFIN'], 'start left siblings': ['VXINF'], 'auto preterminals': ('KOUS', 'PPER', 'ADV', 'ADJD', 'ADV', 'VVPP', 'VAFIN'), 'start right siblings': [], 'end left siblings': ['SIMPX'], 'auto preterminal span': (1, 8), 'movers': ['VXFIN'], 'old_parent': 'VC', 'POS confusion': ('VAFIN', 'VAFIN'), 'end right siblings': [], 'classified_type': 'VP Attachment', 'type': 'move'}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(LK danke)
		[01;31m(NF[00m
			(SIMPX
				(C das)
				(MF du so kurzfristig hier)
				[01;36m(VXFIN[00m
					(VC
						[01;31m(VXINF[00m
							(VVPP runtergeschaut)[01;31m)[00m)[01;36m)[00m) [01;33mSIMPX)[00m
			[01;31m(VXFIN[00m
				(VAFIN hast)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(SIMPX wir mussen ja noch ein termin vereinbaren))
Step:Single Word Phrase
{'family': ['VXFIN'], 'auto preterminal span': (6, 7), 'span': (6, 7), 'subtrees': ['VVPP'], 'parent': 'VC', 'over_word': True, 'auto preterminals': ('VVPP',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VXINF', 'VXFIN')}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(LK danke)
		[01;31m(NF[00m
			(SIMPX das du so kurzfristig hier runtergeschaut) [01;33mSIMPX)[00m
			[01;31m(VXFIN[00m
				(VAFIN hast)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(SIMPX wir mussen ja noch ein termin vereinbaren))
Step:UNSET remove
{'subtrees': ['LK', 'NF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'KOUS', 'PPER', 'ADV', 'ADJD', 'ADV', 'VVPP', 'VAFIN', 'PPER', 'VMFIN', 'ADV', 'ADV', 'ART', 'NN', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 15), 'span': (0, 8), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP [01;33m(SIMPX[00m
	(LK danke)
	[01;31m(NF[00m
		(SIMPX das du so kurzfristig hier runtergeschaut) [01;33mSIMPX)[00m
		[01;31m(VXFIN[00m
			(VAFIN hast)[01;31m)[00m[01;31m)[00m
	(SIMPX wir mussen ja noch ein termin vereinbaren))
Step:UNSET remove
{'subtrees': ['SIMPX', 'VXFIN'], 'family': ['LK', 'NF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'KOUS', 'PPER', 'ADV', 'ADJD', 'ADV', 'VVPP', 'VAFIN', 'PPER', 'VMFIN', 'ADV', 'ADV', 'ART', 'NN', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 15), 'span': (1, 8), 'left siblings': ['LK'], 'label': 'NF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	[01;36m(SIMPX[00m
		(LK danke)
		(SIMPX das du so kurzfristig hier runtergeschaut)[01;36m)[00m
	[01;31m(VXFIN[00m
		(VAFIN hast)[01;31m)[00m
	(SIMPX wir mussen ja noch ein termin vereinbaren))
Step:Clause Attachment
{'subtrees': ['LK', 'SIMPX'], 'family': ['SIMPX', 'VXFIN', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'KOUS', 'PPER', 'ADV', 'ADJD', 'ADV', 'VVPP'), 'right siblings': [(VXFIN (VAFIN hast)), (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VMFIN mussen))) (MF (ADVX (ADV ja)) (ADVX (ADV noch)) (NX (ART ein) (NN termin))) (VC (VXINF (VVINF vereinbaren))))], 'left siblings': [], 'auto preterminal span': (0, 7), 'span': (0, 7), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(SIMPX danke das du so kurzfristig hier runtergeschaut)
	[01;31m(VXFIN[00m
		(VAFIN hast)[01;31m)[00m
	(SIMPX wir mussen ja noch ein termin vereinbaren))
Step:Single Word Phrase
{'subtrees': ['VAFIN'], 'family': ['SIMPX', 'VXFIN', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('VVFIN', 'KOUS', 'PPER', 'ADV', 'ADJD', 'ADV', 'VVPP', 'VAFIN', 'PPER', 'VMFIN', 'ADV', 'ADV', 'ART', 'NN', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 15), 'span': (7, 8), 'left siblings': ['SIMPX'], 'label': 'VXFIN', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP danke das du so kurzfristig hier runtergeschaut hast wir mussen ja noch ein termin vereinbaren)

Sentence 271:
0 Initial errors
0 on fringe, 0 iterations

Sentence 272:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF hannover)
		(LK ist)
		[01;31m(MF[00m
			(NX
				(ART das)
				(NN ziel))[01;31m)[00m)
	(NX anderthalb tage))
Step:Unary
{'subtrees': ['NX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE', 'VAFIN', 'ART', 'NN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 4), 'span': (2, 4), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP hannover ist das ziel anderthalb tage)

Sentence 273:
2 Initial errors
0 on fringe, 2 iterations
1 Error:UNSET add
1 Error:NP Internal Structure
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX in den nachsten drei monaten gibt es ja ofter diese ganzen feiertage)
		(NX
			[01;36m(NX[00m
				(NX ostern)
				(NX pfingsten)[01;36m)[00m
			(KON und)
			(ADVX so weiter)))[01;36m)[00m
Step:UNSET add
{'subtrees': ['SIMPX', 'NX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'ADJA', 'CARD', 'NN', 'VVFIN', 'PPER', 'ADV', 'ADV', 'PDAT', 'ADJA', 'NN', 'NE', 'NE', 'KON', 'ADV', 'ADV'), 'right siblings': [], 'left siblings': [], 'auto preterminal span': (0, 17), 'span': (0, 17), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX in den nachsten drei monaten gibt es ja ofter diese ganzen feiertage)
		(NX
			[01;36m(NX[00m
				(NX ostern)
				(NX pfingsten)[01;36m)[00m
			(KON und)
			(ADVX so weiter))))
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['NX', 'KON', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE', 'NE'), 'right siblings': [(KON und), (ADVX (ADVX (ADV so)) (ADV weiter))], 'left siblings': [], 'auto preterminal span': (12, 14), 'span': (12, 14), 'parent': 'NX', 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'add'}
(TOP in den nachsten drei monaten gibt es ja ofter diese ganzen feiertage ostern pfingsten und so weiter)

Sentence 274:
0 Initial errors
0 on fringe, 0 iterations

Sentence 275:
0 Initial errors
0 on fringe, 0 iterations

Sentence 276:
0 Initial errors
0 on fringe, 0 iterations

Sentence 277:
8 Initial errors
0 on fringe, 8 iterations
1 Error:Unary
1 Error:UNSET add
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:PP Attachment
1 Error:PP Attachment
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		(VF ich)
		(LK habe)
		(MF
			(PX
				[01;31m(PX[00m
					(APPR in)
					[01;33m(NX[00m (NX der mitte)[01;31m)[00m
				(PX vom april)) [01;33mNX)[00m
			(NX urlaub))[01;31m)[00m
	[01;31m(PX[00m
		[01;36m(DM[00m
			(ADVX
				(ADV also))[01;36m)[00m
		[01;31m(PX[00m
			(APPR uber)
			(NX ostern)[01;31m)[00m[01;31m)[00m
	(SIMPX
		(VF wir)
		(LK fahren)
		[01;36m(MF[00m
			[01;36m(PX[00m
				(MF uber ostern)
				(VC weg)[01;36m)[00m[01;36m)[00m))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['DM', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV',), 'right siblings': [(PX (APPR uber) (NX (NE ostern)))], 'left siblings': [], 'auto preterminal span': (8, 9), 'span': (8, 9), 'parent': 'PX', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(VF ich)
		(LK habe)
		(MF
			(PX
				[01;31m(PX[00m
					(APPR in)
					[01;33m(NX[00m (NX der mitte)[01;31m)[00m
				(PX vom april)) [01;33mNX)[00m
			(NX urlaub))[01;31m)[00m
	[01;31m(PX[00m
		(DM also)
		[01;31m(PX[00m
			(APPR uber)
			(NX ostern)[01;31m)[00m[01;31m)[00m
	(SIMPX
		(VF wir)
		(LK fahren)
		[01;36m(MF[00m
			[01;36m(PX[00m
				(MF uber ostern)
				(VC weg)[01;36m)[00m[01;36m)[00m))
Step:UNSET add
{'subtrees': ['MF', 'VC'], 'family': ['VF', 'LK', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NE', 'PTKVZ'), 'right siblings': [], 'left siblings': [(VF (NX (PPER wir))), (LK (VXFIN (VVFIN fahren)))], 'auto preterminal span': (13, 16), 'span': (13, 16), 'parent': 'SIMPX', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(VF ich)
		(LK habe)
		(MF
			(PX
				[01;31m(PX[00m
					(APPR in)
					[01;33m(NX[00m (NX der mitte)[01;31m)[00m
				(PX vom april)) [01;33mNX)[00m
			(NX urlaub))[01;31m)[00m
	[01;31m(PX[00m
		(DM also)
		[01;31m(PX[00m
			(APPR uber)
			(NX ostern)[01;31m)[00m[01;31m)[00m
	(SIMPX
		(VF wir)
		(LK fahren)
		[01;36m(MF[00m
			(PX
				(MF uber ostern)
				(VC weg))[01;36m)[00m))
Step:Unary
{'subtrees': ['PX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NE', 'PTKVZ'), 'right siblings': [], 'left siblings': [(VF (NX (PPER wir))), (LK (VXFIN (VVFIN fahren)))], 'auto preterminal span': (13, 16), 'span': (13, 16), 'parent': 'SIMPX', 'label': 'MF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(VF ich)
		(LK habe)
		(MF
			(PX
				[01;31m(PX[00m
					(APPR in)
					[01;33m(NX[00m (NX der mitte)[01;31m)[00m
				(PX vom april)) [01;33mNX)[00m
			(NX urlaub))[01;31m)[00m
	[01;31m(PX[00m
		(DM also)
		[01;31m(PX[00m
			(APPR uber)
			(NX ostern)[01;31m)[00m[01;31m)[00m
	(SIMPX wir fahren uber ostern weg))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'PX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'APPR', 'ART', 'NN', 'APPRART', 'NN', 'NN', 'ADV', 'APPR', 'NE', 'PPER', 'VVFIN', 'APPR', 'NE', 'PTKVZ'), 'right siblings': ['PX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 16), 'span': (0, 8), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(VF ich)
	(LK habe)
	(MF
		(PX
			[01;31m(PX[00m
				(APPR in)
				[01;33m(NX[00m (NX der mitte)[01;31m)[00m
			(PX vom april)) [01;33mNX)[00m
		(NX urlaub))
	[01;31m(PX[00m
		(DM also)
		[01;31m(PX[00m
			(APPR uber)
			(NX ostern)[01;31m)[00m[01;31m)[00m
	(SIMPX wir fahren uber ostern weg))
Step:UNSET remove
{'subtrees': ['APPR', 'NX'], 'family': ['PX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'APPRART', 'NN'), 'right siblings': ['PX'], 'parent': 'PX', 'auto preterminal span': (2, 7), 'span': (2, 5), 'left siblings': [], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(VF ich)
	(LK habe)
	(MF
		(PX
			(APPR in)
			[01;36m(NX[00m
				(NX der mitte)
				(PX vom april)[01;36m)[00m)
		(NX urlaub))
	[01;31m(PX[00m
		(DM also)
		[01;31m(PX[00m
			(APPR uber)
			(NX ostern)[01;31m)[00m[01;31m)[00m
	(SIMPX wir fahren uber ostern weg))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['APPR', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPRART', 'NN'), 'right siblings': [], 'left siblings': [(APPR in)], 'auto preterminal span': (3, 7), 'span': (3, 7), 'parent': 'PX', 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(VF ich)
	(LK habe)
	(MF in der mitte vom april urlaub)
	[01;31m(PX[00m
		(DM also)
		[01;31m(PX[00m
			(APPR uber)
			(NX ostern)[01;31m)[00m[01;31m)[00m
	(SIMPX wir fahren uber ostern weg))
Step:PP Attachment
{'subtrees': ['DM', 'PX'], 'family': ['VF', 'LK', 'MF', 'PX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'APPR', 'ART', 'NN', 'APPRART', 'NN', 'NN', 'ADV', 'APPR', 'NE', 'PPER', 'VVFIN', 'APPR', 'NE', 'PTKVZ'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 16), 'span': (8, 11), 'left siblings': ['VF', 'LK', 'MF'], 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(VF ich)
	(LK habe)
	(MF in der mitte vom april urlaub)
	(DM also)
	[01;31m(PX[00m
		(APPR uber)
		(NX ostern)[01;31m)[00m
	(SIMPX wir fahren uber ostern weg))
Step:UNSET remove
{'subtrees': ['APPR', 'NX'], 'family': ['VF', 'LK', 'MF', 'DM', 'PX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'APPR', 'ART', 'NN', 'APPRART', 'NN', 'NN', 'ADV', 'APPR', 'NE', 'PPER', 'VVFIN', 'APPR', 'NE', 'PTKVZ'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 16), 'span': (9, 11), 'left siblings': ['VF', 'LK', 'MF', 'DM'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ich habe in der mitte vom april urlaub also uber ostern wir fahren uber ostern weg)

Sentence 278:
1 Initial errors
0 on fringe, 1 iterations
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK wurde)
		(MF
			(ADJX am liebsten)
			(ADVX direkt)
			[01;31m(PX[00m
				(APPR in)
				(NX den mai)[01;31m)[00m)
		(VC gehen)))
Step:UNSET remove
{'subtrees': ['APPR', 'NX'], 'family': ['ADJX', 'ADVX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKA', 'ADJD', 'ADV', 'APPR', 'ART', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 8), 'span': (5, 8), 'left siblings': ['ADJX', 'ADVX'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ich wurde am liebsten direkt in den mai gehen)

Sentence 279:
3 Initial errors
0 on fringe, 3 iterations
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX und da ware bei mir die erste maiwoche)
	(DM also)
	[01;31m(SIMPX[00m
		(VF dienstag funfter mai)
		(LK konnte)
		[01;33m(MF[00m (MF ich)[01;31m)[00m
	[01;31m(DM[00m
		(ADVX
			(ADV also))[01;31m)[00m [01;33mMF)[00m
	(SIMPX funfter sechster mai hatte ich zeit))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'DM', 'SIMPX', 'DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ADV', 'VAFIN', 'APPR', 'PPER', 'ART', 'ADJA', 'NN', 'ADV', 'NN', 'ADJA', 'NN', 'VMFIN', 'PPER', 'ADV', 'ADJA', 'ADJA', 'NN', 'VAFIN', 'PPER', 'NN'), 'right siblings': ['DM', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 21), 'span': (9, 14), 'left siblings': ['SIMPX', 'DM'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX und da ware bei mir die erste maiwoche)
	(DM also)
	(VF dienstag funfter mai)
	(LK konnte)
	[01;36m(MF[00m
		(MF ich)
		[01;31m(DM[00m
			(ADVX
				(ADV also))[01;31m)[00m[01;36m)[00m
	(SIMPX funfter sechster mai hatte ich zeit))
Step:UNSET add
{'subtrees': ['MF', 'DM'], 'family': ['SIMPX', 'DM', 'VF', 'LK', 'MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV'), 'right siblings': [(SIMPX (VF (NX (ADJX (ADJX (ADJA funfter)) (ADJX (ADJA sechster))) (NN mai))) (LK (VXFIN (VAFIN hatte))) (MF (NX (PPER ich)) (NX (NN zeit))))], 'left siblings': [(SIMPX (KOORD (KON und)) (VF (ADVX (ADV da))) (LK (VXFIN (VAFIN ware))) (MF (PX (APPR bei) (NX (PPER mir))) (NX (ART die) (ADJX (ADJA erste)) (NN maiwoche)))), (DM (ADVX (ADV also))), (VF (NX (NN dienstag) (NX (ADJX (ADJA funfter)) (NN mai)))), (LK (VXFIN (VMFIN konnte)))], 'auto preterminal span': (13, 15), 'span': (13, 15), 'parent': 'TOP', 'label': 'MF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX und da ware bei mir die erste maiwoche)
	(DM also)
	(VF dienstag funfter mai)
	(LK konnte)
	(MF
		(MF ich)
		[01;31m(DM[00m
			(ADVX
				(ADV also))[01;31m)[00m)
	(SIMPX funfter sechster mai hatte ich zeit))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['MF', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (13, 15), 'span': (14, 15), 'left siblings': ['MF'], 'label': 'DM', 'classified_type': 'Unary', 'type': 'remove'}
(TOP und da ware bei mir die erste maiwoche also dienstag funfter mai konnte ich also funfter sechster mai hatte ich zeit)

Sentence 280:
0 Initial errors
0 on fringe, 0 iterations

Sentence 281:
0 Initial errors
0 on fringe, 0 iterations

Sentence 282:
0 Initial errors
0 on fringe, 0 iterations

Sentence 283:
0 Initial errors
0 on fringe, 0 iterations

Sentence 284:
0 Initial errors
0 on fringe, 0 iterations

Sentence 285:
0 Initial errors
0 on fringe, 0 iterations

Sentence 286:
0 Initial errors
0 on fringe, 0 iterations

Sentence 287:
0 Initial errors
0 on fringe, 0 iterations

Sentence 288:
0 Initial errors
0 on fringe, 0 iterations

Sentence 289:
0 Initial errors
0 on fringe, 0 iterations

Sentence 290:
0 Initial errors
0 on fringe, 0 iterations

Sentence 291:
0 Initial errors
0 on fringe, 0 iterations

Sentence 292:
3 Initial errors
0 on fringe, 2 iterations
2 Error:PP Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ice)
		(LK ist)
		[01;31m(MF[00m [01;33m(MF[00m
			(ADVX ja)
			(ADJX relativ zugig)[01;31m)[00m
		[01;31m(NF[00m
			(PX ab munchen) [01;33mMF)[00m
			(ADVX dann)[01;31m)[00m))
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'ADJX', 'PX'], 'mover info': [('PX', (5, 7))], 'old_family': ['PX', 'ADVX'], 'start left siblings': [], 'auto preterminals': ('NE', 'VAFIN', 'ADV', 'ADV', 'ADJD', 'APPR', 'NE', 'ADV'), 'start right siblings': ['ADVX'], 'end left siblings': ['ADVX', 'ADJX'], 'auto preterminal span': (0, 8), 'movers': ['PX'], 'old_parent': 'NF', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(VF ice)
		(LK ist)
		(MF ja relativ zugig ab munchen)
		[01;31m(NF[00m
			(ADVX
				(ADV dann))[01;31m)[00m))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE', 'VAFIN', 'ADV', 'ADV', 'ADJD', 'APPR', 'NE', 'ADV'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 8), 'span': (7, 8), 'left siblings': ['VF', 'LK', 'MF'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ice ist ja relativ zugig ab munchen dann)

Sentence 293:
0 Initial errors
0 on fringe, 0 iterations

Sentence 294:
0 Initial errors
0 on fringe, 0 iterations

Sentence 295:
0 Initial errors
0 on fringe, 0 iterations

Sentence 296:
8 Initial errors
0 on fringe, 5 iterations
2 Error:Different label
2 Error:Single Word Phrase
2 Error:NP Attachment
1 Error:PP Attachment
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX ab funf uhr drei konnte man abfahren)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(KOORD aber)
			(LK ist)
			[01;31m(MF[00m
				(ADVX nicht)
				[01;36m(PX[00m [01;31m(NX[00m
					(NX ziel)
					(NX der sache)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m
		[01;31m(NX[00m
			(KON sondern)
			[01;36m(ADJX[00m [01;31m(ADVX[00m
				(ADV lieber)[01;31m)[00m[01;36m)[00m
			(NX so sieben)[01;31m)[00m[01;36m)[00m)
Step:Different label
{'family': ['ADVX', 'PX'], 'auto preterminal span': (10, 13), 'span': (10, 13), 'subtrees': ['NX', 'NX'], 'parent': 'MF', 'over_word': False, 'auto preterminals': ('NN', 'ART', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('NX', 'PX')}
(TOP
	(SIMPX ab funf uhr drei konnte man abfahren)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(KOORD aber)
			(LK ist)
			[01;31m(MF[00m
				(ADVX nicht)
				(PX ziel der sache)[01;31m)[00m[01;31m)[00m
		[01;31m(NX[00m
			(KON sondern)
			[01;36m(ADJX[00m [01;31m(ADVX[00m
				(ADV lieber)[01;31m)[00m[01;36m)[00m
			(NX so sieben)[01;31m)[00m[01;36m)[00m)
Step:Single Word Phrase
{'family': ['KON', 'ADJX', 'NX'], 'auto preterminal span': (14, 15), 'span': (14, 15), 'subtrees': ['ADV'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'ADJX')}
(TOP
	(SIMPX ab funf uhr drei konnte man abfahren)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(KOORD aber)
			(LK ist)
			[01;31m(MF[00m
				(ADVX nicht)
				(PX ziel der sache)[01;31m)[00m[01;31m)[00m
		[01;31m(NX[00m
			(KON sondern)
			(ADJX lieber)
			(NX so sieben)[01;31m)[00m[01;36m)[00m)
Step:NP Attachment
{'new_parent': 'SIMPX', 'new_family': ['KOORD', 'LK', 'MF', 'NX'], 'mover info': [('NX', (13, 17))], 'old_family': ['SIMPX', 'SIMPX', 'NX'], 'start left siblings': ['SIMPX', 'SIMPX'], 'auto preterminals': ('APPR', 'CARD', 'NN', 'CARD', 'VMFIN', 'PIS', 'VVINF', 'KON', 'VAFIN', 'PTKNEG', 'NN', 'ART', 'NN', 'KON', 'ADV', 'ADV', 'CARD'), 'start right siblings': [], 'end left siblings': ['KOORD', 'LK', 'MF'], 'auto preterminal span': (0, 17), 'movers': ['NX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	(SIMPX ab funf uhr drei konnte man abfahren)
	(SIMPX
		(KOORD aber)
		(LK ist)
		[01;31m(MF[00m
			(ADVX nicht)
			(PX ziel der sache)[01;31m)[00m
		[01;31m(NX[00m
			(KON sondern)
			(ADJX lieber)
			(NX so sieben)[01;31m)[00m))
Step:PP Attachment
{'subtrees': ['ADVX', 'PX'], 'family': ['KOORD', 'LK', 'MF', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'VAFIN', 'PTKNEG', 'NN', 'ART', 'NN', 'KON', 'ADV', 'ADV', 'CARD'), 'right siblings': ['NX'], 'parent': 'SIMPX', 'auto preterminal span': (7, 17), 'span': (9, 13), 'left siblings': ['KOORD', 'LK'], 'label': 'MF', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(SIMPX ab funf uhr drei konnte man abfahren)
	(SIMPX
		(KOORD aber)
		(LK ist)
		(ADVX nicht)
		(PX ziel der sache)
		[01;31m(NX[00m
			(KON sondern)
			(ADJX lieber)
			(NX so sieben)[01;31m)[00m))
Step:Modifier Attachment
{'subtrees': ['KON', 'ADJX', 'NX'], 'family': ['KOORD', 'LK', 'ADVX', 'PX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'VAFIN', 'PTKNEG', 'NN', 'ART', 'NN', 'KON', 'ADV', 'ADV', 'CARD'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (7, 17), 'span': (13, 17), 'left siblings': ['KOORD', 'LK', 'ADVX', 'PX'], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP ab funf uhr drei konnte man abfahren aber ist nicht ziel der sache sondern lieber so sieben)

Sentence 297:
7 Initial errors
0 on fringe, 4 iterations
2 Error:Clause Attachment
2 Error:UNSET move
2 Error:PP Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK denke)
		[01;31m(SIMPX[00m
			(LK sagen)
			[01;33m(MF[00m (MF wir mal)[01;31m)[00m
		[01;31m(MF[00m
			[01;31m(NX[00m
				(PX mit dem ice)
				[01;36m(NX[00m
					(NX funf stunden)
					(PX nach hannover)[01;36m)[00m[01;31m)[00m[01;31m)[00m) [01;33mMF)[00m
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(KOORD und)
			(VF wir)
			(LK mussen)[01;31m)[00m
		(DM na ja)
		(SIMPX funfzehn uhr mussen wir vielleicht da sein)[01;36m)[00m)
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['KOORD', 'VF', 'LK', 'DM', 'SIMPX'], 'mover info': [('DM', (16, 18)), ('SIMPX', (18, 25))], 'old_family': ['DM', 'SIMPX', 'SIMPX', 'DM', 'SIMPX'], 'start left siblings': ['DM', 'SIMPX', 'SIMPX'], 'auto preterminals': ('ADV', 'PPER', 'VVFIN', 'VVFIN', 'PPER', 'ADV', 'APPR', 'ART', 'NE', 'CARD', 'NN', 'APPR', 'NE', 'KON', 'PPER', 'VMFIN', 'ITJ', 'PTKANT', 'CARD', 'NN', 'VMFIN', 'PPER', 'ADV', 'ADV', 'VAINF'), 'start right siblings': [], 'end left siblings': ['KOORD', 'VF', 'LK'], 'auto preterminal span': (0, 25), 'movers': ['DM', 'SIMPX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK denke)
		[01;31m(SIMPX[00m
			(LK sagen)
			[01;33m(MF[00m (MF wir mal)[01;31m)[00m
		[01;31m(MF[00m
			[01;31m(NX[00m
				(PX mit dem ice)
				[01;36m(NX[00m
					(NX funf stunden)
					(PX nach hannover)[01;36m)[00m[01;31m)[00m[01;31m)[00m) [01;33mMF)[00m
	(SIMPX und wir mussen na ja funfzehn uhr mussen wir vielleicht da sein))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['MF', 'NX'], 'mover info': [('MF', (4, 6))], 'old_family': ['LK', 'MF'], 'start left siblings': ['LK'], 'auto preterminals': ('PPER', 'VVFIN', 'VVFIN', 'PPER', 'ADV', 'APPR', 'ART', 'NE', 'CARD', 'NN', 'APPR', 'NE'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (1, 13), 'movers': ['MF'], 'old_parent': 'SIMPX', 'end right siblings': ['NX'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK denke)
		[01;31m(SIMPX[00m
			(LK
				(VXFIN
					(VVFIN sagen)))[01;31m)[00m
		(MF
			(MF wir mal)
			[01;31m(NX[00m
				(PX mit dem ice)
				[01;36m(NX[00m
					(NX funf stunden)
					(PX nach hannover)[01;36m)[00m[01;31m)[00m))
	(SIMPX und wir mussen na ja funfzehn uhr mussen wir vielleicht da sein))
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['MF', 'PX', 'NX'], 'mover info': [('PX', (6, 9))], 'old_family': ['PX', 'NX', 'PX'], 'start left siblings': [], 'auto preterminals': ('PPER', 'ADV', 'APPR', 'ART', 'NE', 'CARD', 'NN', 'APPR', 'NE'), 'start right siblings': ['NX', 'PX'], 'end left siblings': ['MF'], 'auto preterminal span': (4, 13), 'movers': ['PX'], 'old_parent': 'NX', 'end right siblings': ['NX'], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK denke)
		[01;31m(SIMPX[00m
			(LK
				(VXFIN
					(VVFIN sagen)))[01;31m)[00m
		(MF wir mal mit dem ice funf stunden nach hannover))
	(SIMPX und wir mussen na ja funfzehn uhr mussen wir vielleicht da sein))
Step:Unary
{'subtrees': ['LK'], 'family': ['VF', 'LK', 'SIMPX', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'VVFIN', 'PPER', 'ADV', 'APPR', 'ART', 'NE', 'CARD', 'NN', 'APPR', 'NE'), 'right siblings': ['MF'], 'parent': 'SIMPX', 'auto preterminal span': (1, 13), 'span': (3, 4), 'left siblings': ['VF', 'LK'], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP also ich denke sagen wir mal mit dem ice funf stunden nach hannover und wir mussen na ja funfzehn uhr mussen wir vielleicht da sein)

Sentence 298:
13 Initial errors
0 on fringe, 10 iterations
3 Error:Clause Attachment
2 Error:Single Word Phrase
1 Error:Unary
1 Error:UNSET add
1 Error:Unary
1 Error:Unary
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			[01;36m(LV[00m
				[01;36m(VF[00m [01;31m(LV[00m
					(SIMPX
						(C wenn)
						(MF wir dann um neun oder zehn)
						(VC fahren))[01;31m)[00m[01;36m)[00m
				(SIMPX
					(LK sagen)
					(MF wir)
					[01;31m(NF[00m
						(SIMPX
							(VF wir)
							(LK konnten)
							(MF um neun)
							(VC fahren))[01;31m)[00m)[01;36m)[00m[01;36m)[00m
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKM[00m
				(LK nehmen)
				(MF wir ein zweites fruhstuck im ice)[01;31m)[00m
			[01;36m(LKMVC[00m
				[01;31m(LKM[00m
					(LK lesen)
					[01;36m(MF[00m
						(NX
							(ART ein)
							(ADJX bischen)
							(NN zeitung))[01;36m)[00m[01;31m)[00m
				(LKMVC haben das meeting vorbereitet)[01;36m)[00m
			(KON und)
			(LKMVC
				(LK kommen)
				(MF
					(ADVX dann)
					(PX
						(APPR um)
						(NX
							[01;36m(ADJX[00m [01;31m(NX[00m
								(CARD zwei)[01;31m)[00m[01;36m)[00m
							(KON oder)
							(NX drei)))
					(PX in hannover))
				(VC an))[01;31m)[00m[01;31m)[00m)
Step:Clause Attachment
{'new_parent': 'LV', 'new_family': ['SIMPX', 'SIMPX'], 'mover info': [('SIMPX', (8, 15))], 'old_family': ['LV', 'SIMPX', 'VF', 'FKOORD'], 'start left siblings': ['LV'], 'auto preterminals': ('KOUS', 'PPER', 'ADV', 'APPR', 'CARD', 'KON', 'CARD', 'VVFIN', 'VVFIN', 'PPER', 'PPER', 'VMFIN', 'APPR', 'CARD', 'VVINF', 'ADV', 'VVFIN', 'PPER', 'ART', 'ADJA', 'NN', 'APPRART', 'NE', 'VVFIN', 'ART', 'PIDAT', 'NN', 'VAFIN', 'ART', 'NN', 'VVPP', 'KON', 'VVFIN', 'ADV', 'APPR', 'CARD', 'KON', 'CARD', 'APPR', 'NE', 'PTKVZ'), 'start right siblings': ['VF', 'FKOORD'], 'end left siblings': ['SIMPX'], 'auto preterminal span': (0, 41), 'adding node already present': False, 'movers': ['SIMPX'], 'old_parent': 'SIMPX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move', 'added label': 'ADJX'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX
			(LV
				[01;36m(VF[00m
					(SIMPX
						(C wenn)
						(MF wir dann um neun oder zehn)
						(VC fahren))[01;36m)[00m
				(SIMPX
					(LK sagen)
					(MF wir)
					[01;31m(NF[00m
						(SIMPX
							(VF wir)
							(LK konnten)
							(MF um neun)
							(VC fahren))[01;31m)[00m)))
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKM[00m
				(LK nehmen)
				(MF wir ein zweites fruhstuck im ice)[01;31m)[00m
			[01;36m(LKMVC[00m
				[01;31m(LKM[00m
					(LK lesen)
					[01;36m(MF[00m
						(NX
							(ART ein)
							(ADJX bischen)
							(NN zeitung))[01;36m)[00m[01;31m)[00m
				(LKMVC haben das meeting vorbereitet)[01;36m)[00m
			(KON und)
			(LKMVC
				(LK kommen)
				(MF
					(ADVX dann)
					(PX
						(APPR um)
						(NX
							[01;36m(ADJX[00m [01;31m(NX[00m
								(CARD zwei)[01;31m)[00m[01;36m)[00m
							(KON oder)
							(NX drei)))
					(PX in hannover))
				(VC an))[01;31m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'family': ['ADJX', 'KON', 'NX'], 'auto preterminal span': (35, 36), 'span': (35, 36), 'subtrees': ['CARD'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('CARD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX
			(LV
				[01;36m(VF[00m
					(SIMPX
						(C wenn)
						(MF wir dann um neun oder zehn)
						(VC fahren))[01;36m)[00m
				(SIMPX
					(LK sagen)
					(MF wir)
					[01;31m(NF[00m
						(SIMPX
							(VF wir)
							(LK konnten)
							(MF um neun)
							(VC fahren))[01;31m)[00m)))
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKM[00m
				(LK nehmen)
				(MF wir ein zweites fruhstuck im ice)[01;31m)[00m
			[01;36m(LKMVC[00m
				[01;31m(LKM[00m
					(LK lesen)
					[01;36m(MF[00m
						(NX
							(ART ein)
							(ADJX bischen)
							(NN zeitung))[01;36m)[00m[01;31m)[00m
				(LKMVC haben das meeting vorbereitet)[01;36m)[00m
			(KON und)
			(LKMVC kommen dann um zwei oder drei in hannover an)[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ADV', 'APPR', 'CARD', 'KON', 'CARD', 'VVFIN'), 'right siblings': [(SIMPX (LK (VXFIN (VVFIN sagen))) (MF (NX (PPER wir))) (NF (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VMFIN konnten))) (MF (PX (APPR um) (NX (CARD neun)))) (VC (VXINF (VVINF fahren))))))], 'left siblings': [], 'auto preterminal span': (0, 8), 'span': (0, 8), 'parent': 'LV', 'label': 'VF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX
			(LV
				(VF wenn wir dann um neun oder zehn fahren)
				(SIMPX
					(LK sagen)
					(MF wir)
					[01;31m(NF[00m
						(SIMPX
							(VF wir)
							(LK konnten)
							(MF um neun)
							(VC fahren))[01;31m)[00m)))
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKM[00m
				(LK nehmen)
				(MF wir ein zweites fruhstuck im ice)[01;31m)[00m
			[01;36m(LKMVC[00m
				[01;31m(LKM[00m
					(LK lesen)
					[01;36m(MF[00m
						(NX
							(ART ein)
							(ADJX bischen)
							(NN zeitung))[01;36m)[00m[01;31m)[00m
				(LKMVC haben das meeting vorbereitet)[01;36m)[00m
			(KON und)
			(LKMVC kommen dann um zwei oder drei in hannover an)[01;31m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['LKM', 'LKMVC'], 'family': ['LKM', 'LKMVC', 'KON', 'LKMVC'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'ART', 'PIDAT', 'NN', 'VAFIN', 'ART', 'NN', 'VVPP'), 'right siblings': [(KON und), (LKMVC (LK (VXFIN (VVFIN kommen))) (MF (ADVX (ADV dann)) (PX (APPR um) (NX (ADJX (CARD zwei)) (KON oder) (NX (CARD drei)))) (PX (APPR in) (NX (NE hannover)))) (VC (PTKVZ an)))], 'left siblings': [(LKM (LK (VXFIN (VVFIN nehmen))) (MF (NX (PPER wir)) (NX (ART ein) (ADJX (ADJA zweites)) (NN fruhstuck)) (PX (APPRART im) (NX (NE ice)))))], 'auto preterminal span': (23, 31), 'span': (23, 31), 'parent': 'FKOORD', 'label': 'LKMVC', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX
			(LV
				(VF wenn wir dann um neun oder zehn fahren)
				(SIMPX
					(LK sagen)
					(MF wir)
					[01;31m(NF[00m
						(SIMPX
							(VF wir)
							(LK konnten)
							(MF um neun)
							(VC fahren))[01;31m)[00m)))
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKM[00m
				(LK nehmen)
				(MF wir ein zweites fruhstuck im ice)[01;31m)[00m
			(LKMVC
				[01;31m(LKM[00m
					(LK lesen)
					[01;36m(MF[00m
						(NX
							(ART ein)
							(ADJX bischen)
							(NN zeitung))[01;36m)[00m[01;31m)[00m
				(LKMVC haben das meeting vorbereitet))
			(KON und)
			(LKMVC kommen dann um zwei oder drei in hannover an)[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['NX'], 'family': ['LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'PIDAT', 'NN'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VVFIN lesen)))], 'auto preterminal span': (24, 27), 'span': (24, 27), 'parent': 'LKM', 'label': 'MF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX
			(LV
				(VF wenn wir dann um neun oder zehn fahren)
				(SIMPX
					(LK sagen)
					(MF wir)
					[01;31m(NF[00m
						(SIMPX
							(VF wir)
							(LK konnten)
							(MF um neun)
							(VC fahren))[01;31m)[00m)))
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKM[00m
				(LK nehmen)
				(MF wir ein zweites fruhstuck im ice)[01;31m)[00m
			(LKMVC
				[01;31m(LKM[00m
					(LK lesen)
					(MF ein bischen zeitung)[01;31m)[00m
				(LKMVC haben das meeting vorbereitet))
			(KON und)
			(LKMVC kommen dann um zwei oder drei in hannover an)[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX', 'VF', 'FKOORD'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ADV', 'APPR', 'CARD', 'KON', 'CARD', 'VVFIN', 'VVFIN', 'PPER', 'PPER', 'VMFIN', 'APPR', 'CARD', 'VVINF', 'ADV', 'VVFIN', 'PPER', 'ART', 'ADJA', 'NN', 'APPRART', 'NE', 'VVFIN', 'ART', 'PIDAT', 'NN', 'VAFIN', 'ART', 'NN', 'VVPP', 'KON', 'VVFIN', 'ADV', 'APPR', 'CARD', 'KON', 'CARD', 'APPR', 'NE', 'PTKVZ'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 41), 'span': (0, 41), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(LV
			(VF wenn wir dann um neun oder zehn fahren)
			(SIMPX
				(LK sagen)
				(MF wir)
				[01;31m(NF[00m
					(SIMPX
						(VF wir)
						(LK konnten)
						(MF um neun)
						(VC fahren))[01;31m)[00m)))
	(VF dann)
	[01;31m(FKOORD[00m
		[01;31m(LKM[00m
			(LK nehmen)
			(MF wir ein zweites fruhstuck im ice)[01;31m)[00m
		(LKMVC
			[01;31m(LKM[00m
				(LK lesen)
				(MF ein bischen zeitung)[01;31m)[00m
			(LKMVC haben das meeting vorbereitet))
		(KON und)
		(LKMVC kommen dann um zwei oder drei in hannover an)[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'PPER', 'VMFIN', 'APPR', 'CARD', 'VVINF'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (8, 15), 'span': (10, 15), 'left siblings': ['LK', 'MF'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX wenn wir dann um neun oder zehn fahren sagen wir wir konnten um neun fahren)
	(VF dann)
	[01;31m(FKOORD[00m
		[01;31m(LKM[00m
			(LK nehmen)
			(MF wir ein zweites fruhstuck im ice)[01;31m)[00m
		(LKMVC
			[01;31m(LKM[00m
				(LK lesen)
				(MF ein bischen zeitung)[01;31m)[00m
			(LKMVC haben das meeting vorbereitet))
		(KON und)
		(LKMVC kommen dann um zwei oder drei in hannover an)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['LK', 'MF'], 'family': ['LKM', 'LKMVC', 'KON', 'LKMVC'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'ART', 'ADJA', 'NN', 'APPRART', 'NE', 'VVFIN', 'ART', 'PIDAT', 'NN', 'VAFIN', 'ART', 'NN', 'VVPP', 'KON', 'VVFIN', 'ADV', 'APPR', 'CARD', 'KON', 'CARD', 'APPR', 'NE', 'PTKVZ'), 'right siblings': ['LKMVC', 'KON', 'LKMVC'], 'parent': 'FKOORD', 'auto preterminal span': (16, 41), 'span': (16, 23), 'left siblings': [], 'label': 'LKM', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX wenn wir dann um neun oder zehn fahren sagen wir wir konnten um neun fahren)
	(VF dann)
	[01;31m(FKOORD[00m
		(LK nehmen)
		(MF wir ein zweites fruhstuck im ice)
		(LKMVC
			[01;31m(LKM[00m
				(LK lesen)
				(MF ein bischen zeitung)[01;31m)[00m
			(LKMVC haben das meeting vorbereitet))
		(KON und)
		(LKMVC kommen dann um zwei oder drei in hannover an)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['LK', 'MF', 'LKMVC', 'KON', 'LKMVC'], 'family': ['SIMPX', 'VF', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ADV', 'APPR', 'CARD', 'KON', 'CARD', 'VVFIN', 'VVFIN', 'PPER', 'PPER', 'VMFIN', 'APPR', 'CARD', 'VVINF', 'ADV', 'VVFIN', 'PPER', 'ART', 'ADJA', 'NN', 'APPRART', 'NE', 'VVFIN', 'ART', 'PIDAT', 'NN', 'VAFIN', 'ART', 'NN', 'VVPP', 'KON', 'VVFIN', 'ADV', 'APPR', 'CARD', 'KON', 'CARD', 'APPR', 'NE', 'PTKVZ'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 41), 'span': (16, 41), 'left siblings': ['SIMPX', 'VF'], 'label': 'FKOORD', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX wenn wir dann um neun oder zehn fahren sagen wir wir konnten um neun fahren)
	(VF dann)
	(LK nehmen)
	(MF wir ein zweites fruhstuck im ice)
	(LKMVC
		[01;31m(LKM[00m
			(LK lesen)
			(MF ein bischen zeitung)[01;31m)[00m
		(LKMVC haben das meeting vorbereitet))
	(KON und)
	(LKMVC kommen dann um zwei oder drei in hannover an))
Step:UNSET remove
{'subtrees': ['LK', 'MF'], 'family': ['LKM', 'LKMVC'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'ART', 'PIDAT', 'NN', 'VAFIN', 'ART', 'NN', 'VVPP'), 'right siblings': ['LKMVC'], 'parent': 'LKMVC', 'auto preterminal span': (23, 31), 'span': (23, 27), 'left siblings': [], 'label': 'LKM', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP wenn wir dann um neun oder zehn fahren sagen wir wir konnten um neun fahren dann nehmen wir ein zweites fruhstuck im ice lesen ein bischen zeitung haben das meeting vorbereitet und kommen dann um zwei oder drei in hannover an)

Sentence 299:
0 Initial errors
0 on fringe, 0 iterations

Sentence 300:
0 Initial errors
0 on fringe, 0 iterations

Sentence 301:
0 Initial errors
0 on fringe, 0 iterations

Sentence 302:
0 Initial errors
0 on fringe, 0 iterations

Sentence 303:
5 Initial errors
0 on fringe, 5 iterations
1 Error:Single Word Phrase
1 Error:Unary
1 Error:Clause Attachment
1 Error:Unary
1 Error:Co-ordination
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(DM[00m
		[01;31m(NX[00m
			[01;36m(DM[00m
				(KON und)[01;36m)[00m
			[01;36m(DM[00m
				(NX
					(NN moment))[01;36m)[00m[01;31m)[00m[01;31m)[00m
	[01;36m(SIMPX[00m
		(SIMPX wir hatten)
		(SIMPX wir haben ein datum)[01;36m)[00m
	(SIMPX wir haben einen zug))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['DM', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON',), 'right siblings': [(NX (NN moment))], 'left siblings': [], 'auto preterminal span': (0, 1), 'span': (0, 1), 'parent': 'NX', 'label': 'DM', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	[01;31m(DM[00m
		[01;31m(NX[00m
			(DM und)
			[01;36m(DM[00m
				(NX
					(NN moment))[01;36m)[00m[01;31m)[00m[01;31m)[00m
	[01;36m(SIMPX[00m
		(SIMPX wir hatten)
		(SIMPX wir haben ein datum)[01;36m)[00m
	(SIMPX wir haben einen zug))
Step:Unary
{'subtrees': ['NX'], 'family': ['DM', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN',), 'right siblings': [], 'left siblings': [(DM (KON und))], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'NX', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(DM[00m
		[01;31m(NX[00m
			(DM und)
			(DM moment)[01;31m)[00m[01;31m)[00m
	[01;36m(SIMPX[00m
		(SIMPX wir hatten)
		(SIMPX wir haben ein datum)[01;36m)[00m
	(SIMPX wir haben einen zug))
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'PPER', 'VAFIN', 'ART', 'NN'), 'right siblings': [(SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VAFIN haben))) (MF (NX (ART einen) (NN zug))))], 'left siblings': [(DM (NX (DM (KON und)) (DM (NX (NN moment)))))], 'auto preterminal span': (2, 8), 'span': (2, 8), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	[01;31m(DM[00m
		[01;31m(NX[00m
			(DM und)
			(DM moment)[01;31m)[00m[01;31m)[00m
	(SIMPX wir hatten wir haben ein datum)
	(SIMPX wir haben einen zug))
Step:Unary
{'subtrees': ['DM', 'DM'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'NN'), 'right siblings': [], 'parent': 'DM', 'auto preterminal span': (0, 2), 'span': (0, 2), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	[01;31m(DM[00m
		(DM und)
		(DM moment)[01;31m)[00m
	(SIMPX wir hatten wir haben ein datum)
	(SIMPX wir haben einen zug))
Step:Co-ordination
{'subtrees': ['DM', 'DM'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'NN', 'PPER', 'VAFIN', 'PPER', 'VAFIN', 'ART', 'NN', 'PPER', 'VAFIN', 'ART', 'NN'), 'right siblings': ['SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 12), 'span': (0, 2), 'left siblings': [], 'label': 'DM', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP und moment wir hatten wir haben ein datum wir haben einen zug)

Sentence 304:
0 Initial errors
0 on fringe, 0 iterations

Sentence 305:
0 Initial errors
0 on fringe, 0 iterations

Sentence 306:
0 Initial errors
0 on fringe, 0 iterations

Sentence 307:
5 Initial errors
0 on fringe, 5 iterations
1 Error:UNSET add
1 Error:UNSET remove
1 Error:PP Attachment
1 Error:PP Attachment
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF fluge)
			(LK gibt)
			[01;31m(MF[00m
				(NX es)
				(ADVX immer)
				(PX am abend)[01;31m)[00m[01;36m)[00m
		[01;31m(NF[00m
			(ADVX allerdings)
			(PX erst ab achtzehn uhr funfunddreisig)[01;31m)[00m[01;31m)[00m
	(SIMPX
		(KOORD und)
		(VF zuge)
		(LK gehen)
		(MF
			(ADVX sowieso)
			[01;31m(PX[00m
				(NX den ganzen tag)
				(APPO uber)[01;31m)[00m)))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'VVFIN', 'PPER', 'ADV', 'APPRART', 'NN'), 'right siblings': [(NF (ADVX (ADV allerdings)) (PX (ADVX (ADV erst)) (APPR ab) (NX (NX (ADJX (CARD achtzehn)) (NN uhr)) (ADJX (CARD funfunddreisig)))))], 'left siblings': [], 'auto preterminal span': (0, 6), 'span': (0, 6), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX
			(VF fluge)
			(LK gibt)
			[01;31m(MF[00m
				(NX es)
				(ADVX immer)
				(PX am abend)[01;31m)[00m)
		[01;31m(NF[00m
			(ADVX allerdings)
			(PX erst ab achtzehn uhr funfunddreisig)[01;31m)[00m[01;31m)[00m
	(SIMPX
		(KOORD und)
		(VF zuge)
		(LK gehen)
		(MF
			(ADVX sowieso)
			[01;31m(PX[00m
				(NX den ganzen tag)
				(APPO uber)[01;31m)[00m)))
Step:UNSET remove
{'subtrees': ['SIMPX', 'NF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'VVFIN', 'PPER', 'ADV', 'APPRART', 'NN', 'ADV', 'ADV', 'APPR', 'CARD', 'NN', 'CARD', 'KON', 'NN', 'VVFIN', 'ADV', 'ART', 'ADJA', 'NN', 'APPO'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 20), 'span': (0, 12), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX
		(VF fluge)
		(LK gibt)
		[01;31m(MF[00m
			(NX es)
			(ADVX immer)
			(PX am abend)[01;31m)[00m)
	[01;31m(NF[00m
		(ADVX allerdings)
		(PX erst ab achtzehn uhr funfunddreisig)[01;31m)[00m
	(SIMPX
		(KOORD und)
		(VF zuge)
		(LK gehen)
		(MF
			(ADVX sowieso)
			[01;31m(PX[00m
				(NX den ganzen tag)
				(APPO uber)[01;31m)[00m)))
Step:PP Attachment
{'subtrees': ['NX', 'ADVX', 'PX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'VVFIN', 'PPER', 'ADV', 'APPRART', 'NN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 6), 'span': (2, 6), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(SIMPX fluge gibt es immer am abend)
	[01;31m(NF[00m
		(ADVX allerdings)
		(PX erst ab achtzehn uhr funfunddreisig)[01;31m)[00m
	(SIMPX
		(KOORD und)
		(VF zuge)
		(LK gehen)
		(MF
			(ADVX sowieso)
			[01;31m(PX[00m
				(NX den ganzen tag)
				(APPO uber)[01;31m)[00m)))
Step:PP Attachment
{'subtrees': ['ADVX', 'PX'], 'family': ['SIMPX', 'NF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'VVFIN', 'PPER', 'ADV', 'APPRART', 'NN', 'ADV', 'ADV', 'APPR', 'CARD', 'NN', 'CARD', 'KON', 'NN', 'VVFIN', 'ADV', 'ART', 'ADJA', 'NN', 'APPO'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 20), 'span': (6, 12), 'left siblings': ['SIMPX'], 'label': 'NF', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(SIMPX fluge gibt es immer am abend)
	(ADVX allerdings)
	(PX erst ab achtzehn uhr funfunddreisig)
	(SIMPX
		(KOORD und)
		(VF zuge)
		(LK gehen)
		(MF
			(ADVX sowieso)
			[01;31m(PX[00m
				(NX den ganzen tag)
				(APPO uber)[01;31m)[00m)))
Step:UNSET remove
{'subtrees': ['NX', 'APPO'], 'family': ['ADVX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'ADJA', 'NN', 'APPO'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (15, 20), 'span': (16, 20), 'left siblings': ['ADVX'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP fluge gibt es immer am abend allerdings erst ab achtzehn uhr funfunddreisig und zuge gehen sowieso den ganzen tag uber)

Sentence 308:
6 Initial errors
0 on fringe, 5 iterations
2 Error:PP Attachment
1 Error:Co-ordination
1 Error:UNSET add
1 Error:Unary
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wir)
		[01;31m(FKOORD[00m
			[01;31m(LKMN[00m
				(LK waren)
				[01;31m(MF[00m
					[01;36m(MF[00m
						(ADVX naturlich)
						(PX mit dem flugzeug)
						(ADJX etwas flexibler)[01;36m)[00m
					(PX zum abend hin)[01;31m)[00m
				[01;33m(SIMPX (NF[00m (NF weil wir den letzten flug sogar um neun uhr noch nehmen konnten)[01;31m)[00m
			(KON und)
			(LKM waren dann trotzdem noch vor elf zu hause)[01;31m)[00m)) [01;33mNF) SIMPX)[00m
Step:PP Attachment
{'new_parent': 'LKMN', 'new_family': ['LK', 'MF', 'PX', 'NF'], 'mover info': [('PX', (8, 11))], 'old_family': ['ADVX', 'PX', 'ADJX', 'PX'], 'start left siblings': ['ADVX', 'PX', 'ADJX'], 'auto preterminals': ('VAFIN', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'ADJD', 'APPRART', 'NN', 'ADV', 'KOUS', 'PPER', 'ART', 'ADJA', 'NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'VVINF', 'VMFIN'), 'start right siblings': [], 'end left siblings': ['LK', 'MF'], 'auto preterminal span': (1, 23), 'movers': ['PX'], 'old_parent': 'MF', 'end right siblings': ['NF'], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(VF wir)
		[01;31m(FKOORD[00m
			[01;31m(LKMN[00m
				(LK waren)
				(MF naturlich mit dem flugzeug etwas flexibler)
				(PX zum abend hin)
				[01;33m(SIMPX (NF[00m (NF weil wir den letzten flug sogar um neun uhr noch nehmen konnten)[01;31m)[00m
			(KON und)
			(LKM waren dann trotzdem noch vor elf zu hause)[01;31m)[00m)) [01;33mNF) SIMPX)[00m
Step:Co-ordination
{'subtrees': ['LK', 'MF', 'PX', 'NF'], 'family': ['LKMN', 'KON', 'LKM'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'ADJD', 'APPRART', 'NN', 'ADV', 'KOUS', 'PPER', 'ART', 'ADJA', 'NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'VVINF', 'VMFIN', 'KON', 'VAFIN', 'ADV', 'PROP', 'ADV', 'APPR', 'CARD', 'APPR', 'NN'), 'right siblings': ['KON', 'LKM'], 'parent': 'FKOORD', 'auto preterminal span': (1, 32), 'span': (1, 23), 'left siblings': [], 'label': 'LKMN', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP
	(SIMPX
		(VF wir)
		[01;31m(FKOORD[00m
			(LK waren)
			(MF naturlich mit dem flugzeug etwas flexibler)
			(PX zum abend hin)
			[01;36m(NF[00m
				[01;36m(SIMPX[00m
					(NF weil wir den letzten flug sogar um neun uhr noch nehmen konnten)
					(KON und)
					(LKM waren dann trotzdem noch vor elf zu hause)[01;36m)[00m[01;36m)[00m[01;31m)[00m))
Step:UNSET add
{'subtrees': ['NF', 'KON', 'LKM'], 'family': ['LK', 'MF', 'PX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ART', 'ADJA', 'NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'VVINF', 'VMFIN', 'KON', 'VAFIN', 'ADV', 'PROP', 'ADV', 'APPR', 'CARD', 'APPR', 'NN'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VAFIN waren))), (MF (ADVX (ADV naturlich)) (PX (APPR mit) (NX (ART dem) (NN flugzeug))) (ADJX (ADVX (ADV etwas)) (ADJD flexibler))), (PX (PX (APPRART zum) (NX (NN abend))) (ADVX (ADV hin)))], 'auto preterminal span': (11, 32), 'span': (11, 32), 'parent': 'FKOORD', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(VF wir)
		[01;31m(FKOORD[00m
			(LK waren)
			(MF naturlich mit dem flugzeug etwas flexibler)
			(PX zum abend hin)
			[01;36m(NF[00m
				(SIMPX
					(NF weil wir den letzten flug sogar um neun uhr noch nehmen konnten)
					(KON und)
					(LKM waren dann trotzdem noch vor elf zu hause))[01;36m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['LK', 'MF', 'PX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ART', 'ADJA', 'NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'VVINF', 'VMFIN', 'KON', 'VAFIN', 'ADV', 'PROP', 'ADV', 'APPR', 'CARD', 'APPR', 'NN'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VAFIN waren))), (MF (ADVX (ADV naturlich)) (PX (APPR mit) (NX (ART dem) (NN flugzeug))) (ADJX (ADVX (ADV etwas)) (ADJD flexibler))), (PX (PX (APPRART zum) (NX (NN abend))) (ADVX (ADV hin)))], 'auto preterminal span': (11, 32), 'span': (11, 32), 'parent': 'FKOORD', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(VF wir)
		[01;31m(FKOORD[00m
			(LK waren)
			(MF naturlich mit dem flugzeug etwas flexibler)
			(PX zum abend hin)
			(NF weil wir den letzten flug sogar um neun uhr noch nehmen konnten und waren dann trotzdem noch vor elf zu hause)[01;31m)[00m))
Step:PP Attachment
{'subtrees': ['LK', 'MF', 'PX', 'NF'], 'family': ['VF', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'ADJD', 'APPRART', 'NN', 'ADV', 'KOUS', 'PPER', 'ART', 'ADJA', 'NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'VVINF', 'VMFIN', 'KON', 'VAFIN', 'ADV', 'PROP', 'ADV', 'APPR', 'CARD', 'APPR', 'NN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 32), 'span': (1, 32), 'left siblings': ['VF'], 'label': 'FKOORD', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP wir waren naturlich mit dem flugzeug etwas flexibler zum abend hin weil wir den letzten flug sogar um neun uhr noch nehmen konnten und waren dann trotzdem noch vor elf zu hause)

Sentence 309:
0 Initial errors
0 on fringe, 0 iterations

Sentence 310:
11 Initial errors
0 on fringe, 7 iterations
4 Error:UNSET move
2 Error:Different label
1 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:Co-ordination
1 Error:Clause Attachment
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM also)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(KOORD und)
			(VF dann)
			(LK konnen)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX wir)
				(ADVX einfach)[01;31m)[00m[01;31m)[00m
		[01;36m(NX[00m
			(ART den) [01;33mMF)[00m[01;36m)[00m[01;36m)[00m
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKMVC[00m
				(LK brauchen)
				(MF wir uns jetzt vielleicht gar nicht)
				(VC festlegen)[01;31m)[00m [01;33mSIMPX)[00m
			(KON und)
			[01;36m(SIMPX[00m [01;31m(LKMN[00m
				(LK sagen)
				(MF einfach)
				(NF wir fliegen zuruck)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m)
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'ART'], 'mover info': [('ART', (7, 8))], 'old_family': ['DM', 'DM', 'SIMPX', 'ART', 'SIMPX'], 'start left siblings': ['DM', 'DM', 'SIMPX'], 'auto preterminals': ('PTKANT', 'ADV', 'KON', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ART', 'ADV', 'VVFIN', 'PPER', 'PRF', 'ADV', 'ADV', 'ADV', 'PTKNEG', 'VVINF', 'KON', 'VVFIN', 'ADV', 'PPER', 'VVFIN', 'PTKVZ'), 'start right siblings': ['SIMPX'], 'end left siblings': ['NX', 'ADVX'], 'auto preterminal span': (0, 23), 'movers': ['ART'], 'old_parent': 'TOP', 'POS confusion': ('ART', 'ART'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK konnen)
		(MF
			(NX wir)
			(ADVX einfach)
			[01;36m(NX[00m
				(ART den)[01;36m)[00m))
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKMVC[00m
				(LK brauchen)
				(MF wir uns jetzt vielleicht gar nicht)
				(VC festlegen)[01;31m)[00m [01;33mSIMPX)[00m
			(KON und)
			[01;36m(SIMPX[00m [01;31m(LKMN[00m
				(LK sagen)
				(MF einfach)
				(NF wir fliegen zuruck)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m)
Step:Different label
{'family': ['LKMVC', 'KON', 'SIMPX'], 'auto preterminal span': (18, 23), 'span': (18, 23), 'subtrees': ['LK', 'MF', 'NF'], 'parent': 'FKOORD', 'over_word': False, 'auto preterminals': ('VVFIN', 'ADV', 'PPER', 'VVFIN', 'PTKVZ'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('LKMN', 'SIMPX')}
(TOP
	(DM ja)
	(DM also)
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK konnen)
		(MF
			(NX wir)
			(ADVX einfach)
			[01;36m(NX[00m
				(ART den)[01;36m)[00m))
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKMVC[00m
				(LK brauchen)
				(MF wir uns jetzt vielleicht gar nicht)
				(VC festlegen)[01;31m)[00m [01;33mSIMPX)[00m
			(KON und)
			(SIMPX sagen einfach wir fliegen zuruck)[01;31m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['ART'], 'family': ['NX', 'ADVX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ART',), 'right siblings': [], 'left siblings': [(NX (PPER wir)), (ADVX (ADV einfach))], 'auto preterminal span': (7, 8), 'span': (7, 8), 'parent': 'MF', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX und dann konnen wir einfach den)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF dann)
		[01;31m(FKOORD[00m
			[01;31m(LKMVC[00m
				(LK brauchen)
				(MF wir uns jetzt vielleicht gar nicht)
				(VC festlegen)[01;31m)[00m [01;33mSIMPX)[00m
			(KON und)
			(SIMPX sagen einfach wir fliegen zuruck)[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'FKOORD'], 'family': ['DM', 'DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'KON', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ART', 'ADV', 'VVFIN', 'PPER', 'PRF', 'ADV', 'ADV', 'ADV', 'PTKNEG', 'VVINF', 'KON', 'VVFIN', 'ADV', 'PPER', 'VVFIN', 'PTKVZ'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 23), 'span': (8, 23), 'left siblings': ['DM', 'DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX und dann konnen wir einfach den)
	[01;33m(SIMPX[00m (VF dann)
	[01;31m(FKOORD[00m
		[01;31m(LKMVC[00m
			(LK brauchen)
			(MF wir uns jetzt vielleicht gar nicht)
			(VC festlegen)[01;31m)[00m [01;33mSIMPX)[00m
		(KON und)
		(SIMPX sagen einfach wir fliegen zuruck)[01;31m)[00m)
Step:Co-ordination
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['LKMVC', 'KON', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'PRF', 'ADV', 'ADV', 'ADV', 'PTKNEG', 'VVINF', 'KON', 'VVFIN', 'ADV', 'PPER', 'VVFIN', 'PTKVZ'), 'right siblings': ['KON', 'SIMPX'], 'parent': 'FKOORD', 'auto preterminal span': (9, 23), 'span': (9, 17), 'left siblings': [], 'label': 'LKMVC', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX und dann konnen wir einfach den)
	[01;33m(SIMPX[00m (VF dann)
	[01;31m(FKOORD[00m
		(LK brauchen)
		(MF wir uns jetzt vielleicht gar nicht)
		(VC festlegen) [01;33mSIMPX)[00m
		(KON und)
		(SIMPX sagen einfach wir fliegen zuruck)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['LK', 'MF', 'VC', 'KON', 'SIMPX'], 'family': ['DM', 'DM', 'SIMPX', 'VF', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'KON', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ART', 'ADV', 'VVFIN', 'PPER', 'PRF', 'ADV', 'ADV', 'ADV', 'PTKNEG', 'VVINF', 'KON', 'VVFIN', 'ADV', 'PPER', 'VVFIN', 'PTKVZ'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 23), 'span': (9, 23), 'left siblings': ['DM', 'DM', 'SIMPX', 'VF'], 'label': 'FKOORD', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX und dann konnen wir einfach den)
	[01;36m(SIMPX[00m
		(VF dann)
		(LK brauchen)
		(MF wir uns jetzt vielleicht gar nicht)
		(VC festlegen)[01;36m)[00m
	(KON und)
	(SIMPX sagen einfach wir fliegen zuruck))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['DM', 'DM', 'SIMPX', 'SIMPX', 'KON', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'PRF', 'ADV', 'ADV', 'ADV', 'PTKNEG', 'VVINF'), 'right siblings': [(KON und), (SIMPX (LK (VXFIN (VVFIN sagen))) (MF (ADVX (ADV einfach))) (NF (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VVFIN fliegen))) (VC (PTKVZ zuruck)))))], 'left siblings': [(DM (PTKANT ja)), (DM (ADVX (ADV also))), (SIMPX (KOORD (KON und)) (VF (ADVX (ADV dann))) (LK (VXFIN (VMFIN konnen))) (MF (NX (PPER wir)) (ADVX (ADV einfach)) (NX (ART den))))], 'auto preterminal span': (8, 17), 'span': (8, 17), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP ja also und dann konnen wir einfach den dann brauchen wir uns jetzt vielleicht gar nicht festlegen und sagen einfach wir fliegen zuruck)

Sentence 311:
9 Initial errors
0 on fringe, 4 iterations
6 Error:PP Attachment
1 Error:Single Word Phrase
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM gut)
	(ADVX dann)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(VF dann)
			(LK denke)
			(MF ich)
			[01;31m(NF[00m [01;33m(SIMPX (NF[00m
				[01;31m(SIMPX[00m
					(VF dann)
					(LK haben)
					(MF wir alles)[01;31m)[00m[01;31m)[00m[01;31m)[00m
		[01;31m(PX[00m
			[01;36m(VC[00m
				(APPR auser)[01;36m)[00m
			[01;36m(NF[00m
				(SIMPX
					(C das)
					(MF wir immer noch nicht)
					(VC wissen)
					(NF wo wir ubernachten konnen))[01;36m)[00m[01;31m)[00m[01;36m)[00m) [01;33mNF) SIMPX)[00m
Step:PP Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'PX'], 'mover info': [('PX', (9, 20))], 'old_family': ['DM', 'ADVX', 'SIMPX', 'PX'], 'start left siblings': ['DM', 'ADVX', 'SIMPX'], 'auto preterminals': ('ITJ', 'ADV', 'ADV', 'VVFIN', 'PPER', 'ADV', 'VAFIN', 'PPER', 'PIS', 'APPR', 'KOUS', 'PPER', 'ADV', 'ADV', 'PTKNEG', 'VVFIN', 'PWAV', 'PPER', 'VVINF', 'VMFIN'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 20), 'movers': ['PX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(DM gut)
	(ADVX dann)
	(SIMPX
		(VF dann)
		(LK denke)
		(MF ich)
		(NF
			(SIMPX
				(VF dann)
				(LK haben)
				(MF wir alles)
				[01;31m(PX[00m
					[01;36m(VC[00m
						(APPR auser)[01;36m)[00m
					[01;36m(NF[00m
						(SIMPX
							(C das)
							(MF wir immer noch nicht)
							(VC wissen)
							(NF wo wir ubernachten konnen))[01;36m)[00m[01;31m)[00m))))
Step:Single Word Phrase
{'subtrees': ['APPR'], 'family': ['VC', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('APPR',), 'right siblings': [(SIMPX (C (KOUS das)) (MF (NX (PPER wir)) (ADVX (ADV immer)) (ADVX (ADVX (ADV noch)) (PTKNEG nicht))) (VC (VXFIN (VVFIN wissen))) (NF (SIMPX (C (PX (PWAV wo))) (MF (NX (PPER wir))) (VC (VXINF (VVINF ubernachten)) (VXFIN (VMFIN konnen))))))], 'left siblings': [], 'auto preterminal span': (9, 10), 'span': (9, 10), 'parent': 'PX', 'label': 'VC', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM gut)
	(ADVX dann)
	(SIMPX
		(VF dann)
		(LK denke)
		(MF ich)
		(NF
			(SIMPX
				(VF dann)
				(LK haben)
				(MF wir alles)
				[01;31m(PX[00m
					(VC auser)
					[01;36m(NF[00m
						(SIMPX
							(C das)
							(MF wir immer noch nicht)
							(VC wissen)
							(NF wo wir ubernachten konnen))[01;36m)[00m[01;31m)[00m))))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ADV', 'ADV', 'PTKNEG', 'VVFIN', 'PWAV', 'PPER', 'VVINF', 'VMFIN'), 'right siblings': [], 'left siblings': [(VC (APPR auser))], 'auto preterminal span': (10, 20), 'span': (10, 20), 'parent': 'PX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM gut)
	(ADVX dann)
	(SIMPX
		(VF dann)
		(LK denke)
		(MF ich)
		(NF
			(SIMPX
				(VF dann)
				(LK haben)
				(MF wir alles)
				[01;31m(PX[00m
					(VC auser)
					(NF das wir immer noch nicht wissen wo wir ubernachten konnen)[01;31m)[00m))))
Step:UNSET remove
{'subtrees': ['VC', 'NF'], 'family': ['VF', 'LK', 'MF', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'PIS', 'APPR', 'KOUS', 'PPER', 'ADV', 'ADV', 'PTKNEG', 'VVFIN', 'PWAV', 'PPER', 'VVINF', 'VMFIN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (5, 20), 'span': (9, 20), 'left siblings': ['VF', 'LK', 'MF'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP gut dann dann denke ich dann haben wir alles auser das wir immer noch nicht wissen wo wir ubernachten konnen)

Sentence 312:
0 Initial errors
0 on fringe, 0 iterations

Sentence 313:
4 Initial errors
0 on fringe, 4 iterations
1 Error:UNSET add
1 Error:UNSET add
1 Error:Single Word Phrase
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX dann konnen wir abends noch ein bischen in der bar sitzen)
	[01;31m(SIMPX[00m
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF auf alle falle)
			[01;36m(SIMPX[00m
				(LK treffen)
				(MF wir uns dann da)[01;36m)[00m[01;36m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'PIDAT', 'NN', 'VVFIN', 'PPER', 'PRF', 'ADV', 'ADV'), 'right siblings': [], 'left siblings': [(KOORD (KON oder))], 'auto preterminal span': (12, 20), 'span': (12, 20), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX dann konnen wir abends noch ein bischen in der bar sitzen)
	[01;31m(SIMPX[00m
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		(SIMPX
			(VF auf alle falle)
			[01;36m(SIMPX[00m
				(LK treffen)
				(MF wir uns dann da)[01;36m)[00m)[01;31m)[00m)
Step:UNSET add
{'subtrees': ['LK', 'MF'], 'family': ['VF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'PRF', 'ADV', 'ADV'), 'right siblings': [], 'left siblings': [(VF (PX (APPR auf) (NX (PIDAT alle) (NN falle))))], 'auto preterminal span': (15, 20), 'span': (15, 20), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX dann konnen wir abends noch ein bischen in der bar sitzen)
	[01;31m(SIMPX[00m
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		(SIMPX auf alle falle treffen wir uns dann da)[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'APPR', 'PIDAT', 'NN', 'VVFIN', 'PPER', 'PRF', 'ADV', 'ADV'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (11, 20), 'span': (11, 12), 'left siblings': [], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(SIMPX dann konnen wir abends noch ein bischen in der bar sitzen)
	[01;31m(SIMPX[00m
		(KON oder)
		(SIMPX auf alle falle treffen wir uns dann da)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['KON', 'SIMPX'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ART', 'PIS', 'APPR', 'ART', 'NN', 'VVINF', 'KON', 'APPR', 'PIDAT', 'NN', 'VVFIN', 'PPER', 'PRF', 'ADV', 'ADV'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 20), 'span': (11, 20), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP dann konnen wir abends noch ein bischen in der bar sitzen oder auf alle falle treffen wir uns dann da)

Sentence 314:
0 Initial errors
0 on fringe, 0 iterations

Sentence 315:
3 Initial errors
0 on fringe, 2 iterations
2 Error:NP Attachment
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF das)
		(LK ist)
		(MF
			(NX
				[01;36m(NX[00m
					(NX das marriotthotel hannover)
					[01;31m(NX[00m
						(ART das)
						(NX parkhotel hannover)[01;31m)[00m[01;36m)[00m
				[01;31m(NX[00m
					(ART das)
					(NX hotel cristal hannover)[01;31m)[00m))))
Step:NP Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'ART', 'NX'], 'mover info': [('NX', (2, 5))], 'old_family': ['NX', 'NX', 'NX'], 'start left siblings': [], 'auto preterminals': ('ART', 'NE', 'NE', 'ART', 'NE', 'NE', 'ART', 'NN', 'NE', 'NE'), 'start right siblings': ['NX', 'NX'], 'end left siblings': [], 'auto preterminal span': (2, 12), 'movers': ['NX'], 'old_parent': 'NX', 'end right siblings': ['ART', 'NX'], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(VF das)
		(LK ist)
		(MF
			(NX
				(NX das marriotthotel hannover das parkhotel hannover)
				[01;31m(NX[00m
					(ART das)
					(NX hotel cristal hannover)[01;31m)[00m))))
Step:UNSET remove
{'subtrees': ['ART', 'NX'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NE', 'NE', 'ART', 'NE', 'NE', 'ART', 'NN', 'NE', 'NE'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (2, 12), 'span': (8, 12), 'left siblings': ['NX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP das ist das marriotthotel hannover das parkhotel hannover das hotel cristal hannover)

Sentence 316:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Modifier Attachment
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF die)
		(LK sind)
		(MF
			(NX alle)
			[01;31m(ADVX[00m
				(ADVX mehr)
				(KON oder)
				[01;33m(PX[00m (ADVX minder)[01;31m)[00m
			(PX in der nahe vom hauptbahnhof)))) [01;33mPX)[00m
Step:Modifier Attachment
{'subtrees': ['ADVX', 'KON', 'ADVX'], 'family': ['NX', 'ADVX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PIS', 'ADV', 'KON', 'ADV', 'APPR', 'ART', 'NN', 'APPRART', 'NN'), 'right siblings': ['PX'], 'parent': 'MF', 'auto preterminal span': (2, 11), 'span': (3, 6), 'left siblings': ['NX'], 'label': 'ADVX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX
		(VF die)
		(LK sind)
		(MF
			(NX alle)
			(ADVX mehr)
			(KON oder)
			[01;36m(PX[00m
				(ADVX minder)
				(PX in der nahe vom hauptbahnhof)[01;36m)[00m)))
Step:PP Attachment
{'subtrees': ['ADVX', 'PX'], 'family': ['NX', 'ADVX', 'KON', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'APPR', 'ART', 'NN', 'APPRART', 'NN'), 'right siblings': [], 'left siblings': [(NX (PIS alle)), (ADVX (ADV mehr)), (KON oder)], 'auto preterminal span': (5, 11), 'span': (5, 11), 'parent': 'MF', 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP die sind alle mehr oder minder in der nahe vom hauptbahnhof)

Sentence 317:
0 Initial errors
0 on fringe, 0 iterations

Sentence 318:
7 Initial errors
0 on fringe, 6 iterations
2 Error:Single Word Phrase
1 Error:UNSET add
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:UNSET add
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF das hotel cristal hannover)
		[01;31m(FKOORD[00m
			(LKM ist vielleicht ein bischen teuer) [01;33mSIMPX)[00m
			(LKM
				(LK hat)
				[01;31m(MF[00m
					[01;36m(ADVX[00m [01;31m(PX[00m
						(PROP dafur)[01;31m)[00m[01;36m)[00m
					[01;36m(NX[00m
						(ADVX aber)
						(NX sauna solarium bar und bistro)[01;36m)[00m[01;31m)[00m)[01;31m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'family': ['ADVX', 'ADVX', 'NX'], 'auto preterminal span': (11, 12), 'span': (11, 12), 'subtrees': ['PROP'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('PROP',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('PX', 'ADVX')}
(TOP
	(DM also)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF das hotel cristal hannover)
		[01;31m(FKOORD[00m
			(LKM ist vielleicht ein bischen teuer) [01;33mSIMPX)[00m
			(LKM
				(LK hat)
				[01;31m(MF[00m
					(ADVX dafur)
					[01;36m(NX[00m
						(ADVX aber)
						(NX sauna solarium bar und bistro)[01;36m)[00m[01;31m)[00m)[01;31m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['ADVX', 'NX'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'NN', 'NN', 'NN', 'KON', 'NN'), 'right siblings': [], 'left siblings': [(ADVX (PROP dafur))], 'auto preterminal span': (12, 18), 'span': (12, 18), 'parent': 'MF', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF das hotel cristal hannover)
		[01;31m(FKOORD[00m
			(LKM ist vielleicht ein bischen teuer) [01;33mSIMPX)[00m
			(LKM
				(LK hat)
				[01;31m(MF[00m
					(ADVX dafur)
					(NX aber sauna solarium bar und bistro)[01;31m)[00m)[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'FKOORD'], 'family': ['DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NN', 'NE', 'NE', 'VAFIN', 'ADV', 'ART', 'PIS', 'ADJD', 'VAFIN', 'PROP', 'ADV', 'NN', 'NN', 'NN', 'KON', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 18), 'span': (1, 18), 'left siblings': ['DM'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM also)
	[01;33m(SIMPX[00m (VF das hotel cristal hannover)
	[01;31m(FKOORD[00m
		(LKM ist vielleicht ein bischen teuer) [01;33mSIMPX)[00m
		(LKM
			(LK hat)
			[01;31m(MF[00m
				(ADVX dafur)
				(NX aber sauna solarium bar und bistro)[01;31m)[00m)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['LKM', 'LKM'], 'family': ['DM', 'VF', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NN', 'NE', 'NE', 'VAFIN', 'ADV', 'ART', 'PIS', 'ADJD', 'VAFIN', 'PROP', 'ADV', 'NN', 'NN', 'NN', 'KON', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 18), 'span': (5, 18), 'left siblings': ['DM', 'VF'], 'label': 'FKOORD', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM also)
	[01;36m(SIMPX[00m
		(VF das hotel cristal hannover)
		(LKM ist vielleicht ein bischen teuer)[01;36m)[00m
	(LKM
		(LK hat)
		[01;31m(MF[00m
			(ADVX dafur)
			(NX aber sauna solarium bar und bistro)[01;31m)[00m))
Step:UNSET add
{'subtrees': ['VF', 'LKM'], 'family': ['DM', 'SIMPX', 'LKM'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'NE', 'NE', 'VAFIN', 'ADV', 'ART', 'PIS', 'ADJD'), 'right siblings': [(LKM (LK (VXFIN (VAFIN hat))) (MF (ADVX (PROP dafur)) (NX (ADVX (ADV aber)) (NX (NX (NN sauna)) (NX (NN solarium)) (NX (NN bar)) (KON und) (NX (NN bistro))))))], 'left siblings': [(DM (ADVX (ADV also)))], 'auto preterminal span': (1, 10), 'span': (1, 10), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX das hotel cristal hannover ist vielleicht ein bischen teuer)
	(LKM
		(LK hat)
		[01;31m(MF[00m
			(ADVX dafur)
			(NX aber sauna solarium bar und bistro)[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['ADVX', 'NX'], 'family': ['LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'PROP', 'ADV', 'NN', 'NN', 'NN', 'KON', 'NN'), 'right siblings': [], 'parent': 'LKM', 'auto preterminal span': (10, 18), 'span': (11, 18), 'left siblings': ['LK'], 'label': 'MF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP also das hotel cristal hannover ist vielleicht ein bischen teuer hat dafur aber sauna solarium bar und bistro)

Sentence 319:
0 Initial errors
0 on fringe, 0 iterations

Sentence 320:
3 Initial errors
0 on fringe, 2 iterations
2 Error:Modifier Attachment
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK haben)
		(MF
			(NX wir)
			[01;36m(NX[00m
				[01;31m(ADVX[00m
					(ADV uberhaupt)[01;31m)[00m
				[01;31m(NX[00m
					(NN zeit)[01;31m)[00m[01;36m)[00m)
		(NF in die sauna zu gehen)))
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['ADVX', 'NN'], 'mover info': [('ADVX', (2, 3))], 'old_family': ['NX', 'ADVX', 'NX'], 'start left siblings': ['NX'], 'auto preterminals': ('PPER', 'ADV', 'NN'), 'start right siblings': ['NX'], 'end left siblings': [], 'auto preterminal span': (1, 4), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['NN'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(LK haben)
		(MF
			(NX wir)
			(NX
				[01;31m(ADVX[00m
					(ADV uberhaupt)[01;31m)[00m
				(NN zeit)))
		(NF in die sauna zu gehen)))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['ADVX', 'NN'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV', 'NN'), 'right siblings': ['NN'], 'parent': 'NX', 'auto preterminal span': (2, 4), 'span': (2, 3), 'left siblings': [], 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP haben wir uberhaupt zeit in die sauna zu gehen)

Sentence 321:
0 Initial errors
0 on fringe, 0 iterations

Sentence 322:
0 Initial errors
0 on fringe, 0 iterations

Sentence 323:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Different label
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(DM[00m [01;31m(VF[00m
			(ADVX
				(ADV also))[01;31m)[00m[01;36m)[00m
		[01;36m(SIMPX[00m
			(LK konnten)
			(MF wir auch das parkhotel hannover)
			(VC nehmen)[01;36m)[00m[01;31m)[00m)
Step:Different label
{'family': ['DM', 'LK', 'MF', 'VC'], 'auto preterminal span': (0, 1), 'span': (0, 1), 'subtrees': ['ADVX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('ADV',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('VF', 'DM')}
(TOP
	[01;31m(SIMPX[00m
		(DM also)
		[01;36m(SIMPX[00m
			(LK konnten)
			(MF wir auch das parkhotel hannover)
			(VC nehmen)[01;36m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'ADV', 'ART', 'NE', 'NE', 'VVINF'), 'right siblings': [], 'left siblings': [(DM (ADVX (ADV also)))], 'auto preterminal span': (1, 8), 'span': (1, 8), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(DM also)
		(SIMPX konnten wir auch das parkhotel hannover nehmen)[01;31m)[00m)
Step:Unary
{'subtrees': ['DM', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VMFIN', 'PPER', 'ADV', 'ART', 'NE', 'NE', 'VVINF'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 8), 'span': (0, 8), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP also konnten wir auch das parkhotel hannover nehmen)

Sentence 324:
5 Initial errors
0 on fringe, 3 iterations
3 Error:UNSET move
1 Error:PP Attachment
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF das)
		(LK ist)
		[01;36m(MF[00m
			[01;36m(PX[00m
				(APPR [01;33m(PX[00m mit)
				[01;31m(MF[00m
					[01;31m(NX[00m
						(NX das einzelzimmer) [01;33mPX)[00m
						(PX mit einhundert neunzehn mark)[01;31m)[00m[01;31m)[00m[01;36m)[00m[01;36m)[00m)
	(SIMPX ware das doch das doch annehmbar))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['APPR', 'NX'], 'mover info': [('APPR', (2, 3))], 'old_family': ['VF', 'LK', 'APPR', 'MF'], 'start left siblings': ['VF', 'LK'], 'auto preterminals': ('PDS', 'VAFIN', 'APPR', 'ART', 'NN', 'APPR', 'CARD', 'CARD', 'NN'), 'start right siblings': ['MF'], 'end left siblings': [], 'auto preterminal span': (0, 9), 'adding node already present': False, 'movers': ['APPR'], 'old_parent': 'SIMPX', 'POS confusion': ('APPR', 'APPR'), 'added and moved': True, 'end right siblings': ['NX'], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'PX'}
(TOP
	(SIMPX
		(VF das)
		(LK ist)
		(PX [01;33m(PX[00m
			(MF
				(APPR mit)
				[01;31m(NX[00m
					(NX das einzelzimmer) [01;33mPX)[00m
					(PX mit einhundert neunzehn mark)[01;31m)[00m)))
	(SIMPX ware das doch das doch annehmbar))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['APPR', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'APPR', 'CARD', 'CARD', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 9), 'span': (3, 9), 'left siblings': ['APPR'], 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(SIMPX
		(VF das)
		(LK ist)
		(PX
			(MF
				[01;36m(PX[00m
					(APPR mit)
					(NX das einzelzimmer)[01;36m)[00m
				(PX mit einhundert neunzehn mark))))
	(SIMPX ware das doch das doch annehmbar))
Step:UNSET add
{'subtrees': ['APPR', 'NX'], 'family': ['PX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN'), 'right siblings': [(PX (APPR mit) (NX (ADJX (CARD einhundert) (CARD neunzehn)) (NN mark)))], 'left siblings': [], 'auto preterminal span': (2, 5), 'span': (2, 5), 'parent': 'MF', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP das ist mit das einzelzimmer mit einhundert neunzehn mark ware das doch das doch annehmbar)

Sentence 325:
2 Initial errors
0 on fringe, 2 iterations
1 Error:UNSET add
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	[01;31m(SIMPX[00m
		(LV ein hotel in hannover fur hundert neunzehn mark)
		[01;36m(SIMPX[00m
			(VF das)
			(LK mus)
			(MF schon eine absteige)
			(VC sein)[01;36m)[00m[01;31m)[00m
	(DM oder))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['LV', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VMFIN', 'ADV', 'ART', 'NN', 'VAINF'), 'right siblings': [], 'left siblings': [(LV (NX (NX (NX (ART ein) (NN hotel)) (PX (APPR in) (NX (NE hannover)))) (PX (APPR fur) (NX (ADJX (CARD hundert) (CARD neunzehn)) (NN mark)))))], 'auto preterminal span': (9, 15), 'span': (9, 15), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	[01;31m(SIMPX[00m
		(LV ein hotel in hannover fur hundert neunzehn mark)
		(SIMPX das mus schon eine absteige sein)[01;31m)[00m
	(DM oder))
Step:Clause Attachment
{'subtrees': ['LV', 'SIMPX'], 'family': ['DM', 'SIMPX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NN', 'APPR', 'NE', 'APPR', 'CARD', 'CARD', 'NN', 'PDS', 'VMFIN', 'ADV', 'ART', 'NN', 'VAINF', 'ITJ'), 'right siblings': ['DM'], 'parent': 'TOP', 'auto preterminal span': (0, 16), 'span': (1, 15), 'left siblings': ['DM'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP also ein hotel in hannover fur hundert neunzehn mark das mus schon eine absteige sein oder)

Sentence 326:
4 Initial errors
0 on fringe, 4 iterations
1 Error:UNSET add
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM okay)
	(SIMPX [01;33m(SIMPX[00m
		(VF parkhotel)
		[01;31m(SIMPX[00m
			(LK sehe)
			(MF ich) [01;33mSIMPX)[00m
			[01;31m(VC[00m
				(PTKVZ ein)[01;31m)[00m[01;31m)[00m
		[01;36m(SIMPX[00m
			(LK ist)
			(MF zu riskant)[01;36m)[00m)
	(SIMPX nehmen wir das marriotthotel))
Step:UNSET add
{'subtrees': ['LK', 'MF'], 'family': ['VF', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'PTKA', 'ADJD'), 'right siblings': [], 'left siblings': [(VF (NX (NE parkhotel))), (SIMPX (LK (VXFIN (VVFIN sehe))) (MF (NX (PPER ich))) (VC (PTKVZ ein)))], 'auto preterminal span': (5, 8), 'span': (5, 8), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM okay)
	(SIMPX [01;33m(SIMPX[00m
		(VF parkhotel)
		[01;31m(SIMPX[00m
			(LK sehe)
			(MF ich) [01;33mSIMPX)[00m
			[01;31m(VC[00m
				(PTKVZ ein)[01;31m)[00m[01;31m)[00m
		(SIMPX ist zu riskant))
	(SIMPX nehmen wir das marriotthotel))
Step:UNSET remove
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['VF', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE', 'VVFIN', 'PPER', 'PTKVZ', 'VAFIN', 'PTKA', 'ADJD'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (1, 8), 'span': (2, 5), 'left siblings': ['VF'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM okay)
	(SIMPX
		[01;36m(SIMPX[00m
			(VF parkhotel)
			(LK sehe)
			(MF ich)[01;36m)[00m
		[01;31m(VC[00m
			(PTKVZ ein)[01;31m)[00m
		(SIMPX ist zu riskant))
	(SIMPX nehmen wir das marriotthotel))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'VC', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE', 'VVFIN', 'PPER'), 'right siblings': [(VC (PTKVZ ein)), (SIMPX (LK (VXFIN (VAFIN ist))) (MF (ADJX (PTKA zu) (ADJD riskant))))], 'left siblings': [], 'auto preterminal span': (1, 4), 'span': (1, 4), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM okay)
	(SIMPX
		(SIMPX parkhotel sehe ich)
		[01;31m(VC[00m
			(PTKVZ ein)[01;31m)[00m
		(SIMPX ist zu riskant))
	(SIMPX nehmen wir das marriotthotel))
Step:Single Word Phrase
{'subtrees': ['PTKVZ'], 'family': ['SIMPX', 'VC', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('NE', 'VVFIN', 'PPER', 'PTKVZ', 'VAFIN', 'PTKA', 'ADJD'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (1, 8), 'span': (4, 5), 'left siblings': ['SIMPX'], 'label': 'VC', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP okay parkhotel sehe ich ein ist zu riskant nehmen wir das marriotthotel)

Sentence 327:
2 Initial errors
0 on fringe, 2 iterations
1 Error:UNSET add
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	[01;36m(SIMPX[00m
		(SIMPX die konnen sich)
		[01;36m(NX[00m
			(ART die)[01;36m)[00m[01;36m)[00m
	(SIMPX die konnen sich da auch in hannover keinen durchhanger erlauben))
Step:UNSET add
{'subtrees': ['SIMPX', 'ART'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VMFIN', 'PRF', 'ART'), 'right siblings': [(SIMPX (VF (NX (PDS die))) (LK (VXFIN (VMFIN konnen))) (MF (NX (PRF sich)) (ADVX (ADV da)) (ADVX (ADV auch)) (PX (APPR in) (NX (NE hannover))) (NX (PIAT keinen) (NN durchhanger))) (VC (VXINF (VVINF erlauben))))], 'left siblings': [(DM (ADVX (ADV also)))], 'auto preterminal span': (1, 5), 'span': (1, 5), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX
		(SIMPX die konnen sich)
		[01;36m(NX[00m
			(ART die)[01;36m)[00m)
	(SIMPX die konnen sich da auch in hannover keinen durchhanger erlauben))
Step:Single Word Phrase
{'subtrees': ['ART'], 'family': ['SIMPX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ART',), 'right siblings': [], 'left siblings': [(SIMPX (VF (NX (PDS die))) (LK (VXFIN (VMFIN konnen))) (MF (NX (PRF sich))))], 'auto preterminal span': (4, 5), 'span': (4, 5), 'parent': 'SIMPX', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP also die konnen sich die die konnen sich da auch in hannover keinen durchhanger erlauben)

Sentence 328:
0 Initial errors
0 on fringe, 0 iterations

Sentence 329:
0 Initial errors
0 on fringe, 0 iterations

Sentence 330:
0 Initial errors
0 on fringe, 0 iterations

Sentence 331:
0 Initial errors
0 on fringe, 0 iterations

Sentence 332:
0 Initial errors
0 on fringe, 0 iterations

Sentence 333:
0 Initial errors
0 on fringe, 0 iterations

Sentence 334:
6 Initial errors
0 on fringe, 4 iterations
2 Error:Different label
2 Error:Clause Attachment
1 Error:Unary
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM na ja)
	(DM gut)
	(SIMPX ich gehe auch nicht so oft ins fitnesstudio)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			[01;36m(KOORD[00m [01;31m(VF[00m
				[01;31m(ADVX[00m
					(ADV aber)[01;31m)[00m[01;31m)[00m[01;36m)[00m
			(LK meine)[01;31m)[00m
		[01;36m(NF[00m
			(SIMPX
				(VF ich)
				(LK wollte)
				(MF es jetzt nur mal)
				(VC sagen)
				(NF falls du da lust dazu hast))[01;36m)[00m[01;36m)[00m)
Step:Different label
{'family': ['KOORD', 'LK'], 'auto preterminal span': (11, 12), 'span': (11, 12), 'subtrees': ['ADVX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('ADV',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('VF', 'KOORD')}
(TOP
	(DM na ja)
	(DM gut)
	(SIMPX ich gehe auch nicht so oft ins fitnesstudio)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(KOORD
				[01;31m(ADVX[00m
					(ADV aber)[01;31m)[00m)
			(LK meine)[01;31m)[00m
		[01;36m(NF[00m
			(SIMPX
				(VF ich)
				(LK wollte)
				(MF es jetzt nur mal)
				(VC sagen)
				(NF falls du da lust dazu hast))[01;36m)[00m[01;36m)[00m)
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['KOORD', 'LK', 'SIMPX'], 'mover info': [('SIMPX', (13, 26))], 'old_family': ['DM', 'DM', 'SIMPX', 'SIMPX', 'SIMPX'], 'start left siblings': ['DM', 'DM', 'SIMPX', 'SIMPX'], 'auto preterminals': ('ITJ', 'PTKANT', 'ITJ', 'PPER', 'VVFIN', 'ADV', 'PTKNEG', 'ADV', 'ADV', 'APPRART', 'NN', 'ADV', 'VVFIN', 'PPER', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'VVINF', 'KOUS', 'PPER', 'ADV', 'NN', 'PROP', 'VAFIN'), 'start right siblings': [], 'end left siblings': ['KOORD', 'LK'], 'auto preterminal span': (0, 26), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(DM na ja)
	(DM gut)
	(SIMPX ich gehe auch nicht so oft ins fitnesstudio)
	(SIMPX
		(KOORD
			[01;31m(ADVX[00m
				(ADV aber)[01;31m)[00m)
		(LK meine)
		[01;36m(NF[00m
			(SIMPX
				(VF ich)
				(LK wollte)
				(MF es jetzt nur mal)
				(VC sagen)
				(NF falls du da lust dazu hast))[01;36m)[00m))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['KOORD', 'LK', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'VVINF', 'KOUS', 'PPER', 'ADV', 'NN', 'PROP', 'VAFIN'), 'right siblings': [], 'left siblings': [(KOORD (ADVX (ADV aber))), (LK (VXFIN (VVFIN meine)))], 'auto preterminal span': (13, 26), 'span': (13, 26), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM na ja)
	(DM gut)
	(SIMPX ich gehe auch nicht so oft ins fitnesstudio)
	(SIMPX
		(KOORD
			[01;31m(ADVX[00m
				(ADV aber)[01;31m)[00m)
		(LK meine)
		(NF ich wollte es jetzt nur mal sagen falls du da lust dazu hast)))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV',), 'right siblings': [], 'parent': 'KOORD', 'auto preterminal span': (11, 12), 'span': (11, 12), 'left siblings': [], 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP na ja gut ich gehe auch nicht so oft ins fitnesstudio aber meine ich wollte es jetzt nur mal sagen falls du da lust dazu hast)

Sentence 335:
0 Initial errors
0 on fringe, 0 iterations

Sentence 336:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(DM[00m
		(ADVX immer)
		(ADVX doch)[01;31m)[00m
	(DM oder))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX'], 'family': ['DM', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'ITJ'), 'right siblings': ['DM'], 'parent': 'TOP', 'auto preterminal span': (0, 3), 'span': (0, 2), 'left siblings': [], 'label': 'DM', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP immer doch oder)

Sentence 337:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Different label
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(ADVX[00m
	(TOP
		[01;31m(DM[00m
			(ADVX immer)
			(ADVX doch)[01;31m)[00m)[01;36m)[00m
Step:Different label
{'family': ['ADVX'], 'auto preterminal span': (0, 2), 'span': (0, 2), 'subtrees': ['ADVX', 'ADVX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('ADV', 'ADV'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('DM', 'ADVX')}
(TOP immer doch)

Sentence 338:
0 Initial errors
0 on fringe, 0 iterations

Sentence 339:
4 Initial errors
0 on fringe, 4 iterations
1 Error:UNSET add
1 Error:Modifier Attachment
1 Error:Single Word Phrase
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	[01;36m(SIMPX[00m
		[01;36m(SIMPX[00m
			(SIMPX
				(VF theater)
				(LK denke)
				[01;31m(MF[00m
					(NX
						(PPER ich))[01;31m)[00m)
			[01;36m(NX[00m
				(KOUS das)[01;36m)[00m[01;36m)[00m
		(ADVX da)[01;36m)[00m
	(SIMPX da kriegen wir keine karten mehr))
Step:UNSET add
{'subtrees': ['SIMPX', 'KOUS'], 'family': ['DM', 'SIMPX', 'ADVX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'VVFIN', 'PPER', 'KOUS'), 'right siblings': [(ADVX (ADV da)), (SIMPX (VF (ADVX (ADV da))) (LK (VXFIN (VVFIN kriegen))) (MF (NX (PPER wir)) (NX (NX (PIAT keine) (NN karten)) (ADVX (ADV mehr)))))], 'left siblings': [(DM (ADVX (ADV also)))], 'auto preterminal span': (1, 5), 'span': (1, 5), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	[01;36m(SIMPX[00m
		(SIMPX
			(SIMPX
				(VF theater)
				(LK denke)
				[01;31m(MF[00m
					(NX
						(PPER ich))[01;31m)[00m)
			[01;36m(NX[00m
				(KOUS das)[01;36m)[00m)
		(ADVX da)[01;36m)[00m
	(SIMPX da kriegen wir keine karten mehr))
Step:Modifier Attachment
{'subtrees': ['SIMPX', 'ADVX'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'VVFIN', 'PPER', 'KOUS', 'ADV'), 'right siblings': [(SIMPX (VF (ADVX (ADV da))) (LK (VXFIN (VVFIN kriegen))) (MF (NX (PPER wir)) (NX (NX (PIAT keine) (NN karten)) (ADVX (ADV mehr)))))], 'left siblings': [(DM (ADVX (ADV also)))], 'auto preterminal span': (1, 6), 'span': (1, 6), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX
		(SIMPX
			(SIMPX
				(VF theater)
				(LK denke)
				[01;31m(MF[00m
					(NX
						(PPER ich))[01;31m)[00m)
			[01;36m(NX[00m
				(KOUS das)[01;36m)[00m)
		(ADVX da))
	(SIMPX da kriegen wir keine karten mehr))
Step:Single Word Phrase
{'subtrees': ['KOUS'], 'family': ['SIMPX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KOUS',), 'right siblings': [], 'left siblings': [(SIMPX (VF (NX (NN theater))) (LK (VXFIN (VVFIN denke))) (MF (NX (PPER ich))))], 'auto preterminal span': (4, 5), 'span': (4, 5), 'parent': 'SIMPX', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX
		(SIMPX
			(SIMPX
				(VF theater)
				(LK denke)
				[01;31m(MF[00m
					(NX
						(PPER ich))[01;31m)[00m)
			(NX das))
		(ADVX da))
	(SIMPX da kriegen wir keine karten mehr))
Step:Unary
{'subtrees': ['NX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'VVFIN', 'PPER'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (1, 4), 'span': (3, 4), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP also theater denke ich das da da kriegen wir keine karten mehr)

Sentence 340:
0 Initial errors
0 on fringe, 0 iterations

Sentence 341:
5 Initial errors
0 on fringe, 1 iterations
5 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP [01;33m(VF (PX[00m
		(PX vor allem)
		[01;31m(SIMPX[00m
			[01;31m(VF[00m
				(PX
					(APPR in)
					(NX munchen))[01;31m)[00m [01;33mPX) VF)[00m
			(LK haben)
			(MF wir eh alles)[01;31m)[00m)[01;36m)[00m
Step:PP Attachment
{'new_parent': 'VF', 'new_family': ['PX', 'PX'], 'mover info': [('PX', (0, 2))], 'old_family': ['PX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('APPR', 'PIS', 'APPR', 'NE', 'VAFIN', 'PPER', 'ADV', 'PIS'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 8), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'TOP', 'added and moved': True, 'end right siblings': ['PX'], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP vor allem in munchen haben wir eh alles)

Sentence 342:
0 Initial errors
0 on fringe, 0 iterations

Sentence 343:
0 Initial errors
0 on fringe, 0 iterations

Sentence 344:
9 Initial errors
0 on fringe, 5 iterations
4 Error:UNSET move
2 Error:UNSET move
1 Error:Unary
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wir)
		(LK kucken)
		[01;31m(MF[00m [01;33m(MF[00m
			(ADVX
				(ADV einfach))[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(MF dann) [01;33mMF)[00m
				(VC gespielt wird)[01;31m)[00m[01;31m)[00m)
	(SIMPX
		[01;31m(VF[00m
			[01;31m(SIMPX[00m
				(KOORD und)
				[01;36m(SIMPX[00m
					[01;36m(VF[00m
						(C wenn)
						(MF nix gescheites)
						(VC kommt)[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m
		(LK konnen)
		(MF wir immer noch einfach nur eine kneipentour)
		(VC machen)))
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['KOORD', 'VF', 'LK', 'MF', 'VC'], 'mover info': [('KOORD', (7, 8))], 'old_family': ['KOORD', 'C', 'MF', 'VC'], 'start left siblings': [], 'auto preterminals': ('KON', 'KOUS', 'PIS', 'NN', 'VVFIN', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'ADV', 'ART', 'NN', 'VVINF'), 'start right siblings': ['C', 'MF', 'VC'], 'end left siblings': [], 'auto preterminal span': (7, 21), 'movers': ['KOORD'], 'old_parent': 'SIMPX', 'POS confusion': ('KON', 'KON'), 'end right siblings': ['VF', 'LK', 'MF', 'VC'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(VF wir)
		(LK kucken)
		[01;31m(MF[00m [01;33m(MF[00m
			(ADVX
				(ADV einfach))[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(MF dann) [01;33mMF)[00m
				(VC gespielt wird)[01;31m)[00m[01;31m)[00m)
	(SIMPX und wenn nix gescheites kommt konnen wir immer noch einfach nur eine kneipentour machen))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['ADVX', 'C', 'MF'], 'mover info': [('C', (3, 4)), ('MF', (4, 5))], 'old_family': ['C', 'MF', 'VC'], 'start left siblings': [], 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'PWS', 'ADV', 'VVPP', 'VAFIN'), 'start right siblings': ['VC'], 'end left siblings': ['ADVX'], 'auto preterminal span': (0, 7), 'movers': ['C', 'MF'], 'old_parent': 'SIMPX', 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(VF wir)
		(LK kucken)
		(MF
			(ADVX einfach)
			[01;31m(C[00m
				(NX
					(PWS was))[01;31m)[00m
			(MF dann))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(VC
					(VXINF gespielt)
					(VXFIN wird))[01;31m)[00m[01;31m)[00m)
	(SIMPX und wenn nix gescheites kommt konnen wir immer noch einfach nur eine kneipentour machen))
Step:Unary
{'subtrees': ['NX'], 'family': ['ADVX', 'C', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PWS', 'ADV'), 'right siblings': ['MF'], 'parent': 'MF', 'auto preterminal span': (2, 5), 'span': (3, 4), 'left siblings': ['ADVX'], 'label': 'C', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(VF wir)
		(LK kucken)
		(MF einfach was dann)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(VC
					(VXINF gespielt)
					(VXFIN wird))[01;31m)[00m[01;31m)[00m)
	(SIMPX und wenn nix gescheites kommt konnen wir immer noch einfach nur eine kneipentour machen))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'PWS', 'ADV', 'VVPP', 'VAFIN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 7), 'span': (5, 7), 'left siblings': ['VF', 'LK', 'MF'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(VF wir)
		(LK kucken)
		(MF einfach was dann)
		[01;31m(SIMPX[00m
			(VC
				(VXINF gespielt)
				(VXFIN wird))[01;31m)[00m)
	(SIMPX und wenn nix gescheites kommt konnen wir immer noch einfach nur eine kneipentour machen))
Step:Unary
{'subtrees': ['VC'], 'family': ['VF', 'LK', 'MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'PWS', 'ADV', 'VVPP', 'VAFIN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 7), 'span': (5, 7), 'left siblings': ['VF', 'LK', 'MF'], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP wir kucken einfach was dann gespielt wird und wenn nix gescheites kommt konnen wir immer noch einfach nur eine kneipentour machen)

Sentence 345:
0 Initial errors
0 on fringe, 0 iterations

Sentence 346:
0 Initial errors
0 on fringe, 0 iterations

Sentence 347:
5 Initial errors
0 on fringe, 3 iterations
2 Error:Single Word Phrase
2 Error:PP Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM nee)
	(ADVX dann)
	(NX das)
	(NX das)
	(SIMPX
		(VF das)
		(LK ware)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(NX es)
				[01;36m(ADJX[00m [01;31m(ADVX[00m
					(ADV vorerst)[01;31m)[00m[01;36m)[00m[01;36m)[00m
			[01;36m(NF[00m
				(PX
					(APPR von)
					(NX mir)
					(APZR aus))[01;36m)[00m[01;31m)[00m))
Step:Single Word Phrase
{'family': ['NX', 'ADJX', 'PX'], 'auto preterminal span': (8, 9), 'span': (8, 9), 'subtrees': ['ADV'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'ADJX')}
(TOP
	(DM ja)
	(DM nee)
	(ADVX dann)
	(NX das)
	(NX das)
	(SIMPX
		(VF das)
		(LK ware)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(NX es)
				(ADJX vorerst)[01;36m)[00m
			[01;36m(NF[00m
				(PX
					(APPR von)
					(NX mir)
					(APZR aus))[01;36m)[00m[01;31m)[00m))
Step:PP Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'PX'], 'mover info': [('PX', (9, 12))], 'old_family': ['NX', 'ADJX', 'PX'], 'start left siblings': ['NX', 'ADJX'], 'auto preterminals': ('PDS', 'VAFIN', 'PPER', 'ADV', 'APPR', 'PPER', 'APZR'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (5, 12), 'movers': ['PX'], 'old_parent': 'MF', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(DM nee)
	(ADVX dann)
	(NX das)
	(NX das)
	(SIMPX
		(VF das)
		(LK ware)
		(MF es vorerst)
		[01;36m(NF[00m
			(PX
				(APPR von)
				(NX mir)
				(APZR aus))[01;36m)[00m))
Step:Unary
{'subtrees': ['PX'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'PPER', 'APZR'), 'right siblings': [], 'left siblings': [(VF (NX (PDS das))), (LK (VXFIN (VAFIN ware))), (MF (NX (PPER es)) (ADJX (ADV vorerst)))], 'auto preterminal span': (9, 12), 'span': (9, 12), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP ja nee dann das das das ware es vorerst von mir aus)

Sentence 348:
5 Initial errors
0 on fringe, 4 iterations
2 Error:Different label
1 Error:Single Word Phrase
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(DM[00m
		(ADVX dann)
		[01;36m(LK[00m
			[01;36m(VXFIN[00m
				(PTKANT danke)[01;36m)[00m[01;36m)[00m[01;31m)[00m
	[01;36m(MF[00m [01;31m(DM[00m
		(NX
			(NE peter))[01;31m)[00m[01;36m)[00m
	(SIMPX und wir sehen uns))
Step:Different label
{'family': ['DM', 'MF', 'SIMPX'], 'auto preterminal span': (2, 3), 'span': (2, 3), 'subtrees': ['NX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('NE',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('DM', 'MF')}
(TOP
	[01;31m(DM[00m
		(ADVX dann)
		[01;36m(LK[00m
			[01;36m(VXFIN[00m
				(PTKANT danke)[01;36m)[00m[01;36m)[00m[01;31m)[00m
	(MF peter)
	(SIMPX und wir sehen uns))
Step:Single Word Phrase
{'subtrees': ['PTKANT'], 'family': ['ADVX', 'VXFIN'], 'over_word': True, 'over words': True, 'auto preterminals': ('PTKANT',), 'right siblings': [], 'left siblings': [(ADVX (ADV dann))], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'DM', 'label': 'VXFIN', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	[01;31m(DM[00m
		(ADVX dann)
		[01;36m(LK[00m
			(VXFIN
				(PTKANT danke))[01;36m)[00m[01;31m)[00m
	(MF peter)
	(SIMPX und wir sehen uns))
Step:Unary
{'subtrees': ['VXFIN'], 'family': ['ADVX', 'LK'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT',), 'right siblings': [], 'left siblings': [(ADVX (ADV dann))], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'DM', 'label': 'LK', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(DM[00m
		(ADVX dann)
		(LK danke)[01;31m)[00m
	(MF peter)
	(SIMPX und wir sehen uns))
Step:UNSET remove
{'subtrees': ['ADVX', 'LK'], 'family': ['DM', 'MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PTKANT', 'NE', 'KON', 'PPER', 'VVFIN', 'PRF'), 'right siblings': ['MF', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 7), 'span': (0, 2), 'left siblings': [], 'label': 'DM', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP dann danke peter und wir sehen uns)

Sentence 349:
0 Initial errors
0 on fringe, 0 iterations

Sentence 350:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM danke auch)
	(DM
		(PX
			(KON und)
			[01;36m(DM[00m
				(PX
					(APPR bis)
					(ADVX dann))[01;36m)[00m)))
Step:Unary
{'subtrees': ['PX'], 'family': ['KON', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ADV'), 'right siblings': [], 'left siblings': [(KON und)], 'auto preterminal span': (3, 5), 'span': (3, 5), 'parent': 'PX', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP danke auch und bis dann)

Sentence 351:
0 Initial errors
0 on fringe, 0 iterations

Sentence 352:
5 Initial errors
0 on fringe, 2 iterations
4 Error:Modifier Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM hallo)
	[01;31m(DM[00m [01;33m(NX (DM[00m
		[01;31m(NX[00m
			(NE peter)[01;31m)[00m[01;31m)[00m
	[01;31m(ADJX[00m
		(ADJX gut) [01;33mDM) NX)[00m
		(SIMPX das wir uns treffen)[01;31m)[00m)
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['NE', 'ADJX'], 'mover info': [('ADJX', (2, 3))], 'old_family': ['ADJX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('ITJ', 'NE', 'ADJD', 'KOUS', 'PPER', 'PRF', 'VVFIN'), 'start right siblings': ['SIMPX'], 'end left siblings': ['NE'], 'auto preterminal span': (0, 7), 'movers': ['ADJX'], 'old_parent': 'ADJX', 'POS confusion': ('ADJD', 'ADJD'), 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(DM hallo)
	(DM peter gut)
	[01;31m(ADJX[00m
		(SIMPX
			(C das)
			(MF wir uns)
			(VC treffen))[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['DM', 'DM', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'NE', 'ADJD', 'KOUS', 'PPER', 'PRF', 'VVFIN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 7), 'span': (3, 7), 'left siblings': ['DM', 'DM'], 'label': 'ADJX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP hallo peter gut das wir uns treffen)

Sentence 353:
5 Initial errors
0 on fringe, 4 iterations
2 Error:NP Attachment
1 Error:PP Attachment
1 Error:Unary
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;36m(SIMPX[00m
			[01;31m(SIMPX[00m
				(VF es)
				(LK geht)
				[01;31m(MF[00m
					(PX
						(APPR um)
						(NX termin))[01;31m)[00m[01;31m)[00m
			(NX eine reise)[01;36m)[00m
		[01;31m(NX[00m
			(NX wir beide)
			(ADVX zusammen)[01;31m)[00m
		(PX von munchen nach hannover))[01;36m)[00m
Step:NP Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'NX'], 'mover info': [('NX', (4, 6))], 'old_family': ['SIMPX', 'NX', 'NX', 'PX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('PPER', 'VVFIN', 'APPR', 'NN', 'ART', 'NN', 'PPER', 'PIS', 'ADV', 'APPR', 'NE', 'APPR', 'NE'), 'start right siblings': ['NX', 'PX'], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 13), 'movers': ['NX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX
			(VF es)
			(LK geht)
			[01;31m(MF[00m
				(PX
					(APPR um)
					(NX termin))[01;31m)[00m
			(NX eine reise))
		[01;31m(NX[00m
			(NX wir beide)
			(ADVX zusammen)[01;31m)[00m
		(PX von munchen nach hannover))[01;36m)[00m
Step:PP Attachment
{'subtrees': ['SIMPX', 'NX', 'PX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'APPR', 'NN', 'ART', 'NN', 'PPER', 'PIS', 'ADV', 'APPR', 'NE', 'APPR', 'NE'), 'right siblings': [], 'left siblings': [], 'auto preterminal span': (0, 13), 'span': (0, 13), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(VF es)
			(LK geht)
			[01;31m(MF[00m
				(PX
					(APPR um)
					(NX termin))[01;31m)[00m
			(NX eine reise))
		[01;31m(NX[00m
			(NX wir beide)
			(ADVX zusammen)[01;31m)[00m
		(PX von munchen nach hannover)))
Step:Unary
{'subtrees': ['PX'], 'family': ['VF', 'LK', 'MF', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'APPR', 'NN', 'ART', 'NN'), 'right siblings': ['NX'], 'parent': 'SIMPX', 'auto preterminal span': (0, 6), 'span': (2, 4), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(SIMPX es geht um termin eine reise)
		[01;31m(NX[00m
			(NX wir beide)
			(ADVX zusammen)[01;31m)[00m
		(PX von munchen nach hannover)))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX'], 'family': ['SIMPX', 'NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'APPR', 'NN', 'ART', 'NN', 'PPER', 'PIS', 'ADV', 'APPR', 'NE', 'APPR', 'NE'), 'right siblings': ['PX'], 'parent': 'SIMPX', 'auto preterminal span': (0, 13), 'span': (6, 9), 'left siblings': ['SIMPX'], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP es geht um termin eine reise wir beide zusammen von munchen nach hannover)

Sentence 354:
0 Initial errors
0 on fringe, 0 iterations

Sentence 355:
0 Initial errors
0 on fringe, 0 iterations

Sentence 356:
0 Initial errors
0 on fringe, 0 iterations

Sentence 357:
0 Initial errors
0 on fringe, 0 iterations

Sentence 358:
0 Initial errors
0 on fringe, 0 iterations

Sentence 359:
0 Initial errors
0 on fringe, 0 iterations

Sentence 360:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Clause Attachment
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;36m(SIMPX[00m
		(SIMPX
			(VF ich)
			(LK sage)
			[01;31m(MF[00m
				(NX es)
				(NX dir)
				(ADVX gleich)[01;31m)[00m)
		(SIMPX urlaub habe ich vom neunzehnten juli bis mitte august)[01;36m)[00m)
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PPER', 'PPER', 'ADV', 'NN', 'VAFIN', 'PPER', 'APPRART', 'ADJA', 'NN', 'APPR', 'NN', 'NN'), 'right siblings': [], 'left siblings': [(DM (PTKANT ja))], 'auto preterminal span': (1, 15), 'span': (1, 15), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX
		(SIMPX
			(VF ich)
			(LK sage)
			[01;31m(MF[00m
				(NX es)
				(NX dir)
				(ADVX gleich)[01;31m)[00m)
		(SIMPX urlaub habe ich vom neunzehnten juli bis mitte august)))
Step:Modifier Attachment
{'subtrees': ['NX', 'NX', 'ADVX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PPER', 'PPER', 'ADV'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (1, 6), 'span': (3, 6), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP ja ich sage es dir gleich urlaub habe ich vom neunzehnten juli bis mitte august)

Sentence 361:
0 Initial errors
0 on fringe, 0 iterations

Sentence 362:
0 Initial errors
0 on fringe, 0 iterations

Sentence 363:
0 Initial errors
0 on fringe, 0 iterations

Sentence 364:
0 Initial errors
0 on fringe, 0 iterations

Sentence 365:
0 Initial errors
0 on fringe, 0 iterations

Sentence 366:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Different label
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF mein urlaub)
		(VXFIN ist)
		(FKOORD
			(LKMVC fangt am neunten august an)
			(KON und)
			[01;36m(SIMPX[00m [01;31m(LKM[00m
				(LK geht)
				(MF bis zum einunddreisigsten august)[01;31m)[00m[01;36m)[00m)))
Step:Different label
{'family': ['LKMVC', 'KON', 'SIMPX'], 'auto preterminal span': (9, 14), 'span': (9, 14), 'subtrees': ['LK', 'MF'], 'parent': 'FKOORD', 'over_word': False, 'auto preterminals': ('VVFIN', 'APPR', 'APPRART', 'ADJA', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('LKM', 'SIMPX')}
(TOP mein urlaub ist fangt am neunten august an und geht bis zum einunddreisigsten august)

Sentence 367:
4 Initial errors
0 on fringe, 4 iterations
1 Error:Clause Attachment
1 Error:Modifier Attachment
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX
			(KOORD und)
			(VF ich)
			(LK sage)
			(MF
				(NX es)
				[01;36m(MF[00m
					(NX dir)
					(ADVX gleich)[01;36m)[00m))
		(SIMPX
			[01;31m(VF[00m
				[01;31m(PX[00m
					(APPRART im)
					(NX juli)[01;31m)[00m[01;31m)[00m
			(LK wird)
			(MF es etwas knapp)))[01;36m)[00m
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PPER', 'VVFIN', 'PPER', 'PPER', 'ADV', 'APPRART', 'NN', 'VAFIN', 'PPER', 'ADV', 'ADJD'), 'right siblings': [], 'left siblings': [], 'auto preterminal span': (0, 12), 'span': (0, 12), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(KOORD und)
			(VF ich)
			(LK sage)
			(MF
				(NX es)
				[01;36m(MF[00m
					(NX dir)
					(ADVX gleich)[01;36m)[00m))
		(SIMPX
			[01;31m(VF[00m
				[01;31m(PX[00m
					(APPRART im)
					(NX juli)[01;31m)[00m[01;31m)[00m
			(LK wird)
			(MF es etwas knapp))))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX'], 'family': ['NX', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV'), 'right siblings': [], 'left siblings': [(NX (PPER es))], 'auto preterminal span': (4, 6), 'span': (4, 6), 'parent': 'MF', 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX und ich sage es dir gleich)
		(SIMPX
			[01;31m(VF[00m
				[01;31m(PX[00m
					(APPRART im)
					(NX juli)[01;31m)[00m[01;31m)[00m
			(LK wird)
			(MF es etwas knapp))))
Step:Unary
{'subtrees': ['APPRART', 'NX'], 'family': ['PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'NN'), 'right siblings': [], 'parent': 'VF', 'auto preterminal span': (6, 8), 'span': (6, 8), 'left siblings': [], 'label': 'PX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(SIMPX und ich sage es dir gleich)
		(SIMPX
			[01;31m(VF[00m
				(APPRART im)
				(NX juli)[01;31m)[00m
			(LK wird)
			(MF es etwas knapp))))
Step:UNSET remove
{'subtrees': ['APPRART', 'NX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'NN', 'VAFIN', 'PPER', 'ADV', 'ADJD'), 'right siblings': ['LK', 'MF'], 'parent': 'SIMPX', 'auto preterminal span': (6, 12), 'span': (6, 8), 'left siblings': [], 'label': 'VF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP und ich sage es dir gleich im juli wird es etwas knapp)

Sentence 368:
0 Initial errors
0 on fringe, 0 iterations

Sentence 369:
0 Initial errors
0 on fringe, 0 iterations

Sentence 370:
0 Initial errors
0 on fringe, 0 iterations

Sentence 371:
0 Initial errors
0 on fringe, 0 iterations

Sentence 372:
0 Initial errors
0 on fringe, 0 iterations

Sentence 373:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Clause Attachment
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(SIMPX[00m
		(PX am siebten)
		(DM ah)
		(SIMPX
			(VF da)
			(LK hatte)
			(MF
				(NX ich)
				(ADVX
					(ADVX nur)
					[01;36m(ADVX[00m
						(ADV abends)[01;36m)[00m)
				(NX kino)))[01;36m)[00m
	(SIMPX aber am neunter zehnter juli hattest du gesagt))
Step:Clause Attachment
{'subtrees': ['PX', 'DM', 'SIMPX'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'NN', 'ITJ', 'ADV', 'VAFIN', 'PPER', 'ADV', 'ADV', 'NN'), 'right siblings': [(SIMPX (KOORD (KON aber)) (VF (PX (APPRART am) (NX (ADJX (ADJX (ADJA neunter)) (ADJX (ADJA zehnter))) (NN juli)))) (LK (VXFIN (VAFIN hattest))) (MF (NX (PPER du))) (VC (VXINF (VVPP gesagt))))], 'left siblings': [], 'auto preterminal span': (0, 9), 'span': (0, 9), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(PX am siebten)
		(DM ah)
		(SIMPX
			(VF da)
			(LK hatte)
			(MF
				(NX ich)
				(ADVX
					(ADVX nur)
					[01;36m(ADVX[00m
						(ADV abends)[01;36m)[00m)
				(NX kino))))
	(SIMPX aber am neunter zehnter juli hattest du gesagt))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['ADVX', 'ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV',), 'right siblings': [], 'left siblings': [(ADVX (ADV nur))], 'auto preterminal span': (7, 8), 'span': (7, 8), 'parent': 'ADVX', 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP am siebten ah da hatte ich nur abends kino aber am neunter zehnter juli hattest du gesagt)

Sentence 374:
0 Initial errors
0 on fringe, 0 iterations

Sentence 375:
0 Initial errors
0 on fringe, 0 iterations

Sentence 376:
0 Initial errors
0 on fringe, 0 iterations

Sentence 377:
0 Initial errors
0 on fringe, 0 iterations

Sentence 378:
0 Initial errors
0 on fringe, 0 iterations

Sentence 379:
0 Initial errors
0 on fringe, 0 iterations

Sentence 380:
0 Initial errors
0 on fringe, 0 iterations

Sentence 381:
0 Initial errors
0 on fringe, 0 iterations

Sentence 382:
0 Initial errors
0 on fringe, 0 iterations

Sentence 383:
7 Initial errors
0 on fringe, 4 iterations
4 Error:Clause Attachment
1 Error:Unary
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM okay)
	(SIMPX dann fahren wir zusammen dahin)
	[01;31m(SIMPX[00m
		(KOORD und)
		(DM also)
		(VF ich)
		(LK meine)
		[01;31m(NF[00m [01;33m(SIMPX (NF[00m
			[01;31m(SIMPX[00m
				(VF wir)
				(LK haben)
				(MF jetzt die)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	[01;36m(NF[00m
		(SIMPX
			(VF wir)
			(LK brauchen)
			[01;36m(NX[00m
				(MF
					(NX anderthalb tage)
					(PX fur das treffen))[01;36m)[00m)[01;36m)[00m) [01;33mNF) SIMPX)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'SIMPX'], 'mover info': [('SIMPX', (14, 21))], 'old_family': ['DM', 'SIMPX', 'SIMPX', 'SIMPX'], 'start left siblings': ['DM', 'SIMPX', 'SIMPX'], 'auto preterminals': ('ITJ', 'ADV', 'VVFIN', 'PPER', 'ADV', 'PROP', 'KON', 'ADV', 'PPER', 'VVFIN', 'PPER', 'VAFIN', 'ADV', 'PDS', 'PPER', 'VVFIN', 'CARD', 'NN', 'APPR', 'ART', 'NN'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 21), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(DM okay)
	(SIMPX dann fahren wir zusammen dahin)
	[01;31m(SIMPX[00m
		(KOORD und)
		(DM also)
		(VF ich)
		(LK meine)
		(NF
			(SIMPX
				(VF wir)
				(LK haben)
				(MF jetzt die)
				[01;36m(NF[00m
					(SIMPX
						(VF wir)
						(LK brauchen)
						[01;36m(NX[00m
							(MF
								(NX anderthalb tage)
								(PX fur das treffen))[01;36m)[00m)[01;36m)[00m))[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'CARD', 'NN', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(VF (NX (PPER wir))), (LK (VXFIN (VAFIN haben))), (MF (ADVX (ADV jetzt)) (NX (PDS die)))], 'auto preterminal span': (14, 21), 'span': (14, 21), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM okay)
	(SIMPX dann fahren wir zusammen dahin)
	[01;31m(SIMPX[00m
		(KOORD und)
		(DM also)
		(VF ich)
		(LK meine)
		(NF
			(SIMPX
				(VF wir)
				(LK haben)
				(MF jetzt die)
				(NF
					(SIMPX
						(VF wir)
						(LK brauchen)
						[01;36m(NX[00m
							(MF
								(NX anderthalb tage)
								(PX fur das treffen))[01;36m)[00m))))[01;31m)[00m)
Step:Unary
{'subtrees': ['MF'], 'family': ['VF', 'LK', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'NN', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(VF (NX (PPER wir))), (LK (VXFIN (VVFIN brauchen)))], 'auto preterminal span': (16, 21), 'span': (16, 21), 'parent': 'SIMPX', 'label': 'NX', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM okay)
	(SIMPX dann fahren wir zusammen dahin)
	[01;31m(SIMPX[00m
		(KOORD und)
		(DM also)
		(VF ich)
		(LK meine)
		(NF wir haben jetzt die wir brauchen anderthalb tage fur das treffen)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['KOORD', 'DM', 'VF', 'LK', 'NF'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADV', 'VVFIN', 'PPER', 'ADV', 'PROP', 'KON', 'ADV', 'PPER', 'VVFIN', 'PPER', 'VAFIN', 'ADV', 'PDS', 'PPER', 'VVFIN', 'CARD', 'NN', 'APPR', 'ART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 21), 'span': (6, 21), 'left siblings': ['DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP okay dann fahren wir zusammen dahin und also ich meine wir haben jetzt die wir brauchen anderthalb tage fur das treffen)

Sentence 384:
1 Initial errors
0 on fringe, 1 iterations
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX wir haben zwei tage zeit)
	(SIMPX
		(VF also)
		[01;36m(SIMPX[00m
			(LK konnten)
			(MF wir mit dem zug)
			(VC hinfahren)
			(NF zum beispiel)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['LK', 'MF', 'VC', 'NF'], 'family': ['VF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'APPR', 'ART', 'NN', 'VVINF', 'APPRART', 'NN'), 'right siblings': [], 'left siblings': [(VF (ADVX (ADV also)))], 'auto preterminal span': (6, 14), 'span': (6, 14), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP wir haben zwei tage zeit also konnten wir mit dem zug hinfahren zum beispiel)

Sentence 385:
12 Initial errors
0 on fringe, 10 iterations
2 Error:Single Word Phrase
2 Error:Different label
1 Error:Single Word Phrase
1 Error:Unary
1 Error:Co-ordination
1 Error:Clause Attachment
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:PP Attachment
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(P[00m
		[01;31m(SIMPX[00m
			(LK konnen)
			(MF wir ruhig)
			(VC machen)[01;31m)[00m
		(KON denn)
		[01;31m(SIMPX[00m
			(VF
				(SIMPX
					(C bis)
					(MF [01;33m(MF[00m
						(NX du)
						(ADVX immer)
						[01;31m(PX[00m
							(PX am flughafen) [01;33mMF)[00m
							[01;36m(VC[00m
								[01;36m(VXFIN[00m
									(PROP drausen)[01;36m)[00m[01;36m)[00m[01;31m)[00m)
					[01;36m(VF[00m [01;36m(NX[00m [01;31m(VC[00m
						[01;31m(VXFIN[00m
							(VAFIN bist)[01;31m)[00m[01;31m)[00m[01;36m)[00m[01;36m)[00m))
			(LK ist)
			(MF
				(ADVX schon)
				(NX die erste stunde)
				[01;31m(ADVX[00m
					(ADV vorbei)[01;31m)[00m)[01;31m)[00m[01;31m)[00m
	(SIMPX und mit dem ice ist es bequem))
Step:Single Word Phrase
{'family': ['NX'], 'auto preterminal span': (11, 12), 'span': (11, 12), 'subtrees': ['VAFIN'], 'parent': 'VC', 'over_word': True, 'auto preterminals': ('VAFIN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VXFIN', 'NX')}
(TOP
	[01;31m(P[00m
		[01;31m(SIMPX[00m
			(LK konnen)
			(MF wir ruhig)
			(VC machen)[01;31m)[00m
		(KON denn)
		[01;31m(SIMPX[00m
			(VF
				(SIMPX
					(C bis)
					(MF [01;33m(MF[00m
						(NX du)
						(ADVX immer)
						[01;31m(PX[00m
							(PX am flughafen) [01;33mMF)[00m
							[01;36m(VC[00m
								[01;36m(VXFIN[00m
									(PROP drausen)[01;36m)[00m[01;36m)[00m[01;31m)[00m)
					[01;36m(VF[00m [01;31m(VC[00m
						(NX
							(VAFIN bist))[01;31m)[00m[01;36m)[00m))
			(LK ist)
			(MF
				(ADVX schon)
				(NX die erste stunde)
				[01;31m(ADVX[00m
					(ADV vorbei)[01;31m)[00m)[01;31m)[00m[01;31m)[00m
	(SIMPX und mit dem ice ist es bequem))
Step:Different label
{'family': ['C', 'MF', 'VF'], 'auto preterminal span': (11, 12), 'span': (11, 12), 'subtrees': ['NX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('VAFIN',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('VC', 'VF')}
(TOP
	[01;31m(P[00m
		[01;31m(SIMPX[00m
			(LK konnen)
			(MF wir ruhig)
			(VC machen)[01;31m)[00m
		(KON denn)
		[01;31m(SIMPX[00m
			(VF
				(SIMPX
					(C bis)
					(MF [01;33m(MF[00m
						(NX du)
						(ADVX immer)
						[01;31m(PX[00m
							(PX am flughafen) [01;33mMF)[00m
							[01;36m(VC[00m
								[01;36m(VXFIN[00m
									(PROP drausen)[01;36m)[00m[01;36m)[00m[01;31m)[00m)
					(VF bist)))
			(LK ist)
			(MF
				(ADVX schon)
				(NX die erste stunde)
				[01;31m(ADVX[00m
					(ADV vorbei)[01;31m)[00m)[01;31m)[00m[01;31m)[00m
	(SIMPX und mit dem ice ist es bequem))
Step:Single Word Phrase
{'subtrees': ['PROP'], 'family': ['PX', 'VXFIN'], 'over_word': True, 'over words': True, 'auto preterminals': ('PROP',), 'right siblings': [], 'left siblings': [(PX (APPRART am) (NX (NN flughafen)))], 'auto preterminal span': (10, 11), 'span': (10, 11), 'parent': 'PX', 'label': 'VXFIN', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	[01;31m(P[00m
		[01;31m(SIMPX[00m
			(LK konnen)
			(MF wir ruhig)
			(VC machen)[01;31m)[00m
		(KON denn)
		[01;31m(SIMPX[00m
			(VF
				(SIMPX
					(C bis)
					(MF [01;33m(MF[00m
						(NX du)
						(ADVX immer)
						[01;31m(PX[00m
							(PX am flughafen) [01;33mMF)[00m
							[01;36m(VC[00m
								(VXFIN
									(PROP drausen))[01;36m)[00m[01;31m)[00m)
					(VF bist)))
			(LK ist)
			(MF
				(ADVX schon)
				(NX die erste stunde)
				[01;31m(ADVX[00m
					(ADV vorbei)[01;31m)[00m)[01;31m)[00m[01;31m)[00m
	(SIMPX und mit dem ice ist es bequem))
Step:Unary
{'subtrees': ['VXFIN'], 'family': ['PX', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('PROP',), 'right siblings': [], 'left siblings': [(PX (APPRART am) (NX (NN flughafen)))], 'auto preterminal span': (10, 11), 'span': (10, 11), 'parent': 'PX', 'label': 'VC', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(P[00m
		[01;31m(SIMPX[00m
			(LK konnen)
			(MF wir ruhig)
			(VC machen)[01;31m)[00m
		(KON denn)
		[01;31m(SIMPX[00m
			(VF
				(SIMPX
					(C bis)
					(MF [01;33m(MF[00m
						(NX du)
						(ADVX immer)
						[01;31m(PX[00m
							(PX am flughafen) [01;33mMF)[00m
							(VC drausen)[01;31m)[00m)
					(VF bist)))
			(LK ist)
			(MF
				(ADVX schon)
				(NX die erste stunde)
				[01;31m(ADVX[00m
					(ADV vorbei)[01;31m)[00m)[01;31m)[00m[01;31m)[00m
	(SIMPX und mit dem ice ist es bequem))
Step:Co-ordination
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['SIMPX', 'KON', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'ADV', 'VVINF', 'KON', 'KOUS', 'PPER', 'ADV', 'APPRART', 'NN', 'PROP', 'VAFIN', 'VAFIN', 'ADV', 'ART', 'ADJA', 'NN', 'ADV'), 'right siblings': ['KON', 'SIMPX'], 'parent': 'P', 'auto preterminal span': (0, 18), 'span': (0, 4), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP
	[01;31m(P[00m
		(LK konnen)
		(MF wir ruhig)
		(VC machen)
		(KON denn)
		[01;31m(SIMPX[00m
			(VF
				(SIMPX
					(C bis)
					(MF [01;33m(MF[00m
						(NX du)
						(ADVX immer)
						[01;31m(PX[00m
							(PX am flughafen) [01;33mMF)[00m
							(VC drausen)[01;31m)[00m)
					(VF bist)))
			(LK ist)
			(MF
				(ADVX schon)
				(NX die erste stunde)
				[01;31m(ADVX[00m
					(ADV vorbei)[01;31m)[00m)[01;31m)[00m[01;31m)[00m
	(SIMPX und mit dem ice ist es bequem))
Step:Clause Attachment
{'subtrees': ['LK', 'MF', 'VC', 'KON', 'SIMPX'], 'family': ['P', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'ADV', 'VVINF', 'KON', 'KOUS', 'PPER', 'ADV', 'APPRART', 'NN', 'PROP', 'VAFIN', 'VAFIN', 'ADV', 'ART', 'ADJA', 'NN', 'ADV', 'KON', 'APPR', 'ART', 'NE', 'VAFIN', 'PPER', 'ADJD'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 25), 'span': (0, 18), 'left siblings': [], 'label': 'P', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(LK konnen)
	(MF wir ruhig)
	(VC machen)
	(KON denn)
	[01;31m(SIMPX[00m
		(VF
			(SIMPX
				(C bis)
				(MF [01;33m(MF[00m
					(NX du)
					(ADVX immer)
					[01;31m(PX[00m
						(PX am flughafen) [01;33mMF)[00m
						(VC drausen)[01;31m)[00m)
				(VF bist)))
		(LK ist)
		(MF
			(ADVX schon)
			(NX die erste stunde)
			[01;31m(ADVX[00m
				(ADV vorbei)[01;31m)[00m)[01;31m)[00m
	(SIMPX und mit dem ice ist es bequem))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['LK', 'MF', 'VC', 'KON', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'ADV', 'VVINF', 'KON', 'KOUS', 'PPER', 'ADV', 'APPRART', 'NN', 'PROP', 'VAFIN', 'VAFIN', 'ADV', 'ART', 'ADJA', 'NN', 'ADV', 'KON', 'APPR', 'ART', 'NE', 'VAFIN', 'PPER', 'ADJD'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 25), 'span': (5, 18), 'left siblings': ['LK', 'MF', 'VC', 'KON'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(LK konnen)
	(MF wir ruhig)
	(VC machen)
	(KON denn)
	(VF
		(SIMPX
			(C bis)
			(MF [01;33m(MF[00m
				(NX du)
				(ADVX immer)
				[01;31m(PX[00m
					(PX am flughafen) [01;33mMF)[00m
					(VC drausen)[01;31m)[00m)
			(VF bist)))
	(LK ist)
	(MF
		(ADVX schon)
		(NX die erste stunde)
		[01;31m(ADVX[00m
			(ADV vorbei)[01;31m)[00m)
	(SIMPX und mit dem ice ist es bequem))
Step:UNSET remove
{'subtrees': ['PX', 'VC'], 'family': ['NX', 'ADVX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'APPRART', 'NN', 'PROP'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (6, 11), 'span': (8, 11), 'left siblings': ['NX', 'ADVX'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(LK konnen)
	(MF wir ruhig)
	(VC machen)
	(KON denn)
	(VF
		(SIMPX
			(C bis)
			(MF
				[01;36m(MF[00m
					(NX du)
					(ADVX immer)
					(PX am flughafen)[01;36m)[00m
				(VC drausen))
			(VF bist)))
	(LK ist)
	(MF
		(ADVX schon)
		(NX die erste stunde)
		[01;31m(ADVX[00m
			(ADV vorbei)[01;31m)[00m)
	(SIMPX und mit dem ice ist es bequem))
Step:PP Attachment
{'subtrees': ['NX', 'ADVX', 'PX'], 'family': ['MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'APPRART', 'NN'), 'right siblings': [(VC (VXFIN (PROP drausen)))], 'left siblings': [], 'auto preterminal span': (6, 10), 'span': (6, 10), 'parent': 'MF', 'label': 'MF', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(LK konnen)
	(MF wir ruhig)
	(VC machen)
	(KON denn)
	(VF bis du immer am flughafen drausen bist)
	(LK ist)
	(MF
		(ADVX schon)
		(NX die erste stunde)
		[01;31m(ADVX[00m
			(ADV vorbei)[01;31m)[00m)
	(SIMPX und mit dem ice ist es bequem))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['ADVX', 'NX', 'ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV', 'ART', 'ADJA', 'NN', 'ADV'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (13, 18), 'span': (17, 18), 'left siblings': ['ADVX', 'NX'], 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP konnen wir ruhig machen denn bis du immer am flughafen drausen bist ist schon die erste stunde vorbei und mit dem ice ist es bequem)

Sentence 386:
0 Initial errors
0 on fringe, 0 iterations

Sentence 387:
0 Initial errors
0 on fringe, 0 iterations

Sentence 388:
11 Initial errors
0 on fringe, 10 iterations
2 Error:Different label
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET add
1 Error:UNSET remove
1 Error:Unary
1 Error:Unary
1 Error:UNSET remove
1 Error:Unary
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			[01;31m(PX[00m
				(APPR bei)
				[01;33m(NX[00m (NX den zugverbindungen die ich hier habe)[01;31m)[00m[01;31m)[00m
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			(NX
				(NX munchen)
				(NX hannover))[01;31m)[00m [01;33mNX)[00m
		[01;31m(NF[00m
			(PX
				(APPR mit)
				(NX dem ice))[01;31m)[00m[01;31m)[00m
	(SIMPX
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					(ADJX stundliche)
					(NN verbindungen)[01;31m)[00m
				(PX
					(APPR ab)
					[01;36m(ADVX[00m [01;31m(PX[00m
						(ADVX morgens)
						(NX vier uhr dreiundvierzig)[01;31m)[00m[01;36m)[00m)[01;31m)[00m[01;31m)[00m))
Step:Different label
{'family': ['APPR', 'ADVX'], 'auto preterminal span': (19, 23), 'span': (19, 23), 'subtrees': ['ADVX', 'NX'], 'parent': 'PX', 'over_word': False, 'auto preterminals': ('ADV', 'CARD', 'NN', 'CARD'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('PX', 'ADVX')}
(TOP
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			[01;31m(PX[00m
				(APPR bei)
				[01;33m(NX[00m (NX den zugverbindungen die ich hier habe)[01;31m)[00m[01;31m)[00m
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			(NX
				(NX munchen)
				(NX hannover))[01;31m)[00m [01;33mNX)[00m
		[01;31m(NF[00m
			(PX
				(APPR mit)
				(NX dem ice))[01;31m)[00m[01;31m)[00m
	(SIMPX
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					(ADJX stundliche)
					(NN verbindungen)[01;31m)[00m
				(PX ab morgens vier uhr dreiundvierzig)[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['APPR', 'NX'], 'family': ['PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'PRELS', 'PPER', 'ADV', 'VAFIN'), 'right siblings': [], 'parent': 'LV', 'auto preterminal span': (0, 7), 'span': (0, 7), 'left siblings': [], 'label': 'PX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(APPR bei)
			[01;33m(NX[00m (NX den zugverbindungen die ich hier habe)[01;31m)[00m
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			(NX
				(NX munchen)
				(NX hannover))[01;31m)[00m [01;33mNX)[00m
		[01;31m(NF[00m
			(PX
				(APPR mit)
				(NX dem ice))[01;31m)[00m[01;31m)[00m
	(SIMPX
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					(ADJX stundliche)
					(NN verbindungen)[01;31m)[00m
				(PX ab morgens vier uhr dreiundvierzig)[01;31m)[00m[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['APPR', 'NX'], 'family': ['LV', 'VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'PRELS', 'PPER', 'ADV', 'VAFIN', 'PDS', 'VAFIN', 'NE', 'NE', 'APPR', 'ART', 'NE'), 'right siblings': ['VF', 'LK', 'MF', 'NF'], 'parent': 'SIMPX', 'auto preterminal span': (0, 14), 'span': (0, 7), 'left siblings': [], 'label': 'LV', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	[01;31m(SIMPX[00m
		(APPR bei)
		[01;36m(NX[00m
			(NX den zugverbindungen die ich hier habe)
			(VF das)
			(LK sind)
			[01;31m(MF[00m
				(NX
					(NX munchen)
					(NX hannover))[01;31m)[00m[01;36m)[00m
		[01;31m(NF[00m
			(PX
				(APPR mit)
				(NX dem ice))[01;31m)[00m[01;31m)[00m
	(SIMPX
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					(ADJX stundliche)
					(NN verbindungen)[01;31m)[00m
				(PX ab morgens vier uhr dreiundvierzig)[01;31m)[00m[01;31m)[00m))
Step:UNSET add
{'subtrees': ['NX', 'VF', 'LK', 'MF'], 'family': ['APPR', 'NX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'PRELS', 'PPER', 'ADV', 'VAFIN', 'PDS', 'VAFIN', 'NE', 'NE'), 'right siblings': [(NF (PX (APPR mit) (NX (ART dem) (NE ice))))], 'left siblings': [(APPR bei)], 'auto preterminal span': (1, 11), 'span': (1, 11), 'parent': 'SIMPX', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(APPR bei)
		(NX
			(NX den zugverbindungen die ich hier habe)
			(VF das)
			(LK sind)
			[01;31m(MF[00m
				(NX
					(NX munchen)
					(NX hannover))[01;31m)[00m)
		[01;31m(NF[00m
			(PX
				(APPR mit)
				(NX dem ice))[01;31m)[00m[01;31m)[00m
	(SIMPX
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					(ADJX stundliche)
					(NN verbindungen)[01;31m)[00m
				(PX ab morgens vier uhr dreiundvierzig)[01;31m)[00m[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['APPR', 'NX', 'NF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'PRELS', 'PPER', 'ADV', 'VAFIN', 'PDS', 'VAFIN', 'NE', 'NE', 'APPR', 'ART', 'NE', 'PDS', 'VAFIN', 'ADJA', 'NN', 'APPR', 'ADV', 'CARD', 'NN', 'CARD'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 23), 'span': (0, 14), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(APPR bei)
	(NX
		(NX den zugverbindungen die ich hier habe)
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			(NX
				(NX munchen)
				(NX hannover))[01;31m)[00m)
	[01;31m(NF[00m
		(PX
			(APPR mit)
			(NX dem ice))[01;31m)[00m
	(SIMPX
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					(ADJX stundliche)
					(NN verbindungen)[01;31m)[00m
				(PX ab morgens vier uhr dreiundvierzig)[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['NX'], 'family': ['NX', 'VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'PRELS', 'PPER', 'ADV', 'VAFIN', 'PDS', 'VAFIN', 'NE', 'NE'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (1, 11), 'span': (9, 11), 'left siblings': ['NX', 'VF', 'LK'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(APPR bei)
	(NX den zugverbindungen die ich hier habe das sind munchen hannover)
	[01;31m(NF[00m
		(PX
			(APPR mit)
			(NX dem ice))[01;31m)[00m
	(SIMPX
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					(ADJX stundliche)
					(NN verbindungen)[01;31m)[00m
				(PX ab morgens vier uhr dreiundvierzig)[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['PX'], 'family': ['APPR', 'NX', 'NF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'PRELS', 'PPER', 'ADV', 'VAFIN', 'PDS', 'VAFIN', 'NE', 'NE', 'APPR', 'ART', 'NE', 'PDS', 'VAFIN', 'ADJA', 'NN', 'APPR', 'ADV', 'CARD', 'NN', 'CARD'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 23), 'span': (11, 14), 'left siblings': ['APPR', 'NX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(APPR bei)
	(NX den zugverbindungen die ich hier habe das sind munchen hannover)
	(PX mit dem ice)
	(SIMPX
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					(ADJX stundliche)
					(NN verbindungen)[01;31m)[00m
				(PX ab morgens vier uhr dreiundvierzig)[01;31m)[00m[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['ADJX', 'NN'], 'family': ['NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJA', 'NN', 'APPR', 'ADV', 'CARD', 'NN', 'CARD'), 'right siblings': ['PX'], 'parent': 'NX', 'auto preterminal span': (16, 23), 'span': (16, 18), 'left siblings': [], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(APPR bei)
	(NX den zugverbindungen die ich hier habe das sind munchen hannover)
	(PX mit dem ice)
	(SIMPX
		(VF das)
		(LK sind)
		[01;31m(MF[00m
			[01;31m(NX[00m
				(ADJX stundliche)
				(NN verbindungen)
				(PX ab morgens vier uhr dreiundvierzig)[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['NX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VAFIN', 'ADJA', 'NN', 'APPR', 'ADV', 'CARD', 'NN', 'CARD'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (14, 23), 'span': (16, 23), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(APPR bei)
	(NX den zugverbindungen die ich hier habe das sind munchen hannover)
	(PX mit dem ice)
	(SIMPX
		(VF das)
		(LK sind)
		[01;31m(NX[00m
			(ADJX stundliche)
			(NN verbindungen)
			(PX ab morgens vier uhr dreiundvierzig)[01;31m)[00m))
Step:PP Attachment
{'subtrees': ['ADJX', 'NN', 'PX'], 'family': ['VF', 'LK', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VAFIN', 'ADJA', 'NN', 'APPR', 'ADV', 'CARD', 'NN', 'CARD'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (14, 23), 'span': (16, 23), 'left siblings': ['VF', 'LK'], 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP bei den zugverbindungen die ich hier habe das sind munchen hannover mit dem ice das sind stundliche verbindungen ab morgens vier uhr dreiundvierzig)

Sentence 389:
0 Initial errors
0 on fringe, 0 iterations

Sentence 390:
0 Initial errors
0 on fringe, 0 iterations

Sentence 391:
0 Initial errors
0 on fringe, 0 iterations

Sentence 392:
7 Initial errors
0 on fringe, 5 iterations
2 Error:Single Word Phrase
2 Error:Different label
1 Error:UNSET add
1 Error:Clause Attachment
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	[01;31m(SIMPX[00m
		(VF also)
		[01;36m(SIMPX[00m
			(LK wurden)
			(MF wir)
			(VC sagen)
			(NF
				(SIMPX
					(VF wir)
					(LK konnten)
					[01;36m(NX[00m
						(MF
							[01;31m(ADJX[00m
								[01;36m(ADVX[00m [01;31m(ADJX[00m
									(ADJD stundlich)[01;31m)[00m[01;36m)[00m
								[01;31m(NX[00m
									(NX vier uhr)
									(ADJX dreiundvierzig)[01;31m)[00m[01;31m)[00m)[01;36m)[00m))[01;36m)[00m[01;31m)[00m
	(SIMPX ich wurde sagen acht uhr dreiundvierzig))
Step:Single Word Phrase
{'family': ['ADVX', 'NX'], 'auto preterminal span': (7, 8), 'span': (7, 8), 'subtrees': ['ADJD'], 'parent': 'ADJX', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'ADVX')}
(TOP
	(DM also)
	[01;31m(SIMPX[00m
		(VF also)
		[01;36m(SIMPX[00m
			(LK wurden)
			(MF wir)
			(VC sagen)
			(NF
				(SIMPX
					(VF wir)
					(LK konnten)
					[01;36m(NX[00m
						(MF
							[01;31m(ADJX[00m
								(ADVX stundlich)
								[01;31m(NX[00m
									(NX vier uhr)
									(ADJX dreiundvierzig)[01;31m)[00m[01;31m)[00m)[01;36m)[00m))[01;36m)[00m[01;31m)[00m
	(SIMPX ich wurde sagen acht uhr dreiundvierzig))
Step:Different label
{'family': ['NX'], 'auto preterminal span': (7, 11), 'span': (7, 11), 'subtrees': ['ADVX', 'NX'], 'parent': 'MF', 'over_word': False, 'auto preterminals': ('ADJD', 'CARD', 'NN', 'CARD'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('ADJX', 'NX')}
(TOP
	(DM also)
	[01;31m(SIMPX[00m
		(VF also)
		[01;36m(SIMPX[00m
			(LK wurden)
			(MF wir)
			(VC sagen)
			(NF
				(SIMPX
					(VF wir)
					(LK konnten)
					(MF
						(NX
							(ADVX stundlich)
							[01;31m(NX[00m
								(NX vier uhr)
								(ADJX dreiundvierzig)[01;31m)[00m))))[01;36m)[00m[01;31m)[00m
	(SIMPX ich wurde sagen acht uhr dreiundvierzig))
Step:UNSET add
{'subtrees': ['LK', 'MF', 'VC', 'NF'], 'family': ['VF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'PPER', 'VVINF', 'PPER', 'VMFIN', 'ADJD', 'CARD', 'NN', 'CARD'), 'right siblings': [], 'left siblings': [(VF (ADVX (ADV also)))], 'auto preterminal span': (2, 11), 'span': (2, 11), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	[01;31m(SIMPX[00m
		(VF also)
		(SIMPX
			(LK wurden)
			(MF wir)
			(VC sagen)
			(NF
				(SIMPX
					(VF wir)
					(LK konnten)
					(MF
						(NX
							(ADVX stundlich)
							[01;31m(NX[00m
								(NX vier uhr)
								(ADJX dreiundvierzig)[01;31m)[00m)))))[01;31m)[00m
	(SIMPX ich wurde sagen acht uhr dreiundvierzig))
Step:Clause Attachment
{'subtrees': ['VF', 'SIMPX'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'VAFIN', 'PPER', 'VVINF', 'PPER', 'VMFIN', 'ADJD', 'CARD', 'NN', 'CARD', 'PPER', 'VAFIN', 'VVINF', 'CARD', 'NN', 'CARD'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 17), 'span': (1, 11), 'left siblings': ['DM'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(DM also)
	(VF also)
	(SIMPX
		(LK wurden)
		(MF wir)
		(VC sagen)
		(NF
			(SIMPX
				(VF wir)
				(LK konnten)
				(MF
					(NX
						(ADVX stundlich)
						[01;31m(NX[00m
							(NX vier uhr)
							(ADJX dreiundvierzig)[01;31m)[00m)))))
	(SIMPX ich wurde sagen acht uhr dreiundvierzig))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADJX'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJD', 'CARD', 'NN', 'CARD'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (7, 11), 'span': (8, 11), 'left siblings': ['ADVX'], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP also also wurden wir sagen wir konnten stundlich vier uhr dreiundvierzig ich wurde sagen acht uhr dreiundvierzig)

Sentence 393:
0 Initial errors
0 on fringe, 0 iterations

Sentence 394:
0 Initial errors
0 on fringe, 0 iterations

Sentence 395:
0 Initial errors
0 on fringe, 0 iterations

Sentence 396:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(SIMPX[00m
		(SIMPX kommen wir am fruhen nachmittag an)
		(SIMPX haben den ganzen nachmittag zeit)[01;36m)[00m
	(SIMPX konnen dann abends noch was unternehmen))
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'APPRART', 'ADJA', 'NN', 'PTKVZ', 'VAFIN', 'ART', 'ADJA', 'NN', 'NN'), 'right siblings': [(SIMPX (LK (VXFIN (VMFIN konnen))) (MF (ADVX (ADV dann)) (ADVX (ADV abends)) (ADVX (ADV noch)) (NX (PIS was))) (VC (VXINF (VVINF unternehmen))))], 'left siblings': [], 'auto preterminal span': (0, 11), 'span': (0, 11), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP kommen wir am fruhen nachmittag an haben den ganzen nachmittag zeit konnen dann abends noch was unternehmen)

Sentence 397:
0 Initial errors
0 on fringe, 0 iterations

Sentence 398:
0 Initial errors
0 on fringe, 0 iterations

Sentence 399:
0 Initial errors
0 on fringe, 0 iterations

Sentence 400:
0 Initial errors
0 on fringe, 0 iterations

Sentence 401:
0 Initial errors
0 on fringe, 0 iterations

Sentence 402:
9 Initial errors
0 on fringe, 5 iterations
4 Error:NP Attachment
2 Error:Different label
1 Error:PP Attachment
1 Error:UNSET remove
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(NX (ADJX[00m
	[01;36m(PX[00m [01;31m(NX[00m
		(NX hundert zweiundvierzig mark)
		(PX im zentrum)[01;31m)[00m[01;36m)[00m
	[01;31m(NX[00m
		[01;31m(NX[00m
			(ADJX hundert funfunddreisig) [01;33mADJX)[00m
			(NN mark)[01;31m)[00m [01;33mNX)[00m
		[01;36m(NX[00m
			[01;36m(NX[00m [01;31m(PX[00m
				(NX funf minuten)
				(PX vom bahnhof)[01;31m)[00m[01;36m)[00m
			(PX mit garage)[01;36m)[00m[01;31m)[00m)
Step:NP Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'PX', 'NX'], 'mover info': [('NX', (5, 8))], 'old_family': ['NX', 'PX', 'PX'], 'start left siblings': [], 'auto preterminals': ('CARD', 'CARD', 'NN', 'APPRART', 'NN', 'CARD', 'CARD', 'NN', 'CARD', 'NN', 'APPRART', 'NN', 'APPR', 'NN'), 'start right siblings': ['PX', 'PX'], 'end left siblings': ['NX', 'PX'], 'auto preterminal span': (0, 14), 'movers': ['NX'], 'old_parent': 'NX', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP [01;33m(ADJX[00m
	(NX
		[01;36m(PX[00m
			(NX hundert zweiundvierzig mark)
			(PX im zentrum)[01;36m)[00m
		[01;31m(NX[00m
			(ADJX hundert funfunddreisig) [01;33mADJX)[00m
			(NN mark)[01;31m)[00m)
	(NX
		[01;36m(NX[00m [01;31m(PX[00m
			(NX funf minuten)
			(PX vom bahnhof)[01;31m)[00m[01;36m)[00m
		(PX mit garage)))
Step:Different label
{'family': ['NX', 'PX'], 'auto preterminal span': (8, 12), 'span': (8, 12), 'subtrees': ['NX', 'PX'], 'parent': 'NX', 'over_word': False, 'auto preterminals': ('CARD', 'NN', 'APPRART', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('PX', 'NX')}
(TOP [01;33m(ADJX[00m
	(NX
		[01;36m(PX[00m
			(NX hundert zweiundvierzig mark)
			(PX im zentrum)[01;36m)[00m
		[01;31m(NX[00m
			(ADJX hundert funfunddreisig) [01;33mADJX)[00m
			(NN mark)[01;31m)[00m)
	(NX funf minuten vom bahnhof mit garage))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['PX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'CARD', 'NN', 'APPRART', 'NN'), 'right siblings': [(NX (ADJX (CARD hundert) (CARD funfunddreisig)) (NN mark))], 'left siblings': [], 'auto preterminal span': (0, 5), 'span': (0, 5), 'parent': 'NX', 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP [01;33m(ADJX[00m
	(NX
		(PX hundert zweiundvierzig mark im zentrum)
		[01;31m(NX[00m
			(ADJX hundert funfunddreisig) [01;33mADJX)[00m
			(NN mark)[01;31m)[00m)
	(NX funf minuten vom bahnhof mit garage))
Step:UNSET remove
{'subtrees': ['ADJX', 'NN'], 'family': ['PX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'CARD', 'NN', 'APPRART', 'NN', 'CARD', 'CARD', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (0, 8), 'span': (5, 8), 'left siblings': ['PX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(NX
		[01;36m(ADJX[00m
			(PX hundert zweiundvierzig mark im zentrum)
			(ADJX hundert funfunddreisig)[01;36m)[00m
		(NN mark))
	(NX funf minuten vom bahnhof mit garage))
Step:Modifier Attachment
{'subtrees': ['PX', 'ADJX'], 'family': ['ADJX', 'NN'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'CARD', 'NN', 'APPRART', 'NN', 'CARD', 'CARD'), 'right siblings': [(NN mark)], 'left siblings': [], 'auto preterminal span': (0, 7), 'span': (0, 7), 'parent': 'NX', 'label': 'ADJX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP hundert zweiundvierzig mark im zentrum hundert funfunddreisig mark funf minuten vom bahnhof mit garage)

Sentence 403:
5 Initial errors
0 on fringe, 2 iterations
4 Error:NP Attachment
1 Error:NP Internal Structure
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			(LK brauchen)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX wir)
				(ADVX eh)
				(ADVX nicht)[01;31m)[00m[01;31m)[00m
		(NX
			(ADVX so)
			[01;31m(NX[00m
				(ART ein)
				(NN quatsch)[01;31m)[00m)) [01;33mMF)[00m[01;36m)[00m
Step:NP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'ADVX', 'NX'], 'mover info': [('NX', (4, 7))], 'old_family': ['SIMPX', 'NX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ADV', 'ART', 'NN'), 'start right siblings': [], 'end left siblings': ['NX', 'ADVX', 'ADVX'], 'auto preterminal span': (0, 7), 'movers': ['NX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(LK brauchen)
		(MF
			(NX wir)
			(ADVX eh)
			(ADVX nicht)
			(NX
				(ADVX so)
				[01;31m(NX[00m
					(ART ein)
					(NN quatsch)[01;31m)[00m))))
Step:NP Internal Structure
{'subtrees': ['ART', 'NN'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': True, 'auto preterminals': ('ADV', 'ART', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (4, 7), 'span': (5, 7), 'left siblings': ['ADVX'], 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'remove'}
(TOP brauchen wir eh nicht so ein quatsch)

Sentence 404:
4 Initial errors
0 on fringe, 2 iterations
3 Error:Co-ordination
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(NX[00m
	(NX
		(KON und)
		[01;33m(NX[00m (ADVX einmal)
		[01;31m(NX[00m
			[01;31m(NX[00m
				(ADJX hundert sechsundachtzig)
				(NN mark)[01;31m)[00m [01;33mNX) NX)[00m
			(PX mit schwimmbad)[01;31m)[00m))
Step:Co-ordination
{'new_parent': 'NX', 'new_family': ['KON', 'ADVX', 'ADJX', 'NN'], 'mover info': [('KON', (0, 1)), ('ADVX', (1, 2))], 'old_family': ['KON', 'ADVX', 'NX'], 'start left siblings': [], 'auto preterminals': ('KON', 'ADV', 'CARD', 'CARD', 'NN', 'APPR', 'NN'), 'start right siblings': ['NX'], 'end left siblings': [], 'auto preterminal span': (0, 7), 'movers': ['KON', 'ADVX'], 'old_parent': 'NX', 'end right siblings': ['ADJX', 'NN'], 'classified_type': 'Co-ordination', 'type': 'move'}
(TOP
	(NX
		(NX
			(KON und)
			[01;36m(NX[00m
				(ADVX einmal)
				(ADJX hundert sechsundachtzig)
				(NN mark)[01;36m)[00m)
		(PX mit schwimmbad)))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADJX', 'NN'], 'family': ['KON', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'CARD', 'CARD', 'NN'), 'right siblings': [], 'left siblings': [(KON und)], 'auto preterminal span': (1, 5), 'span': (1, 5), 'parent': 'NX', 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP und einmal hundert sechsundachtzig mark mit schwimmbad)

Sentence 405:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK hast)
		(MF du aber eh keine zeit)
		[01;36m(ADVX[00m
			(NF
				[01;31m(PX[00m
					(PROP dafur)[01;31m)[00m)[01;36m)[00m))
Step:Single Word Phrase
{'family': ['ADVX'], 'auto preterminal span': (6, 7), 'span': (6, 7), 'subtrees': ['PROP'], 'parent': 'NF', 'over_word': True, 'auto preterminals': ('PROP',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('PX', 'ADVX')}
(TOP hast du aber eh keine zeit dafur)

Sentence 406:
0 Initial errors
0 on fringe, 0 iterations

Sentence 407:
0 Initial errors
0 on fringe, 0 iterations

Sentence 408:
0 Initial errors
0 on fringe, 0 iterations

Sentence 409:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(DM[00m
	(TOP
		[01;31m(NX[00m
			(NE schloshotel)[01;31m)[00m)[01;36m)[00m
Step:Single Word Phrase
{'family': ['DM'], 'auto preterminal span': (0, 1), 'span': (0, 1), 'subtrees': ['NE'], 'parent': 'TOP', 'over_word': True, 'auto preterminals': ('NE',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'DM')}
(TOP schloshotel)

Sentence 410:
7 Initial errors
0 on fringe, 4 iterations
2 Error:Single Word Phrase
2 Error:Different label
2 Error:Single Word Phrase
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF
			(SIMPX
				(VF schloshotel)
				(LK ist)
				[01;36m(MF[00m
					[01;36m(ADVX[00m [01;31m(DM[00m
						(PTKANT ja)[01;31m)[00m[01;36m)[00m
					[01;36m(NX[00m [01;36m(VF[00m [01;31m(MF[00m
						[01;31m(ADJX[00m
							(ADJD standesgemas)[01;31m)[00m[01;31m)[00m[01;36m)[00m[01;36m)[00m[01;36m)[00m))
		(LK wurde)
		(MF ich)
		(VC sagen)))
Step:Single Word Phrase
{'family': ['VF', 'LK', 'ADVX', 'MF'], 'auto preterminal span': (2, 3), 'span': (2, 3), 'subtrees': ['PTKANT'], 'parent': 'SIMPX', 'over_word': True, 'auto preterminals': ('PTKANT',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('DM', 'ADVX')}
(TOP
	(SIMPX
		(VF
			(SIMPX
				(VF schloshotel)
				(LK ist)
				[01;36m(MF[00m
					(ADVX ja)
					[01;36m(NX[00m [01;36m(VF[00m [01;31m(MF[00m
						[01;31m(ADJX[00m
							(ADJD standesgemas)[01;31m)[00m[01;31m)[00m[01;36m)[00m[01;36m)[00m[01;36m)[00m))
		(LK wurde)
		(MF ich)
		(VC sagen)))
Step:Different label
{'family': ['VF', 'LK', 'ADVX', 'VF'], 'auto preterminal span': (3, 4), 'span': (3, 4), 'subtrees': ['ADJX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('ADJD',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('MF', 'VF')}
(TOP
	(SIMPX
		(VF
			(SIMPX
				(VF schloshotel)
				(LK ist)
				[01;36m(MF[00m
					(ADVX ja)
					[01;36m(NX[00m
						(VF
							[01;31m(ADJX[00m
								(ADJD standesgemas)[01;31m)[00m)[01;36m)[00m[01;36m)[00m))
		(LK wurde)
		(MF ich)
		(VC sagen)))
Step:Single Word Phrase
{'family': ['NX'], 'auto preterminal span': (3, 4), 'span': (3, 4), 'subtrees': ['ADJD'], 'parent': 'VF', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'NX')}
(TOP
	(SIMPX
		(VF
			(SIMPX
				(VF schloshotel)
				(LK ist)
				[01;36m(MF[00m
					(ADVX ja)
					(VF standesgemas)[01;36m)[00m))
		(LK wurde)
		(MF ich)
		(VC sagen)))
Step:UNSET add
{'subtrees': ['ADVX', 'VF'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADJD'), 'right siblings': [], 'left siblings': [(VF (NX (NE schloshotel))), (LK (VXFIN (VAFIN ist)))], 'auto preterminal span': (2, 4), 'span': (2, 4), 'parent': 'SIMPX', 'label': 'MF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP schloshotel ist ja standesgemas wurde ich sagen)

Sentence 411:
0 Initial errors
0 on fringe, 0 iterations

Sentence 412:
0 Initial errors
0 on fringe, 0 iterations

Sentence 413:
0 Initial errors
0 on fringe, 0 iterations

Sentence 414:
0 Initial errors
0 on fringe, 0 iterations

Sentence 415:
0 Initial errors
0 on fringe, 0 iterations

Sentence 416:
8 Initial errors
0 on fringe, 8 iterations
1 Error:Unary
1 Error:UNSET remove
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:UNSET add
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wir)
		(LK wissen)
		[01;31m(NF[00m
			(SIMPX
				(C wann)
				(MF wir)
				(VC fahren))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(VF wir)
		[01;33m(SIMPX[00m (LK wissen)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(C wohin)
				[01;33m(NX (MF[00m (MF wir)
				(VC fahren)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(VF wir) [01;33mMF) NX) SIMPX)[00m
		(LK wissen)
		(NF wo wir schlafen)[01;31m)[00m
	(SIMPX wir wissen aber noch nicht was wir abends machen))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VF', 'LK', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PWAV', 'PPER', 'VVFIN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 5), 'span': (2, 5), 'left siblings': ['VF', 'LK'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX wir wissen wann wir fahren)
	[01;31m(SIMPX[00m
		(VF wir)
		[01;33m(SIMPX[00m (LK wissen)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(C wohin)
				[01;33m(NX (MF[00m (MF wir)
				(VC fahren)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(VF wir) [01;33mMF) NX) SIMPX)[00m
		(LK wissen)
		(NF wo wir schlafen)[01;31m)[00m
	(SIMPX wir wissen aber noch nicht was wir abends machen))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'NF'], 'family': ['SIMPX', 'SIMPX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PWAV', 'PPER', 'VVFIN', 'PPER', 'VVFIN', 'PWAV', 'PPER', 'VVFIN', 'PPER', 'VVFIN', 'PWAV', 'PPER', 'VVFIN', 'PPER', 'VVFIN', 'ADV', 'ADV', 'PTKNEG', 'PWS', 'PPER', 'ADV', 'VVFIN'), 'right siblings': ['SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 24), 'span': (5, 10), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX wir wissen wann wir fahren)
	(VF wir)
	[01;33m(SIMPX[00m (LK wissen)
	[01;31m(NF[00m
		[01;31m(SIMPX[00m
			(C wohin)
			[01;33m(NX (MF[00m (MF wir)
			(VC fahren)[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(VF wir) [01;33mMF) NX) SIMPX)[00m
		(LK wissen)
		(NF wo wir schlafen)[01;31m)[00m
	(SIMPX wir wissen aber noch nicht was wir abends machen))
Step:Unary
{'subtrees': ['C', 'MF', 'VC'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PWAV', 'PPER', 'VVFIN'), 'right siblings': [], 'parent': 'NF', 'auto preterminal span': (7, 10), 'span': (7, 10), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX wir wissen wann wir fahren)
	(VF wir)
	[01;33m(SIMPX[00m (LK wissen)
	[01;31m(NF[00m
		(C wohin)
		[01;33m(NX (MF[00m (MF wir)
		(VC fahren)[01;31m)[00m
	[01;31m(SIMPX[00m
		(VF wir) [01;33mMF) NX) SIMPX)[00m
		(LK wissen)
		(NF wo wir schlafen)[01;31m)[00m
	(SIMPX wir wissen aber noch nicht was wir abends machen))
Step:UNSET remove
{'subtrees': ['C', 'MF', 'VC'], 'family': ['SIMPX', 'VF', 'LK', 'NF', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PWAV', 'PPER', 'VVFIN', 'PPER', 'VVFIN', 'PWAV', 'PPER', 'VVFIN', 'PPER', 'VVFIN', 'PWAV', 'PPER', 'VVFIN', 'PPER', 'VVFIN', 'ADV', 'ADV', 'PTKNEG', 'PWS', 'PPER', 'ADV', 'VVFIN'), 'right siblings': ['SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 24), 'span': (7, 10), 'left siblings': ['SIMPX', 'VF', 'LK'], 'label': 'NF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX wir wissen wann wir fahren)
	(VF wir)
	[01;33m(SIMPX[00m (LK wissen)
	(C wohin)
	[01;33m(NX (MF[00m (MF wir)
	(VC fahren)
	[01;31m(SIMPX[00m
		(VF wir) [01;33mMF) NX) SIMPX)[00m
		(LK wissen)
		(NF wo wir schlafen)[01;31m)[00m
	(SIMPX wir wissen aber noch nicht was wir abends machen))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'NF'], 'family': ['SIMPX', 'VF', 'LK', 'C', 'MF', 'VC', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PWAV', 'PPER', 'VVFIN', 'PPER', 'VVFIN', 'PWAV', 'PPER', 'VVFIN', 'PPER', 'VVFIN', 'PWAV', 'PPER', 'VVFIN', 'PPER', 'VVFIN', 'ADV', 'ADV', 'PTKNEG', 'PWS', 'PPER', 'ADV', 'VVFIN'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 24), 'span': (10, 15), 'left siblings': ['SIMPX', 'VF', 'LK', 'C', 'MF', 'VC'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX wir wissen wann wir fahren)
	(VF wir)
	[01;36m(SIMPX[00m
		(LK wissen)
		(C wohin)
		[01;36m(MF[00m
			[01;36m(NX[00m
				(MF wir)
				(VC fahren)
				(VF wir)[01;36m)[00m[01;36m)[00m[01;36m)[00m
	(LK wissen)
	(NF wo wir schlafen)
	(SIMPX wir wissen aber noch nicht was wir abends machen))
Step:UNSET add
{'subtrees': ['LK', 'C', 'MF', 'VC', 'VF'], 'family': ['SIMPX', 'VF', 'SIMPX', 'LK', 'NF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PWAV', 'PPER', 'VVFIN', 'PPER'), 'right siblings': [(LK (VXFIN (VVFIN wissen))), (NF (SIMPX (C (PX (PWAV wo))) (MF (NX (PPER wir))) (VC (VXFIN (VVFIN schlafen))))), (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VVFIN wissen))) (MF (ADVX (ADV aber)) (ADVX (ADVX (ADV noch)) (PTKNEG nicht))) (NF (SIMPX (C (NX (PWS was))) (MF (NX (PPER wir)) (ADVX (ADV abends))) (VC (VXFIN (VVFIN machen))))))], 'left siblings': [(SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VVFIN wissen))) (SIMPX (C (PX (PWAV wann))) (MF (NX (PPER wir))) (VC (VXFIN (VVFIN fahren))))), (VF (NX (PPER wir)))], 'auto preterminal span': (6, 11), 'span': (6, 11), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX wir wissen wann wir fahren)
	(VF wir)
	(SIMPX
		(LK wissen)
		(C wohin)
		[01;36m(MF[00m
			[01;36m(NX[00m
				(MF wir)
				(VC fahren)
				(VF wir)[01;36m)[00m[01;36m)[00m)
	(LK wissen)
	(NF wo wir schlafen)
	(SIMPX wir wissen aber noch nicht was wir abends machen))
Step:UNSET add
{'subtrees': ['MF', 'VC', 'VF'], 'family': ['LK', 'C', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PPER'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VVFIN wissen))), (C (PX (PWAV wohin)))], 'auto preterminal span': (8, 11), 'span': (8, 11), 'parent': 'SIMPX', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX wir wissen wann wir fahren)
	(VF wir)
	(SIMPX
		(LK wissen)
		(C wohin)
		[01;36m(MF[00m
			(NX
				(MF wir)
				(VC fahren)
				(VF wir))[01;36m)[00m)
	(LK wissen)
	(NF wo wir schlafen)
	(SIMPX wir wissen aber noch nicht was wir abends machen))
Step:Unary
{'subtrees': ['NX'], 'family': ['LK', 'C', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PPER'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VVFIN wissen))), (C (PX (PWAV wohin)))], 'auto preterminal span': (8, 11), 'span': (8, 11), 'parent': 'SIMPX', 'label': 'MF', 'classified_type': 'Unary', 'type': 'add'}
(TOP wir wissen wann wir fahren wir wissen wohin wir fahren wir wissen wo wir schlafen wir wissen aber noch nicht was wir abends machen)

Sentence 417:
7 Initial errors
0 on fringe, 5 iterations
2 Error:UNSET move
2 Error:Clause Attachment
1 Error:Clause Attachment
1 Error:Modifier Attachment
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX wir konnten mal kucken ob irgendwas im theater lauft)
	[01;31m(SIMPX[00m
		(KOORD aber)
		(VF eigentlich)
		(LK ist)
		[01;31m(MF[00m [01;33m(MF[00m
			(NX das)
			(ADVX doch)[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(MF[00m
					(NX eulen)
					(PX nach athen)[01;31m)[00m [01;33mMF)[00m
				(VC tragen)[01;31m)[00m
			[01;36m(NF[00m
				(SIMPX
					(C wenn)
					(FKOORD wir in hannover ins theater gehen und in munchen alles vor der haustur haben))[01;36m)[00m[01;31m)[00m[01;31m)[00m
	(DM oder))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['MF', 'NX', 'PX'], 'mover info': [('MF', (12, 14))], 'old_family': ['KOORD', 'VF', 'LK', 'MF', 'NF'], 'start left siblings': ['KOORD', 'VF', 'LK'], 'auto preterminals': ('KON', 'ADV', 'VAFIN', 'PDS', 'ADV', 'NN', 'APPR', 'NE', 'VVINF', 'KOUS', 'PPER', 'APPR', 'NE', 'APPRART', 'NN', 'VVFIN', 'KON', 'APPR', 'NE', 'PIS', 'APPR', 'ART', 'NN', 'VAFIN'), 'start right siblings': ['NF'], 'end left siblings': [], 'auto preterminal span': (9, 33), 'movers': ['MF'], 'old_parent': 'SIMPX', 'end right siblings': ['NX', 'PX'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX wir konnten mal kucken ob irgendwas im theater lauft)
	[01;31m(SIMPX[00m
		(KOORD aber)
		(VF eigentlich)
		(LK ist)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(MF
					[01;31m(MF[00m
						(NX das)
						(ADVX doch)[01;31m)[00m
					(NX eulen)
					(PX nach athen))
				(VC tragen)[01;31m)[00m
			[01;36m(NF[00m
				(SIMPX
					(C wenn)
					(FKOORD wir in hannover ins theater gehen und in munchen alles vor der haustur haben))[01;36m)[00m[01;31m)[00m[01;31m)[00m
	(DM oder))
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['KOORD', 'VF', 'LK', 'SIMPX', 'NF'], 'mover info': [('SIMPX', (12, 18))], 'old_family': ['SIMPX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('KON', 'ADV', 'VAFIN', 'PDS', 'ADV', 'NN', 'APPR', 'NE', 'VVINF', 'KOUS', 'PPER', 'APPR', 'NE', 'APPRART', 'NN', 'VVFIN', 'KON', 'APPR', 'NE', 'PIS', 'APPR', 'ART', 'NN', 'VAFIN'), 'start right siblings': ['SIMPX'], 'end left siblings': ['KOORD', 'VF', 'LK'], 'auto preterminal span': (9, 33), 'movers': ['SIMPX'], 'old_parent': 'NF', 'end right siblings': ['NF'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX wir konnten mal kucken ob irgendwas im theater lauft)
	[01;31m(SIMPX[00m
		(KOORD aber)
		(VF eigentlich)
		(LK ist)
		[01;31m(SIMPX[00m
			(MF
				[01;31m(MF[00m
					(NX das)
					(ADVX doch)[01;31m)[00m
				(NX eulen)
				(PX nach athen))
			(VC tragen)[01;31m)[00m
		(NF wenn wir in hannover ins theater gehen und in munchen alles vor der haustur haben)[01;31m)[00m
	(DM oder))
Step:Clause Attachment
{'subtrees': ['KOORD', 'VF', 'LK', 'SIMPX', 'NF'], 'family': ['SIMPX', 'SIMPX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'VVINF', 'KOUS', 'PIS', 'APPRART', 'NN', 'VVFIN', 'KON', 'ADV', 'VAFIN', 'PDS', 'ADV', 'NN', 'APPR', 'NE', 'VVINF', 'KOUS', 'PPER', 'APPR', 'NE', 'APPRART', 'NN', 'VVFIN', 'KON', 'APPR', 'NE', 'PIS', 'APPR', 'ART', 'NN', 'VAFIN', 'ITJ'), 'right siblings': ['DM'], 'parent': 'TOP', 'auto preterminal span': (0, 34), 'span': (9, 33), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(SIMPX wir konnten mal kucken ob irgendwas im theater lauft)
	(KOORD aber)
	(VF eigentlich)
	(LK ist)
	[01;31m(SIMPX[00m
		(MF
			[01;31m(MF[00m
				(NX das)
				(ADVX doch)[01;31m)[00m
			(NX eulen)
			(PX nach athen))
		(VC tragen)[01;31m)[00m
	(NF wenn wir in hannover ins theater gehen und in munchen alles vor der haustur haben)
	(DM oder))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX'], 'family': ['MF', 'NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'ADV', 'NN', 'APPR', 'NE'), 'right siblings': ['NX', 'PX'], 'parent': 'MF', 'auto preterminal span': (12, 17), 'span': (12, 14), 'left siblings': [], 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX wir konnten mal kucken ob irgendwas im theater lauft)
	(KOORD aber)
	(VF eigentlich)
	(LK ist)
	[01;31m(SIMPX[00m
		(MF das doch eulen nach athen)
		(VC tragen)[01;31m)[00m
	(NF wenn wir in hannover ins theater gehen und in munchen alles vor der haustur haben)
	(DM oder))
Step:UNSET remove
{'subtrees': ['MF', 'VC'], 'family': ['SIMPX', 'KOORD', 'VF', 'LK', 'SIMPX', 'NF', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'VVINF', 'KOUS', 'PIS', 'APPRART', 'NN', 'VVFIN', 'KON', 'ADV', 'VAFIN', 'PDS', 'ADV', 'NN', 'APPR', 'NE', 'VVINF', 'KOUS', 'PPER', 'APPR', 'NE', 'APPRART', 'NN', 'VVFIN', 'KON', 'APPR', 'NE', 'PIS', 'APPR', 'ART', 'NN', 'VAFIN', 'ITJ'), 'right siblings': ['NF', 'DM'], 'parent': 'TOP', 'auto preterminal span': (0, 34), 'span': (12, 18), 'left siblings': ['SIMPX', 'KOORD', 'VF', 'LK'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP wir konnten mal kucken ob irgendwas im theater lauft aber eigentlich ist das doch eulen nach athen tragen wenn wir in hannover ins theater gehen und in munchen alles vor der haustur haben oder)

Sentence 418:
0 Initial errors
0 on fringe, 0 iterations

Sentence 419:
0 Initial errors
0 on fringe, 0 iterations

Sentence 420:
9 Initial errors
0 on fringe, 7 iterations
2 Error:Different label
2 Error:UNSET move
1 Error:Unary
1 Error:Unary
1 Error:Modifier Attachment
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;31m(LK[00m
			(VXFIN
				(VAFIN ist))[01;31m)[00m
		[01;36m(VF[00m [01;31m(MF[00m [01;33m(SIMPX[00m
			(NX
				(PDS das))[01;31m)[00m[01;36m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(LK gibt)
		[01;31m(MF[00m
			(NX es)
			(ADVX da)
			(ADVX irgendwie)
			[01;33m(NX[00m (NX was)[01;31m)[00m
		[01;31m(NF[00m
			(NX
				(ART einen)
				(ADJX interessanten)
				(NN feiertag))[01;31m)[00m[01;31m)[00m) [01;33mNX) SIMPX)[00m
Step:Different label
{'family': ['LK', 'VF'], 'auto preterminal span': (1, 2), 'span': (1, 2), 'subtrees': ['NX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('PDS',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('MF', 'VF')}
(TOP
	[01;31m(SIMPX[00m
		[01;31m(LK[00m
			(VXFIN
				(VAFIN ist))[01;31m)[00m
		[01;33m(SIMPX[00m (VF das)[01;31m)[00m
	[01;31m(SIMPX[00m
		(LK gibt)
		[01;31m(MF[00m
			(NX es)
			(ADVX da)
			(ADVX irgendwie)
			[01;33m(NX[00m (NX was)[01;31m)[00m
		[01;31m(NF[00m
			(NX
				(ART einen)
				(ADJX interessanten)
				(NN feiertag))[01;31m)[00m[01;31m)[00m) [01;33mNX) SIMPX)[00m
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'NF'], 'mover info': [('VF', (1, 2))], 'old_family': ['LK', 'VF'], 'start left siblings': ['LK'], 'auto preterminals': ('VAFIN', 'PDS', 'VVFIN', 'PPER', 'ADV', 'ADV', 'PIS', 'ART', 'ADJA', 'NN'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (0, 10), 'movers': ['VF'], 'old_parent': 'SIMPX', 'POS confusion': ('PDS', 'PDS'), 'end right siblings': ['LK', 'MF', 'NF'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		[01;31m(LK[00m
			(VXFIN
				(VAFIN ist))[01;31m)[00m[01;31m)[00m
	(SIMPX
		(VF das)
		(LK gibt)
		[01;31m(MF[00m
			(NX es)
			(ADVX da)
			(ADVX irgendwie)
			[01;33m(NX[00m (NX was)[01;31m)[00m
		[01;31m(NF[00m
			(NX
				(ART einen)
				(ADJX interessanten)
				(NN feiertag))[01;31m)[00m)) [01;33mNX)[00m
Step:Unary
{'subtrees': ['LK'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'PDS', 'VVFIN', 'PPER', 'ADV', 'ADV', 'PIS', 'ART', 'ADJA', 'NN'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 10), 'span': (0, 1), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	[01;31m(LK[00m
		(VXFIN
			(VAFIN ist))[01;31m)[00m
	(SIMPX
		(VF das)
		(LK gibt)
		[01;31m(MF[00m
			(NX es)
			(ADVX da)
			(ADVX irgendwie)
			[01;33m(NX[00m (NX was)[01;31m)[00m
		[01;31m(NF[00m
			(NX
				(ART einen)
				(ADJX interessanten)
				(NN feiertag))[01;31m)[00m)) [01;33mNX)[00m
Step:Unary
{'subtrees': ['VXFIN'], 'family': ['LK', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'PDS', 'VVFIN', 'PPER', 'ADV', 'ADV', 'PIS', 'ART', 'ADJA', 'NN'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 10), 'span': (0, 1), 'left siblings': [], 'label': 'LK', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(VXFIN ist)
	(SIMPX
		(VF das)
		(LK gibt)
		[01;31m(MF[00m
			(NX es)
			(ADVX da)
			(ADVX irgendwie)
			[01;33m(NX[00m (NX was)[01;31m)[00m
		[01;31m(NF[00m
			(NX
				(ART einen)
				(ADJX interessanten)
				(NN feiertag))[01;31m)[00m)) [01;33mNX)[00m
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX', 'ADVX', 'NX'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VVFIN', 'PPER', 'ADV', 'ADV', 'PIS', 'ART', 'ADJA', 'NN'), 'right siblings': ['NF'], 'parent': 'SIMPX', 'auto preterminal span': (1, 10), 'span': (3, 7), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(VXFIN ist)
	(SIMPX
		(VF das)
		(LK gibt)
		(NX es)
		(ADVX da)
		(ADVX irgendwie)
		[01;36m(NX[00m
			(NX was)
			[01;31m(NF[00m
				(NX
					(ART einen)
					(ADJX interessanten)
					(NN feiertag))[01;31m)[00m[01;36m)[00m))
Step:UNSET add
{'subtrees': ['NX', 'NF'], 'family': ['VF', 'LK', 'NX', 'ADVX', 'ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PIS', 'ART', 'ADJA', 'NN'), 'right siblings': [], 'left siblings': [(VF (NX (PDS das))), (LK (VXFIN (VVFIN gibt))), (NX (PPER es)), (ADVX (ADV da)), (ADVX (ADV irgendwie))], 'auto preterminal span': (6, 10), 'span': (6, 10), 'parent': 'SIMPX', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(VXFIN ist)
	(SIMPX
		(VF das)
		(LK gibt)
		(NX es)
		(ADVX da)
		(ADVX irgendwie)
		(NX
			(NX was)
			[01;31m(NF[00m
				(NX
					(ART einen)
					(ADJX interessanten)
					(NN feiertag))[01;31m)[00m)))
Step:Unary
{'subtrees': ['NX'], 'family': ['NX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PIS', 'ART', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (6, 10), 'span': (7, 10), 'left siblings': ['NX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ist das gibt es da irgendwie was einen interessanten feiertag)

Sentence 421:
0 Initial errors
0 on fringe, 0 iterations

Sentence 422:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Different label
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(ADJX[00m
	(TOP
		[01;31m(ADVX[00m
			(ADVX nicht)
			(SIMPX das ich wuste)[01;31m)[00m)[01;36m)[00m
Step:Different label
{'family': ['ADJX'], 'auto preterminal span': (0, 4), 'span': (0, 4), 'subtrees': ['ADVX', 'SIMPX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('PTKNEG', 'KOUS', 'PPER', 'VVFIN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('ADVX', 'ADJX')}
(TOP nicht das ich wuste)

Sentence 423:
6 Initial errors
0 on fringe, 5 iterations
2 Error:UNSET move
1 Error:UNSET add
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM okay)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK sage)
			(MF ich einfach mal)[01;36m)[00m
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;36m(SIMPX[00m
					(VF von mir aus)
					(LK gehen)
					(MF wir ins kino)[01;36m)[00m
				(KOUS wenn)
				(APPR bei)
				(KOUS wenn)
				[01;31m(NF[00m
					(SIMPX
						(C wenn)
						(MF die was)
						(VC anbieten))[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:UNSET move
{'new_parent': 'NF', 'new_family': ['SIMPX', 'KOUS', 'APPR', 'KOUS', 'NF'], 'mover info': [('KOUS', (13, 14)), ('APPR', (14, 15)), ('KOUS', (15, 16)), ('NF', (16, 20))], 'old_family': ['VF', 'LK', 'MF', 'KOUS', 'APPR', 'KOUS', 'NF'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('APPR', 'PPER', 'APZR', 'VVFIN', 'PPER', 'APPRART', 'NN', 'KOUS', 'APPR', 'KOUS', 'KOUS', 'PDS', 'PIS', 'VVFIN'), 'start right siblings': [], 'end left siblings': ['SIMPX'], 'auto preterminal span': (6, 20), 'movers': ['KOUS', 'APPR', 'KOUS', 'NF'], 'old_parent': 'SIMPX', 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM okay)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK sage)
			(MF ich einfach mal)[01;36m)[00m
		[01;31m(NF[00m
			(SIMPX von mir aus gehen wir ins kino)
			(KOUS wenn)
			(APPR bei)
			(KOUS wenn)
			[01;31m(NF[00m
				(SIMPX
					(C wenn)
					(MF die was)
					(VC anbieten))[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'ADV', 'ADV'), 'right siblings': [(NF (SIMPX (VF (PX (APPR von) (NX (PPER mir)) (APZR aus))) (LK (VXFIN (VVFIN gehen))) (MF (NX (PPER wir)) (PX (APPRART ins) (NX (NN kino))))) (KOUS wenn) (APPR bei) (KOUS wenn) (NF (SIMPX (C (KOUS wenn)) (MF (NX (PDS die)) (NX (PIS was))) (VC (VXFIN (VVFIN anbieten))))))], 'left siblings': [], 'auto preterminal span': (1, 6), 'span': (1, 6), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM okay)
	[01;31m(SIMPX[00m
		(SIMPX dann sage ich einfach mal)
		[01;31m(NF[00m
			(SIMPX von mir aus gehen wir ins kino)
			(KOUS wenn)
			(APPR bei)
			(KOUS wenn)
			[01;31m(NF[00m
				(SIMPX
					(C wenn)
					(MF die was)
					(VC anbieten))[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['SIMPX', 'NF'], 'family': ['DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADV', 'VVFIN', 'PPER', 'ADV', 'ADV', 'APPR', 'PPER', 'APZR', 'VVFIN', 'PPER', 'APPRART', 'NN', 'KOUS', 'APPR', 'KOUS', 'KOUS', 'PDS', 'PIS', 'VVFIN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 20), 'span': (1, 20), 'left siblings': ['DM'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM okay)
	(SIMPX dann sage ich einfach mal)
	[01;31m(NF[00m
		(SIMPX von mir aus gehen wir ins kino)
		(KOUS wenn)
		(APPR bei)
		(KOUS wenn)
		[01;31m(NF[00m
			(SIMPX
				(C wenn)
				(MF die was)
				(VC anbieten))[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['SIMPX', 'KOUS', 'APPR', 'KOUS', 'NF'], 'family': ['DM', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADV', 'VVFIN', 'PPER', 'ADV', 'ADV', 'APPR', 'PPER', 'APZR', 'VVFIN', 'PPER', 'APPRART', 'NN', 'KOUS', 'APPR', 'KOUS', 'KOUS', 'PDS', 'PIS', 'VVFIN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 20), 'span': (6, 20), 'left siblings': ['DM', 'SIMPX'], 'label': 'NF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM okay)
	(SIMPX dann sage ich einfach mal)
	(SIMPX von mir aus gehen wir ins kino)
	(KOUS wenn)
	(APPR bei)
	(KOUS wenn)
	[01;31m(NF[00m
		(SIMPX
			(C wenn)
			(MF die was)
			(VC anbieten))[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['DM', 'SIMPX', 'SIMPX', 'KOUS', 'APPR', 'KOUS', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADV', 'VVFIN', 'PPER', 'ADV', 'ADV', 'APPR', 'PPER', 'APZR', 'VVFIN', 'PPER', 'APPRART', 'NN', 'KOUS', 'APPR', 'KOUS', 'KOUS', 'PDS', 'PIS', 'VVFIN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 20), 'span': (16, 20), 'left siblings': ['DM', 'SIMPX', 'SIMPX', 'KOUS', 'APPR', 'KOUS'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP okay dann sage ich einfach mal von mir aus gehen wir ins kino wenn bei wenn wenn die was anbieten)

Sentence 424:
0 Initial errors
0 on fringe, 0 iterations

Sentence 425:
0 Initial errors
0 on fringe, 0 iterations

Sentence 426:
3 Initial errors
0 on fringe, 2 iterations
2 Error:Different label
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wir)
		(FKOORD
			[01;36m(LKM[00m [01;31m(LKMN[00m
				(LK kucken)
				(MF einfach)
				(NF
					(SIMPX
						(C wie)
						(MF die sache)
						(VC lauft)
						[01;31m(NF[00m
							(ADVX
								(ADV da))[01;31m)[00m))[01;31m)[00m[01;36m)[00m
			(KON und)
			(LKMVC gehen dann abends aus))))
Step:Different label
{'family': ['LKM', 'KON', 'LKMVC'], 'auto preterminal span': (1, 8), 'span': (1, 8), 'subtrees': ['LK', 'MF', 'NF'], 'parent': 'FKOORD', 'over_word': False, 'auto preterminals': ('VVFIN', 'ADV', 'KOUS', 'ART', 'NN', 'VVFIN', 'ADV'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('LKMN', 'LKM')}
(TOP
	(SIMPX
		(VF wir)
		(FKOORD
			(LKM
				(LK kucken)
				(MF einfach)
				(NF
					(SIMPX
						(C wie)
						(MF die sache)
						(VC lauft)
						[01;31m(NF[00m
							(ADVX
								(ADV da))[01;31m)[00m)))
			(KON und)
			(LKMVC gehen dann abends aus))))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['C', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'ART', 'NN', 'VVFIN', 'ADV'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (3, 8), 'span': (7, 8), 'left siblings': ['C', 'MF', 'VC'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP wir kucken einfach wie die sache lauft da und gehen dann abends aus)

Sentence 427:
0 Initial errors
0 on fringe, 0 iterations

Sentence 428:
0 Initial errors
0 on fringe, 0 iterations

Sentence 429:
0 Initial errors
0 on fringe, 0 iterations

Sentence 430:
3 Initial errors
0 on fringe, 3 iterations
1 Error:Unary
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF von mir aus)
		(LK hatte)
		(MF ich alles)
		[01;36m(NF[00m
			[01;36m(R[00m
				[01;36m(C[00m
					(NX
						(PRELS was))[01;36m)[00m
				(NX ich)
				(NF was ich brauchte)[01;36m)[00m[01;36m)[00m)
	(KON und))
Step:Unary
{'subtrees': ['NX'], 'family': ['VF', 'LK', 'MF', 'C', 'NX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PRELS',), 'right siblings': [(NX (PPER ich)), (NF (R (C (NX (PRELS was))) (MF (NX (PPER ich))) (VC (VXFIN (VVFIN brauchte)))))], 'left siblings': [(VF (PX (APPR von) (NX (PPER mir)) (APZR aus))), (LK (VXFIN (VAFIN hatte))), (MF (NX (PPER ich)) (NX (PIS alles)))], 'auto preterminal span': (6, 7), 'span': (6, 7), 'parent': 'SIMPX', 'label': 'C', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(VF von mir aus)
		(LK hatte)
		(MF ich alles)
		[01;36m(NF[00m
			[01;36m(R[00m
				(C was)
				(NX ich)
				(NF was ich brauchte)[01;36m)[00m[01;36m)[00m)
	(KON und))
Step:UNSET add
{'subtrees': ['C', 'NX', 'NF'], 'family': ['VF', 'LK', 'MF', 'R'], 'over_word': False, 'over words': False, 'auto preterminals': ('PRELS', 'PPER', 'PRELS', 'PPER', 'VVFIN'), 'right siblings': [], 'left siblings': [(VF (PX (APPR von) (NX (PPER mir)) (APZR aus))), (LK (VXFIN (VAFIN hatte))), (MF (NX (PPER ich)) (NX (PIS alles)))], 'auto preterminal span': (6, 11), 'span': (6, 11), 'parent': 'SIMPX', 'label': 'R', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(VF von mir aus)
		(LK hatte)
		(MF ich alles)
		[01;36m(NF[00m
			(R
				(C was)
				(NX ich)
				(NF was ich brauchte))[01;36m)[00m)
	(KON und))
Step:Unary
{'subtrees': ['R'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PRELS', 'PPER', 'PRELS', 'PPER', 'VVFIN'), 'right siblings': [], 'left siblings': [(VF (PX (APPR von) (NX (PPER mir)) (APZR aus))), (LK (VXFIN (VAFIN hatte))), (MF (NX (PPER ich)) (NX (PIS alles)))], 'auto preterminal span': (6, 11), 'span': (6, 11), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP von mir aus hatte ich alles was ich was ich brauchte und)

Sentence 431:
0 Initial errors
0 on fringe, 0 iterations

Sentence 432:
0 Initial errors
0 on fringe, 0 iterations

Sentence 433:
0 Initial errors
0 on fringe, 0 iterations

Sentence 434:
0 Initial errors
0 on fringe, 0 iterations

Sentence 435:
0 Initial errors
0 on fringe, 0 iterations

Sentence 436:
0 Initial errors
0 on fringe, 0 iterations

Sentence 437:
0 Initial errors
0 on fringe, 0 iterations

Sentence 438:
0 Initial errors
0 on fringe, 0 iterations

Sentence 439:
0 Initial errors
0 on fringe, 0 iterations

Sentence 440:
0 Initial errors
0 on fringe, 0 iterations

Sentence 441:
0 Initial errors
0 on fringe, 0 iterations

Sentence 442:
0 Initial errors
0 on fringe, 0 iterations

Sentence 443:
0 Initial errors
0 on fringe, 0 iterations

Sentence 444:
1 Initial errors
0 on fringe, 1 iterations
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX ich kann ihnen gleich mal einen vorschlag machen fur einen termin)
	[01;31m(NX[00m
		(ADVX zwar)
		(NX die zweite juliwoche)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['ADVX', 'NX'], 'family': ['SIMPX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'PPER', 'ADV', 'ADV', 'ART', 'NN', 'VVINF', 'APPR', 'ART', 'NN', 'ADV', 'ART', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 15), 'span': (11, 15), 'left siblings': ['SIMPX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ich kann ihnen gleich mal einen vorschlag machen fur einen termin zwar die zweite juliwoche)

Sentence 445:
0 Initial errors
0 on fringe, 0 iterations

Sentence 446:
0 Initial errors
0 on fringe, 0 iterations

Sentence 447:
0 Initial errors
0 on fringe, 0 iterations

Sentence 448:
0 Initial errors
0 on fringe, 0 iterations

Sentence 449:
0 Initial errors
0 on fringe, 0 iterations

Sentence 450:
0 Initial errors
0 on fringe, 0 iterations

Sentence 451:
0 Initial errors
0 on fringe, 0 iterations

Sentence 452:
0 Initial errors
0 on fringe, 0 iterations

Sentence 453:
0 Initial errors
0 on fringe, 0 iterations

Sentence 454:
0 Initial errors
0 on fringe, 0 iterations

Sentence 455:
0 Initial errors
0 on fringe, 0 iterations

Sentence 456:
8 Initial errors
0 on fringe, 6 iterations
2 Error:Single Word Phrase
2 Error:Different label
1 Error:Unary
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		[01;36m(PX[00m
			(VF
				[01;31m(ADVX[00m
					(ADV grundsatzlich)[01;31m)[00m)[01;36m)[00m
		(LK gabe)
		[01;33m(MVC[00m (MF es naturlich die moglichkeit)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(SIMPX[00m
					(VC
						(VXINF
							(PTKZU zu)
							(VVINF fliegen)))[01;31m)[00m [01;33mMVC)[00m
				(KON beziehungsweise)
				[01;36m(MVC[00m [01;31m(SIMPX[00m
					(MF den zug)
					(VC zu nehmen)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m))
Step:Single Word Phrase
{'family': ['PX'], 'auto preterminal span': (1, 2), 'span': (1, 2), 'subtrees': ['ADV'], 'parent': 'VF', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'PX')}
(TOP
	(DM ja)
	(SIMPX
		(VF grundsatzlich)
		(LK gabe)
		[01;33m(MVC[00m (MF es naturlich die moglichkeit)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(SIMPX[00m
					(VC
						(VXINF
							(PTKZU zu)
							(VVINF fliegen)))[01;31m)[00m [01;33mMVC)[00m
				(KON beziehungsweise)
				[01;36m(MVC[00m [01;31m(SIMPX[00m
					(MF den zug)
					(VC zu nehmen)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m))
Step:Different label
{'family': ['SIMPX', 'KON', 'MVC'], 'auto preterminal span': (10, 14), 'span': (10, 14), 'subtrees': ['MF', 'VC'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('ART', 'NN', 'PTKZU', 'VVINF'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('SIMPX', 'MVC')}
(TOP
	(DM ja)
	(SIMPX
		(VF grundsatzlich)
		(LK gabe)
		[01;33m(MVC[00m (MF es naturlich die moglichkeit)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(SIMPX[00m
					(VC
						(VXINF
							(PTKZU zu)
							(VVINF fliegen)))[01;31m)[00m [01;33mMVC)[00m
				(KON beziehungsweise)
				(MVC den zug zu nehmen)[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['VC'], 'family': ['SIMPX', 'KON', 'MVC'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKZU', 'VVINF', 'KON', 'ART', 'NN', 'PTKZU', 'VVINF'), 'right siblings': ['KON', 'MVC'], 'parent': 'SIMPX', 'auto preterminal span': (7, 14), 'span': (7, 9), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX
		(VF grundsatzlich)
		(LK gabe)
		[01;33m(MVC[00m (MF es naturlich die moglichkeit)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(VC zu fliegen) [01;33mMVC)[00m
				(KON beziehungsweise)
				(MVC den zug zu nehmen)[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'ADV', 'ART', 'NN', 'PTKZU', 'VVINF', 'KON', 'ART', 'NN', 'PTKZU', 'VVINF'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (1, 14), 'span': (7, 14), 'left siblings': ['VF', 'LK', 'MF'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX
		(VF grundsatzlich)
		(LK gabe)
		[01;33m(MVC[00m (MF es naturlich die moglichkeit)
		[01;31m(SIMPX[00m
			(VC zu fliegen) [01;33mMVC)[00m
			(KON beziehungsweise)
			(MVC den zug zu nehmen)[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['VC', 'KON', 'MVC'], 'family': ['VF', 'LK', 'MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'ADV', 'ART', 'NN', 'PTKZU', 'VVINF', 'KON', 'ART', 'NN', 'PTKZU', 'VVINF'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (1, 14), 'span': (7, 14), 'left siblings': ['VF', 'LK', 'MF'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX
		(VF grundsatzlich)
		(LK gabe)
		[01;36m(MVC[00m
			(MF es naturlich die moglichkeit)
			(VC zu fliegen)[01;36m)[00m
		(KON beziehungsweise)
		(MVC den zug zu nehmen)))
Step:UNSET add
{'subtrees': ['MF', 'VC'], 'family': ['VF', 'LK', 'MVC', 'KON', 'MVC'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'ART', 'NN', 'PTKZU', 'VVINF'), 'right siblings': [(KON beziehungsweise), (MVC (MF (NX (ART den) (NN zug))) (VC (VXINF (PTKZU zu) (VVINF nehmen))))], 'left siblings': [(VF (PX (ADV grundsatzlich))), (LK (VXFIN (VVFIN gabe)))], 'auto preterminal span': (3, 9), 'span': (3, 9), 'parent': 'SIMPX', 'label': 'MVC', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP ja grundsatzlich gabe es naturlich die moglichkeit zu fliegen beziehungsweise den zug zu nehmen)

Sentence 457:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK wurde)
		(VC vorschlagen)
		(NF
			(SIMPX
				(VF wir)
				(LK fliegen)
				(NF
					(SIMPX
						(C da)
						(MF
							(NX wir)
							(NX
								(ADVX nur)
								[01;31m(ADJX[00m
									(ADJA begrenzte)[01;31m)[00m
								(NN zeit))
							(PX zur verfugung))
						(VC haben)))))))
Step:Single Word Phrase
{'subtrees': ['ADJA'], 'family': ['ADVX', 'ADJX', 'NN'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV', 'ADJA', 'NN'), 'right siblings': ['NN'], 'parent': 'NX', 'auto preterminal span': (7, 10), 'span': (8, 9), 'left siblings': ['ADVX'], 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP ich wurde vorschlagen wir fliegen da wir nur begrenzte zeit zur verfugung haben)

Sentence 458:
0 Initial errors
0 on fringe, 0 iterations

Sentence 459:
0 Initial errors
0 on fringe, 0 iterations

Sentence 460:
0 Initial errors
0 on fringe, 0 iterations

Sentence 461:
0 Initial errors
0 on fringe, 0 iterations

Sentence 462:
0 Initial errors
0 on fringe, 0 iterations

Sentence 463:
13 Initial errors
0 on fringe, 8 iterations
3 Error:UNSET move
2 Error:Different label
2 Error:Co-ordination
2 Error:PP Attachment
1 Error:Clause Attachment
1 Error:Unary
1 Error:Unary
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM gut)
	[01;31m(P[00m
		[01;31m(SIMPX[00m
			[01;36m(SIMPX[00m
				(VF dann)
				(LK gibt)
				(MF es auch hervorragende zugverbindungen)[01;36m)[00m
			[01;36m(SIMPX[00m
				(NF [01;33m(NX[00m
					[01;31m(R[00m
						[01;36m(NX[00m
							[01;36m(VF[00m
								[01;31m(C[00m
									[01;31m(NX[00m
										(PRELS die)[01;31m)[00m[01;31m)[00m
								[01;31m(MF[00m
									[01;31m(ADJX[00m
										[01;31m(ADJX[00m
											(ADJD stundlich)[01;31m)[00m [01;33mNX)[00m
										(PX ab vier uhr dreiundvierzig)[01;31m)[00m[01;31m)[00m[01;36m)[00m[01;36m)[00m
						(VC bestehen)
						(NF wie ich hier grade lese)[01;31m)[00m)[01;36m)[00m[01;31m)[00m
		(KON denn)
		(SIMPX ich habe den fahrplan vor mir liegen)[01;31m)[00m)
Step:UNSET move
{'new_parent': 'NX', 'new_family': ['PRELS', 'MF'], 'mover info': [('MF', (8, 13))], 'old_family': ['C', 'MF', 'VC', 'NF'], 'start left siblings': ['C'], 'auto preterminals': ('PRELS', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD', 'VVFIN', 'KOUS', 'PPER', 'ADV', 'ADV', 'VVFIN'), 'start right siblings': ['VC', 'NF'], 'end left siblings': ['PRELS'], 'auto preterminal span': (7, 19), 'adding node already present': False, 'movers': ['MF'], 'old_parent': 'R', 'added and moved': True, 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'SIMPX'}
(TOP
	(DM gut)
	[01;31m(P[00m
		[01;31m(SIMPX[00m
			[01;36m(SIMPX[00m
				(VF dann)
				(LK gibt)
				(MF es auch hervorragende zugverbindungen)[01;36m)[00m
			[01;36m(SIMPX[00m
				(NF [01;33m(NX[00m
					[01;31m(R[00m
						(VF
							[01;31m(C[00m
								(NX
									(PRELS die)
									[01;31m(MF[00m
										[01;31m(ADJX[00m
											[01;31m(ADJX[00m
												(ADJD stundlich)[01;31m)[00m [01;33mNX)[00m
											(PX ab vier uhr dreiundvierzig)[01;31m)[00m[01;31m)[00m)[01;31m)[00m)
						(VC bestehen)
						(NF wie ich hier grade lese)[01;31m)[00m)[01;36m)[00m[01;31m)[00m
		(KON denn)
		(SIMPX ich habe den fahrplan vor mir liegen)[01;31m)[00m)
Step:Different label
{'family': ['SIMPX'], 'auto preterminal span': (7, 19), 'span': (7, 19), 'subtrees': ['VF', 'VC', 'NF'], 'parent': 'NF', 'over_word': False, 'auto preterminals': ('PRELS', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD', 'VVFIN', 'KOUS', 'PPER', 'ADV', 'ADV', 'VVFIN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('R', 'SIMPX')}
(TOP
	(DM gut)
	[01;31m(P[00m
		[01;31m(SIMPX[00m
			[01;36m(SIMPX[00m
				(VF dann)
				(LK gibt)
				(MF es auch hervorragende zugverbindungen)[01;36m)[00m
			(NF [01;33m(NX[00m
				(SIMPX
					(VF
						[01;31m(C[00m
							(NX
								(PRELS die)
								[01;31m(MF[00m
									[01;31m(ADJX[00m
										[01;31m(ADJX[00m
											(ADJD stundlich)[01;31m)[00m [01;33mNX)[00m
										(PX ab vier uhr dreiundvierzig)[01;31m)[00m[01;31m)[00m)[01;31m)[00m)
					(VC bestehen)
					(NF wie ich hier grade lese)))[01;31m)[00m
		(KON denn)
		(SIMPX ich habe den fahrplan vor mir liegen)[01;31m)[00m)
Step:Co-ordination
{'new_parent': 'P', 'new_family': ['SIMPX', 'NF', 'KON', 'SIMPX'], 'mover info': [('NF', (7, 19))], 'old_family': ['VF', 'LK', 'MF', 'NF'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'ADV', 'ADJA', 'NN', 'PRELS', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD', 'VVFIN', 'KOUS', 'PPER', 'ADV', 'ADV', 'VVFIN', 'KON', 'PPER', 'VAFIN', 'ART', 'NN', 'APPR', 'PRF', 'VVINF'), 'start right siblings': [], 'end left siblings': ['SIMPX'], 'auto preterminal span': (1, 27), 'movers': ['NF'], 'old_parent': 'SIMPX', 'end right siblings': ['KON', 'SIMPX'], 'classified_type': 'Co-ordination', 'type': 'move'}
(TOP
	(DM gut)
	[01;31m(P[00m
		(SIMPX dann gibt es auch hervorragende zugverbindungen)
		(NF [01;33m(NX[00m
			(SIMPX
				(VF
					[01;31m(C[00m
						(NX
							(PRELS die)
							[01;31m(MF[00m
								[01;31m(ADJX[00m
									[01;31m(ADJX[00m
										(ADJD stundlich)[01;31m)[00m [01;33mNX)[00m
									(PX ab vier uhr dreiundvierzig)[01;31m)[00m[01;31m)[00m)[01;31m)[00m)
				(VC bestehen)
				(NF wie ich hier grade lese)))
		(KON denn)
		(SIMPX ich habe den fahrplan vor mir liegen)[01;31m)[00m)
Step:PP Attachment
{'new_parent': 'C', 'new_family': ['NX', 'PX'], 'mover info': [('PX', (9, 13))], 'old_family': ['ADJX', 'PX'], 'start left siblings': ['ADJX'], 'auto preterminals': ('PRELS', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD'), 'start right siblings': [], 'end left siblings': ['NX'], 'auto preterminal span': (7, 13), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'ADJX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'NX'}
(TOP
	(DM gut)
	[01;31m(P[00m
		(SIMPX dann gibt es auch hervorragende zugverbindungen)
		(NF
			(SIMPX
				(NX
					(VF
						[01;31m(C[00m
							(NX
								(PRELS die)
								[01;31m(MF[00m
									[01;31m(ADJX[00m
										(ADJD stundlich)[01;31m)[00m[01;31m)[00m)
							(PX ab vier uhr dreiundvierzig)[01;31m)[00m))
				(VC bestehen)
				(NF wie ich hier grade lese)))
		(KON denn)
		(SIMPX ich habe den fahrplan vor mir liegen)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['SIMPX', 'NF', 'KON', 'SIMPX'], 'family': ['DM', 'P'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADV', 'VVFIN', 'PPER', 'ADV', 'ADJA', 'NN', 'PRELS', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD', 'VVFIN', 'KOUS', 'PPER', 'ADV', 'ADV', 'VVFIN', 'KON', 'PPER', 'VAFIN', 'ART', 'NN', 'APPR', 'PRF', 'VVINF'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 27), 'span': (1, 27), 'left siblings': ['DM'], 'label': 'P', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(DM gut)
	(SIMPX dann gibt es auch hervorragende zugverbindungen)
	(NF
		(SIMPX
			(NX
				(VF
					[01;31m(C[00m
						(NX
							(PRELS die)
							[01;31m(MF[00m
								[01;31m(ADJX[00m
									(ADJD stundlich)[01;31m)[00m[01;31m)[00m)
						(PX ab vier uhr dreiundvierzig)[01;31m)[00m))
			(VC bestehen)
			(NF wie ich hier grade lese)))
	(KON denn)
	(SIMPX ich habe den fahrplan vor mir liegen))
Step:Unary
{'subtrees': ['NX', 'PX'], 'family': ['C'], 'over_word': False, 'over words': False, 'auto preterminals': ('PRELS', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD'), 'right siblings': [], 'parent': 'VF', 'auto preterminal span': (7, 13), 'span': (7, 13), 'left siblings': [], 'label': 'C', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM gut)
	(SIMPX dann gibt es auch hervorragende zugverbindungen)
	(NF
		(SIMPX
			(NX
				(VF
					(NX
						(PRELS die)
						[01;31m(MF[00m
							[01;31m(ADJX[00m
								(ADJD stundlich)[01;31m)[00m[01;31m)[00m)
					(PX ab vier uhr dreiundvierzig)))
			(VC bestehen)
			(NF wie ich hier grade lese)))
	(KON denn)
	(SIMPX ich habe den fahrplan vor mir liegen))
Step:Unary
{'subtrees': ['ADJX'], 'family': ['PRELS', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PRELS', 'ADJD'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (7, 9), 'span': (8, 9), 'left siblings': ['PRELS'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM gut)
	(SIMPX dann gibt es auch hervorragende zugverbindungen)
	(NF
		(SIMPX
			(NX
				(VF
					(NX
						(PRELS die)
						[01;31m(ADJX[00m
							(ADJD stundlich)[01;31m)[00m)
					(PX ab vier uhr dreiundvierzig)))
			(VC bestehen)
			(NF wie ich hier grade lese)))
	(KON denn)
	(SIMPX ich habe den fahrplan vor mir liegen))
Step:Single Word Phrase
{'subtrees': ['ADJD'], 'family': ['PRELS', 'ADJX'], 'over_word': True, 'over words': True, 'auto preterminals': ('PRELS', 'ADJD'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (7, 9), 'span': (8, 9), 'left siblings': ['PRELS'], 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP gut dann gibt es auch hervorragende zugverbindungen die stundlich ab vier uhr dreiundvierzig bestehen wie ich hier grade lese denn ich habe den fahrplan vor mir liegen)

Sentence 464:
0 Initial errors
0 on fringe, 0 iterations

Sentence 465:
0 Initial errors
0 on fringe, 0 iterations

Sentence 466:
0 Initial errors
0 on fringe, 0 iterations

Sentence 467:
0 Initial errors
0 on fringe, 0 iterations

Sentence 468:
0 Initial errors
0 on fringe, 0 iterations

Sentence 469:
0 Initial errors
0 on fringe, 0 iterations

Sentence 470:
0 Initial errors
0 on fringe, 0 iterations

Sentence 471:
0 Initial errors
0 on fringe, 0 iterations

Sentence 472:
0 Initial errors
0 on fringe, 0 iterations

Sentence 473:
0 Initial errors
0 on fringe, 0 iterations

Sentence 474:
0 Initial errors
0 on fringe, 0 iterations

Sentence 475:
0 Initial errors
0 on fringe, 0 iterations

Sentence 476:
0 Initial errors
0 on fringe, 0 iterations

Sentence 477:
0 Initial errors
0 on fringe, 0 iterations

Sentence 478:
0 Initial errors
0 on fringe, 0 iterations

Sentence 479:
8 Initial errors
0 on fringe, 6 iterations
2 Error:Different label
2 Error:Modifier Attachment
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX es gabe hier drei moglichkeiten)
	(DM also)
	[01;31m(NX[00m [01;33m(VF (NX[00m
		(NX ein hotel)
		[01;31m(R[00m
			(C was)
			(MF in der nahe des zentrums) [01;33mNX) VF)[00m
			[01;36m(LK[00m [01;31m(VC[00m
				(VXFIN
					(VVFIN liegt))[01;31m)[00m[01;36m)[00m[01;31m)[00m
		[01;36m(MF[00m
			[01;31m(PX[00m
				(ADVX auch)
				(PX mit cafeteria und terrasse)[01;31m)[00m
			(ADJX etwas gunstiger)[01;36m)[00m[01;31m)[00m)
Step:Different label
{'family': ['C', 'MF', 'LK'], 'auto preterminal span': (14, 15), 'span': (14, 15), 'subtrees': ['VXFIN'], 'parent': 'R', 'over_word': False, 'auto preterminals': ('VVFIN',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('VC', 'LK')}
(TOP
	(SIMPX es gabe hier drei moglichkeiten)
	(DM also)
	[01;31m(NX[00m [01;33m(VF (NX[00m
		(NX ein hotel)
		[01;31m(R[00m
			(C was)
			(MF in der nahe des zentrums) [01;33mNX) VF)[00m
			(LK liegt)[01;31m)[00m
		[01;36m(MF[00m
			[01;31m(PX[00m
				(ADVX auch)
				(PX mit cafeteria und terrasse)[01;31m)[00m
			(ADJX etwas gunstiger)[01;36m)[00m[01;31m)[00m)
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'R', 'ADVX', 'PX', 'ADJX'], 'mover info': [('ADVX', (15, 16))], 'old_family': ['ADVX', 'PX'], 'start left siblings': [], 'auto preterminals': ('ART', 'NN', 'PRELS', 'APPR', 'ART', 'NN', 'ART', 'NN', 'VVFIN', 'ADV', 'APPR', 'NN', 'KON', 'NN', 'ADV', 'ADJD'), 'start right siblings': ['PX'], 'end left siblings': ['NX', 'R'], 'auto preterminal span': (6, 22), 'adding node already present': False, 'movers': ['ADVX'], 'old_parent': 'PX', 'POS confusion': ('ADV', 'ADV'), 'added and moved': True, 'end right siblings': ['PX', 'ADJX'], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'MF'}
(TOP
	(SIMPX es gabe hier drei moglichkeiten)
	(DM also)
	[01;31m(NX[00m [01;33m(VF (NX[00m
		(NX ein hotel)
		[01;31m(R[00m
			(C was)
			(MF in der nahe des zentrums) [01;33mNX) VF)[00m
			(LK liegt)[01;31m)[00m
		(MF auch mit cafeteria und terrasse etwas gunstiger)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['NX', 'R', 'MF'], 'family': ['SIMPX', 'DM', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'CARD', 'NN', 'ADV', 'ART', 'NN', 'PRELS', 'APPR', 'ART', 'NN', 'ART', 'NN', 'VVFIN', 'ADV', 'APPR', 'NN', 'KON', 'NN', 'ADV', 'ADJD'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 22), 'span': (6, 22), 'left siblings': ['SIMPX', 'DM'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX es gabe hier drei moglichkeiten)
	(DM also)
	[01;33m(VF (NX[00m (NX ein hotel)
	[01;31m(R[00m
		(C was)
		(MF in der nahe des zentrums) [01;33mNX) VF)[00m
		(LK liegt)[01;31m)[00m
	(MF auch mit cafeteria und terrasse etwas gunstiger))
Step:UNSET remove
{'subtrees': ['C', 'MF', 'LK'], 'family': ['SIMPX', 'DM', 'NX', 'R', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'CARD', 'NN', 'ADV', 'ART', 'NN', 'PRELS', 'APPR', 'ART', 'NN', 'ART', 'NN', 'VVFIN', 'ADV', 'APPR', 'NN', 'KON', 'NN', 'ADV', 'ADJD'), 'right siblings': ['MF'], 'parent': 'TOP', 'auto preterminal span': (0, 22), 'span': (8, 15), 'left siblings': ['SIMPX', 'DM', 'NX'], 'label': 'R', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX es gabe hier drei moglichkeiten)
	(DM also)
	[01;36m(VF[00m
		[01;36m(NX[00m
			(NX ein hotel)
			(C was)
			(MF in der nahe des zentrums)[01;36m)[00m[01;36m)[00m
	(LK liegt)
	(MF auch mit cafeteria und terrasse etwas gunstiger))
Step:UNSET add
{'subtrees': ['NX', 'C', 'MF'], 'family': ['SIMPX', 'DM', 'NX', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'PRELS', 'APPR', 'ART', 'NN', 'ART', 'NN'), 'right siblings': [(LK (VXFIN (VVFIN liegt))), (MF (ADVX (ADV auch)) (PX (APPR mit) (NX (NX (NN cafeteria)) (KON und) (NX (NN terrasse)))) (ADJX (ADVX (ADV etwas)) (ADJD gunstiger)))], 'left siblings': [(SIMPX (VF (NX (PPER es))) (LK (VXFIN (VVFIN gabe))) (MF (ADVX (ADV hier)) (NX (ADJX (CARD drei)) (NN moglichkeiten)))), (DM (ADVX (ADV also)))], 'auto preterminal span': (6, 14), 'span': (6, 14), 'parent': 'TOP', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX es gabe hier drei moglichkeiten)
	(DM also)
	[01;36m(VF[00m
		(NX
			(NX ein hotel)
			(C was)
			(MF in der nahe des zentrums))[01;36m)[00m
	(LK liegt)
	(MF auch mit cafeteria und terrasse etwas gunstiger))
Step:Unary
{'subtrees': ['NX'], 'family': ['SIMPX', 'DM', 'VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'PRELS', 'APPR', 'ART', 'NN', 'ART', 'NN'), 'right siblings': [(LK (VXFIN (VVFIN liegt))), (MF (ADVX (ADV auch)) (PX (APPR mit) (NX (NX (NN cafeteria)) (KON und) (NX (NN terrasse)))) (ADJX (ADVX (ADV etwas)) (ADJD gunstiger)))], 'left siblings': [(SIMPX (VF (NX (PPER es))) (LK (VXFIN (VVFIN gabe))) (MF (ADVX (ADV hier)) (NX (ADJX (CARD drei)) (NN moglichkeiten)))), (DM (ADVX (ADV also)))], 'auto preterminal span': (6, 14), 'span': (6, 14), 'parent': 'TOP', 'label': 'VF', 'classified_type': 'Unary', 'type': 'add'}
(TOP es gabe hier drei moglichkeiten also ein hotel was in der nahe des zentrums liegt auch mit cafeteria und terrasse etwas gunstiger)

Sentence 480:
0 Initial errors
0 on fringe, 0 iterations

Sentence 481:
3 Initial errors
0 on fringe, 3 iterations
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(NX[00m
	[01;31m(NX[00m
		(ADVX dann)
		[01;31m(NX[00m
			(NX das schloshotel) [01;33mNX)[00m
			(R das in der nahe vom bahnhof ist)[01;31m)[00m[01;31m)[00m
	(SIMPX das fande ich auch nicht schlecht))
Step:UNSET remove
{'subtrees': ['ADVX', 'NX'], 'family': ['NX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NE', 'PRELS', 'APPR', 'ART', 'NN', 'APPRART', 'NN', 'VAFIN', 'PDS', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ADJD'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 16), 'span': (0, 10), 'left siblings': [], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP [01;33m(NX[00m
	(ADVX dann)
	[01;31m(NX[00m
		(NX das schloshotel) [01;33mNX)[00m
		(R das in der nahe vom bahnhof ist)[01;31m)[00m
	(SIMPX das fande ich auch nicht schlecht))
Step:UNSET remove
{'subtrees': ['NX', 'R'], 'family': ['ADVX', 'NX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NE', 'PRELS', 'APPR', 'ART', 'NN', 'APPRART', 'NN', 'VAFIN', 'PDS', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ADJD'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 16), 'span': (1, 10), 'left siblings': ['ADVX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	[01;36m(NX[00m
		(ADVX dann)
		(NX das schloshotel)[01;36m)[00m
	(R das in der nahe vom bahnhof ist)
	(SIMPX das fande ich auch nicht schlecht))
Step:UNSET add
{'subtrees': ['ADVX', 'NX'], 'family': ['NX', 'R', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NE'), 'right siblings': [(R (C (NX (PRELS das))) (MF (PX (APPR in) (NX (NX (ART der) (NN nahe)) (PX (APPRART vom) (NX (NN bahnhof)))))) (VC (VXFIN (VAFIN ist)))), (SIMPX (VF (NX (PDS das))) (LK (VXFIN (VVFIN fande))) (MF (NX (PPER ich)) (ADVX (ADV auch)) (ADVX (PTKNEG nicht)) (ADJX (ADJD schlecht))))], 'left siblings': [], 'auto preterminal span': (0, 3), 'span': (0, 3), 'parent': 'TOP', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP dann das schloshotel das in der nahe vom bahnhof ist das fande ich auch nicht schlecht)

Sentence 482:
7 Initial errors
0 on fringe, 5 iterations
3 Error:Modifier Attachment
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(KOORD und)
		(VF
			(NX
				[01;31m(NX[00m
					(ART das)
					(ADJX teuerste)
					[01;36m(NX[00m
						(NN [01;33m(NX[00m hotel)[01;36m)[00m[01;31m)[00m
				(NX amgeorgengarten))) [01;33mNX)[00m
		(LK bietet)
		[01;31m(MF[00m
			[01;31m(NX[00m
				(NX den luxus)
				[01;33m(NX[00m (NX eines schwimmbads)[01;31m)[00m[01;31m)[00m
		(NF
			(R
				(C was)
				[01;31m(MF[00m
					(ADVX naturlich)
					(ADVX auch)
					(ADVX nicht)[01;31m)[00m
				(VC zu verachten ist))))) [01;33mNX)[00m
Step:Modifier Attachment
{'new_parent': 'VF', 'new_family': ['ART', 'ADJX', 'NX'], 'mover info': [('ART', (1, 2)), ('ADJX', (2, 3))], 'old_family': ['ART', 'ADJX', 'NN'], 'start left siblings': [], 'auto preterminals': ('ART', 'ADJA', 'NN', 'NE'), 'start right siblings': ['NN'], 'end left siblings': [], 'auto preterminal span': (1, 5), 'adding node already present': False, 'movers': ['ART', 'ADJX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': ['NX'], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'NX'}
(TOP
	(SIMPX
		(KOORD und)
		(NX das teuerste hotel amgeorgengarten)
		(LK bietet)
		[01;31m(MF[00m
			[01;31m(NX[00m
				(NX den luxus)
				[01;33m(NX[00m (NX eines schwimmbads)[01;31m)[00m[01;31m)[00m
		(NF
			(R
				(C was)
				[01;31m(MF[00m
					(ADVX naturlich)
					(ADVX auch)
					(ADVX nicht)[01;31m)[00m
				(VC zu verachten ist))))) [01;33mNX)[00m
Step:Unary
{'subtrees': ['NX', 'NX'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'ART', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (6, 10), 'span': (6, 10), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(KOORD und)
		(NX das teuerste hotel amgeorgengarten)
		(LK bietet)
		[01;31m(MF[00m
			(NX den luxus)
			[01;33m(NX[00m (NX eines schwimmbads)[01;31m)[00m
		(NF
			(R
				(C was)
				[01;31m(MF[00m
					(ADVX naturlich)
					(ADVX auch)
					(ADVX nicht)[01;31m)[00m
				(VC zu verachten ist))))) [01;33mNX)[00m
Step:UNSET remove
{'subtrees': ['NX', 'NX'], 'family': ['KOORD', 'NX', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ART', 'ADJA', 'NN', 'NE', 'VVFIN', 'ART', 'NN', 'ART', 'NN', 'PRELS', 'ADV', 'ADV', 'PTKNEG', 'PTKZU', 'VVINF', 'VAFIN'), 'right siblings': ['NF'], 'parent': 'SIMPX', 'auto preterminal span': (0, 17), 'span': (6, 10), 'left siblings': ['KOORD', 'NX', 'LK'], 'label': 'MF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX
		(KOORD und)
		(NX das teuerste hotel amgeorgengarten)
		(LK bietet)
		(NX den luxus)
		[01;36m(NX[00m
			(NX eines schwimmbads)
			(NF
				(R
					(C was)
					[01;31m(MF[00m
						(ADVX naturlich)
						(ADVX auch)
						(ADVX nicht)[01;31m)[00m
					(VC zu verachten ist)))[01;36m)[00m))
Step:UNSET add
{'subtrees': ['NX', 'NF'], 'family': ['KOORD', 'NX', 'LK', 'NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'PRELS', 'ADV', 'ADV', 'PTKNEG', 'PTKZU', 'VVINF', 'VAFIN'), 'right siblings': [], 'left siblings': [(KOORD (KON und)), (NX (VF (ART das) (ADJX (ADJA teuerste)) (NX (NX (NN hotel)) (NX (NE amgeorgengarten))))), (LK (VXFIN (VVFIN bietet))), (NX (ART den) (NN luxus))], 'auto preterminal span': (8, 17), 'span': (8, 17), 'parent': 'SIMPX', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(KOORD und)
		(NX das teuerste hotel amgeorgengarten)
		(LK bietet)
		(NX den luxus)
		(NX
			(NX eines schwimmbads)
			(NF
				(R
					(C was)
					[01;31m(MF[00m
						(ADVX naturlich)
						(ADVX auch)
						(ADVX nicht)[01;31m)[00m
					(VC zu verachten ist))))))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX', 'ADVX'], 'family': ['C', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('PRELS', 'ADV', 'ADV', 'PTKNEG', 'PTKZU', 'VVINF', 'VAFIN'), 'right siblings': ['VC'], 'parent': 'R', 'auto preterminal span': (10, 17), 'span': (11, 14), 'left siblings': ['C'], 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP und das teuerste hotel amgeorgengarten bietet den luxus eines schwimmbads was naturlich auch nicht zu verachten ist)

Sentence 483:
0 Initial errors
0 on fringe, 0 iterations

Sentence 484:
0 Initial errors
0 on fringe, 0 iterations

Sentence 485:
0 Initial errors
0 on fringe, 0 iterations

Sentence 486:
2 Initial errors
0 on fringe, 2 iterations
1 Error:NP Internal Structure
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF deswegen)
		(LK ware)
		(MF
			(ADVX vielleicht)
			[01;31m(NX[00m
				(NX das zweite)
				[01;31m(NX[00m
					(PX von ihnen)
					(NX genannte)[01;31m)[00m[01;31m)[00m)
		(VC vorzuziehen)))
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NN', 'APPR', 'PPER', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 8), 'span': (3, 8), 'left siblings': ['ADVX'], 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'remove'}
(TOP
	(SIMPX
		(VF deswegen)
		(LK ware)
		(MF
			(ADVX vielleicht)
			(NX das zweite)
			[01;31m(NX[00m
				(PX von ihnen)
				(NX genannte)[01;31m)[00m)
		(VC vorzuziehen)))
Step:UNSET remove
{'subtrees': ['PX', 'NX'], 'family': ['ADVX', 'NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NN', 'APPR', 'PPER', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 8), 'span': (5, 8), 'left siblings': ['ADVX', 'NX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP deswegen ware vielleicht das zweite von ihnen genannte vorzuziehen)

Sentence 487:
0 Initial errors
0 on fringe, 0 iterations

Sentence 488:
0 Initial errors
0 on fringe, 0 iterations

Sentence 489:
0 Initial errors
0 on fringe, 0 iterations

Sentence 490:
0 Initial errors
0 on fringe, 0 iterations

Sentence 491:
0 Initial errors
0 on fringe, 0 iterations

Sentence 492:
0 Initial errors
0 on fringe, 0 iterations

Sentence 493:
0 Initial errors
0 on fringe, 0 iterations

Sentence 494:
0 Initial errors
0 on fringe, 0 iterations

Sentence 495:
0 Initial errors
0 on fringe, 0 iterations

Sentence 496:
0 Initial errors
0 on fringe, 0 iterations

Sentence 497:
3 Initial errors
0 on fringe, 1 iterations
3 Error:UNSET move
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM nee)
	(SIMPX
		(VF ich)
		(LK hatte)
		[01;36m(MF[00m
			[01;36m(PX[00m
				(APPR in)
				[01;31m(MF[00m
					(NX
						(DP so wenig)
						(NN zeit))[01;31m)[00m[01;36m)[00m[01;36m)[00m
		(NF das ich mich darum nicht gekummert habe))
	(SIMPX aber es ware ein guter anlas))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['APPR', 'NX'], 'mover info': [('APPR', (3, 4))], 'old_family': ['VF', 'LK', 'APPR', 'MF', 'NF'], 'start left siblings': ['VF', 'LK'], 'auto preterminals': ('PPER', 'VAFIN', 'APPR', 'ADV', 'PIAT', 'NN', 'KOUS', 'PPER', 'PRF', 'PROP', 'PTKNEG', 'VVPP', 'VAFIN'), 'start right siblings': ['MF', 'NF'], 'end left siblings': [], 'auto preterminal span': (1, 14), 'adding node already present': False, 'movers': ['APPR'], 'old_parent': 'SIMPX', 'POS confusion': ('APPR', 'APPR'), 'added and moved': True, 'end right siblings': ['NX'], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'PX'}
(TOP nee ich hatte in so wenig zeit das ich mich darum nicht gekummert habe aber es ware ein guter anlas)

Sentence 498:
0 Initial errors
0 on fringe, 0 iterations

Sentence 499:
0 Initial errors
0 on fringe, 0 iterations

Sentence 500:
0 Initial errors
0 on fringe, 0 iterations

Sentence 501:
0 Initial errors
0 on fringe, 0 iterations

Sentence 502:
0 Initial errors
0 on fringe, 0 iterations

Sentence 503:
0 Initial errors
0 on fringe, 0 iterations

Sentence 504:
0 Initial errors
0 on fringe, 0 iterations

Sentence 505:
0 Initial errors
0 on fringe, 0 iterations

Sentence 506:
0 Initial errors
0 on fringe, 0 iterations

Sentence 507:
0 Initial errors
0 on fringe, 0 iterations

Sentence 508:
0 Initial errors
0 on fringe, 0 iterations

Sentence 509:
24 Initial errors
0 on fringe, 19 iterations
3 Error:VP Attachment
2 Error:Single Word Phrase
2 Error:Different label
2 Error:UNSET move
1 Error:Unary
1 Error:Modifier Attachment
1 Error:Clause Attachment
1 Error:UNSET add
1 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Clause Attachment
1 Error:Clause Attachment
1 Error:UNSET add
1 Error:Clause Attachment
1 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		[01;31m(FKOORD[00m [01;33m(MF[00m
			(MVC uns ja fur ein meeting treffen)
			(KON beziehungsweise)
			[01;31m(MVC[00m
				(MF eines) [01;33mMF)[00m
				(VC ausmachen)[01;31m)[00m[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(PX[00m
				[01;36m(NF[00m
					(PX
						(APPR in)
						(NX hannover)) [01;33mSIMPX)[00m[01;36m)[00m
				(SIMPX wenn ich mich recht entsinne)[01;31m)[00m [01;33mSIMPX)[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m
				[01;36m(SIMPX[00m
					[01;31m(MF[00m
						[01;36m(C[00m [01;31m(ADVX[00m
							(ADV da)[01;31m)[00m[01;36m)[00m
						[01;36m(NX[00m
							[01;33m(MF[00m (NX die geschaftspartner)
							(ADVX auch)
							(NX eine filiale)[01;36m)[00m
						(ADVX jetzt)[01;31m)[00m
					[01;31m(VC[00m
						(VXINF eroffnet) [01;33mMF)[00m
						[01;36m(VC[00m
							(VXFIN
								(VAFIN haben))[01;36m)[00m[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(KOORD und)
			(DM ja)
			(SIMPX ich weis nicht)[01;36m)[00m
		[01;36m(SIMPX[00m
			(VF es)
			(LK sollte)
			(MF auf alle falle noch in den nachsten drei monaten)
			(VC geschehen)
			[01;36m(NX[00m
				(NF
					[01;31m(PX[00m
						(NX meiner ansicht)
						[01;36m(VC[00m
							(APPO nach)[01;36m)[00m[01;31m)[00m)[01;36m)[00m[01;36m)[00m[01;31m)[00m)
Step:VP Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'NX', 'ADVX', 'NX', 'ADVX', 'VXINF'], 'mover info': [('VXINF', (26, 27))], 'old_family': ['VXINF', 'VXFIN'], 'start left siblings': [], 'auto preterminals': ('KOUS', 'ADV', 'ART', 'NN', 'ADV', 'ART', 'NN', 'ADV', 'VVPP', 'VAFIN'), 'start right siblings': ['VXFIN'], 'end left siblings': ['ADVX', 'NX', 'ADVX', 'NX', 'ADVX'], 'auto preterminal span': (18, 28), 'adding node already present': False, 'movers': ['VXINF'], 'old_parent': 'VC', 'POS confusion': ('VVPP', 'VVPP'), 'added and moved': True, 'end right siblings': [], 'classified_type': 'VP Attachment', 'type': 'move', 'added label': 'VC'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		[01;31m(FKOORD[00m [01;33m(MF[00m
			(MVC uns ja fur ein meeting treffen)
			(KON beziehungsweise)
			[01;31m(MVC[00m
				(MF eines) [01;33mMF)[00m
				(VC ausmachen)[01;31m)[00m[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(PX[00m
				[01;36m(NF[00m
					(PX
						(APPR in)
						(NX hannover)) [01;33mSIMPX)[00m[01;36m)[00m
				(SIMPX wenn ich mich recht entsinne)[01;31m)[00m [01;33mSIMPX)[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m
				[01;36m(SIMPX[00m
					[01;31m(MF[00m
						[01;36m(C[00m [01;31m(ADVX[00m
							(ADV da)[01;31m)[00m[01;36m)[00m
						(MF
							[01;36m(NX[00m
								(NX die geschaftspartner)
								(ADVX auch)
								(NX eine filiale)[01;36m)[00m
							(ADVX jetzt)
							(VXINF eroffnet))[01;31m)[00m
					(VC haben)[01;36m)[00m[01;31m)[00m[01;31m)[00m)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(KOORD und)
			(DM ja)
			(SIMPX ich weis nicht)[01;36m)[00m
		[01;36m(SIMPX[00m
			(VF es)
			(LK sollte)
			(MF auf alle falle noch in den nachsten drei monaten)
			(VC geschehen)
			[01;36m(NX[00m
				(NF
					[01;31m(PX[00m
						(NX meiner ansicht)
						[01;36m(VC[00m
							(APPO nach)[01;36m)[00m[01;31m)[00m)[01;36m)[00m[01;36m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'family': ['C', 'MF'], 'auto preterminal span': (19, 20), 'span': (19, 20), 'subtrees': ['ADV'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'C')}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		[01;31m(FKOORD[00m [01;33m(MF[00m
			(MVC uns ja fur ein meeting treffen)
			(KON beziehungsweise)
			[01;31m(MVC[00m
				(MF eines) [01;33mMF)[00m
				(VC ausmachen)[01;31m)[00m[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(PX[00m
				[01;36m(NF[00m
					(PX
						(APPR in)
						(NX hannover)) [01;33mSIMPX)[00m[01;36m)[00m
				(SIMPX wenn ich mich recht entsinne)[01;31m)[00m [01;33mSIMPX)[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m
				[01;36m(SIMPX[00m
					[01;31m(MF[00m
						(C da)
						(MF
							[01;36m(NX[00m
								(NX die geschaftspartner)
								(ADVX auch)
								(NX eine filiale)[01;36m)[00m
							(ADVX jetzt)
							(VXINF eroffnet))[01;31m)[00m
					(VC haben)[01;36m)[00m[01;31m)[00m[01;31m)[00m)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(KOORD und)
			(DM ja)
			(SIMPX ich weis nicht)[01;36m)[00m
		[01;36m(SIMPX[00m
			(VF es)
			(LK sollte)
			(MF auf alle falle noch in den nachsten drei monaten)
			(VC geschehen)
			[01;36m(NX[00m
				(NF
					[01;31m(PX[00m
						(NX meiner ansicht)
						[01;36m(VC[00m
							(APPO nach)[01;36m)[00m[01;31m)[00m)[01;36m)[00m[01;36m)[00m[01;31m)[00m)
Step:Different label
{'family': ['NX'], 'auto preterminal span': (45, 48), 'span': (45, 48), 'subtrees': ['NX', 'APPO'], 'parent': 'NF', 'over_word': False, 'auto preterminals': ('PPOSAT', 'NN', 'APPO'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('PX', 'NX')}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		[01;31m(FKOORD[00m [01;33m(MF[00m
			(MVC uns ja fur ein meeting treffen)
			(KON beziehungsweise)
			[01;31m(MVC[00m
				(MF eines) [01;33mMF)[00m
				(VC ausmachen)[01;31m)[00m[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(PX[00m
				[01;36m(NF[00m
					(PX
						(APPR in)
						(NX hannover)) [01;33mSIMPX)[00m[01;36m)[00m
				(SIMPX wenn ich mich recht entsinne)[01;31m)[00m [01;33mSIMPX)[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m
				[01;36m(SIMPX[00m
					[01;31m(MF[00m
						(C da)
						(MF
							[01;36m(NX[00m
								(NX die geschaftspartner)
								(ADVX auch)
								(NX eine filiale)[01;36m)[00m
							(ADVX jetzt)
							(VXINF eroffnet))[01;31m)[00m
					(VC haben)[01;36m)[00m[01;31m)[00m[01;31m)[00m)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(KOORD und)
			(DM ja)
			(SIMPX ich weis nicht)[01;36m)[00m
		[01;36m(SIMPX[00m
			(VF es)
			(LK sollte)
			(MF auf alle falle noch in den nachsten drei monaten)
			(VC geschehen)
			(NF
				(NX
					(NX meiner ansicht)
					[01;36m(VC[00m
						(APPO nach)[01;36m)[00m))[01;36m)[00m[01;31m)[00m)
Step:UNSET move
{'new_parent': 'PX', 'new_family': ['PX', 'SIMPX', 'C'], 'mover info': [('C', (18, 19))], 'old_family': ['C', 'MF', 'VC'], 'start left siblings': [], 'auto preterminals': ('APPR', 'NE', 'KOUS', 'PPER', 'PRF', 'ADJD', 'VVFIN', 'KOUS', 'ADV', 'ART', 'NN', 'ADV', 'ART', 'NN', 'ADV', 'VVPP', 'VAFIN'), 'start right siblings': ['MF', 'VC'], 'end left siblings': ['PX', 'SIMPX'], 'auto preterminal span': (11, 28), 'movers': ['C'], 'old_parent': 'SIMPX', 'POS confusion': ('KOUS', 'KOUS'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		[01;31m(FKOORD[00m [01;33m(MF[00m
			(MVC uns ja fur ein meeting treffen)
			(KON beziehungsweise)
			[01;31m(MVC[00m
				(MF eines) [01;33mMF)[00m
				(VC ausmachen)[01;31m)[00m[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(PX[00m
				[01;36m(NF[00m
					(PX
						(APPR in)
						(NX hannover)) [01;33mSIMPX)[00m[01;36m)[00m
				(SIMPX wenn ich mich recht entsinne) [01;33mSIMPX)[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m[01;31m)[00m
			(SIMPX
				[01;31m(MF[00m
					(C da)
					(MF
						[01;36m(NX[00m
							(NX die geschaftspartner)
							(ADVX auch)
							(NX eine filiale)[01;36m)[00m
						(ADVX jetzt)
						(VXINF eroffnet))[01;31m)[00m
				(VC haben))[01;31m)[00m)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(KOORD und)
			(DM ja)
			(SIMPX ich weis nicht)[01;36m)[00m
		[01;36m(SIMPX[00m
			(VF es)
			(LK sollte)
			(MF auf alle falle noch in den nachsten drei monaten)
			(VC geschehen)
			(NF
				(NX
					(NX meiner ansicht)
					[01;36m(VC[00m
						(APPO nach)[01;36m)[00m))[01;36m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['PX'], 'family': ['NF', 'SIMPX', 'C'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NE'), 'right siblings': [(SIMPX (C (KOUS wenn)) (MF (NX (PPER ich)) (NX (PRF mich)) (ADJX (ADJD recht))) (VC (VXFIN (VVFIN entsinne)))), (C (KOUS weil))], 'left siblings': [], 'auto preterminal span': (11, 13), 'span': (11, 13), 'parent': 'PX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		[01;31m(FKOORD[00m [01;33m(MF[00m
			(MVC uns ja fur ein meeting treffen)
			(KON beziehungsweise)
			[01;31m(MVC[00m
				(MF eines) [01;33mMF)[00m
				(VC ausmachen)[01;31m)[00m[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(PX[00m
				(NF in hannover) [01;33mSIMPX)[00m
				(SIMPX wenn ich mich recht entsinne) [01;33mSIMPX)[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m[01;31m)[00m
			(SIMPX
				[01;31m(MF[00m
					(C da)
					(MF
						[01;36m(NX[00m
							(NX die geschaftspartner)
							(ADVX auch)
							(NX eine filiale)[01;36m)[00m
						(ADVX jetzt)
						(VXINF eroffnet))[01;31m)[00m
				(VC haben))[01;31m)[00m)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(KOORD und)
			(DM ja)
			(SIMPX ich weis nicht)[01;36m)[00m
		[01;36m(SIMPX[00m
			(VF es)
			(LK sollte)
			(MF auf alle falle noch in den nachsten drei monaten)
			(VC geschehen)
			(NF
				(NX
					(NX meiner ansicht)
					[01;36m(VC[00m
						(APPO nach)[01;36m)[00m))[01;36m)[00m[01;31m)[00m)
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX', 'NX'], 'family': ['NX', 'ADVX', 'VXINF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'ADV', 'ART', 'NN'), 'right siblings': [(ADVX (ADV jetzt)), (VXINF (VVPP eroffnet))], 'left siblings': [], 'auto preterminal span': (20, 25), 'span': (20, 25), 'parent': 'MF', 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		[01;31m(FKOORD[00m [01;33m(MF[00m
			(MVC uns ja fur ein meeting treffen)
			(KON beziehungsweise)
			[01;31m(MVC[00m
				(MF eines) [01;33mMF)[00m
				(VC ausmachen)[01;31m)[00m[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(PX[00m
				(NF in hannover) [01;33mSIMPX)[00m
				(SIMPX wenn ich mich recht entsinne) [01;33mSIMPX)[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m[01;31m)[00m
			(SIMPX
				[01;31m(MF[00m
					(C da)
					(MF die geschaftspartner auch eine filiale jetzt eroffnet)[01;31m)[00m
				(VC haben))[01;31m)[00m)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(KOORD und)
			(DM ja)
			(SIMPX ich weis nicht)[01;36m)[00m
		[01;36m(SIMPX[00m
			(VF es)
			(LK sollte)
			(MF auf alle falle noch in den nachsten drei monaten)
			(VC geschehen)
			(NF
				(NX
					(NX meiner ansicht)
					[01;36m(VC[00m
						(APPO nach)[01;36m)[00m))[01;36m)[00m[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['KOORD', 'DM', 'SIMPX'], 'family': ['SIMPX', 'VF', 'LK', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PTKANT', 'PPER', 'VVFIN', 'PTKNEG'), 'right siblings': [(VF (NX (PPER es))), (LK (VXFIN (VMFIN sollte))), (MF (PX (APPR auf) (NX (PIDAT alle) (NN falle))) (ADVX (ADV noch)) (PX (APPR in) (NX (ART den) (ADJX (ADJA nachsten)) (ADJX (CARD drei)) (NN monaten)))), (VC (VXINF (VVINF geschehen))), (NF (NX (NX (PPOSAT meiner) (NN ansicht)) (APPO nach)))], 'left siblings': [], 'auto preterminal span': (28, 33), 'span': (28, 33), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		[01;31m(FKOORD[00m [01;33m(MF[00m
			(MVC uns ja fur ein meeting treffen)
			(KON beziehungsweise)
			[01;31m(MVC[00m
				(MF eines) [01;33mMF)[00m
				(VC ausmachen)[01;31m)[00m[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(PX[00m
				(NF in hannover) [01;33mSIMPX)[00m
				(SIMPX wenn ich mich recht entsinne) [01;33mSIMPX)[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m[01;31m)[00m
			(SIMPX
				[01;31m(MF[00m
					(C da)
					(MF die geschaftspartner auch eine filiale jetzt eroffnet)[01;31m)[00m
				(VC haben))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(SIMPX und ja ich weis nicht)
		[01;36m(SIMPX[00m
			(VF es)
			(LK sollte)
			(MF auf alle falle noch in den nachsten drei monaten)
			(VC geschehen)
			(NF
				(NX
					(NX meiner ansicht)
					[01;36m(VC[00m
						(APPO nach)[01;36m)[00m))[01;36m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC', 'NF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'APPR', 'PIDAT', 'NN', 'ADV', 'APPR', 'ART', 'ADJA', 'CARD', 'NN', 'VVINF', 'PPOSAT', 'NN', 'APPO'), 'right siblings': [], 'left siblings': [(SIMPX (KOORD (KON und)) (DM (PTKANT ja)) (SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VVFIN weis))) (MF (ADVX (PTKNEG nicht)))))], 'auto preterminal span': (33, 48), 'span': (33, 48), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		[01;31m(FKOORD[00m [01;33m(MF[00m
			(MVC uns ja fur ein meeting treffen)
			(KON beziehungsweise)
			[01;31m(MVC[00m
				(MF eines) [01;33mMF)[00m
				(VC ausmachen)[01;31m)[00m[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(PX[00m
				(NF in hannover) [01;33mSIMPX)[00m
				(SIMPX wenn ich mich recht entsinne) [01;33mSIMPX)[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m[01;31m)[00m
			(SIMPX
				[01;31m(MF[00m
					(C da)
					(MF die geschaftspartner auch eine filiale jetzt eroffnet)[01;31m)[00m
				(VC haben))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(SIMPX und ja ich weis nicht)
		(SIMPX
			(VF es)
			(LK sollte)
			(MF auf alle falle noch in den nachsten drei monaten)
			(VC geschehen)
			(NF
				(NX
					(NX meiner ansicht)
					[01;36m(VC[00m
						(APPO nach)[01;36m)[00m)))[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['APPO'], 'family': ['NX', 'VC'], 'over_word': True, 'over words': True, 'auto preterminals': ('APPO',), 'right siblings': [], 'left siblings': [(NX (PPOSAT meiner) (NN ansicht))], 'auto preterminal span': (47, 48), 'span': (47, 48), 'parent': 'NX', 'label': 'VC', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		[01;31m(FKOORD[00m [01;33m(MF[00m
			(MVC uns ja fur ein meeting treffen)
			(KON beziehungsweise)
			[01;31m(MVC[00m
				(MF eines) [01;33mMF)[00m
				(VC ausmachen)[01;31m)[00m[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(PX[00m
				(NF in hannover) [01;33mSIMPX)[00m
				(SIMPX wenn ich mich recht entsinne) [01;33mSIMPX)[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m[01;31m)[00m
			(SIMPX
				[01;31m(MF[00m
					(C da)
					(MF die geschaftspartner auch eine filiale jetzt eroffnet)[01;31m)[00m
				(VC haben))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(SIMPX und ja ich weis nicht)
		(SIMPX es sollte auf alle falle noch in den nachsten drei monaten geschehen meiner ansicht nach)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['MVC', 'KON', 'MVC'], 'family': ['VF', 'LK', 'FKOORD', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'PRF', 'ADV', 'APPR', 'ART', 'NN', 'VVINF', 'KON', 'PIS', 'VVINF', 'APPR', 'NE', 'KOUS', 'PPER', 'PRF', 'ADJD', 'VVFIN', 'KOUS', 'ADV', 'ART', 'NN', 'ADV', 'ART', 'NN', 'ADV', 'VVPP', 'VAFIN'), 'right siblings': ['NF'], 'parent': 'SIMPX', 'auto preterminal span': (0, 28), 'span': (2, 11), 'left siblings': ['VF', 'LK'], 'label': 'FKOORD', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		[01;33m(MF[00m (MVC uns ja fur ein meeting treffen)
		(KON beziehungsweise)
		[01;31m(MVC[00m
			(MF eines) [01;33mMF)[00m
			(VC ausmachen)[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(PX[00m
				(NF in hannover) [01;33mSIMPX)[00m
				(SIMPX wenn ich mich recht entsinne) [01;33mSIMPX)[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m[01;31m)[00m
			(SIMPX
				[01;31m(MF[00m
					(C da)
					(MF die geschaftspartner auch eine filiale jetzt eroffnet)[01;31m)[00m
				(VC haben))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(SIMPX und ja ich weis nicht)
		(SIMPX es sollte auf alle falle noch in den nachsten drei monaten geschehen meiner ansicht nach)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['MF', 'VC'], 'family': ['VF', 'LK', 'MVC', 'KON', 'MVC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'PRF', 'ADV', 'APPR', 'ART', 'NN', 'VVINF', 'KON', 'PIS', 'VVINF', 'APPR', 'NE', 'KOUS', 'PPER', 'PRF', 'ADJD', 'VVFIN', 'KOUS', 'ADV', 'ART', 'NN', 'ADV', 'ART', 'NN', 'ADV', 'VVPP', 'VAFIN'), 'right siblings': ['NF'], 'parent': 'SIMPX', 'auto preterminal span': (0, 28), 'span': (9, 11), 'left siblings': ['VF', 'LK', 'MVC', 'KON'], 'label': 'MVC', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		[01;36m(MF[00m
			(MVC uns ja fur ein meeting treffen)
			(KON beziehungsweise)
			(MF eines)[01;36m)[00m
		(VC ausmachen)
		[01;31m(NF[00m
			[01;31m(PX[00m
				(NF in hannover) [01;33mSIMPX)[00m
				(SIMPX wenn ich mich recht entsinne) [01;33mSIMPX)[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m[01;31m)[00m
			(SIMPX
				[01;31m(MF[00m
					(C da)
					(MF die geschaftspartner auch eine filiale jetzt eroffnet)[01;31m)[00m
				(VC haben))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(SIMPX und ja ich weis nicht)
		(SIMPX es sollte auf alle falle noch in den nachsten drei monaten geschehen meiner ansicht nach)[01;31m)[00m)
Step:UNSET add
{'subtrees': ['MVC', 'KON', 'MF'], 'family': ['VF', 'LK', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PRF', 'ADV', 'APPR', 'ART', 'NN', 'VVINF', 'KON', 'PIS'), 'right siblings': [(VC (VXINF (VVINF ausmachen))), (NF (PX (NF (PX (APPR in) (NX (NE hannover)))) (SIMPX (C (KOUS wenn)) (MF (NX (PPER ich)) (NX (PRF mich)) (ADJX (ADJD recht))) (VC (VXFIN (VVFIN entsinne)))) (C (KOUS weil))) (SIMPX (MF (C (ADV da)) (MF (NX (NX (ART die) (NN geschaftspartner)) (ADVX (ADV auch)) (NX (ART eine) (NN filiale))) (ADVX (ADV jetzt)) (VXINF (VVPP eroffnet)))) (VC (VXFIN (VAFIN haben)))))], 'left siblings': [(VF (NX (PPER wir))), (LK (VXFIN (VMFIN wollten)))], 'auto preterminal span': (2, 10), 'span': (2, 10), 'parent': 'SIMPX', 'label': 'MF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		(MF uns ja fur ein meeting treffen beziehungsweise eines)
		(VC ausmachen)
		[01;31m(NF[00m
			[01;31m(PX[00m
				(NF in hannover) [01;33mSIMPX)[00m
				(SIMPX wenn ich mich recht entsinne) [01;33mSIMPX)[00m
				[01;31m(C[00m
					(KOUS weil)[01;31m)[00m[01;31m)[00m
			(SIMPX
				[01;31m(MF[00m
					(C da)
					(MF die geschaftspartner auch eine filiale jetzt eroffnet)[01;31m)[00m
				(VC haben))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(SIMPX und ja ich weis nicht)
		(SIMPX es sollte auf alle falle noch in den nachsten drei monaten geschehen meiner ansicht nach)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['NF', 'SIMPX', 'C'], 'family': ['PX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NE', 'KOUS', 'PPER', 'PRF', 'ADJD', 'VVFIN', 'KOUS', 'ADV', 'ART', 'NN', 'ADV', 'ART', 'NN', 'ADV', 'VVPP', 'VAFIN'), 'right siblings': ['SIMPX'], 'parent': 'NF', 'auto preterminal span': (11, 28), 'span': (11, 19), 'left siblings': [], 'label': 'PX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(SIMPX
		(VF wir)
		(LK wollten)
		(MF uns ja fur ein meeting treffen beziehungsweise eines)
		(VC ausmachen)
		[01;31m(NF[00m
			(NF in hannover) [01;33mSIMPX)[00m
			(SIMPX wenn ich mich recht entsinne) [01;33mSIMPX)[00m
			[01;31m(C[00m
				(KOUS weil)[01;31m)[00m
			(SIMPX
				[01;31m(MF[00m
					(C da)
					(MF die geschaftspartner auch eine filiale jetzt eroffnet)[01;31m)[00m
				(VC haben))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(SIMPX und ja ich weis nicht)
		(SIMPX es sollte auf alle falle noch in den nachsten drei monaten geschehen meiner ansicht nach)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['NF', 'SIMPX', 'C', 'SIMPX'], 'family': ['VF', 'LK', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'PRF', 'ADV', 'APPR', 'ART', 'NN', 'VVINF', 'KON', 'PIS', 'VVINF', 'APPR', 'NE', 'KOUS', 'PPER', 'PRF', 'ADJD', 'VVFIN', 'KOUS', 'ADV', 'ART', 'NN', 'ADV', 'ART', 'NN', 'ADV', 'VVPP', 'VAFIN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 28), 'span': (11, 28), 'left siblings': ['VF', 'LK', 'MF', 'VC'], 'label': 'NF', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			[01;36m(SIMPX[00m
				(VF wir)
				(LK wollten)
				(MF uns ja fur ein meeting treffen beziehungsweise eines)
				(VC ausmachen)
				(NF in hannover)[01;36m)[00m
			(SIMPX wenn ich mich recht entsinne)[01;36m)[00m
		[01;31m(C[00m
			(KOUS weil)[01;31m)[00m
		(SIMPX
			[01;31m(MF[00m
				(C da)
				(MF die geschaftspartner auch eine filiale jetzt eroffnet)[01;31m)[00m
			(VC haben)))
	[01;31m(SIMPX[00m
		(SIMPX und ja ich weis nicht)
		(SIMPX es sollte auf alle falle noch in den nachsten drei monaten geschehen meiner ansicht nach)[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC', 'NF'], 'family': ['SIMPX', 'SIMPX', 'C', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'PRF', 'ADV', 'APPR', 'ART', 'NN', 'VVINF', 'KON', 'PIS', 'VVINF', 'APPR', 'NE'), 'right siblings': [(SIMPX (C (KOUS wenn)) (MF (NX (PPER ich)) (NX (PRF mich)) (ADJX (ADJD recht))) (VC (VXFIN (VVFIN entsinne)))), (C (KOUS weil)), (SIMPX (MF (C (ADV da)) (MF (NX (NX (ART die) (NN geschaftspartner)) (ADVX (ADV auch)) (NX (ART eine) (NN filiale))) (ADVX (ADV jetzt)) (VXINF (VVPP eroffnet)))) (VC (VXFIN (VAFIN haben))))], 'left siblings': [], 'auto preterminal span': (0, 13), 'span': (0, 13), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(SIMPX wir wollten uns ja fur ein meeting treffen beziehungsweise eines ausmachen in hannover)
			(SIMPX wenn ich mich recht entsinne)[01;36m)[00m
		[01;31m(C[00m
			(KOUS weil)[01;31m)[00m
		(SIMPX
			[01;31m(MF[00m
				(C da)
				(MF die geschaftspartner auch eine filiale jetzt eroffnet)[01;31m)[00m
			(VC haben)))
	[01;31m(SIMPX[00m
		(SIMPX und ja ich weis nicht)
		(SIMPX es sollte auf alle falle noch in den nachsten drei monaten geschehen meiner ansicht nach)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX', 'C', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'PRF', 'ADV', 'APPR', 'ART', 'NN', 'VVINF', 'KON', 'PIS', 'VVINF', 'APPR', 'NE', 'KOUS', 'PPER', 'PRF', 'ADJD', 'VVFIN'), 'right siblings': [(C (KOUS weil)), (SIMPX (MF (C (ADV da)) (MF (NX (NX (ART die) (NN geschaftspartner)) (ADVX (ADV auch)) (NX (ART eine) (NN filiale))) (ADVX (ADV jetzt)) (VXINF (VVPP eroffnet)))) (VC (VXFIN (VAFIN haben))))], 'left siblings': [], 'auto preterminal span': (0, 18), 'span': (0, 18), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX wir wollten uns ja fur ein meeting treffen beziehungsweise eines ausmachen in hannover wenn ich mich recht entsinne)
		[01;31m(C[00m
			(KOUS weil)[01;31m)[00m
		(SIMPX
			[01;31m(MF[00m
				(C da)
				(MF die geschaftspartner auch eine filiale jetzt eroffnet)[01;31m)[00m
			(VC haben)))
	[01;31m(SIMPX[00m
		(SIMPX und ja ich weis nicht)
		(SIMPX es sollte auf alle falle noch in den nachsten drei monaten geschehen meiner ansicht nach)[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['KOUS'], 'family': ['SIMPX', 'C', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('PPER', 'VMFIN', 'PRF', 'ADV', 'APPR', 'ART', 'NN', 'VVINF', 'KON', 'PIS', 'VVINF', 'APPR', 'NE', 'KOUS', 'PPER', 'PRF', 'ADJD', 'VVFIN', 'KOUS', 'ADV', 'ART', 'NN', 'ADV', 'ART', 'NN', 'ADV', 'VVPP', 'VAFIN'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (0, 28), 'span': (18, 19), 'left siblings': ['SIMPX'], 'label': 'C', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(SIMPX
		(SIMPX wir wollten uns ja fur ein meeting treffen beziehungsweise eines ausmachen in hannover wenn ich mich recht entsinne)
		(KOUS weil)
		(SIMPX
			[01;31m(MF[00m
				(C da)
				(MF die geschaftspartner auch eine filiale jetzt eroffnet)[01;31m)[00m
			(VC haben)))
	[01;31m(SIMPX[00m
		(SIMPX und ja ich weis nicht)
		(SIMPX es sollte auf alle falle noch in den nachsten drei monaten geschehen meiner ansicht nach)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['C', 'MF'], 'family': ['MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NN', 'ADV', 'ART', 'NN', 'ADV', 'VVPP', 'VAFIN'), 'right siblings': ['VC'], 'parent': 'SIMPX', 'auto preterminal span': (19, 28), 'span': (19, 27), 'left siblings': [], 'label': 'MF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX wir wollten uns ja fur ein meeting treffen beziehungsweise eines ausmachen in hannover wenn ich mich recht entsinne weil da die geschaftspartner auch eine filiale jetzt eroffnet haben)
	[01;31m(SIMPX[00m
		(SIMPX und ja ich weis nicht)
		(SIMPX es sollte auf alle falle noch in den nachsten drei monaten geschehen meiner ansicht nach)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'PRF', 'ADV', 'APPR', 'ART', 'NN', 'VVINF', 'KON', 'PIS', 'VVINF', 'APPR', 'NE', 'KOUS', 'PPER', 'PRF', 'ADJD', 'VVFIN', 'KOUS', 'ADV', 'ART', 'NN', 'ADV', 'ART', 'NN', 'ADV', 'VVPP', 'VAFIN', 'KON', 'PTKANT', 'PPER', 'VVFIN', 'PTKNEG', 'PPER', 'VMFIN', 'APPR', 'PIDAT', 'NN', 'ADV', 'APPR', 'ART', 'ADJA', 'CARD', 'NN', 'VVINF', 'PPOSAT', 'NN', 'APPO'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 48), 'span': (28, 48), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP wir wollten uns ja fur ein meeting treffen beziehungsweise eines ausmachen in hannover wenn ich mich recht entsinne weil da die geschaftspartner auch eine filiale jetzt eroffnet haben und ja ich weis nicht es sollte auf alle falle noch in den nachsten drei monaten geschehen meiner ansicht nach)

Sentence 510:
0 Initial errors
0 on fringe, 0 iterations

Sentence 511:
0 Initial errors
0 on fringe, 0 iterations

Sentence 512:
0 Initial errors
0 on fringe, 0 iterations

Sentence 513:
0 Initial errors
0 on fringe, 0 iterations

Sentence 514:
0 Initial errors
0 on fringe, 0 iterations

Sentence 515:
0 Initial errors
0 on fringe, 0 iterations

Sentence 516:
3 Initial errors
0 on fringe, 2 iterations
2 Error:Clause Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;36m(SIMPX[00m
		[01;36m(LV[00m
			(SIMPX
				(C wenn)
				(MF ihnen oktober nicht so gut)
				(VC past))[01;36m)[00m
		[01;31m(SIMPX[00m
			(VF da)
			(LK habe)
			(MF ich auch urlaub)
			(NF ende oktober)[01;31m)[00m[01;36m)[00m
	(DM also))
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'VF', 'LK', 'MF', 'NF'], 'mover info': [('SIMPX', (1, 8))], 'old_family': ['DM', 'SIMPX', 'SIMPX', 'DM'], 'start left siblings': ['DM'], 'auto preterminals': ('PTKANT', 'KOUS', 'PPER', 'NN', 'PTKNEG', 'ADV', 'ADJD', 'VVFIN', 'ADV', 'VAFIN', 'PPER', 'ADV', 'NN', 'NN', 'NN', 'ADV'), 'start right siblings': ['SIMPX', 'DM'], 'end left siblings': [], 'auto preterminal span': (0, 16), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': ['VF', 'LK', 'MF', 'NF'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		[01;36m(LV[00m
			(SIMPX
				(C wenn)
				(MF ihnen oktober nicht so gut)
				(VC past))[01;36m)[00m
		(VF da)
		(LK habe)
		(MF ich auch urlaub)
		(NF ende oktober))
	(DM also))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['LV', 'VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'NN', 'PTKNEG', 'ADV', 'ADJD', 'VVFIN'), 'right siblings': [(VF (ADVX (ADV da))), (LK (VXFIN (VAFIN habe))), (MF (NX (PPER ich)) (ADVX (ADV auch)) (NX (NN urlaub))), (NF (NX (NX (NN ende)) (NX (NN oktober))))], 'left siblings': [], 'auto preterminal span': (1, 8), 'span': (1, 8), 'parent': 'SIMPX', 'label': 'LV', 'classified_type': 'Unary', 'type': 'add'}
(TOP ja wenn ihnen oktober nicht so gut past da habe ich auch urlaub ende oktober also)

Sentence 517:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK kommt)
		(MF
			[01;36m(NX[00m
				(ADVX erst)
				[01;31m(NX[00m
					(ART der)
					(NN november)[01;31m)[00m[01;36m)[00m
			(PX in frage))))
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['ADVX', 'ART', 'NN'], 'mover info': [('ADVX', (1, 2))], 'old_family': ['ADVX', 'NX', 'PX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'ART', 'NN', 'APPR', 'NN'), 'start right siblings': ['NX', 'PX'], 'end left siblings': [], 'auto preterminal span': (1, 6), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ART', 'NN'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP kommt erst der november in frage)

Sentence 518:
0 Initial errors
0 on fringe, 0 iterations

Sentence 519:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Different label
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(NX[00m
	(TOP
		[01;31m(SIMPX[00m
			(C wenn)
			(MF dann so die zweite woche)[01;31m)[00m)[01;36m)[00m
Step:Different label
{'family': ['NX'], 'auto preterminal span': (0, 6), 'span': (0, 6), 'subtrees': ['C', 'MF'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('KOUS', 'ADV', 'ADV', 'ART', 'ADJA', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('SIMPX', 'NX')}
(TOP wenn dann so die zweite woche)

Sentence 520:
4 Initial errors
0 on fringe, 2 iterations
2 Error:Different label
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK glaube)
		(NF
			(SIMPX
				(VF die zweite woche)
				(LK ware)
				[01;36m(ADJX[00m
					(MF
						[01;36m(ADVX[00m [01;31m(ADJX[00m
							(ADVX ganz)
							(ADJD gut)[01;31m)[00m[01;36m)[00m
						[01;31m(ADJX[00m
							(ADJD machbar)[01;31m)[00m)[01;36m)[00m))))
Step:Different label
{'family': ['ADVX', 'ADJX'], 'auto preterminal span': (6, 8), 'span': (6, 8), 'subtrees': ['ADVX', 'ADJD'], 'parent': 'MF', 'over_word': False, 'auto preterminals': ('ADV', 'ADJD'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('ADJX', 'ADVX')}
(TOP
	(SIMPX
		(VF ich)
		(LK glaube)
		(NF
			(SIMPX
				(VF die zweite woche)
				(LK ware)
				[01;36m(ADJX[00m
					(MF
						(ADVX ganz gut)
						[01;31m(ADJX[00m
							(ADJD machbar)[01;31m)[00m)[01;36m)[00m))))
Step:Modifier Attachment
{'new_parent': 'ADJX', 'new_family': ['ADVX', 'ADJD'], 'mover info': [('ADVX', (6, 8))], 'old_family': ['ADVX', 'ADJX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'ADJD', 'ADJD'), 'start right siblings': ['ADJX'], 'end left siblings': [], 'auto preterminal span': (6, 9), 'movers': ['ADVX'], 'old_parent': 'MF', 'end right siblings': ['ADJD'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP ich glaube die zweite woche ware ganz gut machbar)

Sentence 521:
3 Initial errors
0 on fringe, 2 iterations
2 Error:UNSET move
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			(VF wie)
			(LK sieht)
			(MF es da)[01;31m)[00m
		[01;36m(VC[00m
			(APPR bei)[01;36m)[00m)[01;36m)[00m
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'APPR'], 'mover info': [('APPR', (4, 5))], 'old_family': ['SIMPX', 'APPR'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('PWAV', 'VVFIN', 'PPER', 'ADV', 'APPR'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 5), 'movers': ['APPR'], 'old_parent': 'TOP', 'POS confusion': ('APPR', 'APPR'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(VF wie)
		(LK sieht)
		(MF es da)
		[01;36m(VC[00m
			(APPR bei)[01;36m)[00m))
Step:Single Word Phrase
{'subtrees': ['APPR'], 'family': ['VF', 'LK', 'MF', 'VC'], 'over_word': True, 'over words': True, 'auto preterminals': ('APPR',), 'right siblings': [], 'left siblings': [(VF (ADJX (PWAV wie))), (LK (VXFIN (VVFIN sieht))), (MF (NX (PPER es)) (ADVX (ADV da)))], 'auto preterminal span': (4, 5), 'span': (4, 5), 'parent': 'SIMPX', 'label': 'VC', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP wie sieht es da bei)

Sentence 522:
0 Initial errors
0 on fringe, 0 iterations

Sentence 523:
0 Initial errors
0 on fringe, 0 iterations

Sentence 524:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(PX
		[01;36m(ADVX[00m
			(ADVX blos)
			[01;31m(ADVX[00m
				(PTKNEG nicht)[01;31m)[00m[01;36m)[00m
		(PX am montag)))
Step:Modifier Attachment
{'new_parent': 'ADVX', 'new_family': ['ADVX', 'PTKNEG'], 'mover info': [('ADVX', (0, 1))], 'old_family': ['ADVX', 'ADVX', 'PX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'PTKNEG', 'APPRART', 'NN'), 'start right siblings': ['ADVX', 'PX'], 'end left siblings': [], 'auto preterminal span': (0, 4), 'movers': ['ADVX'], 'old_parent': 'PX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['PTKNEG'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP blos nicht am montag)

Sentence 525:
0 Initial errors
0 on fringe, 0 iterations

Sentence 526:
0 Initial errors
0 on fringe, 0 iterations

Sentence 527:
0 Initial errors
0 on fringe, 0 iterations

Sentence 528:
0 Initial errors
0 on fringe, 0 iterations

Sentence 529:
0 Initial errors
0 on fringe, 0 iterations

Sentence 530:
0 Initial errors
0 on fringe, 0 iterations

Sentence 531:
0 Initial errors
0 on fringe, 0 iterations

Sentence 532:
0 Initial errors
0 on fringe, 0 iterations

Sentence 533:
0 Initial errors
0 on fringe, 0 iterations

Sentence 534:
0 Initial errors
0 on fringe, 0 iterations

Sentence 535:
0 Initial errors
0 on fringe, 0 iterations

Sentence 536:
0 Initial errors
0 on fringe, 0 iterations

Sentence 537:
1 Initial errors
0 on fringe, 1 iterations
1 Error:NP Internal Structure
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX wir konnten naturlich mit dem auto fahren)
	(SIMPX
		(KOORD aber)
		(VF ich)
		(LK wurde)
		(MF
			(ADVX hier)
			[01;31m(NX[00m
				(NX die bequemlichkeit)
				(NX eines zuges)[01;31m)[00m)
		(VC vorziehen)))
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NN', 'ART', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (11, 16), 'span': (12, 16), 'left siblings': ['ADVX'], 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'remove'}
(TOP also wir konnten naturlich mit dem auto fahren aber ich wurde hier die bequemlichkeit eines zuges vorziehen)

Sentence 538:
0 Initial errors
0 on fringe, 0 iterations

Sentence 539:
6 Initial errors
0 on fringe, 5 iterations
2 Error:PP Attachment
1 Error:Clause Attachment
1 Error:Unary
1 Error:Modifier Attachment
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX
			(VF ab munchen)
			(LK dauert)
			(MF
				(NX es)
				[01;31m(PX[00m
					(ADVX nur)
					(ADVX etwas)
					(APPR uber)
					(NX vier stunden)[01;31m)[00m))
		(SIMPX
			[01;31m(KOORD[00m
				(KON und)[01;31m)[00m
			(VF wir)
			(LK konnten)
			(MF ab halb sechs schon)
			(VC losfahren)
			[01;36m(SIMPX[00m
				(NF
					[01;31m(SIMPX[00m
						(C so das)
						(MF wir mittags die geschaftspartner)
						(VC treffen)[01;31m)[00m
					[01;36m(NF[00m
						(PX
							(KON oder)
							(PX am fruhen nachmittag))[01;36m)[00m)[01;36m)[00m))[01;36m)[00m
Step:PP Attachment
{'new_parent': 'SIMPX', 'new_family': ['C', 'MF', 'VC', 'PX'], 'mover info': [('PX', (24, 28))], 'old_family': ['SIMPX', 'PX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('KOUS', 'KOUS', 'PPER', 'ADV', 'ART', 'NN', 'VVFIN', 'KON', 'APPRART', 'ADJA', 'NN'), 'start right siblings': [], 'end left siblings': ['C', 'MF', 'VC'], 'auto preterminal span': (17, 28), 'movers': ['PX'], 'old_parent': 'NF', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX
			(VF ab munchen)
			(LK dauert)
			(MF
				(NX es)
				[01;31m(PX[00m
					(ADVX nur)
					(ADVX etwas)
					(APPR uber)
					(NX vier stunden)[01;31m)[00m))
		(SIMPX
			[01;31m(KOORD[00m
				(KON und)[01;31m)[00m
			(VF wir)
			(LK konnten)
			(MF ab halb sechs schon)
			(VC losfahren)
			(NF
				(SIMPX
					(C so das)
					(MF wir mittags die geschaftspartner)
					(VC treffen)
					[01;36m(NF[00m
						(PX
							(KON oder)
							(PX am fruhen nachmittag))[01;36m)[00m))))[01;36m)[00m
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NE', 'VVFIN', 'PPER', 'ADV', 'ADV', 'APPR', 'CARD', 'NN', 'KON', 'PPER', 'VMFIN', 'APPR', 'ADJD', 'CARD', 'ADV', 'VVINF', 'KOUS', 'KOUS', 'PPER', 'ADV', 'ART', 'NN', 'VVFIN', 'KON', 'APPRART', 'ADJA', 'NN'), 'right siblings': [], 'left siblings': [], 'auto preterminal span': (0, 28), 'span': (0, 28), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(VF ab munchen)
			(LK dauert)
			(MF
				(NX es)
				[01;31m(PX[00m
					(ADVX nur)
					(ADVX etwas)
					(APPR uber)
					(NX vier stunden)[01;31m)[00m))
		(SIMPX
			[01;31m(KOORD[00m
				(KON und)[01;31m)[00m
			(VF wir)
			(LK konnten)
			(MF ab halb sechs schon)
			(VC losfahren)
			(NF
				(SIMPX
					(C so das)
					(MF wir mittags die geschaftspartner)
					(VC treffen)
					[01;36m(NF[00m
						(PX
							(KON oder)
							(PX am fruhen nachmittag))[01;36m)[00m)))))
Step:Unary
{'subtrees': ['PX'], 'family': ['C', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'APPRART', 'ADJA', 'NN'), 'right siblings': [], 'left siblings': [(C (KOUS so) (KOUS das)), (MF (NX (PPER wir)) (ADVX (ADV mittags)) (NX (ART die) (NN geschaftspartner))), (VC (VXFIN (VVFIN treffen)))], 'auto preterminal span': (24, 28), 'span': (24, 28), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(VF ab munchen)
			(LK dauert)
			(MF
				(NX es)
				[01;31m(PX[00m
					(ADVX nur)
					(ADVX etwas)
					(APPR uber)
					(NX vier stunden)[01;31m)[00m))
		(SIMPX
			[01;31m(KOORD[00m
				(KON und)[01;31m)[00m
			(VF wir)
			(LK konnten)
			(MF ab halb sechs schon)
			(VC losfahren)
			(NF so das wir mittags die geschaftspartner treffen oder am fruhen nachmittag))))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX', 'APPR', 'NX'], 'family': ['NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'ADV', 'APPR', 'CARD', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (3, 9), 'span': (4, 9), 'left siblings': ['NX'], 'label': 'PX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX
		(SIMPX ab munchen dauert es nur etwas uber vier stunden)
		(SIMPX
			[01;31m(KOORD[00m
				(KON und)[01;31m)[00m
			(VF wir)
			(LK konnten)
			(MF ab halb sechs schon)
			(VC losfahren)
			(NF so das wir mittags die geschaftspartner treffen oder am fruhen nachmittag))))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['KOORD', 'VF', 'LK', 'MF', 'VC', 'NF'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'PPER', 'VMFIN', 'APPR', 'ADJD', 'CARD', 'ADV', 'VVINF', 'KOUS', 'KOUS', 'PPER', 'ADV', 'ART', 'NN', 'VVFIN', 'KON', 'APPRART', 'ADJA', 'NN'), 'right siblings': ['VF', 'LK', 'MF', 'VC', 'NF'], 'parent': 'SIMPX', 'auto preterminal span': (9, 28), 'span': (9, 10), 'left siblings': [], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP ab munchen dauert es nur etwas uber vier stunden und wir konnten ab halb sechs schon losfahren so das wir mittags die geschaftspartner treffen oder am fruhen nachmittag)

Sentence 540:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(APPR ab)
	(SIMPX
		[01;31m(VF[00m
			(PX
				(APPR ab)
				(NX halb sechs))[01;31m)[00m
		(LK ist)
		(MF in ordnung)))
Step:Unary
{'subtrees': ['PX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ADJD', 'CARD', 'VAFIN', 'APPR', 'NN'), 'right siblings': ['LK', 'MF'], 'parent': 'SIMPX', 'auto preterminal span': (1, 7), 'span': (1, 4), 'left siblings': [], 'label': 'VF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ab ab halb sechs ist in ordnung)

Sentence 541:
0 Initial errors
0 on fringe, 0 iterations

Sentence 542:
0 Initial errors
0 on fringe, 0 iterations

Sentence 543:
5 Initial errors
0 on fringe, 3 iterations
3 Error:UNSET move
1 Error:UNSET add
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(ADJX
		[01;31m(NX[00m
			[01;36m(NX[00m [01;31m(ADVX[00m
				(ADV fruhestens)[01;31m)[00m[01;36m)[00m
			[01;36m(NX[00m
				(ART [01;33m(ADJX[00m eine)
				(NN stunde)[01;36m)[00m[01;31m)[00m
		(ADJD spater))) [01;33mADJX)[00m
Step:UNSET move
{'new_parent': 'ADJX', 'new_family': ['NX', 'ART', 'NN', 'ADJD'], 'mover info': [('ART', (1, 2)), ('NN', (2, 3))], 'old_family': ['ADVX', 'ART', 'NN'], 'start left siblings': ['ADVX'], 'auto preterminals': ('ADV', 'ART', 'NN', 'ADJD'), 'start right siblings': [], 'end left siblings': ['NX'], 'auto preterminal span': (0, 4), 'adding node already present': False, 'movers': ['ART', 'NN'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': ['ADJD'], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'ADJX'}
(TOP
	(ADJX
		(NX
			[01;31m(ADVX[00m
				(ADV fruhestens)[01;31m)[00m)
		(ADJX
			[01;36m(NX[00m
				(ART eine)
				(NN stunde)[01;36m)[00m
			(ADJD spater))))
Step:UNSET add
{'subtrees': ['ART', 'NN'], 'family': ['NX', 'ADJD'], 'over_word': False, 'over words': True, 'auto preterminals': ('ART', 'NN'), 'right siblings': [(ADJD spater)], 'left siblings': [], 'auto preterminal span': (1, 3), 'span': (1, 3), 'parent': 'ADJX', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(ADJX
		(NX
			[01;31m(ADVX[00m
				(ADV fruhestens)[01;31m)[00m)
		(ADJX eine stunde spater)))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV',), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (0, 1), 'span': (0, 1), 'left siblings': [], 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP fruhestens eine stunde spater)

Sentence 544:
0 Initial errors
0 on fringe, 0 iterations

Sentence 545:
0 Initial errors
0 on fringe, 0 iterations

Sentence 546:
0 Initial errors
0 on fringe, 0 iterations

Sentence 547:
0 Initial errors
0 on fringe, 0 iterations

Sentence 548:
0 Initial errors
0 on fringe, 0 iterations

Sentence 549:
6 Initial errors
0 on fringe, 2 iterations
4 Error:VP Attachment
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		(VF ich)
		(LK weis)
		(MF nicht)
		(NF
			(SIMPX
				(C ob)
				[01;31m(MF[00m [01;33m(MF[00m
					(NX sie)
					(NX sich)
					(PX um die unterkunft)
					(ADVX schon)[01;31m)[00m
				[01;31m(VC[00m
					[01;36m(NX[00m [01;31m(VXINF[00m
						(VVPP gekummert)[01;31m)[00m [01;33mMF)[00m[01;36m)[00m
					[01;36m(VC[00m
						(VXFIN
							(VAFIN haben))[01;36m)[00m[01;31m)[00m))))
Step:VP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'PX', 'ADVX', 'VXINF'], 'mover info': [('VXINF', (11, 12))], 'old_family': ['VXINF', 'VXFIN'], 'start left siblings': [], 'auto preterminals': ('KOUS', 'PPER', 'PRF', 'APPR', 'ART', 'NN', 'ADV', 'VVPP', 'VAFIN'), 'start right siblings': ['VXFIN'], 'end left siblings': ['NX', 'NX', 'PX', 'ADVX'], 'auto preterminal span': (4, 13), 'movers': ['VXINF'], 'old_parent': 'VC', 'POS confusion': ('VVPP', 'VVPP'), 'end right siblings': [], 'classified_type': 'VP Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		(VF ich)
		(LK weis)
		(MF nicht)
		(NF
			(SIMPX
				(C ob)
				(MF
					(NX sie)
					(NX sich)
					(PX um die unterkunft)
					(ADVX schon)
					[01;36m(NX[00m [01;31m(VXINF[00m
						(VVPP gekummert)[01;31m)[00m[01;36m)[00m)
				(VC haben)))))
Step:Single Word Phrase
{'family': ['NX', 'NX', 'PX', 'ADVX', 'NX'], 'auto preterminal span': (11, 12), 'span': (11, 12), 'subtrees': ['VVPP'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('VVPP',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VXINF', 'NX')}
(TOP ja ich weis nicht ob sie sich um die unterkunft schon gekummert haben)

Sentence 550:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		[01;31m(VF[00m
			(SIMPX
				(C wenn)
				(MF nicht))[01;31m)[00m
		(LK hatte)
		(MF ich hier drei vorschlage)))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PTKNEG', 'VAFIN', 'PPER', 'ADV', 'CARD', 'NN'), 'right siblings': ['LK', 'MF'], 'parent': 'SIMPX', 'auto preterminal span': (0, 7), 'span': (0, 2), 'left siblings': [], 'label': 'VF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP wenn nicht hatte ich hier drei vorschlage)

Sentence 551:
9 Initial errors
0 on fringe, 7 iterations
2 Error:Co-ordination
2 Error:NP Attachment
1 Error:NP Internal Structure
1 Error:UNSET remove
1 Error:PP Attachment
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		(VF es)
		(LK gabe)
		[01;31m(MF[00m
			(ADVX da)
			(NX
				[01;36m(NX[00m
					(NX das hotel zentral)
					(NX das hotel nohre)[01;36m)[00m
				(KON und)
				(NX das hotel prinzenhof))
			[01;33m(PX[00m (PX in hannover)[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					(NX beides) [01;33mPX)[00m
					(NX sehr gute unterkunfte)[01;31m)[00m
				(KON und)
				[01;36m(VF[00m
					(ADJX
						(ADVX auch)
						(ADJX ziemlich zentral gelegen))[01;36m)[00m[01;31m)[00m[01;31m)[00m
		(LK glaube)
		(MF ich)[01;31m)[00m)
Step:Co-ordination
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'NX', 'KON'], 'mover info': [('NX', (15, 19)), ('KON', (19, 20))], 'old_family': ['NX', 'KON', 'ADJX'], 'start left siblings': [], 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ART', 'NN', 'NE', 'ART', 'NN', 'NE', 'KON', 'ART', 'NN', 'NE', 'APPR', 'NE', 'PIS', 'ADV', 'ADJA', 'NN', 'KON', 'ADV', 'ADV', 'ADV', 'ADJD', 'VVFIN', 'PPER'), 'start right siblings': ['ADJX'], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 26), 'movers': ['NX', 'KON'], 'old_parent': 'NX', 'end right siblings': [], 'classified_type': 'Co-ordination', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		(VF es)
		(LK gabe)
		[01;31m(MF[00m
			(ADVX da)
			(NX
				[01;36m(NX[00m
					(NX das hotel zentral)
					(NX das hotel nohre)[01;36m)[00m
				(KON und)
				(NX das hotel prinzenhof))
			[01;33m(PX[00m (PX in hannover)[01;31m)[00m
		[01;31m(NX[00m
			(NX beides) [01;33mPX)[00m
			(NX sehr gute unterkunfte)[01;31m)[00m
		(KON und)[01;31m)[00m
	[01;31m(SIMPX[00m
		(VF
			[01;31m(NX[00m
				(ADJX
					(ADVX auch)
					(ADJX ziemlich zentral gelegen))[01;31m)[00m)
		(LK glaube)
		(MF ich)[01;31m)[00m)
Step:NP Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'NX', 'PX', 'NX'], 'mover info': [('NX', (15, 16))], 'old_family': ['NX', 'NX'], 'start left siblings': [], 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ART', 'NN', 'NE', 'ART', 'NN', 'NE', 'KON', 'ART', 'NN', 'NE', 'APPR', 'NE', 'PIS', 'ADV', 'ADJA', 'NN', 'KON'), 'start right siblings': ['NX'], 'end left siblings': ['ADVX', 'NX', 'PX'], 'auto preterminal span': (0, 20), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'NX', 'POS confusion': ('PIS', 'PIS'), 'added and moved': True, 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP
	[01;31m(SIMPX[00m
		(VF es)
		(LK gabe)
		[01;31m(MF[00m
			(ADVX da)
			(NX
				[01;36m(NX[00m
					(NX das hotel zentral)
					(NX das hotel nohre)[01;36m)[00m
				(KON und)
				(NX das hotel prinzenhof))
			(PX in hannover beides)[01;31m)[00m
		(NX sehr gute unterkunfte)
		(KON und)[01;31m)[00m
	[01;31m(SIMPX[00m
		(VF
			[01;31m(NX[00m
				(ADJX
					(ADVX auch)
					(ADJX ziemlich zentral gelegen))[01;31m)[00m)
		(LK glaube)
		(MF ich)[01;31m)[00m)
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['NX', 'KON', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'NE', 'ART', 'NN', 'NE'), 'right siblings': [(KON und), (NX (ART das) (NX (NX (NN hotel)) (NX (NE prinzenhof))))], 'left siblings': [], 'auto preterminal span': (3, 9), 'span': (3, 9), 'parent': 'NX', 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(VF es)
		(LK gabe)
		[01;31m(MF[00m
			(ADVX da)
			(NX das hotel zentral das hotel nohre und das hotel prinzenhof)
			(PX in hannover beides)[01;31m)[00m
		(NX sehr gute unterkunfte)
		(KON und)[01;31m)[00m
	[01;31m(SIMPX[00m
		(VF
			[01;31m(NX[00m
				(ADJX
					(ADVX auch)
					(ADJX ziemlich zentral gelegen))[01;31m)[00m)
		(LK glaube)
		(MF ich)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'NX', 'KON'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ART', 'NN', 'NE', 'ART', 'NN', 'NE', 'KON', 'ART', 'NN', 'NE', 'APPR', 'NE', 'PIS', 'ADV', 'ADJA', 'NN', 'KON', 'ADV', 'ADV', 'ADV', 'ADJD', 'VVFIN', 'PPER'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 26), 'span': (0, 20), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(VF es)
	(LK gabe)
	[01;31m(MF[00m
		(ADVX da)
		(NX das hotel zentral das hotel nohre und das hotel prinzenhof)
		(PX in hannover beides)[01;31m)[00m
	(NX sehr gute unterkunfte)
	(KON und)
	[01;31m(SIMPX[00m
		(VF
			[01;31m(NX[00m
				(ADJX
					(ADVX auch)
					(ADJX ziemlich zentral gelegen))[01;31m)[00m)
		(LK glaube)
		(MF ich)[01;31m)[00m)
Step:PP Attachment
{'subtrees': ['ADVX', 'NX', 'PX'], 'family': ['VF', 'LK', 'MF', 'NX', 'KON', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ART', 'NN', 'NE', 'ART', 'NN', 'NE', 'KON', 'ART', 'NN', 'NE', 'APPR', 'NE', 'PIS', 'ADV', 'ADJA', 'NN', 'KON', 'ADV', 'ADV', 'ADV', 'ADJD', 'VVFIN', 'PPER'), 'right siblings': ['NX', 'KON', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 26), 'span': (2, 16), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(VF es)
	(LK gabe)
	(ADVX da)
	(NX das hotel zentral das hotel nohre und das hotel prinzenhof)
	(PX in hannover beides)
	(NX sehr gute unterkunfte)
	(KON und)
	[01;31m(SIMPX[00m
		(VF
			[01;31m(NX[00m
				(ADJX
					(ADVX auch)
					(ADJX ziemlich zentral gelegen))[01;31m)[00m)
		(LK glaube)
		(MF ich)[01;31m)[00m)
Step:Unary
{'subtrees': ['ADJX'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'ADV', 'ADJD'), 'right siblings': [], 'parent': 'VF', 'auto preterminal span': (20, 24), 'span': (20, 24), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(VF es)
	(LK gabe)
	(ADVX da)
	(NX das hotel zentral das hotel nohre und das hotel prinzenhof)
	(PX in hannover beides)
	(NX sehr gute unterkunfte)
	(KON und)
	[01;31m(SIMPX[00m
		(VF auch ziemlich zentral gelegen)
		(LK glaube)
		(MF ich)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['VF', 'LK', 'ADVX', 'NX', 'PX', 'NX', 'KON', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ART', 'NN', 'NE', 'ART', 'NN', 'NE', 'KON', 'ART', 'NN', 'NE', 'APPR', 'NE', 'PIS', 'ADV', 'ADJA', 'NN', 'KON', 'ADV', 'ADV', 'ADV', 'ADJD', 'VVFIN', 'PPER'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 26), 'span': (20, 26), 'left siblings': ['VF', 'LK', 'ADVX', 'NX', 'PX', 'NX', 'KON'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP es gabe da das hotel zentral das hotel nohre und das hotel prinzenhof in hannover beides sehr gute unterkunfte und auch ziemlich zentral gelegen glaube ich)

Sentence 552:
0 Initial errors
0 on fringe, 0 iterations

Sentence 553:
4 Initial errors
0 on fringe, 2 iterations
3 Error:NP Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			(VF das eine)
			(LK liegt)
			[01;33m(PX (MF[00m (MF etwas uber zweihundert mark)[01;31m)[00m
		(NX die anderen so um hundert vierzig mark hundert zwanzig mark)) [01;33mMF) PX)[00m[01;36m)[00m
Step:NP Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'NX'], 'mover info': [('NX', (7, 17))], 'old_family': ['SIMPX', 'NX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('ART', 'PIS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'NN', 'ART', 'PIS', 'ADV', 'APPR', 'CARD', 'CARD', 'NN', 'CARD', 'CARD', 'NN'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 17), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'TOP', 'added and moved': True, 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP
	(SIMPX
		(VF das eine)
		(LK liegt)
		[01;36m(PX[00m
			(MF
				(MF etwas uber zweihundert mark)
				(NX die anderen so um hundert vierzig mark hundert zwanzig mark))[01;36m)[00m))
Step:Unary
{'subtrees': ['MF'], 'family': ['VF', 'LK', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'APPR', 'CARD', 'NN', 'ART', 'PIS', 'ADV', 'APPR', 'CARD', 'CARD', 'NN', 'CARD', 'CARD', 'NN'), 'right siblings': [], 'left siblings': [(VF (NX (ART das) (PIS eine))), (LK (VXFIN (VVFIN liegt)))], 'auto preterminal span': (3, 17), 'span': (3, 17), 'parent': 'SIMPX', 'label': 'PX', 'classified_type': 'Unary', 'type': 'add'}
(TOP das eine liegt etwas uber zweihundert mark die anderen so um hundert vierzig mark hundert zwanzig mark)

Sentence 554:
0 Initial errors
0 on fringe, 0 iterations

Sentence 555:
0 Initial errors
0 on fringe, 0 iterations

Sentence 556:
0 Initial errors
0 on fringe, 0 iterations

Sentence 557:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX das teuerste mus es vielleicht nicht sein)
	[01;36m(ADVX[00m [01;31m(DM[00m
		(KON aber)[01;31m)[00m[01;36m)[00m)
Step:Single Word Phrase
{'family': ['SIMPX', 'ADVX'], 'auto preterminal span': (7, 8), 'span': (7, 8), 'subtrees': ['KON'], 'parent': 'TOP', 'over_word': True, 'auto preterminals': ('KON',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('DM', 'ADVX')}
(TOP das teuerste mus es vielleicht nicht sein aber)

Sentence 558:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK nehmen)
		(MF
			[01;36m(MF[00m
				(NX wir)
				(ADVX dann)
				(ADVX doch)
				(NX das in der mitte)[01;36m)[00m
			(ADVX vielleicht)))
	(SIMPX das ware das zentralhotel))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX', 'ADVX', 'NX'], 'family': ['MF', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'ADV', 'PDS', 'APPR', 'ART', 'NN'), 'right siblings': [(ADVX (ADV vielleicht))], 'left siblings': [], 'auto preterminal span': (1, 8), 'span': (1, 8), 'parent': 'MF', 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP nehmen wir dann doch das in der mitte vielleicht das ware das zentralhotel)

Sentence 559:
0 Initial errors
0 on fringe, 0 iterations

Sentence 560:
0 Initial errors
0 on fringe, 0 iterations

Sentence 561:
0 Initial errors
0 on fringe, 0 iterations

Sentence 562:
0 Initial errors
0 on fringe, 0 iterations

Sentence 563:
0 Initial errors
0 on fringe, 0 iterations

Sentence 564:
0 Initial errors
0 on fringe, 0 iterations

Sentence 565:
0 Initial errors
0 on fringe, 0 iterations

Sentence 566:
0 Initial errors
0 on fringe, 0 iterations

Sentence 567:
0 Initial errors
0 on fringe, 0 iterations

Sentence 568:
5 Initial errors
0 on fringe, 4 iterations
2 Error:Clause Attachment
1 Error:Unary
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;36m(LV[00m
			(SIMPX
				(KOORD und)
				[01;36m(LV[00m
					[01;36m(SIMPX[00m
						(C ob)
						(MF wir am abend noch was)
						(VC unternehmen)[01;36m)[00m[01;36m)[00m)[01;36m)[00m
		[01;31m(SIMPX[00m
			(VF das)
			(LK konnen)
			(MF wir ja dort)
			(VC absprechen)[01;31m)[00m)[01;36m)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'VF', 'LK', 'MF', 'VC'], 'mover info': [('SIMPX', (0, 8))], 'old_family': ['SIMPX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('KON', 'KOUS', 'PPER', 'APPRART', 'NN', 'ADV', 'PIS', 'VVFIN', 'PDS', 'VMFIN', 'PPER', 'ADV', 'ADV', 'VVINF'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 14), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': ['VF', 'LK', 'MF', 'VC'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX
		[01;36m(LV[00m
			(SIMPX
				(KOORD und)
				[01;36m(LV[00m
					[01;36m(SIMPX[00m
						(C ob)
						(MF wir am abend noch was)
						(VC unternehmen)[01;36m)[00m[01;36m)[00m)[01;36m)[00m
		(VF das)
		(LK konnen)
		(MF wir ja dort)
		(VC absprechen)))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['LV', 'VF', 'LK', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'KOUS', 'PPER', 'APPRART', 'NN', 'ADV', 'PIS', 'VVFIN'), 'right siblings': [(VF (NX (PDS das))), (LK (VXFIN (VMFIN konnen))), (MF (NX (PPER wir)) (ADVX (ADV ja)) (ADVX (ADV dort))), (VC (VXINF (VVINF absprechen)))], 'left siblings': [], 'auto preterminal span': (0, 8), 'span': (0, 8), 'parent': 'SIMPX', 'label': 'LV', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(LV
			(SIMPX
				(KOORD und)
				[01;36m(LV[00m
					[01;36m(SIMPX[00m
						(C ob)
						(MF wir am abend noch was)
						(VC unternehmen)[01;36m)[00m[01;36m)[00m))
		(VF das)
		(LK konnen)
		(MF wir ja dort)
		(VC absprechen)))
Step:UNSET add
{'subtrees': ['C', 'MF', 'VC'], 'family': ['KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'APPRART', 'NN', 'ADV', 'PIS', 'VVFIN'), 'right siblings': [], 'left siblings': [(KOORD (KON und))], 'auto preterminal span': (1, 8), 'span': (1, 8), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(LV
			(SIMPX
				(KOORD und)
				[01;36m(LV[00m
					(SIMPX
						(C ob)
						(MF wir am abend noch was)
						(VC unternehmen))[01;36m)[00m))
		(VF das)
		(LK konnen)
		(MF wir ja dort)
		(VC absprechen)))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['KOORD', 'LV'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'APPRART', 'NN', 'ADV', 'PIS', 'VVFIN'), 'right siblings': [], 'left siblings': [(KOORD (KON und))], 'auto preterminal span': (1, 8), 'span': (1, 8), 'parent': 'SIMPX', 'label': 'LV', 'classified_type': 'Unary', 'type': 'add'}
(TOP und ob wir am abend noch was unternehmen das konnen wir ja dort absprechen)

Sentence 569:
0 Initial errors
0 on fringe, 0 iterations

Sentence 570:
0 Initial errors
0 on fringe, 0 iterations

Sentence 571:
0 Initial errors
0 on fringe, 0 iterations

Sentence 572:
13 Initial errors
0 on fringe, 11 iterations
3 Error:UNSET move
1 Error:Modifier Attachment
1 Error:Single Word Phrase
1 Error:Unary
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Modifier Attachment
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(VF ich)
		(LK weis)
		[01;33m(MF[00m (MF nicht)[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(PX
				(APPR in)
				(NX die oper))[01;31m)[00m [01;33mMF) SIMPX)[00m
		(LK mochte)
		[01;33m(FKOORD[00m (MF ich grade nicht)
		(VC gehen)
		(NF oder ins konzert)[01;31m)[00m
	[01;31m(NX[00m
		(ADVX aber)
		[01;33m(MF[00m (ADVX vielleicht)
		(NX irgendwas)[01;31m)[00m
	[01;31m(NX[00m
		[01;36m(NX[00m
			(ADJX kleines)
			[01;31m(ADJX[00m
				(ADJA gemutliches)[01;31m)[00m [01;33mMF)[00m[01;36m)[00m
		[01;36m(VXINF[00m
			[01;36m(VC[00m
				(NN treffen)[01;36m)[00m[01;36m)[00m[01;31m)[00m) [01;33mFKOORD)[00m
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'VF'], 'mover info': [('VF', (3, 6))], 'old_family': ['VF', 'LK', 'MF', 'VC', 'NF'], 'start left siblings': [], 'auto preterminals': ('PPER', 'VVFIN', 'PTKNEG', 'APPR', 'ART', 'NN', 'VMFIN', 'PPER', 'ADV', 'PTKNEG', 'VVINF', 'KON', 'APPRART', 'NN', 'ADV', 'ADV', 'PIS', 'ADJA', 'ADJA', 'NN'), 'start right siblings': ['LK', 'MF', 'VC', 'NF'], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 20), 'adding node already present': False, 'movers': ['VF'], 'old_parent': 'SIMPX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'VXINF'}
(TOP
	(SIMPX
		(VF ich)
		(LK weis)
		(MF
			(MF nicht)
			[01;31m(VF[00m
				(PX
					(APPR in)
					(NX die oper))[01;31m)[00m))
	[01;31m(SIMPX[00m
		(LK mochte)
		[01;33m(FKOORD[00m (MF ich grade nicht)
		(VC gehen)
		(NF oder ins konzert)[01;31m)[00m
	[01;31m(NX[00m
		(ADVX aber)
		[01;33m(MF[00m (ADVX vielleicht)
		(NX irgendwas)[01;31m)[00m
	[01;31m(NX[00m
		[01;36m(NX[00m
			(ADJX kleines)
			[01;31m(ADJX[00m
				(ADJA gemutliches)[01;31m)[00m [01;33mMF)[00m[01;36m)[00m
		[01;36m(VXINF[00m
			[01;36m(VC[00m
				(NN treffen)[01;36m)[00m[01;36m)[00m[01;31m)[00m) [01;33mFKOORD)[00m
Step:Modifier Attachment
{'subtrees': ['ADJX', 'ADJX'], 'family': ['NX', 'NN'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJA', 'ADJA'), 'right siblings': [(NN treffen)], 'left siblings': [], 'auto preterminal span': (17, 19), 'span': (17, 19), 'parent': 'NX', 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(VF ich)
		(LK weis)
		(MF
			(MF nicht)
			[01;31m(VF[00m
				(PX
					(APPR in)
					(NX die oper))[01;31m)[00m))
	[01;31m(SIMPX[00m
		(LK mochte)
		[01;33m(FKOORD[00m (MF ich grade nicht)
		(VC gehen)
		(NF oder ins konzert)[01;31m)[00m
	[01;31m(NX[00m
		(ADVX aber)
		[01;33m(MF[00m (ADVX vielleicht)
		(NX irgendwas)[01;31m)[00m
	[01;31m(NX[00m
		(NX
			(ADJX kleines)
			[01;31m(ADJX[00m
				(ADJA gemutliches)[01;31m)[00m) [01;33mMF)[00m
		[01;36m(VXINF[00m
			[01;36m(VC[00m
				(NN treffen)[01;36m)[00m[01;36m)[00m[01;31m)[00m) [01;33mFKOORD)[00m
Step:Single Word Phrase
{'subtrees': ['NN'], 'family': ['NX', 'VC'], 'over_word': True, 'over words': True, 'auto preterminals': ('NN',), 'right siblings': [], 'left siblings': [(NX (ADJX (ADJA kleines)) (ADJX (ADJA gemutliches)))], 'auto preterminal span': (19, 20), 'span': (19, 20), 'parent': 'NX', 'label': 'VC', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(SIMPX
		(VF ich)
		(LK weis)
		(MF
			(MF nicht)
			[01;31m(VF[00m
				(PX
					(APPR in)
					(NX die oper))[01;31m)[00m))
	[01;31m(SIMPX[00m
		(LK mochte)
		[01;33m(FKOORD[00m (MF ich grade nicht)
		(VC gehen)
		(NF oder ins konzert)[01;31m)[00m
	[01;31m(NX[00m
		(ADVX aber)
		[01;33m(MF[00m (ADVX vielleicht)
		(NX irgendwas)[01;31m)[00m
	[01;31m(NX[00m
		(NX
			(ADJX kleines)
			[01;31m(ADJX[00m
				(ADJA gemutliches)[01;31m)[00m) [01;33mMF)[00m
		[01;36m(VXINF[00m
			(VC
				(NN treffen))[01;36m)[00m[01;31m)[00m) [01;33mFKOORD)[00m
Step:Unary
{'subtrees': ['VC'], 'family': ['NX', 'VXINF'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN',), 'right siblings': [], 'left siblings': [(NX (ADJX (ADJA kleines)) (ADJX (ADJA gemutliches)))], 'auto preterminal span': (19, 20), 'span': (19, 20), 'parent': 'NX', 'label': 'VXINF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(VF ich)
		(LK weis)
		(MF
			(MF nicht)
			[01;31m(VF[00m
				(PX
					(APPR in)
					(NX die oper))[01;31m)[00m))
	[01;31m(SIMPX[00m
		(LK mochte)
		[01;33m(FKOORD[00m (MF ich grade nicht)
		(VC gehen)
		(NF oder ins konzert)[01;31m)[00m
	[01;31m(NX[00m
		(ADVX aber)
		[01;33m(MF[00m (ADVX vielleicht)
		(NX irgendwas)[01;31m)[00m
	[01;31m(NX[00m
		(NX
			(ADJX kleines)
			[01;31m(ADJX[00m
				(ADJA gemutliches)[01;31m)[00m) [01;33mMF)[00m
		(VXINF treffen)[01;31m)[00m) [01;33mFKOORD)[00m
Step:Unary
{'subtrees': ['PX'], 'family': ['MF', 'VF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKNEG', 'APPR', 'ART', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 6), 'span': (3, 6), 'left siblings': ['MF'], 'label': 'VF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX ich weis nicht in die oper)
	[01;31m(SIMPX[00m
		(LK mochte)
		[01;33m(FKOORD[00m (MF ich grade nicht)
		(VC gehen)
		(NF oder ins konzert)[01;31m)[00m
	[01;31m(NX[00m
		(ADVX aber)
		[01;33m(MF[00m (ADVX vielleicht)
		(NX irgendwas)[01;31m)[00m
	[01;31m(NX[00m
		(NX
			(ADJX kleines)
			[01;31m(ADJX[00m
				(ADJA gemutliches)[01;31m)[00m) [01;33mMF)[00m
		(VXINF treffen)[01;31m)[00m) [01;33mFKOORD)[00m
Step:UNSET remove
{'subtrees': ['LK', 'MF', 'VC', 'NF'], 'family': ['SIMPX', 'SIMPX', 'NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PTKNEG', 'APPR', 'ART', 'NN', 'VMFIN', 'PPER', 'ADV', 'PTKNEG', 'VVINF', 'KON', 'APPRART', 'NN', 'ADV', 'ADV', 'PIS', 'ADJA', 'ADJA', 'NN'), 'right siblings': ['NX', 'NX'], 'parent': 'TOP', 'auto preterminal span': (0, 20), 'span': (6, 14), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX ich weis nicht in die oper)
	(LK mochte)
	[01;36m(FKOORD[00m
		(MF ich grade nicht)
		(VC gehen)
		(NF oder ins konzert)
		[01;31m(NX[00m
			(ADVX aber)
			[01;33m(MF[00m (ADVX vielleicht)
			(NX irgendwas)[01;31m)[00m
		[01;31m(NX[00m
			(NX
				(ADJX kleines)
				[01;31m(ADJX[00m
					(ADJA gemutliches)[01;31m)[00m) [01;33mMF)[00m
			(VXINF treffen)[01;31m)[00m[01;36m)[00m)
Step:UNSET add
{'subtrees': ['MF', 'VC', 'NF', 'NX', 'NX'], 'family': ['SIMPX', 'LK', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'PTKNEG', 'VVINF', 'KON', 'APPRART', 'NN', 'ADV', 'ADV', 'PIS', 'ADJA', 'ADJA', 'NN'), 'right siblings': [], 'left siblings': [(SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VVFIN weis))) (MF (MF (ADVX (PTKNEG nicht))) (PX (APPR in) (NX (ART die) (NN oper))))), (LK (VXFIN (VMFIN mochte)))], 'auto preterminal span': (7, 20), 'span': (7, 20), 'parent': 'TOP', 'label': 'FKOORD', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX ich weis nicht in die oper)
	(LK mochte)
	(FKOORD
		(MF ich grade nicht)
		(VC gehen)
		(NF oder ins konzert)
		[01;31m(NX[00m
			(ADVX aber)
			[01;33m(MF[00m (ADVX vielleicht)
			(NX irgendwas)[01;31m)[00m
		[01;31m(NX[00m
			(NX
				(ADJX kleines)
				[01;31m(ADJX[00m
					(ADJA gemutliches)[01;31m)[00m) [01;33mMF)[00m
			(VXINF treffen)[01;31m)[00m))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX', 'NX'], 'family': ['MF', 'VC', 'NF', 'NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'PTKNEG', 'VVINF', 'KON', 'APPRART', 'NN', 'ADV', 'ADV', 'PIS', 'ADJA', 'ADJA', 'NN'), 'right siblings': ['NX'], 'parent': 'FKOORD', 'auto preterminal span': (7, 20), 'span': (14, 17), 'left siblings': ['MF', 'VC', 'NF'], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX ich weis nicht in die oper)
	(LK mochte)
	(FKOORD
		(MF ich grade nicht)
		(VC gehen)
		(NF oder ins konzert)
		(ADVX aber)
		[01;33m(MF[00m (ADVX vielleicht)
		(NX irgendwas)
		[01;31m(NX[00m
			(NX
				(ADJX kleines)
				[01;31m(ADJX[00m
					(ADJA gemutliches)[01;31m)[00m) [01;33mMF)[00m
			(VXINF treffen)[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['NX', 'VXINF'], 'family': ['MF', 'VC', 'NF', 'ADVX', 'ADVX', 'NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'PTKNEG', 'VVINF', 'KON', 'APPRART', 'NN', 'ADV', 'ADV', 'PIS', 'ADJA', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'FKOORD', 'auto preterminal span': (7, 20), 'span': (17, 20), 'left siblings': ['MF', 'VC', 'NF', 'ADVX', 'ADVX', 'NX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX ich weis nicht in die oper)
	(LK mochte)
	(FKOORD
		(MF ich grade nicht)
		(VC gehen)
		(NF oder ins konzert)
		(ADVX aber)
		[01;36m(MF[00m
			(ADVX vielleicht)
			(NX irgendwas)
			(NX
				(ADJX kleines)
				[01;31m(ADJX[00m
					(ADJA gemutliches)[01;31m)[00m)[01;36m)[00m
		(VXINF treffen)))
Step:UNSET add
{'subtrees': ['ADVX', 'NX', 'NX'], 'family': ['MF', 'VC', 'NF', 'ADVX', 'MF', 'VXINF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PIS', 'ADJA', 'ADJA'), 'right siblings': [(VXINF (VC (NN treffen)))], 'left siblings': [(MF (NX (PPER ich)) (ADVX (ADV grade)) (ADVX (PTKNEG nicht))), (VC (VXINF (VVINF gehen))), (NF (PX (KON oder) (PX (APPRART ins) (NX (NN konzert))))), (ADVX (ADV aber))], 'auto preterminal span': (15, 19), 'span': (15, 19), 'parent': 'FKOORD', 'label': 'MF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX ich weis nicht in die oper)
	(LK mochte)
	(FKOORD
		(MF ich grade nicht)
		(VC gehen)
		(NF oder ins konzert)
		(ADVX aber)
		(MF
			(ADVX vielleicht)
			(NX irgendwas)
			(NX
				(ADJX kleines)
				[01;31m(ADJX[00m
					(ADJA gemutliches)[01;31m)[00m))
		(VXINF treffen)))
Step:Single Word Phrase
{'subtrees': ['ADJA'], 'family': ['ADJX', 'ADJX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADJA', 'ADJA'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (17, 19), 'span': (18, 19), 'left siblings': ['ADJX'], 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP ich weis nicht in die oper mochte ich grade nicht gehen oder ins konzert aber vielleicht irgendwas kleines gemutliches treffen)

Sentence 573:
0 Initial errors
0 on fringe, 0 iterations

Sentence 574:
0 Initial errors
0 on fringe, 0 iterations

Sentence 575:
0 Initial errors
0 on fringe, 0 iterations

Sentence 576:
0 Initial errors
0 on fringe, 0 iterations

Sentence 577:
0 Initial errors
0 on fringe, 0 iterations

Sentence 578:
0 Initial errors
0 on fringe, 0 iterations

Sentence 579:
0 Initial errors
0 on fringe, 0 iterations

Sentence 580:
0 Initial errors
0 on fringe, 0 iterations

Sentence 581:
0 Initial errors
0 on fringe, 0 iterations

Sentence 582:
0 Initial errors
0 on fringe, 0 iterations

Sentence 583:
0 Initial errors
0 on fringe, 0 iterations

Sentence 584:
0 Initial errors
0 on fringe, 0 iterations

Sentence 585:
0 Initial errors
0 on fringe, 0 iterations

Sentence 586:
0 Initial errors
0 on fringe, 0 iterations

Sentence 587:
0 Initial errors
0 on fringe, 0 iterations

Sentence 588:
0 Initial errors
0 on fringe, 0 iterations

Sentence 589:
0 Initial errors
0 on fringe, 0 iterations

Sentence 590:
0 Initial errors
0 on fringe, 0 iterations

Sentence 591:
0 Initial errors
0 on fringe, 0 iterations

Sentence 592:
0 Initial errors
0 on fringe, 0 iterations

Sentence 593:
0 Initial errors
0 on fringe, 0 iterations

Sentence 594:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Different label
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(LK[00m [01;31m(DM[00m
		(VXFIN
			(VVIMP sprich))[01;31m)[00m[01;36m)[00m
	(NX der erste und zweite september))
Step:Different label
{'family': ['LK', 'NX'], 'auto preterminal span': (0, 1), 'span': (0, 1), 'subtrees': ['VXFIN'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('VVIMP',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('DM', 'LK')}
(TOP sprich der erste und zweite september)

Sentence 595:
0 Initial errors
0 on fringe, 0 iterations

Sentence 596:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Different label
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(PARORD[00m [01;31m(DM[00m
		(ADVX
			(ADV so))[01;31m)[00m[01;36m)[00m
	(SIMPX wie wollen wir denn hinkommen))
Step:Different label
{'family': ['PARORD', 'SIMPX'], 'auto preterminal span': (0, 1), 'span': (0, 1), 'subtrees': ['ADVX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('ADV',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('DM', 'PARORD')}
(TOP so wie wollen wir denn hinkommen)

Sentence 597:
0 Initial errors
0 on fringe, 0 iterations

Sentence 598:
0 Initial errors
0 on fringe, 0 iterations

Sentence 599:
0 Initial errors
0 on fringe, 0 iterations

Sentence 600:
0 Initial errors
0 on fringe, 0 iterations

Sentence 601:
0 Initial errors
0 on fringe, 0 iterations

Sentence 602:
0 Initial errors
0 on fringe, 0 iterations

Sentence 603:
0 Initial errors
0 on fringe, 0 iterations

Sentence 604:
0 Initial errors
0 on fringe, 0 iterations

Sentence 605:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ach)
	(SIMPX
		(VF das)
		(LK ist)
		(MF
			(ADVX doch)
			[01;36m(ADJX[00m
				(ADVX etwas)
				[01;31m(ADJX[00m
					(ADVX sehr)
					(ADJD fruh)[01;31m)[00m[01;36m)[00m))
	(DM oder))
Step:Modifier Attachment
{'new_parent': 'ADJX', 'new_family': ['ADVX', 'ADVX', 'ADJD'], 'mover info': [('ADVX', (4, 5))], 'old_family': ['ADVX', 'ADVX', 'ADJX'], 'start left siblings': ['ADVX'], 'auto preterminals': ('ADV', 'ADV', 'ADV', 'ADJD'), 'start right siblings': ['ADJX'], 'end left siblings': [], 'auto preterminal span': (3, 7), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ADVX', 'ADJD'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP ach das ist doch etwas sehr fruh oder)

Sentence 606:
1 Initial errors
0 on fringe, 1 iterations
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wann)
		(LK geht)
		(MF
			(ADVX denn)
			[01;36m(NX[00m
				(NX der zweite zug)
				(PX in der fruh)[01;36m)[00m)))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'ADJA', 'NN', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(ADVX (ADV denn))], 'auto preterminal span': (3, 9), 'span': (3, 9), 'parent': 'MF', 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP wann geht denn der zweite zug in der fruh)

Sentence 607:
5 Initial errors
0 on fringe, 4 iterations
2 Error:Modifier Attachment
1 Error:UNSET add
1 Error:Single Word Phrase
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX
		(VF es)
		(LK fahrt)
		(MF
			(PX
				(PX ab vier uhr dreiundvierzig)
				[01;31m(ADJX[00m
					(ADJD stundlich)[01;31m)[00m)
			(NX ein zug)))
	(SIMPX
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF die fahrtdauer)
			(LK betragt)
			[01;36m(NX[00m
				(MF
					(ADVX ubrigens)
					[01;31m(NX[00m
						(ADJX viereinhalb)
						(NN stunden)[01;31m)[00m)[01;36m)[00m[01;36m)[00m))
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['ADVX', 'ADJX', 'NN'], 'mover info': [('ADVX', (14, 15))], 'old_family': ['ADVX', 'NX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'CARD', 'NN'), 'start right siblings': ['NX'], 'end left siblings': [], 'auto preterminal span': (14, 17), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ADJX', 'NN'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(DM also)
	(SIMPX
		(VF es)
		(LK fahrt)
		(MF
			(PX
				(PX ab vier uhr dreiundvierzig)
				[01;31m(ADJX[00m
					(ADJD stundlich)[01;31m)[00m)
			(NX ein zug)))
	(SIMPX
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF die fahrtdauer)
			(LK betragt)
			(MF ubrigens viereinhalb stunden)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'VVFIN', 'ADV', 'CARD', 'NN'), 'right siblings': [], 'left siblings': [(KOORD (KON und))], 'auto preterminal span': (11, 17), 'span': (11, 17), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX
		(VF es)
		(LK fahrt)
		(MF
			(PX
				(PX ab vier uhr dreiundvierzig)
				[01;31m(ADJX[00m
					(ADJD stundlich)[01;31m)[00m)
			(NX ein zug)))
	(SIMPX
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		(SIMPX die fahrtdauer betragt ubrigens viereinhalb stunden)))
Step:Single Word Phrase
{'subtrees': ['ADJD'], 'family': ['PX', 'ADJX'], 'over_word': True, 'over words': True, 'auto preterminals': ('APPR', 'CARD', 'NN', 'CARD', 'ADJD'), 'right siblings': [], 'parent': 'PX', 'auto preterminal span': (3, 8), 'span': (7, 8), 'left siblings': ['PX'], 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX es fahrt ab vier uhr dreiundvierzig stundlich ein zug)
	(SIMPX
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		(SIMPX die fahrtdauer betragt ubrigens viereinhalb stunden)))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'ART', 'NN', 'VVFIN', 'ADV', 'CARD', 'NN'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (10, 17), 'span': (10, 11), 'left siblings': [], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP also es fahrt ab vier uhr dreiundvierzig stundlich ein zug und die fahrtdauer betragt ubrigens viereinhalb stunden)

Sentence 608:
0 Initial errors
0 on fringe, 0 iterations

Sentence 609:
0 Initial errors
0 on fringe, 0 iterations

Sentence 610:
0 Initial errors
0 on fringe, 0 iterations

Sentence 611:
0 Initial errors
0 on fringe, 0 iterations

Sentence 612:
0 Initial errors
0 on fringe, 0 iterations

Sentence 613:
0 Initial errors
0 on fringe, 0 iterations

Sentence 614:
0 Initial errors
0 on fringe, 0 iterations

Sentence 615:
0 Initial errors
0 on fringe, 0 iterations

Sentence 616:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF es)
		(LK ist)
		(MF
			(ADJX
				(NX
					(NX
						[01;36m(ADVX[00m
							(ADVX etwa)
							(ADVX nur)[01;36m)[00m
						(ADJX funf)
						(NN minuten))
					(PX vom hauptbahnhof))
				(ADJD entfernt)))))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX'], 'family': ['ADVX', 'ADJX', 'NN'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV'), 'right siblings': [(ADJX (CARD funf)), (NN minuten)], 'left siblings': [], 'auto preterminal span': (2, 4), 'span': (2, 4), 'parent': 'NX', 'label': 'ADVX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP es ist etwa nur funf minuten vom hauptbahnhof entfernt)

Sentence 617:
9 Initial errors
0 on fringe, 7 iterations
2 Error:Different label
2 Error:Different label
1 Error:Single Word Phrase
1 Error:Unary
1 Error:Single Word Phrase
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(NX[00m
	(TOP
		[01;31m(SIMPX[00m
			[01;31m(KOORD[00m
				(KON und)[01;31m)[00m
			[01;31m(VF[00m
				(NX
					(NX der preis)
					(PX fur das einzelzimmer))[01;31m)[00m
			[01;36m(ADVX[00m [01;31m(LK[00m
				[01;31m(VXFIN[00m
					(VVFIN betragt)[01;31m)[00m[01;31m)[00m[01;36m)[00m
			[01;31m(MF[00m
				[01;31m(NX[00m
					(ADJX hundert funfunddreisig)
					(NN mark)[01;31m)[00m[01;31m)[00m[01;31m)[00m)[01;36m)[00m
Step:Different label
{'family': ['NX'], 'auto preterminal span': (0, 10), 'span': (0, 10), 'subtrees': ['KOORD', 'VF', 'LK', 'MF'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('KON', 'ART', 'NN', 'APPR', 'ART', 'NN', 'VVFIN', 'CARD', 'CARD', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('SIMPX', 'NX')}
(TOP
	(NX
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;31m(VF[00m
			(NX
				(NX der preis)
				(PX fur das einzelzimmer))[01;31m)[00m
		[01;36m(ADVX[00m [01;31m(LK[00m
			[01;31m(VXFIN[00m
				(VVFIN betragt)[01;31m)[00m[01;31m)[00m[01;36m)[00m
		[01;31m(MF[00m
			[01;31m(NX[00m
				(ADJX hundert funfunddreisig)
				(NN mark)[01;31m)[00m[01;31m)[00m))
Step:Different label
{'family': ['KOORD', 'VF', 'ADVX', 'MF'], 'auto preterminal span': (6, 7), 'span': (6, 7), 'subtrees': ['VXFIN'], 'parent': 'NX', 'over_word': False, 'auto preterminals': ('VVFIN',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('LK', 'ADVX')}
(TOP
	(NX
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;31m(VF[00m
			(NX
				(NX der preis)
				(PX fur das einzelzimmer))[01;31m)[00m
		(ADVX
			[01;31m(VXFIN[00m
				(VVFIN betragt)[01;31m)[00m)
		[01;31m(MF[00m
			[01;31m(NX[00m
				(ADJX hundert funfunddreisig)
				(NN mark)[01;31m)[00m[01;31m)[00m))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['KOORD', 'VF', 'ADVX', 'MF'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'ART', 'NN', 'APPR', 'ART', 'NN', 'VVFIN', 'CARD', 'CARD', 'NN'), 'right siblings': ['VF', 'ADVX', 'MF'], 'parent': 'NX', 'auto preterminal span': (0, 10), 'span': (0, 1), 'left siblings': [], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(NX
		(KON und)
		[01;31m(VF[00m
			(NX
				(NX der preis)
				(PX fur das einzelzimmer))[01;31m)[00m
		(ADVX
			[01;31m(VXFIN[00m
				(VVFIN betragt)[01;31m)[00m)
		[01;31m(MF[00m
			[01;31m(NX[00m
				(ADJX hundert funfunddreisig)
				(NN mark)[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['NX'], 'family': ['KON', 'VF', 'ADVX', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ART', 'NN', 'APPR', 'ART', 'NN', 'VVFIN', 'CARD', 'CARD', 'NN'), 'right siblings': ['ADVX', 'MF'], 'parent': 'NX', 'auto preterminal span': (0, 10), 'span': (1, 6), 'left siblings': ['KON'], 'label': 'VF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(NX
		(KON und)
		(NX der preis fur das einzelzimmer)
		(ADVX
			[01;31m(VXFIN[00m
				(VVFIN betragt)[01;31m)[00m)
		[01;31m(MF[00m
			[01;31m(NX[00m
				(ADJX hundert funfunddreisig)
				(NN mark)[01;31m)[00m[01;31m)[00m))
Step:Single Word Phrase
{'subtrees': ['VVFIN'], 'family': ['VXFIN'], 'over_word': True, 'over words': True, 'auto preterminals': ('VVFIN',), 'right siblings': [], 'parent': 'ADVX', 'auto preterminal span': (6, 7), 'span': (6, 7), 'left siblings': [], 'label': 'VXFIN', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(NX
		(KON und)
		(NX der preis fur das einzelzimmer)
		(ADVX betragt)
		[01;31m(MF[00m
			[01;31m(NX[00m
				(ADJX hundert funfunddreisig)
				(NN mark)[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['NX'], 'family': ['KON', 'NX', 'ADVX', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ART', 'NN', 'APPR', 'ART', 'NN', 'VVFIN', 'CARD', 'CARD', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (0, 10), 'span': (7, 10), 'left siblings': ['KON', 'NX', 'ADVX'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(NX
		(KON und)
		(NX der preis fur das einzelzimmer)
		(ADVX betragt)
		[01;31m(NX[00m
			(ADJX hundert funfunddreisig)
			(NN mark)[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['ADJX', 'NN'], 'family': ['KON', 'NX', 'ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ART', 'NN', 'APPR', 'ART', 'NN', 'VVFIN', 'CARD', 'CARD', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (0, 10), 'span': (7, 10), 'left siblings': ['KON', 'NX', 'ADVX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP und der preis fur das einzelzimmer betragt hundert funfunddreisig mark)

Sentence 618:
0 Initial errors
0 on fringe, 0 iterations

Sentence 619:
0 Initial errors
0 on fringe, 0 iterations

Sentence 620:
11 Initial errors
0 on fringe, 11 iterations
1 Error:PP Attachment
1 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Clause Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		(VF die anderen beiden)
		[01;31m(FKOORD[00m
			[01;31m(LKMN[00m
				(LK sind)
				(MF zwar beide zentral)
				[01;31m(NF[00m
					(PX
						(ADVX aber)
						[01;36m(MF[00m
							(ADVX nicht)
							(PX in der nahe vom hauptbahnhof)[01;36m)[00m)[01;31m)[00m[01;31m)[00m
			[01;36m(KOORD[00m
				(KON und)[01;36m)[00m
			[01;31m(LKM[00m
				(LK liegen)
				[01;33m(MF[00m (MF auch etwas hoher)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK weis)
		(MF nicht) [01;33mMF)[00m
		[01;33m(SIMPX (NF[00m (NF wie ihr budget aussieht)[01;31m)[00m
	(SIMPX aber mir wurde eigentlich dieses schloshotel hannover am besten passen)) [01;33mNF) SIMPX)[00m
Step:PP Attachment
{'subtrees': ['ADVX', 'PX'], 'family': ['ADVX', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKNEG', 'APPR', 'ART', 'NN', 'APPRART', 'NN'), 'right siblings': [], 'left siblings': [(ADVX (ADV aber))], 'auto preterminal span': (9, 15), 'span': (9, 15), 'parent': 'PX', 'label': 'MF', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		(VF die anderen beiden)
		[01;31m(FKOORD[00m
			[01;31m(LKMN[00m
				(LK sind)
				(MF zwar beide zentral)
				[01;31m(NF[00m
					(PX
						(ADVX aber)
						(MF nicht in der nahe vom hauptbahnhof))[01;31m)[00m[01;31m)[00m
			[01;36m(KOORD[00m
				(KON und)[01;36m)[00m
			[01;31m(LKM[00m
				(LK liegen)
				[01;33m(MF[00m (MF auch etwas hoher)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK weis)
		(MF nicht) [01;33mMF)[00m
		[01;33m(SIMPX (NF[00m (NF wie ihr budget aussieht)[01;31m)[00m
	(SIMPX aber mir wurde eigentlich dieses schloshotel hannover am besten passen)) [01;33mNF) SIMPX)[00m
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['LKMN', 'KOORD', 'LKM'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON',), 'right siblings': [(LKM (LK (VXFIN (VVFIN liegen))) (MF (ADVX (ADV auch)) (ADJX (ADVX (ADV etwas)) (ADJD hoher))))], 'left siblings': [(LKMN (LK (VXFIN (VAFIN sind))) (MF (ADVX (ADV zwar)) (NX (PIS beide)) (ADJX (ADJD zentral))) (NF (PX (ADVX (ADV aber)) (MF (ADVX (PTKNEG nicht)) (PX (APPR in) (NX (NX (ART der) (NN nahe)) (PX (APPRART vom) (NX (NN hauptbahnhof)))))))))], 'auto preterminal span': (15, 16), 'span': (15, 16), 'parent': 'FKOORD', 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		(VF die anderen beiden)
		[01;31m(FKOORD[00m
			[01;31m(LKMN[00m
				(LK sind)
				(MF zwar beide zentral)
				[01;31m(NF[00m
					(PX
						(ADVX aber)
						(MF nicht in der nahe vom hauptbahnhof))[01;31m)[00m[01;31m)[00m
			(KOORD und)
			[01;31m(LKM[00m
				(LK liegen)
				[01;33m(MF[00m (MF auch etwas hoher)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK weis)
		(MF nicht) [01;33mMF)[00m
		[01;33m(SIMPX (NF[00m (NF wie ihr budget aussieht)[01;31m)[00m
	(SIMPX aber mir wurde eigentlich dieses schloshotel hannover am besten passen)) [01;33mNF) SIMPX)[00m
Step:UNSET remove
{'subtrees': ['VF', 'FKOORD'], 'family': ['DM', 'SIMPX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ART', 'ADJA', 'PIS', 'VAFIN', 'ADV', 'PIS', 'ADJD', 'ADV', 'PTKNEG', 'APPR', 'ART', 'NN', 'APPRART', 'NN', 'KON', 'VVFIN', 'ADV', 'ADV', 'ADJD', 'KON', 'PPER', 'VVFIN', 'PTKNEG', 'KOUS', 'PPOSAT', 'NN', 'VVFIN', 'KON', 'PPER', 'VAFIN', 'ADV', 'PDAT', 'NE', 'NE', 'PTKA', 'ADJD', 'VVINF'), 'right siblings': ['SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 38), 'span': (1, 20), 'left siblings': ['DM'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(VF die anderen beiden)
	[01;31m(FKOORD[00m
		[01;31m(LKMN[00m
			(LK sind)
			(MF zwar beide zentral)
			[01;31m(NF[00m
				(PX
					(ADVX aber)
					(MF nicht in der nahe vom hauptbahnhof))[01;31m)[00m[01;31m)[00m
		(KOORD und)
		[01;31m(LKM[00m
			(LK liegen)
			[01;33m(MF[00m (MF auch etwas hoher)[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK weis)
		(MF nicht) [01;33mMF)[00m
		[01;33m(SIMPX (NF[00m (NF wie ihr budget aussieht)[01;31m)[00m
	(SIMPX aber mir wurde eigentlich dieses schloshotel hannover am besten passen)) [01;33mNF) SIMPX)[00m
Step:UNSET remove
{'subtrees': ['LK', 'MF', 'NF'], 'family': ['LKMN', 'KOORD', 'LKM'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'ADV', 'PIS', 'ADJD', 'ADV', 'PTKNEG', 'APPR', 'ART', 'NN', 'APPRART', 'NN', 'KON', 'VVFIN', 'ADV', 'ADV', 'ADJD'), 'right siblings': ['KOORD', 'LKM'], 'parent': 'FKOORD', 'auto preterminal span': (4, 20), 'span': (4, 15), 'left siblings': [], 'label': 'LKMN', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(VF die anderen beiden)
	[01;31m(FKOORD[00m
		(LK sind)
		(MF zwar beide zentral)
		[01;31m(NF[00m
			(PX
				(ADVX aber)
				(MF nicht in der nahe vom hauptbahnhof))[01;31m)[00m
		(KOORD und)
		[01;31m(LKM[00m
			(LK liegen)
			[01;33m(MF[00m (MF auch etwas hoher)[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK weis)
		(MF nicht) [01;33mMF)[00m
		[01;33m(SIMPX (NF[00m (NF wie ihr budget aussieht)[01;31m)[00m
	(SIMPX aber mir wurde eigentlich dieses schloshotel hannover am besten passen)) [01;33mNF) SIMPX)[00m
Step:UNSET remove
{'subtrees': ['LK', 'MF', 'NF', 'KOORD', 'LKM'], 'family': ['DM', 'VF', 'FKOORD', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ART', 'ADJA', 'PIS', 'VAFIN', 'ADV', 'PIS', 'ADJD', 'ADV', 'PTKNEG', 'APPR', 'ART', 'NN', 'APPRART', 'NN', 'KON', 'VVFIN', 'ADV', 'ADV', 'ADJD', 'KON', 'PPER', 'VVFIN', 'PTKNEG', 'KOUS', 'PPOSAT', 'NN', 'VVFIN', 'KON', 'PPER', 'VAFIN', 'ADV', 'PDAT', 'NE', 'NE', 'PTKA', 'ADJD', 'VVINF'), 'right siblings': ['SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 38), 'span': (4, 20), 'left siblings': ['DM', 'VF'], 'label': 'FKOORD', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(VF die anderen beiden)
	(LK sind)
	(MF zwar beide zentral)
	[01;31m(NF[00m
		(PX
			(ADVX aber)
			(MF nicht in der nahe vom hauptbahnhof))[01;31m)[00m
	(KOORD und)
	[01;31m(LKM[00m
		(LK liegen)
		[01;33m(MF[00m (MF auch etwas hoher)[01;31m)[00m
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK weis)
		(MF nicht) [01;33mMF)[00m
		[01;33m(SIMPX (NF[00m (NF wie ihr budget aussieht)[01;31m)[00m
	(SIMPX aber mir wurde eigentlich dieses schloshotel hannover am besten passen)) [01;33mNF) SIMPX)[00m
Step:Unary
{'subtrees': ['PX'], 'family': ['DM', 'VF', 'LK', 'MF', 'NF', 'KOORD', 'LKM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ART', 'ADJA', 'PIS', 'VAFIN', 'ADV', 'PIS', 'ADJD', 'ADV', 'PTKNEG', 'APPR', 'ART', 'NN', 'APPRART', 'NN', 'KON', 'VVFIN', 'ADV', 'ADV', 'ADJD', 'KON', 'PPER', 'VVFIN', 'PTKNEG', 'KOUS', 'PPOSAT', 'NN', 'VVFIN', 'KON', 'PPER', 'VAFIN', 'ADV', 'PDAT', 'NE', 'NE', 'PTKA', 'ADJD', 'VVINF'), 'right siblings': ['KOORD', 'LKM', 'SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 38), 'span': (8, 15), 'left siblings': ['DM', 'VF', 'LK', 'MF'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(VF die anderen beiden)
	(LK sind)
	(MF zwar beide zentral)
	(PX aber nicht in der nahe vom hauptbahnhof)
	(KOORD und)
	[01;31m(LKM[00m
		(LK liegen)
		[01;33m(MF[00m (MF auch etwas hoher)[01;31m)[00m
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK weis)
		(MF nicht) [01;33mMF)[00m
		[01;33m(SIMPX (NF[00m (NF wie ihr budget aussieht)[01;31m)[00m
	(SIMPX aber mir wurde eigentlich dieses schloshotel hannover am besten passen)) [01;33mNF) SIMPX)[00m
Step:UNSET remove
{'subtrees': ['LK', 'MF'], 'family': ['DM', 'VF', 'LK', 'MF', 'PX', 'KOORD', 'LKM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ART', 'ADJA', 'PIS', 'VAFIN', 'ADV', 'PIS', 'ADJD', 'ADV', 'PTKNEG', 'APPR', 'ART', 'NN', 'APPRART', 'NN', 'KON', 'VVFIN', 'ADV', 'ADV', 'ADJD', 'KON', 'PPER', 'VVFIN', 'PTKNEG', 'KOUS', 'PPOSAT', 'NN', 'VVFIN', 'KON', 'PPER', 'VAFIN', 'ADV', 'PDAT', 'NE', 'NE', 'PTKA', 'ADJD', 'VVINF'), 'right siblings': ['SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 38), 'span': (16, 20), 'left siblings': ['DM', 'VF', 'LK', 'MF', 'PX', 'KOORD'], 'label': 'LKM', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(VF die anderen beiden)
	(LK sind)
	(MF zwar beide zentral)
	(PX aber nicht in der nahe vom hauptbahnhof)
	(KOORD und)
	(LK liegen)
	[01;33m(MF[00m (MF auch etwas hoher)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK weis)
		(MF nicht) [01;33mMF)[00m
		[01;33m(SIMPX (NF[00m (NF wie ihr budget aussieht)[01;31m)[00m
	(SIMPX aber mir wurde eigentlich dieses schloshotel hannover am besten passen)) [01;33mNF) SIMPX)[00m
Step:UNSET remove
{'subtrees': ['KOORD', 'VF', 'LK', 'MF', 'NF'], 'family': ['DM', 'VF', 'LK', 'MF', 'PX', 'KOORD', 'LK', 'MF', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ART', 'ADJA', 'PIS', 'VAFIN', 'ADV', 'PIS', 'ADJD', 'ADV', 'PTKNEG', 'APPR', 'ART', 'NN', 'APPRART', 'NN', 'KON', 'VVFIN', 'ADV', 'ADV', 'ADJD', 'KON', 'PPER', 'VVFIN', 'PTKNEG', 'KOUS', 'PPOSAT', 'NN', 'VVFIN', 'KON', 'PPER', 'VAFIN', 'ADV', 'PDAT', 'NE', 'NE', 'PTKA', 'ADJD', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 38), 'span': (20, 28), 'left siblings': ['DM', 'VF', 'LK', 'MF', 'PX', 'KOORD', 'LK', 'MF'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(VF die anderen beiden)
	(LK sind)
	(MF zwar beide zentral)
	(PX aber nicht in der nahe vom hauptbahnhof)
	(KOORD und)
	(LK liegen)
	[01;36m(MF[00m
		(MF auch etwas hoher)
		(KOORD und)
		(VF ich)
		(LK weis)
		(MF nicht)[01;36m)[00m
	[01;36m(SIMPX[00m
		[01;36m(NF[00m
			(NF wie ihr budget aussieht)
			(SIMPX aber mir wurde eigentlich dieses schloshotel hannover am besten passen)[01;36m)[00m[01;36m)[00m)
Step:UNSET add
{'subtrees': ['MF', 'KOORD', 'VF', 'LK', 'MF'], 'family': ['DM', 'VF', 'LK', 'MF', 'PX', 'KOORD', 'LK', 'MF', 'NF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'ADJD', 'KON', 'PPER', 'VVFIN', 'PTKNEG'), 'right siblings': [(NF (SIMPX (C (KOUS wie)) (MF (NX (PPOSAT ihr) (NN budget))) (VC (VXFIN (VVFIN aussieht))))), (SIMPX (KOORD (KON aber)) (VF (NX (PPER mir))) (LK (VXFIN (VAFIN wurde))) (MF (ADVX (ADV eigentlich)) (NX (PDAT dieses) (NX (NX (NE schloshotel)) (NX (NE hannover)))) (ADJX (PTKA am) (ADJD besten))) (VC (VXINF (VVINF passen))))], 'left siblings': [(DM (PTKANT ja)), (VF (NX (ART die) (ADJX (ADJA anderen)) (PIS beiden))), (LK (VXFIN (VAFIN sind))), (MF (ADVX (ADV zwar)) (NX (PIS beide)) (ADJX (ADJD zentral))), (PX (ADVX (ADV aber)) (MF (ADVX (PTKNEG nicht)) (PX (APPR in) (NX (NX (ART der) (NN nahe)) (PX (APPRART vom) (NX (NN hauptbahnhof))))))), (KOORD (KON und)), (LK (VXFIN (VVFIN liegen)))], 'auto preterminal span': (17, 24), 'span': (17, 24), 'parent': 'TOP', 'label': 'MF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	(VF die anderen beiden)
	(LK sind)
	(MF zwar beide zentral)
	(PX aber nicht in der nahe vom hauptbahnhof)
	(KOORD und)
	(LK liegen)
	(MF auch etwas hoher und ich weis nicht)
	[01;36m(SIMPX[00m
		[01;36m(NF[00m
			(NF wie ihr budget aussieht)
			(SIMPX aber mir wurde eigentlich dieses schloshotel hannover am besten passen)[01;36m)[00m[01;36m)[00m)
Step:Clause Attachment
{'subtrees': ['NF', 'SIMPX'], 'family': ['DM', 'VF', 'LK', 'MF', 'PX', 'KOORD', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPOSAT', 'NN', 'VVFIN', 'KON', 'PPER', 'VAFIN', 'ADV', 'PDAT', 'NE', 'NE', 'PTKA', 'ADJD', 'VVINF'), 'right siblings': [], 'left siblings': [(DM (PTKANT ja)), (VF (NX (ART die) (ADJX (ADJA anderen)) (PIS beiden))), (LK (VXFIN (VAFIN sind))), (MF (ADVX (ADV zwar)) (NX (PIS beide)) (ADJX (ADJD zentral))), (PX (ADVX (ADV aber)) (MF (ADVX (PTKNEG nicht)) (PX (APPR in) (NX (NX (ART der) (NN nahe)) (PX (APPRART vom) (NX (NN hauptbahnhof))))))), (KOORD (KON und)), (LK (VXFIN (VVFIN liegen))), (MF (MF (ADVX (ADV auch)) (ADJX (ADVX (ADV etwas)) (ADJD hoher))) (KOORD (KON und)) (VF (NX (PPER ich))) (LK (VXFIN (VVFIN weis))) (MF (ADVX (PTKNEG nicht))))], 'auto preterminal span': (24, 38), 'span': (24, 38), 'parent': 'TOP', 'label': 'NF', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(DM ja)
	(VF die anderen beiden)
	(LK sind)
	(MF zwar beide zentral)
	(PX aber nicht in der nahe vom hauptbahnhof)
	(KOORD und)
	(LK liegen)
	(MF auch etwas hoher und ich weis nicht)
	[01;36m(SIMPX[00m
		(NF
			(NF wie ihr budget aussieht)
			(SIMPX aber mir wurde eigentlich dieses schloshotel hannover am besten passen))[01;36m)[00m)
Step:Unary
{'subtrees': ['NF'], 'family': ['DM', 'VF', 'LK', 'MF', 'PX', 'KOORD', 'LK', 'MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPOSAT', 'NN', 'VVFIN', 'KON', 'PPER', 'VAFIN', 'ADV', 'PDAT', 'NE', 'NE', 'PTKA', 'ADJD', 'VVINF'), 'right siblings': [], 'left siblings': [(DM (PTKANT ja)), (VF (NX (ART die) (ADJX (ADJA anderen)) (PIS beiden))), (LK (VXFIN (VAFIN sind))), (MF (ADVX (ADV zwar)) (NX (PIS beide)) (ADJX (ADJD zentral))), (PX (ADVX (ADV aber)) (MF (ADVX (PTKNEG nicht)) (PX (APPR in) (NX (NX (ART der) (NN nahe)) (PX (APPRART vom) (NX (NN hauptbahnhof))))))), (KOORD (KON und)), (LK (VXFIN (VVFIN liegen))), (MF (MF (ADVX (ADV auch)) (ADJX (ADVX (ADV etwas)) (ADJD hoher))) (KOORD (KON und)) (VF (NX (PPER ich))) (LK (VXFIN (VVFIN weis))) (MF (ADVX (PTKNEG nicht))))], 'auto preterminal span': (24, 38), 'span': (24, 38), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'add'}
(TOP ja die anderen beiden sind zwar beide zentral aber nicht in der nahe vom hauptbahnhof und liegen auch etwas hoher und ich weis nicht wie ihr budget aussieht aber mir wurde eigentlich dieses schloshotel hannover am besten passen)

Sentence 621:
0 Initial errors
0 on fringe, 0 iterations

Sentence 622:
0 Initial errors
0 on fringe, 0 iterations

Sentence 623:
0 Initial errors
0 on fringe, 0 iterations

Sentence 624:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX und wie sieht es dann aus)
	[01;31m(SIMPX[00m
		(LK sollen)
		(MF wir uns vielleicht irgendwelche theaterkarten)
		(VC besorgen)
		(NF
			(SIMPX
				(SIMPX wenn wir schon dort sind)
				[01;36m(NF[00m
					(SIMPX
						(C das)
						(MF wir bischen kultur)
						(VC mitnehmen))[01;36m)[00m))[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'PIDAT', 'NN', 'VVFIN'), 'right siblings': [], 'left siblings': [(SIMPX (C (KOUS wenn)) (MF (NX (PPER wir)) (ADVX (ADV schon)) (ADVX (ADV dort))) (VC (VXFIN (VAFIN sind))))], 'auto preterminal span': (18, 23), 'span': (18, 23), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX und wie sieht es dann aus)
	[01;31m(SIMPX[00m
		(LK sollen)
		(MF wir uns vielleicht irgendwelche theaterkarten)
		(VC besorgen)
		(NF wenn wir schon dort sind das wir bischen kultur mitnehmen)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['LK', 'MF', 'VC', 'NF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PWAV', 'VVFIN', 'PPER', 'ADV', 'PTKVZ', 'VMFIN', 'PPER', 'PRF', 'ADV', 'PIAT', 'NN', 'VVINF', 'KOUS', 'PPER', 'ADV', 'ADV', 'VAFIN', 'KOUS', 'PPER', 'PIDAT', 'NN', 'VVFIN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 23), 'span': (6, 23), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP und wie sieht es dann aus sollen wir uns vielleicht irgendwelche theaterkarten besorgen wenn wir schon dort sind das wir bischen kultur mitnehmen)

Sentence 625:
0 Initial errors
0 on fringe, 0 iterations

Sentence 626:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		(VF da)
		(LK musten)
		(MF wir uns)
		(VC erkundigen)
		(NF
			(SIMPX
				(C ob)
				(MF
					(NX die)
					(ADVX abends)
					[01;36m(NX[00m [01;31m(ADJX[00m
						(ADJD geoffnet)[01;31m)[00m[01;36m)[00m)
				(VC haben))))
	(SIMPX aber museumsbesuche finde ich auch sehr reizvoll))
Step:Single Word Phrase
{'family': ['NX', 'ADVX', 'NX'], 'auto preterminal span': (9, 10), 'span': (9, 10), 'subtrees': ['ADJD'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'NX')}
(TOP ja da musten wir uns erkundigen ob die abends geoffnet haben aber museumsbesuche finde ich auch sehr reizvoll)

Sentence 627:
0 Initial errors
0 on fringe, 0 iterations

Sentence 628:
16 Initial errors
0 on fringe, 11 iterations
2 Error:Single Word Phrase
2 Error:Clause Attachment
2 Error:UNSET move
2 Error:PP Attachment
2 Error:Modifier Attachment
1 Error:UNSET add
1 Error:UNSET add
1 Error:Unary
1 Error:Single Word Phrase
1 Error:Unary
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK werde)
			[01;36m(MF[00m
				[01;31m(MF[00m
					(NX ich)
					(NX ihnen)
					[01;36m(ADJX[00m [01;31m(NX[00m [01;33m(NX[00m
						(NN neues)[01;31m)[00m[01;36m)[00m[01;31m)[00m
				[01;31m(VC[00m
					[01;31m(VXINF[00m
						(VVINF erzahlen)[01;31m)[00m[01;31m)[00m [01;33mNX)[00m
				[01;31m(NF[00m [01;33m(PX[00m
					(PX
						(APPRART vom)
						[01;31m(NX[00m
							(NX kulturleben) [01;33mPX)[00m
							(PX in hannover)[01;31m)[00m)[01;31m)[00m[01;36m)[00m)
		[01;31m(SIMPX[00m
			[01;31m(KOORD[00m
				(KON und)[01;31m)[00m
			[01;36m(SIMPX[00m
				(VF dann)
				(LK konnen)
				(MF
					(NX wir)
					(NX uns)
					(ADVX ja)
					[01;31m(ADVX[00m
						(ADVX immer)
						[01;36m(ADVX[00m
							(ADV noch)[01;36m)[00m[01;31m)[00m)
				(VC einigen)[01;36m)[00m[01;31m)[00m)[01;36m)[00m
Step:Single Word Phrase
{'family': ['NX', 'NX', 'ADJX'], 'auto preterminal span': (5, 6), 'span': (5, 6), 'subtrees': ['NN'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('NN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK werde)
			[01;36m(MF[00m
				[01;31m(MF[00m
					(NX ich)
					(NX ihnen)
					[01;33m(NX[00m (ADJX neues)[01;31m)[00m
				[01;31m(VC[00m
					[01;31m(VXINF[00m
						(VVINF erzahlen)[01;31m)[00m[01;31m)[00m [01;33mNX)[00m
				[01;31m(NF[00m [01;33m(PX[00m
					(PX
						(APPRART vom)
						[01;31m(NX[00m
							(NX kulturleben) [01;33mPX)[00m
							(PX in hannover)[01;31m)[00m)[01;31m)[00m[01;36m)[00m)
		[01;31m(SIMPX[00m
			[01;31m(KOORD[00m
				(KON und)[01;31m)[00m
			[01;36m(SIMPX[00m
				(VF dann)
				(LK konnen)
				(MF
					(NX wir)
					(NX uns)
					(ADVX ja)
					[01;31m(ADVX[00m
						(ADVX immer)
						[01;36m(ADVX[00m
							(ADV noch)[01;36m)[00m[01;31m)[00m)
				(VC einigen)[01;36m)[00m[01;31m)[00m)[01;36m)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'KOORD', 'VF', 'LK', 'MF', 'VC'], 'mover info': [('SIMPX', (0, 11))], 'old_family': ['SIMPX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('KON', 'ADV', 'VAFIN', 'PPER', 'PPER', 'NN', 'VVINF', 'APPRART', 'NN', 'APPR', 'NE', 'KON', 'ADV', 'VMFIN', 'PPER', 'PRF', 'ADV', 'ADV', 'ADV', 'VVINF'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 20), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': ['KOORD', 'VF', 'LK', 'MF', 'VC'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK werde)
			[01;36m(MF[00m
				[01;31m(MF[00m
					(NX ich)
					(NX ihnen)
					[01;33m(NX[00m (ADJX neues)[01;31m)[00m
				[01;31m(VC[00m
					[01;31m(VXINF[00m
						(VVINF erzahlen)[01;31m)[00m[01;31m)[00m [01;33mNX)[00m
				[01;31m(NF[00m [01;33m(PX[00m
					(PX
						(APPRART vom)
						[01;31m(NX[00m
							(NX kulturleben) [01;33mPX)[00m
							(PX in hannover)[01;31m)[00m)[01;31m)[00m[01;36m)[00m)
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK konnen)
			(MF
				(NX wir)
				(NX uns)
				(ADVX ja)
				[01;31m(ADVX[00m
					(ADVX immer)
					[01;36m(ADVX[00m
						(ADV noch)[01;36m)[00m[01;31m)[00m)
			(VC einigen)[01;36m)[00m))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'ADJX', 'VC', 'NF'], 'mover info': [('VC', (6, 7)), ('NF', (7, 11))], 'old_family': ['KOORD', 'VF', 'LK', 'MF', 'VC', 'NF'], 'start left siblings': ['KOORD', 'VF', 'LK', 'MF'], 'auto preterminals': ('KON', 'ADV', 'VAFIN', 'PPER', 'PPER', 'NN', 'VVINF', 'APPRART', 'NN', 'APPR', 'NE'), 'start right siblings': [], 'end left siblings': ['NX', 'NX', 'ADJX'], 'auto preterminal span': (0, 11), 'movers': ['VC', 'NF'], 'old_parent': 'SIMPX', 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK werde)
			(MF
				(NX ich)
				(NX ihnen)
				[01;36m(NX[00m
					(ADJX neues)
					[01;31m(VC[00m
						[01;31m(VXINF[00m
							(VVINF erzahlen)[01;31m)[00m[01;31m)[00m[01;36m)[00m
				[01;31m(NF[00m [01;33m(PX[00m
					(PX
						(APPRART vom)
						[01;31m(NX[00m
							(NX kulturleben) [01;33mPX)[00m
							(PX in hannover)[01;31m)[00m)[01;31m)[00m))
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK konnen)
			(MF
				(NX wir)
				(NX uns)
				(ADVX ja)
				[01;31m(ADVX[00m
					(ADVX immer)
					[01;36m(ADVX[00m
						(ADV noch)[01;36m)[00m[01;31m)[00m)
			(VC einigen)[01;36m)[00m))
Step:PP Attachment
{'new_parent': 'NF', 'new_family': ['PX', 'PX'], 'mover info': [('PX', (9, 11))], 'old_family': ['NX', 'PX'], 'start left siblings': ['NX'], 'auto preterminals': ('APPRART', 'NN', 'APPR', 'NE'), 'start right siblings': [], 'end left siblings': ['PX'], 'auto preterminal span': (7, 11), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'ADVX'}
(TOP
	(SIMPX
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK werde)
			(MF
				(NX ich)
				(NX ihnen)
				[01;36m(NX[00m
					(ADJX neues)
					[01;31m(VC[00m
						[01;31m(VXINF[00m
							(VVINF erzahlen)[01;31m)[00m[01;31m)[00m[01;36m)[00m
				(PX
					[01;31m(NF[00m
						(PX vom kulturleben)
						(PX in hannover)[01;31m)[00m)))
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK konnen)
			(MF
				(NX wir)
				(NX uns)
				(ADVX ja)
				[01;31m(ADVX[00m
					(ADVX immer)
					[01;36m(ADVX[00m
						(ADV noch)[01;36m)[00m[01;31m)[00m)
			(VC einigen)[01;36m)[00m))
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'ADVX', 'ADVX', 'ADVX'], 'mover info': [('ADVX', (17, 18))], 'old_family': ['ADVX', 'ADV'], 'start left siblings': [], 'auto preterminals': ('PPER', 'PRF', 'ADV', 'ADV', 'ADV'), 'start right siblings': ['ADV'], 'end left siblings': ['NX', 'NX', 'ADVX'], 'auto preterminal span': (14, 19), 'movers': ['ADVX'], 'old_parent': 'ADVX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ADVX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK werde)
			(MF
				(NX ich)
				(NX ihnen)
				[01;36m(NX[00m
					(ADJX neues)
					[01;31m(VC[00m
						[01;31m(VXINF[00m
							(VVINF erzahlen)[01;31m)[00m[01;31m)[00m[01;36m)[00m
				(PX
					[01;31m(NF[00m
						(PX vom kulturleben)
						(PX in hannover)[01;31m)[00m)))
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK konnen)
			(MF wir uns ja immer noch)
			(VC einigen)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['ADJX', 'VC'], 'family': ['NX', 'NX', 'NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'VVINF'), 'right siblings': [(PX (NF (PX (APPRART vom) (NX (NN kulturleben))) (PX (APPR in) (NX (NE hannover)))))], 'left siblings': [(NX (PPER ich)), (NX (PPER ihnen))], 'auto preterminal span': (5, 7), 'span': (5, 7), 'parent': 'MF', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK werde)
			(MF
				(NX ich)
				(NX ihnen)
				(NX
					(ADJX neues)
					[01;31m(VC[00m
						[01;31m(VXINF[00m
							(VVINF erzahlen)[01;31m)[00m[01;31m)[00m)
				(PX
					[01;31m(NF[00m
						(PX vom kulturleben)
						(PX in hannover)[01;31m)[00m)))
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF dann)
			(LK konnen)
			(MF wir uns ja immer noch)
			(VC einigen)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VMFIN', 'PPER', 'PRF', 'ADV', 'ADV', 'ADV', 'VVINF'), 'right siblings': [], 'left siblings': [(SIMPX (KOORD (KON und)) (VF (ADVX (ADV dann))) (LK (VXFIN (VAFIN werde))) (MF (NX (PPER ich)) (NX (PPER ihnen)) (NX (ADJX (NN neues)) (VC (VXINF (VVINF erzahlen)))) (PX (NF (PX (APPRART vom) (NX (NN kulturleben))) (PX (APPR in) (NX (NE hannover))))))), (KOORD (KON und))], 'auto preterminal span': (12, 20), 'span': (12, 20), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK werde)
			(MF
				(NX ich)
				(NX ihnen)
				(NX
					(ADJX neues)
					[01;31m(VC[00m
						[01;31m(VXINF[00m
							(VVINF erzahlen)[01;31m)[00m[01;31m)[00m)
				(PX
					[01;31m(NF[00m
						(PX vom kulturleben)
						(PX in hannover)[01;31m)[00m)))
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		(SIMPX dann konnen wir uns ja immer noch einigen)))
Step:Unary
{'subtrees': ['VXINF'], 'family': ['ADJX', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'VVINF'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (5, 7), 'span': (6, 7), 'left siblings': ['ADJX'], 'label': 'VC', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK werde)
			(MF
				(NX ich)
				(NX ihnen)
				(NX
					(ADJX neues)
					[01;31m(VXINF[00m
						(VVINF erzahlen)[01;31m)[00m)
				(PX
					[01;31m(NF[00m
						(PX vom kulturleben)
						(PX in hannover)[01;31m)[00m)))
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		(SIMPX dann konnen wir uns ja immer noch einigen)))
Step:Single Word Phrase
{'subtrees': ['VVINF'], 'family': ['ADJX', 'VXINF'], 'over_word': True, 'over words': True, 'auto preterminals': ('NN', 'VVINF'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (5, 7), 'span': (6, 7), 'left siblings': ['ADJX'], 'label': 'VXINF', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(SIMPX
		(SIMPX
			(KOORD und)
			(VF dann)
			(LK werde)
			(MF
				(NX ich)
				(NX ihnen)
				(NX neues erzahlen)
				(PX
					[01;31m(NF[00m
						(PX vom kulturleben)
						(PX in hannover)[01;31m)[00m)))
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		(SIMPX dann konnen wir uns ja immer noch einigen)))
Step:Unary
{'subtrees': ['PX', 'PX'], 'family': ['NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'NN', 'APPR', 'NE'), 'right siblings': [], 'parent': 'PX', 'auto preterminal span': (7, 11), 'span': (7, 11), 'left siblings': [], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(SIMPX und dann werde ich ihnen neues erzahlen vom kulturleben in hannover)
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		(SIMPX dann konnen wir uns ja immer noch einigen)))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'ADV', 'VAFIN', 'PPER', 'PPER', 'NN', 'VVINF', 'APPRART', 'NN', 'APPR', 'NE', 'KON', 'ADV', 'VMFIN', 'PPER', 'PRF', 'ADV', 'ADV', 'ADV', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (0, 20), 'span': (11, 12), 'left siblings': ['SIMPX'], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP und dann werde ich ihnen neues erzahlen vom kulturleben in hannover und dann konnen wir uns ja immer noch einigen)

Sentence 629:
0 Initial errors
0 on fringe, 0 iterations

Sentence 630:
0 Initial errors
0 on fringe, 0 iterations

Sentence 631:
0 Initial errors
0 on fringe, 0 iterations

Sentence 632:
0 Initial errors
0 on fringe, 0 iterations

Sentence 633:
0 Initial errors
0 on fringe, 0 iterations

Sentence 634:
0 Initial errors
0 on fringe, 0 iterations

Sentence 635:
0 Initial errors
0 on fringe, 0 iterations

Sentence 636:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Unary
1 Error:Co-ordination
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(KOORD und)
		(LV
			(SIMPX
				[01;31m(SIMPX[00m
					(C falls)
					(MF sich irgendwas)
					(VC andert)[01;31m)[00m
				(KON oder)
				[01;36m(LV[00m
					(SIMPX
						(C wenn)
						(MF wir nahere einzelheiten)
						(VC wissen))[01;36m)[00m))
		(VF dann)
		(LK kontaktieren)
		(MF wir uns einfach noch mal)))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['SIMPX', 'KON', 'LV'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ADJA', 'NN', 'VVFIN'), 'right siblings': [], 'left siblings': [(SIMPX (C (KOUS falls)) (MF (NX (PRF sich)) (NX (PIS irgendwas))) (VC (VXFIN (VVFIN andert)))), (KON oder)], 'auto preterminal span': (6, 11), 'span': (6, 11), 'parent': 'SIMPX', 'label': 'LV', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(KOORD und)
		(LV
			(SIMPX
				[01;31m(SIMPX[00m
					(C falls)
					(MF sich irgendwas)
					(VC andert)[01;31m)[00m
				(KON oder)
				(LV wenn wir nahere einzelheiten wissen)))
		(VF dann)
		(LK kontaktieren)
		(MF wir uns einfach noch mal)))
Step:Co-ordination
{'subtrees': ['C', 'MF', 'VC'], 'family': ['SIMPX', 'KON', 'LV'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PRF', 'PIS', 'VVFIN', 'KON', 'KOUS', 'PPER', 'ADJA', 'NN', 'VVFIN'), 'right siblings': ['KON', 'LV'], 'parent': 'SIMPX', 'auto preterminal span': (1, 11), 'span': (1, 5), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP und falls sich irgendwas andert oder wenn wir nahere einzelheiten wissen dann kontaktieren wir uns einfach noch mal)

Sentence 637:
0 Initial errors
0 on fringe, 0 iterations

Sentence 638:
0 Initial errors
0 on fringe, 0 iterations

Sentence 639:
0 Initial errors
0 on fringe, 0 iterations

Sentence 640:
0 Initial errors
0 on fringe, 0 iterations

Sentence 641:
0 Initial errors
0 on fringe, 0 iterations

Sentence 642:
0 Initial errors
0 on fringe, 0 iterations

Sentence 643:
0 Initial errors
0 on fringe, 0 iterations

Sentence 644:
3 Initial errors
0 on fringe, 1 iterations
3 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wie wir bereits ausgemacht haben)
		(LK wollten)
		(MF
			(NX wir)
			[01;36m(PX[00m
				[01;31m(PX[00m
					(APPR auf)
					[01;33m(NX[00m (NX eine eineinhalbtagige geschaftsreise)[01;31m)[00m
				(PX nach hamburg)[01;36m)[00m) [01;33mNX)[00m
		(VC fahren)))
Step:PP Attachment
{'new_parent': 'PX', 'new_family': ['APPR', 'NX', 'PX'], 'mover info': [('PX', (11, 13))], 'old_family': ['NX', 'PX', 'PX'], 'start left siblings': ['NX', 'PX'], 'auto preterminals': ('PPER', 'APPR', 'ART', 'ADJA', 'NN', 'APPR', 'NE'), 'start right siblings': [], 'end left siblings': ['APPR', 'NX'], 'auto preterminal span': (6, 13), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'MF', 'added and moved': True, 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'NX'}
(TOP wie wir bereits ausgemacht haben wollten wir auf eine eineinhalbtagige geschaftsreise nach hamburg fahren)

Sentence 645:
0 Initial errors
0 on fringe, 0 iterations

Sentence 646:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wir)
		(LK wollten)
		(MF
			(ADVX jetzt)
			[01;36m(SIMPX[00m
				(SIMPX glaube ich)
				(ADVX noch)
				(ADVX mal)[01;36m)[00m
			(NX die termine))
		(VC besprechen)))
Step:Modifier Attachment
{'subtrees': ['SIMPX', 'ADVX', 'ADVX'], 'family': ['ADVX', 'SIMPX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'ADV', 'ADV'), 'right siblings': [(NX (ART die) (NN termine))], 'left siblings': [(ADVX (ADV jetzt))], 'auto preterminal span': (3, 7), 'span': (3, 7), 'parent': 'MF', 'label': 'SIMPX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP wir wollten jetzt glaube ich noch mal die termine besprechen)

Sentence 647:
0 Initial errors
0 on fringe, 0 iterations

Sentence 648:
0 Initial errors
0 on fringe, 0 iterations

Sentence 649:
0 Initial errors
0 on fringe, 0 iterations

Sentence 650:
7 Initial errors
0 on fringe, 5 iterations
3 Error:NP Attachment
1 Error:UNSET remove
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		(VF ich)
		(LK hatte)
		(MF jetzt am vierzehnten und funfzehnten januar zeit)
		[01;31m(NF[00m
			[01;31m(PX[00m
				(KON oder)
				[01;36m(NX[00m [01;31m(PX[00m
					[01;36m(PX[00m
						(ADVX auch)
						[01;31m(PX[00m
							(APPRART am)
							(NX wochenende)[01;31m)[00m[01;36m)[00m
					(NX siebzehnter achtzehnter januar)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:NP Attachment
{'new_parent': 'PX', 'new_family': ['KON', 'PX', 'NX'], 'mover info': [('NX', (14, 17))], 'old_family': ['ADVX', 'PX', 'NX'], 'start left siblings': ['ADVX', 'PX'], 'auto preterminals': ('KON', 'ADV', 'APPRART', 'NN', 'ADJA', 'ADJA', 'NN'), 'start right siblings': [], 'end left siblings': ['KON', 'PX'], 'auto preterminal span': (10, 17), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'PX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'NX'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		(VF ich)
		(LK hatte)
		(MF jetzt am vierzehnten und funfzehnten januar zeit)
		[01;31m(NF[00m
			[01;31m(PX[00m
				(KON oder)
				(NX
					(PX
						(ADVX auch)
						[01;31m(PX[00m
							(APPRART am)
							(NX wochenende)[01;31m)[00m)
					(NX siebzehnter achtzehnter januar))[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'NF'], 'family': ['DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'VAFIN', 'ADV', 'APPRART', 'ADJA', 'KON', 'ADJA', 'NN', 'NN', 'KON', 'ADV', 'APPRART', 'NN', 'ADJA', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 17), 'span': (1, 17), 'left siblings': ['DM'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(VF ich)
	(LK hatte)
	(MF jetzt am vierzehnten und funfzehnten januar zeit)
	[01;31m(NF[00m
		[01;31m(PX[00m
			(KON oder)
			(NX
				(PX
					(ADVX auch)
					[01;31m(PX[00m
						(APPRART am)
						(NX wochenende)[01;31m)[00m)
				(NX siebzehnter achtzehnter januar))[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['PX'], 'family': ['DM', 'VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'VAFIN', 'ADV', 'APPRART', 'ADJA', 'KON', 'ADJA', 'NN', 'NN', 'KON', 'ADV', 'APPRART', 'NN', 'ADJA', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 17), 'span': (10, 17), 'left siblings': ['DM', 'VF', 'LK', 'MF'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(VF ich)
	(LK hatte)
	(MF jetzt am vierzehnten und funfzehnten januar zeit)
	[01;31m(PX[00m
		(KON oder)
		(NX
			(PX
				(ADVX auch)
				[01;31m(PX[00m
					(APPRART am)
					(NX wochenende)[01;31m)[00m)
			(NX siebzehnter achtzehnter januar))[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['KON', 'NX'], 'family': ['DM', 'VF', 'LK', 'MF', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'VAFIN', 'ADV', 'APPRART', 'ADJA', 'KON', 'ADJA', 'NN', 'NN', 'KON', 'ADV', 'APPRART', 'NN', 'ADJA', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 17), 'span': (10, 17), 'left siblings': ['DM', 'VF', 'LK', 'MF'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(VF ich)
	(LK hatte)
	(MF jetzt am vierzehnten und funfzehnten januar zeit)
	(KON oder)
	(NX
		(PX
			(ADVX auch)
			[01;31m(PX[00m
				(APPRART am)
				(NX wochenende)[01;31m)[00m)
		(NX siebzehnter achtzehnter januar)))
Step:UNSET remove
{'subtrees': ['APPRART', 'NX'], 'family': ['ADVX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'APPRART', 'NN'), 'right siblings': [], 'parent': 'PX', 'auto preterminal span': (11, 14), 'span': (12, 14), 'left siblings': ['ADVX'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ja ich hatte jetzt am vierzehnten und funfzehnten januar zeit oder auch am wochenende siebzehnter achtzehnter januar)

Sentence 651:
4 Initial errors
0 on fringe, 2 iterations
3 Error:Co-ordination
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(PX[00m
	(PX
		(KON und)
		[01;31m(PX[00m [01;33m(PX[00m
			(APPR zwischen)
			[01;31m(NX[00m
				(NX dem dreiundzwanzigsten und sechsundzwanzigsten januar) [01;33mPX) PX)[00m
				(KON und)
				(NX dem achtundzwanzigsten und neunundzwanzigsten januar)[01;31m)[00m[01;31m)[00m))
Step:Co-ordination
{'new_parent': 'PX', 'new_family': ['KON', 'PX', 'KON', 'NX'], 'mover info': [('KON', (7, 8)), ('NX', (8, 13))], 'old_family': ['NX', 'KON', 'NX'], 'start left siblings': ['NX'], 'auto preterminals': ('KON', 'APPR', 'ART', 'ADJA', 'KON', 'ADJA', 'NN', 'KON', 'ART', 'ADJA', 'KON', 'ADJA', 'NN'), 'start right siblings': [], 'end left siblings': ['KON', 'PX'], 'auto preterminal span': (0, 13), 'movers': ['KON', 'NX'], 'old_parent': 'NX', 'end right siblings': [], 'classified_type': 'Co-ordination', 'type': 'move'}
(TOP
	(PX
		[01;36m(PX[00m
			(KON und)
			(PX zwischen dem dreiundzwanzigsten und sechsundzwanzigsten januar)[01;36m)[00m
		(KON und)
		(NX dem achtundzwanzigsten und neunundzwanzigsten januar)))
Step:PP Attachment
{'subtrees': ['KON', 'PX'], 'family': ['PX', 'KON', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'APPR', 'ART', 'ADJA', 'KON', 'ADJA', 'NN'), 'right siblings': [(KON und), (NX (ART dem) (ADJX (ADJX (ADJA achtundzwanzigsten)) (KON und) (ADJX (ADJA neunundzwanzigsten))) (NN januar))], 'left siblings': [], 'auto preterminal span': (0, 7), 'span': (0, 7), 'parent': 'PX', 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP und zwischen dem dreiundzwanzigsten und sechsundzwanzigsten januar und dem achtundzwanzigsten und neunundzwanzigsten januar)

Sentence 652:
6 Initial errors
0 on fringe, 4 iterations
3 Error:Co-ordination
1 Error:Single Word Phrase
1 Error:Clause Attachment
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;31m(P[00m [01;33m(SIMPX[00m
		(SIMPX da wurde mir der letzte termin am besten passen)
		(KOUS weil)
		[01;31m(SIMPX[00m
			(SIMPX am vierzehnten und funfzehnten ist eine messe) [01;33mSIMPX)[00m
			[01;36m(SIMPX[00m
				[01;36m(KOORD[00m
					(KON und)[01;36m)[00m
				[01;31m(SIMPX[00m
					(VF in der letzten januarwoche)
					(LK ist)
					(MF bei mir bis auf montag eigentlich alles frei)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m)
Step:Co-ordination
{'new_parent': 'P', 'new_family': ['SIMPX', 'KOUS', 'SIMPX', 'SIMPX'], 'mover info': [('SIMPX', (11, 18))], 'old_family': ['SIMPX', 'KON', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'ART', 'ADJA', 'NN', 'PTKA', 'ADJD', 'VVINF', 'KOUS', 'APPRART', 'NN', 'KON', 'NN', 'VAFIN', 'ART', 'NN', 'KON', 'APPR', 'ART', 'ADJA', 'NN', 'VAFIN', 'APPR', 'PPER', 'APPR', 'APPR', 'NN', 'ADV', 'PIS', 'ADJD'), 'start right siblings': ['KON', 'SIMPX'], 'end left siblings': ['SIMPX', 'KOUS'], 'auto preterminal span': (1, 32), 'adding node already present': False, 'movers': ['SIMPX'], 'old_parent': 'SIMPX', 'added and moved': True, 'end right siblings': ['SIMPX'], 'classified_type': 'Co-ordination', 'type': 'move', 'added label': 'KOORD'}
(TOP
	(DM ja)
	[01;31m(P[00m
		(SIMPX da wurde mir der letzte termin am besten passen weil am vierzehnten und funfzehnten ist eine messe)
		(SIMPX
			[01;36m(KOORD[00m
				(KON und)[01;36m)[00m
			[01;31m(SIMPX[00m
				(VF in der letzten januarwoche)
				(LK ist)
				(MF bei mir bis auf montag eigentlich alles frei)[01;31m)[00m)[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON',), 'right siblings': [(SIMPX (VF (PX (APPR in) (NX (ART der) (ADJX (ADJA letzten)) (NN januarwoche)))) (LK (VXFIN (VAFIN ist))) (MF (PX (APPR bei) (NX (PPER mir))) (PX (APPR bis) (PX (APPR auf) (NX (NN montag)))) (ADVX (ADV eigentlich)) (NX (PIS alles)) (ADJX (ADJD frei))))], 'left siblings': [], 'auto preterminal span': (18, 19), 'span': (18, 19), 'parent': 'SIMPX', 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM ja)
	[01;31m(P[00m
		(SIMPX da wurde mir der letzte termin am besten passen weil am vierzehnten und funfzehnten ist eine messe)
		(SIMPX
			(KOORD und)
			[01;31m(SIMPX[00m
				(VF in der letzten januarwoche)
				(LK ist)
				(MF bei mir bis auf montag eigentlich alles frei)[01;31m)[00m)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['DM', 'P'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'VAFIN', 'PPER', 'ART', 'ADJA', 'NN', 'PTKA', 'ADJD', 'VVINF', 'KOUS', 'APPRART', 'NN', 'KON', 'NN', 'VAFIN', 'ART', 'NN', 'KON', 'APPR', 'ART', 'ADJA', 'NN', 'VAFIN', 'APPR', 'PPER', 'APPR', 'APPR', 'NN', 'ADV', 'PIS', 'ADJD'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 32), 'span': (1, 32), 'left siblings': ['DM'], 'label': 'P', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX da wurde mir der letzte termin am besten passen weil am vierzehnten und funfzehnten ist eine messe)
	(SIMPX
		(KOORD und)
		[01;31m(SIMPX[00m
			(VF in der letzten januarwoche)
			(LK ist)
			(MF bei mir bis auf montag eigentlich alles frei)[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'APPR', 'ART', 'ADJA', 'NN', 'VAFIN', 'APPR', 'PPER', 'APPR', 'APPR', 'NN', 'ADV', 'PIS', 'ADJD'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (18, 32), 'span': (19, 32), 'left siblings': ['KOORD'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ja da wurde mir der letzte termin am besten passen weil am vierzehnten und funfzehnten ist eine messe und in der letzten januarwoche ist bei mir bis auf montag eigentlich alles frei)

Sentence 653:
0 Initial errors
0 on fringe, 0 iterations

Sentence 654:
0 Initial errors
0 on fringe, 0 iterations

Sentence 655:
3 Initial errors
0 on fringe, 3 iterations
1 Error:UNSET add
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(PX
				(APPR bezuglich)
				(NX des verkehrsmittels))[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF was)
			(LK haben)
			(MF sie sich da)
			(VC vorgestellt)[01;36m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['LV', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PWS', 'VAFIN', 'PPER', 'PRF', 'ADV', 'VVPP'), 'right siblings': [], 'left siblings': [(LV (PX (APPR bezuglich) (NX (ART des) (NN verkehrsmittels))))], 'auto preterminal span': (3, 9), 'span': (3, 9), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(PX
				(APPR bezuglich)
				(NX des verkehrsmittels))[01;31m)[00m
		(SIMPX was haben sie sich da vorgestellt)[01;31m)[00m)
Step:Unary
{'subtrees': ['PX'], 'family': ['LV', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'PWS', 'VAFIN', 'PPER', 'PRF', 'ADV', 'VVPP'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (0, 9), 'span': (0, 3), 'left siblings': [], 'label': 'LV', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	[01;31m(SIMPX[00m
		(PX bezuglich des verkehrsmittels)
		(SIMPX was haben sie sich da vorgestellt)[01;31m)[00m)
Step:Unary
{'subtrees': ['PX', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'PWS', 'VAFIN', 'PPER', 'PRF', 'ADV', 'VVPP'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 9), 'span': (0, 9), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP bezuglich des verkehrsmittels was haben sie sich da vorgestellt)

Sentence 656:
10 Initial errors
0 on fringe, 8 iterations
2 Error:Single Word Phrase
2 Error:PP Attachment
1 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:Clause Attachment
1 Error:UNSET remove
1 Error:PP Attachment
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX ich habe mir da einige zugverbindungen und fluge geben lassen)
	[01;31m(SIMPX[00m
		[01;31m(SIMPX[00m
			(KOORD und)
			(VF der zug)
			(LK fahrt)
			(MF [01;33m(ADJX[00m
				(ADJX
					(ADJX stundlich)
					(PX
						(PX ab vier uhr sechsundfunfzig)
						(PX
							(APPRART am)
							[01;36m(ADVX[00m [01;31m(NX[00m
								(NN morgen)[01;31m)[00m[01;36m)[00m))))[01;31m)[00m
		[01;36m(KOORD[00m
			(KON und)[01;36m)[00m
		[01;31m(SIMPX[00m
			(VF er)
			(LK braucht)
			[01;31m(MF[00m
				(NX viereinhalb stunden) [01;33mADJX)[00m
				[01;36m(PX[00m
					(PX bis hannover)
					[01;31m(PX[00m
						(APPR von)
						(NX munchen)
						(APZR aus)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'family': ['APPRART', 'ADVX'], 'auto preterminal span': (21, 22), 'span': (21, 22), 'subtrees': ['NN'], 'parent': 'PX', 'over_word': True, 'auto preterminals': ('NN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADVX')}
(TOP
	(DM ja)
	(SIMPX ich habe mir da einige zugverbindungen und fluge geben lassen)
	[01;31m(SIMPX[00m
		[01;31m(SIMPX[00m
			(KOORD und)
			(VF der zug)
			(LK fahrt)
			[01;33m(ADJX[00m (MF stundlich ab vier uhr sechsundfunfzig am morgen)[01;31m)[00m
		[01;36m(KOORD[00m
			(KON und)[01;36m)[00m
		[01;31m(SIMPX[00m
			(VF er)
			(LK braucht)
			[01;31m(MF[00m
				(NX viereinhalb stunden) [01;33mADJX)[00m
				[01;36m(PX[00m
					(PX bis hannover)
					[01;31m(PX[00m
						(APPR von)
						(NX munchen)
						(APZR aus)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:PP Attachment
{'new_parent': 'PX', 'new_family': ['PX', 'APPR', 'NX', 'APZR'], 'mover info': [('PX', (27, 29))], 'old_family': ['NX', 'PX', 'PX'], 'start left siblings': ['NX'], 'auto preterminals': ('CARD', 'NN', 'APPR', 'NE', 'APPR', 'NE', 'APZR'), 'start right siblings': ['PX'], 'end left siblings': [], 'auto preterminal span': (25, 32), 'movers': ['PX'], 'old_parent': 'MF', 'end right siblings': ['APPR', 'NX', 'APZR'], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX ich habe mir da einige zugverbindungen und fluge geben lassen)
	[01;31m(SIMPX[00m
		[01;31m(SIMPX[00m
			(KOORD und)
			(VF der zug)
			(LK fahrt)
			[01;33m(ADJX[00m (MF stundlich ab vier uhr sechsundfunfzig am morgen)[01;31m)[00m
		[01;36m(KOORD[00m
			(KON und)[01;36m)[00m
		[01;31m(SIMPX[00m
			(VF er)
			(LK braucht)
			[01;31m(MF[00m
				(NX viereinhalb stunden) [01;33mADJX)[00m
				(PX bis hannover von munchen aus)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON',), 'right siblings': [(SIMPX (VF (NX (PPER er))) (LK (VXFIN (VVFIN braucht))) (MF (NX (ADJX (CARD viereinhalb)) (NN stunden)) (PX (PX (APPR bis) (NX (NE hannover))) (APPR von) (NX (NE munchen)) (APZR aus))))], 'left siblings': [(SIMPX (KOORD (KON und)) (VF (NX (ART der) (NN zug))) (LK (VXFIN (VVFIN fahrt))) (MF (ADJX (ADJX (ADJD stundlich)) (PX (PX (APPR ab) (NX (NX (ADJX (CARD vier)) (NN uhr)) (ADJX (CARD sechsundfunfzig)))) (PX (APPRART am) (ADVX (NN morgen)))))))], 'auto preterminal span': (22, 23), 'span': (22, 23), 'parent': 'SIMPX', 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX ich habe mir da einige zugverbindungen und fluge geben lassen)
	[01;31m(SIMPX[00m
		[01;31m(SIMPX[00m
			(KOORD und)
			(VF der zug)
			(LK fahrt)
			[01;33m(ADJX[00m (MF stundlich ab vier uhr sechsundfunfzig am morgen)[01;31m)[00m
		(KOORD und)
		[01;31m(SIMPX[00m
			(VF er)
			(LK braucht)
			[01;31m(MF[00m
				(NX viereinhalb stunden) [01;33mADJX)[00m
				(PX bis hannover von munchen aus)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['KOORD', 'VF', 'LK', 'MF'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ART', 'NN', 'VVFIN', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD', 'APPRART', 'NN', 'KON', 'PPER', 'VVFIN', 'CARD', 'NN', 'APPR', 'NE', 'APPR', 'NE', 'APZR'), 'right siblings': ['KOORD', 'SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (11, 32), 'span': (11, 22), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX ich habe mir da einige zugverbindungen und fluge geben lassen)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF der zug)
		(LK fahrt)
		[01;33m(ADJX[00m (MF stundlich ab vier uhr sechsundfunfzig am morgen)
		(KOORD und)
		[01;31m(SIMPX[00m
			(VF er)
			(LK braucht)
			[01;31m(MF[00m
				(NX viereinhalb stunden) [01;33mADJX)[00m
				(PX bis hannover von munchen aus)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['KOORD', 'VF', 'LK', 'MF', 'KOORD', 'SIMPX'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'VAFIN', 'PRF', 'ADV', 'PIAT', 'NN', 'KON', 'NN', 'VVINF', 'VVINF', 'KON', 'ART', 'NN', 'VVFIN', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD', 'APPRART', 'NN', 'KON', 'PPER', 'VVFIN', 'CARD', 'NN', 'APPR', 'NE', 'APPR', 'NE', 'APZR'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 32), 'span': (11, 32), 'left siblings': ['DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX ich habe mir da einige zugverbindungen und fluge geben lassen)
	(KOORD und)
	(VF der zug)
	(LK fahrt)
	[01;33m(ADJX[00m (MF stundlich ab vier uhr sechsundfunfzig am morgen)
	(KOORD und)
	[01;31m(SIMPX[00m
		(VF er)
		(LK braucht)
		[01;31m(MF[00m
			(NX viereinhalb stunden) [01;33mADJX)[00m
			(PX bis hannover von munchen aus)[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['DM', 'SIMPX', 'KOORD', 'VF', 'LK', 'MF', 'KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'VAFIN', 'PRF', 'ADV', 'PIAT', 'NN', 'KON', 'NN', 'VVINF', 'VVINF', 'KON', 'ART', 'NN', 'VVFIN', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD', 'APPRART', 'NN', 'KON', 'PPER', 'VVFIN', 'CARD', 'NN', 'APPR', 'NE', 'APPR', 'NE', 'APZR'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 32), 'span': (23, 32), 'left siblings': ['DM', 'SIMPX', 'KOORD', 'VF', 'LK', 'MF', 'KOORD'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX ich habe mir da einige zugverbindungen und fluge geben lassen)
	(KOORD und)
	(VF der zug)
	(LK fahrt)
	[01;33m(ADJX[00m (MF stundlich ab vier uhr sechsundfunfzig am morgen)
	(KOORD und)
	(VF er)
	(LK braucht)
	[01;31m(MF[00m
		(NX viereinhalb stunden) [01;33mADJX)[00m
		(PX bis hannover von munchen aus)[01;31m)[00m)
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['DM', 'SIMPX', 'KOORD', 'VF', 'LK', 'MF', 'KOORD', 'VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'VAFIN', 'PRF', 'ADV', 'PIAT', 'NN', 'KON', 'NN', 'VVINF', 'VVINF', 'KON', 'ART', 'NN', 'VVFIN', 'ADJD', 'APPR', 'CARD', 'NN', 'CARD', 'APPRART', 'NN', 'KON', 'PPER', 'VVFIN', 'CARD', 'NN', 'APPR', 'NE', 'APPR', 'NE', 'APZR'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 32), 'span': (25, 32), 'left siblings': ['DM', 'SIMPX', 'KOORD', 'VF', 'LK', 'MF', 'KOORD', 'VF', 'LK'], 'label': 'MF', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX ich habe mir da einige zugverbindungen und fluge geben lassen)
	(KOORD und)
	(VF der zug)
	(LK fahrt)
	[01;36m(ADJX[00m
		(MF stundlich ab vier uhr sechsundfunfzig am morgen)
		(KOORD und)
		(VF er)
		(LK braucht)
		(NX viereinhalb stunden)[01;36m)[00m
	(PX bis hannover von munchen aus))
Step:Modifier Attachment
{'subtrees': ['MF', 'KOORD', 'VF', 'LK', 'NX'], 'family': ['DM', 'SIMPX', 'KOORD', 'VF', 'LK', 'ADJX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJD', 'APPR', 'CARD', 'NN', 'CARD', 'APPRART', 'NN', 'KON', 'PPER', 'VVFIN', 'CARD', 'NN'), 'right siblings': [(PX (PX (APPR bis) (NX (NE hannover))) (APPR von) (NX (NE munchen)) (APZR aus))], 'left siblings': [(DM (PTKANT ja)), (SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VAFIN habe))) (MF (NX (PRF mir)) (ADVX (ADV da)) (NX (PIAT einige) (NX (NX (NN zugverbindungen)) (KON und) (NX (NN fluge))))) (VC (VXINF (VVINF geben)) (VXINF (VVINF lassen)))), (KOORD (KON und)), (VF (NX (ART der) (NN zug))), (LK (VXFIN (VVFIN fahrt)))], 'auto preterminal span': (15, 27), 'span': (15, 27), 'parent': 'TOP', 'label': 'ADJX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP ja ich habe mir da einige zugverbindungen und fluge geben lassen und der zug fahrt stundlich ab vier uhr sechsundfunfzig am morgen und er braucht viereinhalb stunden bis hannover von munchen aus)

Sentence 657:
6 Initial errors
0 on fringe, 6 iterations
1 Error:UNSET add
1 Error:Unary
1 Error:Co-ordination
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	(SIMPX
		(KOORD und)
		(VF das flugzeug)
		[01;31m(FKOORD[00m
			[01;31m(LKMVC[00m
				(LK wurde)
				(MF
					[01;31m(ADJX[00m
						(ADJX stundlich)
						(PX ab sieben uhr bis achtzehn uhr)[01;31m)[00m)
				[01;36m(VC[00m
					[01;36m(VXINF[00m
						(VXINF fahren)
						(VC fliegen)[01;36m)[00m[01;36m)[00m[01;31m)[00m [01;33mSIMPX)[00m
			(KON und)
			(LKM braucht siebzig minuten)[01;31m)[00m))
Step:UNSET add
{'subtrees': ['VXINF', 'VC'], 'family': ['LK', 'MF', 'VXINF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVINF', 'VVINF'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VAFIN wurde))), (MF (ADJX (ADJX (ADJD stundlich)) (PX (PX (APPR ab) (NX (ADJX (CARD sieben)) (NN uhr))) (PX (APPR bis) (NX (ADJX (CARD achtzehn)) (NN uhr))))))], 'auto preterminal span': (11, 13), 'span': (11, 13), 'parent': 'LKMVC', 'label': 'VXINF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP [01;33m(SIMPX[00m
	(SIMPX
		(KOORD und)
		(VF das flugzeug)
		[01;31m(FKOORD[00m
			[01;31m(LKMVC[00m
				(LK wurde)
				(MF
					[01;31m(ADJX[00m
						(ADJX stundlich)
						(PX ab sieben uhr bis achtzehn uhr)[01;31m)[00m)
				[01;36m(VC[00m
					(VXINF
						(VXINF fahren)
						(VC fliegen))[01;36m)[00m[01;31m)[00m [01;33mSIMPX)[00m
			(KON und)
			(LKM braucht siebzig minuten)[01;31m)[00m))
Step:Unary
{'subtrees': ['VXINF'], 'family': ['LK', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVINF', 'VVINF'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VAFIN wurde))), (MF (ADJX (ADJX (ADJD stundlich)) (PX (PX (APPR ab) (NX (ADJX (CARD sieben)) (NN uhr))) (PX (APPR bis) (NX (ADJX (CARD achtzehn)) (NN uhr))))))], 'auto preterminal span': (11, 13), 'span': (11, 13), 'parent': 'LKMVC', 'label': 'VC', 'classified_type': 'Unary', 'type': 'add'}
(TOP [01;33m(SIMPX[00m
	(SIMPX
		(KOORD und)
		(VF das flugzeug)
		[01;31m(FKOORD[00m
			[01;31m(LKMVC[00m
				(LK wurde)
				(MF
					[01;31m(ADJX[00m
						(ADJX stundlich)
						(PX ab sieben uhr bis achtzehn uhr)[01;31m)[00m)
				(VC fahren fliegen)[01;31m)[00m [01;33mSIMPX)[00m
			(KON und)
			(LKM braucht siebzig minuten)[01;31m)[00m))
Step:Co-ordination
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['LKMVC', 'KON', 'LKM'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'ADJD', 'APPR', 'CARD', 'NN', 'APPR', 'CARD', 'NN', 'VVINF', 'VVINF', 'KON', 'VVFIN', 'CARD', 'NN'), 'right siblings': ['KON', 'LKM'], 'parent': 'FKOORD', 'auto preterminal span': (3, 17), 'span': (3, 13), 'left siblings': [], 'label': 'LKMVC', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP [01;33m(SIMPX[00m
	(SIMPX
		(KOORD und)
		(VF das flugzeug)
		[01;31m(FKOORD[00m
			(LK wurde)
			(MF
				[01;31m(ADJX[00m
					(ADJX stundlich)
					(PX ab sieben uhr bis achtzehn uhr)[01;31m)[00m)
			(VC fahren fliegen) [01;33mSIMPX)[00m
			(KON und)
			(LKM braucht siebzig minuten)[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['LK', 'MF', 'VC', 'KON', 'LKM'], 'family': ['KOORD', 'VF', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ART', 'NN', 'VAFIN', 'ADJD', 'APPR', 'CARD', 'NN', 'APPR', 'CARD', 'NN', 'VVINF', 'VVINF', 'KON', 'VVFIN', 'CARD', 'NN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 17), 'span': (3, 17), 'left siblings': ['KOORD', 'VF'], 'label': 'FKOORD', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(KOORD und)
			(VF das flugzeug)
			(LK wurde)
			(MF
				[01;31m(ADJX[00m
					(ADJX stundlich)
					(PX ab sieben uhr bis achtzehn uhr)[01;31m)[00m)
			(VC fahren fliegen)[01;36m)[00m
		(KON und)
		(LKM braucht siebzig minuten)))
Step:UNSET add
{'subtrees': ['KOORD', 'VF', 'LK', 'MF', 'VC'], 'family': ['SIMPX', 'KON', 'LKM'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ART', 'NN', 'VAFIN', 'ADJD', 'APPR', 'CARD', 'NN', 'APPR', 'CARD', 'NN', 'VVINF', 'VVINF'), 'right siblings': [(KON und), (LKM (LK (VXFIN (VVFIN braucht))) (MF (NX (ADJX (CARD siebzig)) (NN minuten))))], 'left siblings': [], 'auto preterminal span': (0, 13), 'span': (0, 13), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(KOORD und)
			(VF das flugzeug)
			(LK wurde)
			(MF
				[01;31m(ADJX[00m
					(ADJX stundlich)
					(PX ab sieben uhr bis achtzehn uhr)[01;31m)[00m)
			(VC fahren fliegen))
		(KON und)
		(LKM braucht siebzig minuten)))
Step:Unary
{'subtrees': ['ADJX', 'PX'], 'family': ['ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJD', 'APPR', 'CARD', 'NN', 'APPR', 'CARD', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (4, 11), 'span': (4, 11), 'left siblings': [], 'label': 'ADJX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP und das flugzeug wurde stundlich ab sieben uhr bis achtzehn uhr fahren fliegen und braucht siebzig minuten)

Sentence 658:
0 Initial errors
0 on fringe, 0 iterations

Sentence 659:
0 Initial errors
0 on fringe, 0 iterations

Sentence 660:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Single Word Phrase
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(PX[00m
		[01;36m(DM[00m [01;31m(ADVX[00m
			(ADV eben)[01;31m)[00m[01;36m)[00m
		[01;36m(DM[00m
			(PX
				(APPR aus)
				(NX zeitgrunden))[01;36m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'family': ['DM', 'PX'], 'auto preterminal span': (0, 1), 'span': (0, 1), 'subtrees': ['ADV'], 'parent': 'PX', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'DM')}
(TOP
	[01;31m(PX[00m
		(DM eben)
		[01;36m(DM[00m
			(PX
				(APPR aus)
				(NX zeitgrunden))[01;36m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['PX'], 'family': ['DM', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NN'), 'right siblings': [], 'left siblings': [(DM (ADV eben))], 'auto preterminal span': (1, 3), 'span': (1, 3), 'parent': 'PX', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(PX[00m
		(DM eben)
		(DM aus zeitgrunden)[01;31m)[00m)
Step:Unary
{'subtrees': ['DM', 'DM'], 'family': ['PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'APPR', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 3), 'span': (0, 3), 'left siblings': [], 'label': 'PX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP eben aus zeitgrunden)

Sentence 661:
0 Initial errors
0 on fringe, 0 iterations

Sentence 662:
0 Initial errors
0 on fringe, 0 iterations

Sentence 663:
0 Initial errors
0 on fringe, 0 iterations

Sentence 664:
10 Initial errors
0 on fringe, 5 iterations
5 Error:NP Attachment
2 Error:Single Word Phrase
1 Error:Unary
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(NX[00m
		(PX zum einen)
		[01;31m(NX[00m
			(NX das maritimhotel in hannover)
			[01;36m(NF[00m
				(R
					(C welches)
					(FKOORD
						(MVC am bahnhof liegt)
						(KON und)
						(MVC [01;33m(MF[00m
							[01;31m(MF[00m
								(PX zum zentrum)
								[01;31m(NX[00m
									(NX funfzehn minuten) [01;33mMF)[00m
									[01;36m(VXINF[00m [01;31m(NX[00m [01;33m(VC[00m
										(NN laufzeit)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m
							[01;31m(VC[00m
								(VXFIN
									(VAFIN hat))[01;31m)[00m)))[01;36m)[00m[01;31m)[00m[01;31m)[00m) [01;33mVC)[00m
Step:NP Attachment
{'new_parent': 'VC', 'new_family': ['NX', 'VXFIN'], 'mover info': [('NX', (15, 16))], 'old_family': ['NX', 'NX'], 'start left siblings': ['NX'], 'auto preterminals': ('APPRART', 'NN', 'CARD', 'NN', 'NN', 'VAFIN'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (11, 17), 'movers': ['NX'], 'old_parent': 'NX', 'POS confusion': ('NN', 'NN'), 'end right siblings': ['VXFIN'], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	[01;31m(NX[00m
		(PX zum einen)
		[01;31m(NX[00m
			(NX das maritimhotel in hannover)
			[01;36m(NF[00m
				(R
					(C welches)
					(FKOORD
						(MVC am bahnhof liegt)
						(KON und)
						(MVC
							(MF zum zentrum funfzehn minuten)
							(VC
								[01;36m(VXINF[00m [01;31m(NX[00m
									(NN laufzeit)[01;31m)[00m[01;36m)[00m
								(VXFIN hat)))))[01;36m)[00m[01;31m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'family': ['VXINF', 'VXFIN'], 'auto preterminal span': (15, 16), 'span': (15, 16), 'subtrees': ['NN'], 'parent': 'VC', 'over_word': True, 'auto preterminals': ('NN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'VXINF')}
(TOP
	[01;31m(NX[00m
		(PX zum einen)
		[01;31m(NX[00m
			(NX das maritimhotel in hannover)
			[01;36m(NF[00m
				(R
					(C welches)
					(FKOORD am bahnhof liegt und zum zentrum funfzehn minuten laufzeit hat))[01;36m)[00m[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['R'], 'family': ['NX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PRELS', 'APPRART', 'NN', 'VVFIN', 'KON', 'APPRART', 'NN', 'CARD', 'NN', 'NN', 'VAFIN'), 'right siblings': [], 'left siblings': [(NX (NX (ART das) (NE maritimhotel)) (PX (APPR in) (NX (NE hannover))))], 'auto preterminal span': (6, 17), 'span': (6, 17), 'parent': 'NX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(NX[00m
		(PX zum einen)
		[01;31m(NX[00m
			(NX das maritimhotel in hannover)
			(NF welches am bahnhof liegt und zum zentrum funfzehn minuten laufzeit hat)[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['PX', 'NX'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'PIS', 'ART', 'NE', 'APPR', 'NE', 'PRELS', 'APPRART', 'NN', 'VVFIN', 'KON', 'APPRART', 'NN', 'CARD', 'NN', 'NN', 'VAFIN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 17), 'span': (0, 17), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(PX zum einen)
	[01;31m(NX[00m
		(NX das maritimhotel in hannover)
		(NF welches am bahnhof liegt und zum zentrum funfzehn minuten laufzeit hat)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['NX', 'NF'], 'family': ['PX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'PIS', 'ART', 'NE', 'APPR', 'NE', 'PRELS', 'APPRART', 'NN', 'VVFIN', 'KON', 'APPRART', 'NN', 'CARD', 'NN', 'NN', 'VAFIN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 17), 'span': (2, 17), 'left siblings': ['PX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP zum einen das maritimhotel in hannover welches am bahnhof liegt und zum zentrum funfzehn minuten laufzeit hat)

Sentence 665:
0 Initial errors
0 on fringe, 0 iterations

Sentence 666:
0 Initial errors
0 on fringe, 0 iterations

Sentence 667:
3 Initial errors
0 on fringe, 2 iterations
2 Error:Modifier Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(NX dann das hotel luisenhof)
	[01;36m(ADJX[00m
		(ADJX funf minuten vom bahnhof entfernt)
		[01;31m(ADJX[00m
			[01;36m(DM[00m
				(ADVX
					(ADV also))[01;36m)[00m
			(ADJX etwas schneller)[01;31m)[00m[01;36m)[00m
	(SIMPX es gibt eine bar ein restaurant und ebenfalls eine garage))
Step:Modifier Attachment
{'new_parent': 'ADJX', 'new_family': ['ADJX', 'ADVX', 'ADJX'], 'mover info': [('ADJX', (4, 9))], 'old_family': ['NX', 'ADJX', 'ADJX', 'SIMPX'], 'start left siblings': ['NX'], 'auto preterminals': ('ADV', 'ART', 'NN', 'NE', 'CARD', 'NN', 'APPRART', 'NN', 'ADJD', 'ADV', 'ADV', 'ADJD', 'PPER', 'VVFIN', 'ART', 'NN', 'ART', 'NN', 'KON', 'ADV', 'ART', 'NN'), 'start right siblings': ['ADJX', 'SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 22), 'movers': ['ADJX'], 'old_parent': 'TOP', 'end right siblings': ['ADVX', 'ADJX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(NX dann das hotel luisenhof)
	(ADJX
		(ADJX funf minuten vom bahnhof entfernt)
		[01;36m(DM[00m
			(ADVX
				(ADV also))[01;36m)[00m
		(ADJX etwas schneller))
	(SIMPX es gibt eine bar ein restaurant und ebenfalls eine garage))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['ADJX', 'DM', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV',), 'right siblings': [(ADJX (ADVX (ADV etwas)) (ADJD schneller))], 'left siblings': [(ADJX (NX (NX (ADJX (CARD funf)) (NN minuten)) (PX (APPRART vom) (NX (NN bahnhof)))) (ADJD entfernt))], 'auto preterminal span': (9, 10), 'span': (9, 10), 'parent': 'ADJX', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP dann das hotel luisenhof funf minuten vom bahnhof entfernt also etwas schneller es gibt eine bar ein restaurant und ebenfalls eine garage)

Sentence 668:
1 Initial errors
0 on fringe, 1 iterations
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX und das hotel loccumerhof ist gleich beim bahnhof anscheinend)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF es)
		(LK gibt)
		(MF ein schwimm und dampfbad und eine pianobar)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['KOORD', 'VF', 'LK', 'MF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ART', 'NN', 'NE', 'VAFIN', 'ADV', 'APPRART', 'NN', 'ADV', 'KON', 'PPER', 'VVFIN', 'ART', 'TRUNC', 'KON', 'NN', 'KON', 'ART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 19), 'span': (9, 19), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP und das hotel loccumerhof ist gleich beim bahnhof anscheinend und es gibt ein schwimm und dampfbad und eine pianobar)

Sentence 669:
3 Initial errors
0 on fringe, 2 iterations
2 Error:Different label
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX und das einzelzimmer kostet allerdings zweihundert achtundvierzig mark)
		(NX
			(KON und)
			[01;36m(MF[00m [01;31m(NX[00m
				(NX das doppelzimmer)
				(NX hundert dreiundvierzig mark)[01;31m)[00m[01;36m)[00m))[01;36m)[00m
Step:Different label
{'family': ['KON', 'MF'], 'auto preterminal span': (9, 14), 'span': (9, 14), 'subtrees': ['NX', 'NX'], 'parent': 'NX', 'over_word': False, 'auto preterminals': ('ART', 'NN', 'CARD', 'CARD', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('NX', 'MF')}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX und das einzelzimmer kostet allerdings zweihundert achtundvierzig mark)
		(NX und das doppelzimmer hundert dreiundvierzig mark))[01;36m)[00m
Step:UNSET add
{'subtrees': ['SIMPX', 'NX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ART', 'NN', 'VVFIN', 'ADV', 'CARD', 'CARD', 'NN', 'KON', 'ART', 'NN', 'CARD', 'CARD', 'NN'), 'right siblings': [], 'left siblings': [], 'auto preterminal span': (0, 14), 'span': (0, 14), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP und das einzelzimmer kostet allerdings zweihundert achtundvierzig mark und das doppelzimmer hundert dreiundvierzig mark)

Sentence 670:
0 Initial errors
0 on fringe, 0 iterations

Sentence 671:
0 Initial errors
0 on fringe, 0 iterations

Sentence 672:
0 Initial errors
0 on fringe, 0 iterations

Sentence 673:
0 Initial errors
0 on fringe, 0 iterations

Sentence 674:
0 Initial errors
0 on fringe, 0 iterations

Sentence 675:
0 Initial errors
0 on fringe, 0 iterations

Sentence 676:
0 Initial errors
0 on fringe, 0 iterations

Sentence 677:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF insofern)
		(LK ware)
		(MF
			(NX das abendprogramm)
			(ADVX eigentlich)
			(ADVX auch)
			(ADVX schon)
			[01;36m(ADJX[00m [01;31m(NX[00m
				(PIS etwas)[01;31m)[00m[01;36m)[00m)))
Step:Single Word Phrase
{'family': ['NX', 'ADVX', 'ADVX', 'ADVX', 'ADJX'], 'auto preterminal span': (7, 8), 'span': (7, 8), 'subtrees': ['PIS'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('PIS',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP insofern ware das abendprogramm eigentlich auch schon etwas)

Sentence 678:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(ADJX[00m [01;31m(VXINF[00m
		(VVPP abgedeckt)[01;31m)[00m[01;36m)[00m
	(DM ja))
Step:Single Word Phrase
{'family': ['ADJX', 'DM'], 'auto preterminal span': (0, 1), 'span': (0, 1), 'subtrees': ['VVPP'], 'parent': 'TOP', 'over_word': True, 'auto preterminals': ('VVPP',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VXINF', 'ADJX')}
(TOP abgedeckt ja)

Sentence 679:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(ADJX[00m [01;31m(VXINF[00m
		(VVPP abgedeckt)[01;31m)[00m[01;36m)[00m
	(DM ja))
Step:Single Word Phrase
{'family': ['ADJX', 'DM'], 'auto preterminal span': (0, 1), 'span': (0, 1), 'subtrees': ['VVPP'], 'parent': 'TOP', 'over_word': True, 'auto preterminals': ('VVPP',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VXINF', 'ADJX')}
(TOP abgedeckt ja)

Sentence 680:
0 Initial errors
0 on fringe, 0 iterations

Sentence 681:
0 Initial errors
0 on fringe, 0 iterations

Sentence 682:
0 Initial errors
0 on fringe, 0 iterations

Sentence 683:
0 Initial errors
0 on fringe, 0 iterations

Sentence 684:
0 Initial errors
0 on fringe, 0 iterations

Sentence 685:
0 Initial errors
0 on fringe, 0 iterations

Sentence 686:
0 Initial errors
0 on fringe, 0 iterations

Sentence 687:
0 Initial errors
0 on fringe, 0 iterations

Sentence 688:
7 Initial errors
0 on fringe, 4 iterations
4 Error:UNSET move
1 Error:Unary
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(NX[00m
		[01;36m(DM[00m
			[01;31m(DM[00m
				[01;31m(NX[00m
					[01;36m(DM[00m
						(NX
							(NN reiseburo))[01;36m)[00m
					(NX bonn)[01;31m)[00m[01;31m)[00m
			[01;31m(DM[00m
				[01;31m(NX[00m
					(NE flammersfeld)[01;31m)[00m[01;31m)[00m[01;36m)[00m[01;36m)[00m
	(DM guten tag))
Step:UNSET move
{'new_parent': 'NX', 'new_family': ['DM', 'NE'], 'mover info': [('DM', (0, 2))], 'old_family': ['DM', 'DM', 'DM'], 'start left siblings': [], 'auto preterminals': ('NN', 'NE', 'NE', 'ADJA', 'NN'), 'start right siblings': ['DM', 'DM'], 'end left siblings': [], 'auto preterminal span': (0, 5), 'movers': ['DM'], 'old_parent': 'TOP', 'end right siblings': ['NE'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM
		(NX
			[01;31m(DM[00m
				[01;31m(NX[00m
					[01;36m(DM[00m
						(NX
							(NN reiseburo))[01;36m)[00m
					(NX bonn)[01;31m)[00m[01;31m)[00m
			(NE flammersfeld)))
	(DM guten tag))
Step:Unary
{'subtrees': ['NX'], 'family': ['DM', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN',), 'right siblings': [(NX (NE bonn))], 'left siblings': [], 'auto preterminal span': (0, 1), 'span': (0, 1), 'parent': 'NX', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM
		(NX
			[01;31m(DM[00m
				[01;31m(NX[00m
					(DM reiseburo)
					(NX bonn)[01;31m)[00m[01;31m)[00m
			(NE flammersfeld)))
	(DM guten tag))
Step:Unary
{'subtrees': ['DM', 'NX'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'NE'), 'right siblings': [], 'parent': 'DM', 'auto preterminal span': (0, 2), 'span': (0, 2), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM
		(NX
			[01;31m(DM[00m
				(DM reiseburo)
				(NX bonn)[01;31m)[00m
			(NE flammersfeld)))
	(DM guten tag))
Step:UNSET remove
{'subtrees': ['DM', 'NX'], 'family': ['DM', 'NE'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'NE', 'NE'), 'right siblings': ['NE'], 'parent': 'NX', 'auto preterminal span': (0, 3), 'span': (0, 2), 'left siblings': [], 'label': 'DM', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP reiseburo bonn flammersfeld guten tag)

Sentence 689:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM guten tag)
	(DM
		(NX
			[01;36m(DM[00m
				(NX
					(NE krings))[01;36m)[00m
			(ADVX hier))))
Step:Unary
{'subtrees': ['NX'], 'family': ['DM', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE',), 'right siblings': [(ADVX (ADV hier))], 'left siblings': [], 'auto preterminal span': (2, 3), 'span': (2, 3), 'parent': 'NX', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP guten tag krings hier)

Sentence 690:
0 Initial errors
0 on fringe, 0 iterations

Sentence 691:
4 Initial errors
0 on fringe, 2 iterations
3 Error:PP Attachment
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF vom vierundzwanzigsten bis zum funfundzwanzigsten juni)
		(LK bin)
		(MF
			(NX ich)
			[01;31m(PX[00m [01;33m(PX[00m
				(APPR auf)
				[01;31m(NX[00m
					(NX einem kongres) [01;33mPX)[00m
					(PX in hannover)[01;31m)[00m[01;31m)[00m))
	(SIMPX
		(KOORD und)
		(VF ich)
		(LK wurde)
		(MF
			(ADVX gern)
			[01;31m(NX[00m
				(ADVX einen tag vorher)
				(PX am dreiundzwanzigsten)[01;31m)[00m)
		(VC anreisen)))
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'PX', 'PX'], 'mover info': [('PX', (11, 13))], 'old_family': ['NX', 'PX'], 'start left siblings': ['NX'], 'auto preterminals': ('PPER', 'APPR', 'ART', 'NN', 'APPR', 'NE'), 'start right siblings': [], 'end left siblings': ['NX', 'PX'], 'auto preterminal span': (7, 13), 'movers': ['PX'], 'old_parent': 'NX', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(SIMPX vom vierundzwanzigsten bis zum funfundzwanzigsten juni bin ich auf einem kongres in hannover)
	(SIMPX
		(KOORD und)
		(VF ich)
		(LK wurde)
		(MF
			(ADVX gern)
			[01;31m(NX[00m
				(ADVX einen tag vorher)
				(PX am dreiundzwanzigsten)[01;31m)[00m)
		(VC anreisen)))
Step:PP Attachment
{'subtrees': ['ADVX', 'PX'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NN', 'ADV', 'APPRART', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (16, 22), 'span': (17, 22), 'left siblings': ['ADVX'], 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP vom vierundzwanzigsten bis zum funfundzwanzigsten juni bin ich auf einem kongres in hannover und ich wurde gern einen tag vorher am dreiundzwanzigsten anreisen)

Sentence 692:
0 Initial errors
0 on fringe, 0 iterations

Sentence 693:
0 Initial errors
0 on fringe, 0 iterations

Sentence 694:
0 Initial errors
0 on fringe, 0 iterations

Sentence 695:
0 Initial errors
0 on fringe, 0 iterations

Sentence 696:
0 Initial errors
0 on fringe, 0 iterations

Sentence 697:
0 Initial errors
0 on fringe, 0 iterations

Sentence 698:
2 Initial errors
0 on fringe, 2 iterations
1 Error:UNSET add
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX dann ware zu empfehlen um acht uhr dreisig)
	(SIMPX
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF sie)
			(LK kamen)
			(VC an)
			(NF in hannover um ein uhr)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'VC', 'NF'], 'family': ['KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PTKVZ', 'APPR', 'NE', 'APPR', 'CARD', 'NN'), 'right siblings': [], 'left siblings': [(KOORD (KON und))], 'auto preterminal span': (9, 17), 'span': (9, 17), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX dann ware zu empfehlen um acht uhr dreisig)
	(SIMPX
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		(SIMPX sie kamen an in hannover um ein uhr)))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'PPER', 'VVFIN', 'PTKVZ', 'APPR', 'NE', 'APPR', 'CARD', 'NN'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (8, 17), 'span': (8, 9), 'left siblings': [], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP dann ware zu empfehlen um acht uhr dreisig und sie kamen an in hannover um ein uhr)

Sentence 699:
0 Initial errors
0 on fringe, 0 iterations

Sentence 700:
0 Initial errors
0 on fringe, 0 iterations

Sentence 701:
0 Initial errors
0 on fringe, 0 iterations

Sentence 702:
0 Initial errors
0 on fringe, 0 iterations

Sentence 703:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF welche preiskategorie)
		(LK sollte)
		(MF
			(NX das)
			[01;36m(ADJX[00m [01;31m(ADVX[00m
				(ADV ungefahr)[01;31m)[00m[01;36m)[00m)
		(VC sein)))
Step:Single Word Phrase
{'family': ['NX', 'ADJX'], 'auto preterminal span': (4, 5), 'span': (4, 5), 'subtrees': ['ADV'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'ADJX')}
(TOP welche preiskategorie sollte das ungefahr sein)

Sentence 704:
0 Initial errors
0 on fringe, 0 iterations

Sentence 705:
0 Initial errors
0 on fringe, 0 iterations

Sentence 706:
0 Initial errors
0 on fringe, 0 iterations

Sentence 707:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF das)
		(VXFIN ist)
		(LK liegt)
		[01;36m(PX[00m
			(MF
				(ADVX so)
				[01;31m(PX[00m
					(APPR zwischen)
					(NX funfundachtzig und einhundert dreisig mark)[01;31m)[00m)[01;36m)[00m))
Step:Modifier Attachment
{'new_parent': 'PX', 'new_family': ['ADVX', 'APPR', 'NX'], 'mover info': [('ADVX', (3, 4))], 'old_family': ['ADVX', 'PX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'APPR', 'CARD', 'KON', 'CARD', 'CARD', 'NN'), 'start right siblings': ['PX'], 'end left siblings': [], 'auto preterminal span': (3, 10), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['APPR', 'NX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP das ist liegt so zwischen funfundachtzig und einhundert dreisig mark)

Sentence 708:
0 Initial errors
0 on fringe, 0 iterations

Sentence 709:
0 Initial errors
0 on fringe, 0 iterations

Sentence 710:
0 Initial errors
0 on fringe, 0 iterations

Sentence 711:
0 Initial errors
0 on fringe, 0 iterations

Sentence 712:
5 Initial errors
0 on fringe, 3 iterations
3 Error:PP Attachment
1 Error:UNSET remove
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF die reiseunterlagen)
		(LK kann)
		(MF
			(NX ich)
			(ADVX dann)
			[01;36m(PX[00m [01;31m(ADVX[00m
				[01;31m(PX[00m
					(APPRART am)
					[01;33m(NX[00m (NX tag)[01;31m)[00m
				[01;36m(ADVX[00m
					(ADV vorher)[01;36m)[00m[01;31m)[00m [01;33mNX)[00m[01;36m)[00m
			(PX im buro))
		(VC abholen)))
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'PX', 'ADVX', 'PX'], 'mover info': [('PX', (5, 7))], 'old_family': ['PX', 'ADV'], 'start left siblings': [], 'auto preterminals': ('PPER', 'ADV', 'APPRART', 'NN', 'ADV', 'APPRART', 'NN'), 'start right siblings': ['ADV'], 'end left siblings': ['NX', 'ADVX'], 'auto preterminal span': (3, 10), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'ADVX', 'added and moved': True, 'end right siblings': ['ADVX', 'PX'], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP
	(SIMPX
		(VF die reiseunterlagen)
		(LK kann)
		(MF
			(NX ich)
			(ADVX dann)
			(PX
				[01;31m(PX[00m
					(APPRART am)
					[01;33m(NX[00m (NX tag)[01;31m)[00m
				(ADVX vorher)) [01;33mNX)[00m
			(PX im buro))
		(VC abholen)))
Step:UNSET remove
{'subtrees': ['APPRART', 'NX'], 'family': ['PX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'NN', 'ADV'), 'right siblings': ['ADVX'], 'parent': 'PX', 'auto preterminal span': (5, 8), 'span': (5, 7), 'left siblings': [], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX
		(VF die reiseunterlagen)
		(LK kann)
		(MF
			(NX ich)
			(ADVX dann)
			(PX
				(APPRART am)
				[01;36m(NX[00m
					(NX tag)
					(ADVX vorher)[01;36m)[00m)
			(PX im buro))
		(VC abholen)))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX'], 'family': ['APPRART', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'ADV'), 'right siblings': [], 'left siblings': [(APPRART am)], 'auto preterminal span': (6, 8), 'span': (6, 8), 'parent': 'PX', 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP die reiseunterlagen kann ich dann am tag vorher im buro abholen)

Sentence 713:
0 Initial errors
0 on fringe, 0 iterations

Sentence 714:
0 Initial errors
0 on fringe, 0 iterations

Sentence 715:
0 Initial errors
0 on fringe, 0 iterations

Sentence 716:
0 Initial errors
0 on fringe, 0 iterations

Sentence 717:
0 Initial errors
0 on fringe, 0 iterations

Sentence 718:
5 Initial errors
0 on fringe, 4 iterations
2 Error:Single Word Phrase
1 Error:Unary
1 Error:Unary
1 Error:Co-ordination
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM schonen guten tag)
	[01;31m(DM[00m
		[01;31m(NX[00m
			[01;36m(DM[00m
				(NX
					(NN reiseburo))[01;36m)[00m
			[01;36m(DM[00m [01;31m(NX[00m
				(NE okpue)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'family': ['NX', 'DM'], 'auto preterminal span': (4, 5), 'span': (4, 5), 'subtrees': ['NE'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('NE',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'DM')}
(TOP
	(DM schonen guten tag)
	[01;31m(DM[00m
		[01;31m(NX[00m
			[01;36m(DM[00m
				(NX
					(NN reiseburo))[01;36m)[00m
			(DM okpue)[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['NX'], 'family': ['DM', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN',), 'right siblings': [(DM (NE okpue))], 'left siblings': [], 'auto preterminal span': (3, 4), 'span': (3, 4), 'parent': 'NX', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM schonen guten tag)
	[01;31m(DM[00m
		[01;31m(NX[00m
			(DM reiseburo)
			(DM okpue)[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['DM', 'DM'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'NE'), 'right siblings': [], 'parent': 'DM', 'auto preterminal span': (3, 5), 'span': (3, 5), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM schonen guten tag)
	[01;31m(DM[00m
		(DM reiseburo)
		(DM okpue)[01;31m)[00m)
Step:Co-ordination
{'subtrees': ['DM', 'DM'], 'family': ['DM', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJA', 'ADJA', 'NN', 'NN', 'NE'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 5), 'span': (3, 5), 'left siblings': ['DM'], 'label': 'DM', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP schonen guten tag reiseburo okpue)

Sentence 719:
4 Initial errors
0 on fringe, 2 iterations
2 Error:NP Internal Structure
2 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM guten tag)
	(SIMPX
		(VF hier)
		(LK ist)
		(MF
			[01;31m(NX[00m
				[01;31m(NX[00m
					[01;36m(NX[00m
						(NE gero)[01;36m)[00m
					[01;36m(NX[00m
						(NE muller)[01;36m)[00m[01;31m)[00m
				(PX aus koln)[01;31m)[00m)))
Step:NP Internal Structure
{'new_parent': 'NX', 'new_family': ['NE', 'NX', 'PX'], 'mover info': [('NE', (5, 6))], 'old_family': ['NE', 'NE'], 'start left siblings': [], 'auto preterminals': ('NE', 'NE', 'APPR', 'NE'), 'start right siblings': ['NE'], 'end left siblings': [], 'auto preterminal span': (5, 9), 'movers': ['NE'], 'old_parent': 'NX', 'POS confusion': ('NE', 'NE'), 'end right siblings': ['NX', 'PX'], 'classified_type': 'NP Internal Structure', 'type': 'move'}
(TOP
	(DM ja)
	(DM guten tag)
	(SIMPX
		(VF hier)
		(LK ist)
		(MF
			[01;31m(NX[00m
				[01;36m(NX[00m
					(NE gero)[01;36m)[00m
				(NX muller)
				(PX aus koln)[01;31m)[00m)))
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'PX'], 'mover info': [('NX', (6, 7)), ('PX', (7, 9))], 'old_family': ['NE', 'NX', 'PX'], 'start left siblings': ['NE'], 'auto preterminals': ('NE', 'NE', 'APPR', 'NE'), 'start right siblings': [], 'end left siblings': ['NX'], 'auto preterminal span': (5, 9), 'movers': ['NX', 'PX'], 'old_parent': 'NX', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP ja guten tag hier ist gero muller aus koln)

Sentence 720:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(FKOORD
			(LKM
				(LK plane)
				[01;36m(NX[00m
					(MF
						(NX eine geschaftsreise nach hannover)
						(NX anfang juli))[01;36m)[00m)
			(KON und)
			[01;31m(LKMVCN[00m
				(LK wurde)
				(MF sie)
				(VC bitten)
				(NF mir dort ein entsprechendes hotel und ein verkehrsmittel zu buchen)[01;31m)[00m)))
Step:Unary
{'subtrees': ['MF'], 'family': ['LK', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'NE', 'NN', 'NN'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VVFIN plane)))], 'auto preterminal span': (2, 8), 'span': (2, 8), 'parent': 'LKM', 'label': 'NX', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(VF ich)
		(FKOORD
			(LKM plane eine geschaftsreise nach hannover anfang juli)
			(KON und)
			[01;31m(LKMVCN[00m
				(LK wurde)
				(MF sie)
				(VC bitten)
				(NF mir dort ein entsprechendes hotel und ein verkehrsmittel zu buchen)[01;31m)[00m)))
Step:UNSET remove
{'subtrees': ['LK', 'MF', 'VC', 'NF'], 'family': ['LKM', 'KON', 'LKMVCN'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'ART', 'NN', 'APPR', 'NE', 'NN', 'NN', 'KON', 'VAFIN', 'PPER', 'VVINF', 'PPER', 'ADV', 'ART', 'ADJA', 'NN', 'KON', 'ART', 'NN', 'PTKZU', 'VVINF'), 'right siblings': [], 'parent': 'FKOORD', 'auto preterminal span': (1, 22), 'span': (9, 22), 'left siblings': ['LKM', 'KON'], 'label': 'LKMVCN', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ich plane eine geschaftsreise nach hannover anfang juli und wurde sie bitten mir dort ein entsprechendes hotel und ein verkehrsmittel zu buchen)

Sentence 721:
0 Initial errors
0 on fringe, 0 iterations

Sentence 722:
0 Initial errors
0 on fringe, 0 iterations

Sentence 723:
0 Initial errors
0 on fringe, 0 iterations

Sentence 724:
10 Initial errors
0 on fringe, 7 iterations
3 Error:NP Attachment
2 Error:Modifier Attachment
1 Error:UNSET add
1 Error:UNSET remove
1 Error:Modifier Attachment
1 Error:UNSET remove
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX die termin der ware am samstag den funften juli)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK dachte)
		[01;31m(MF[00m [01;33m(MF[00m
			(ADVX da)
			[01;31m(PX[00m
				(PX an eine anreise)
				[01;33m(ADVX[00m (ADVX freitags den vierten juli)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		(NX die abreise)[01;31m)[00m [01;33mADVX) MF)[00m
	[01;31m(SIMPX[00m
		(VF das)
		(LK weis)
		(MF
			(NX ich)
			[01;31m(ADVX[00m
				(ADVX noch)
				[01;36m(ADVX[00m
					(PTKNEG nicht)[01;36m)[00m[01;31m)[00m
			(ADJX so genau))
		(NF
			(SIMPX
				[01;36m(SIMPX[00m
					(C da)
					(MF ich eventuell ein paar tage noch in hannover)
					(VC verbringen will)[01;36m)[00m
				(NF so um den siebten achten juli)))[01;31m)[00m)
Step:NP Attachment
{'new_parent': 'PX', 'new_family': ['PX', 'ADVX', 'NX'], 'mover info': [('NX', (21, 24))], 'old_family': ['DM', 'SIMPX', 'SIMPX', 'NX', 'SIMPX'], 'start left siblings': ['DM', 'SIMPX', 'SIMPX'], 'auto preterminals': ('ADV', 'ART', 'NN', 'PDS', 'VAFIN', 'APPRART', 'NN', 'ART', 'ADJA', 'NN', 'KON', 'PPER', 'VVFIN', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'ART', 'ADJA', 'NN', 'KON', 'ART', 'NN', 'PDS', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ADV', 'ADJD', 'KOUS', 'PPER', 'ADV', 'ART', 'PIDAT', 'NN', 'ADV', 'APPR', 'NE', 'VVINF', 'VMFIN', 'ADV', 'APPR', 'ART', 'ADJA', 'ADJA', 'NN'), 'start right siblings': ['SIMPX'], 'end left siblings': ['PX', 'ADVX'], 'auto preterminal span': (0, 48), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'TOP', 'added and moved': True, 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'SIMPX'}
(TOP
	(DM also)
	(SIMPX die termin der ware am samstag den funften juli)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK dachte)
		(MF
			(ADVX da)
			[01;31m(PX[00m
				(PX an eine anreise)
				(ADVX
					(ADVX freitags den vierten juli)
					[01;31m(NX[00m
						(KON und)
						(NX die abreise)[01;31m)[00m)[01;31m)[00m)[01;31m)[00m
	[01;31m(SIMPX[00m
		(VF das)
		(LK weis)
		(MF
			(NX ich)
			[01;31m(ADVX[00m
				(ADVX noch)
				[01;36m(ADVX[00m
					(PTKNEG nicht)[01;36m)[00m[01;31m)[00m
			(ADJX so genau))
		(NF
			(SIMPX
				[01;36m(SIMPX[00m
					(C da)
					(MF ich eventuell ein paar tage noch in hannover)
					(VC verbringen will)[01;36m)[00m
				(NF so um den siebten achten juli)))[01;31m)[00m)
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'ADVX', 'ADJX'], 'mover info': [('ADVX', (27, 28))], 'old_family': ['ADVX', 'PTKNEG'], 'start left siblings': [], 'auto preterminals': ('PPER', 'ADV', 'PTKNEG', 'ADV', 'ADJD'), 'start right siblings': ['PTKNEG'], 'end left siblings': ['NX'], 'auto preterminal span': (26, 31), 'movers': ['ADVX'], 'old_parent': 'ADVX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ADVX', 'ADJX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(DM also)
	(SIMPX die termin der ware am samstag den funften juli)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK dachte)
		(MF
			(ADVX da)
			[01;31m(PX[00m
				(PX an eine anreise)
				(ADVX
					(ADVX freitags den vierten juli)
					[01;31m(NX[00m
						(KON und)
						(NX die abreise)[01;31m)[00m)[01;31m)[00m)[01;31m)[00m
	[01;31m(SIMPX[00m
		(VF das)
		(LK weis)
		(MF ich noch nicht so genau)
		(NF
			(SIMPX
				[01;36m(SIMPX[00m
					(C da)
					(MF ich eventuell ein paar tage noch in hannover)
					(VC verbringen will)[01;36m)[00m
				(NF so um den siebten achten juli)))[01;31m)[00m)
Step:UNSET add
{'subtrees': ['C', 'MF', 'VC'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ADV', 'ART', 'PIDAT', 'NN', 'ADV', 'APPR', 'NE', 'VVINF', 'VMFIN'), 'right siblings': [(NF (PX (ADVX (ADV so)) (APPR um) (NX (ART den) (ADJX (ADJX (ADJA siebten)) (ADJX (ADJA achten))) (NN juli))))], 'left siblings': [], 'auto preterminal span': (31, 42), 'span': (31, 42), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX die termin der ware am samstag den funften juli)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK dachte)
		(MF
			(ADVX da)
			[01;31m(PX[00m
				(PX an eine anreise)
				(ADVX
					(ADVX freitags den vierten juli)
					[01;31m(NX[00m
						(KON und)
						(NX die abreise)[01;31m)[00m)[01;31m)[00m)[01;31m)[00m
	[01;31m(SIMPX[00m
		(VF das)
		(LK weis)
		(MF ich noch nicht so genau)
		(NF da ich eventuell ein paar tage noch in hannover verbringen will so um den siebten achten juli)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['KOORD', 'VF', 'LK', 'MF'], 'family': ['DM', 'SIMPX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NN', 'PDS', 'VAFIN', 'APPRART', 'NN', 'ART', 'ADJA', 'NN', 'KON', 'PPER', 'VVFIN', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'ART', 'ADJA', 'NN', 'KON', 'ART', 'NN', 'PDS', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ADV', 'ADJD', 'KOUS', 'PPER', 'ADV', 'ART', 'PIDAT', 'NN', 'ADV', 'APPR', 'NE', 'VVINF', 'VMFIN', 'ADV', 'APPR', 'ART', 'ADJA', 'ADJA', 'NN'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 48), 'span': (10, 24), 'left siblings': ['DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX die termin der ware am samstag den funften juli)
	(KOORD und)
	(VF ich)
	(LK dachte)
	(MF
		(ADVX da)
		[01;31m(PX[00m
			(PX an eine anreise)
			(ADVX
				(ADVX freitags den vierten juli)
				[01;31m(NX[00m
					(KON und)
					(NX die abreise)[01;31m)[00m)[01;31m)[00m)
	[01;31m(SIMPX[00m
		(VF das)
		(LK weis)
		(MF ich noch nicht so genau)
		(NF da ich eventuell ein paar tage noch in hannover verbringen will so um den siebten achten juli)[01;31m)[00m)
Step:Modifier Attachment
{'subtrees': ['PX', 'ADVX'], 'family': ['ADVX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'APPR', 'ART', 'NN', 'ADV', 'ART', 'ADJA', 'NN', 'KON', 'ART', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (13, 24), 'span': (14, 24), 'left siblings': ['ADVX'], 'label': 'PX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX die termin der ware am samstag den funften juli)
	(KOORD und)
	(VF ich)
	(LK dachte)
	(MF
		(ADVX da)
		(PX an eine anreise)
		(ADVX
			(ADVX freitags den vierten juli)
			[01;31m(NX[00m
				(KON und)
				(NX die abreise)[01;31m)[00m))
	[01;31m(SIMPX[00m
		(VF das)
		(LK weis)
		(MF ich noch nicht so genau)
		(NF da ich eventuell ein paar tage noch in hannover verbringen will so um den siebten achten juli)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['KON', 'NX'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'ADJA', 'NN', 'KON', 'ART', 'NN'), 'right siblings': [], 'parent': 'ADVX', 'auto preterminal span': (17, 24), 'span': (21, 24), 'left siblings': ['ADVX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX die termin der ware am samstag den funften juli)
	(KOORD und)
	(VF ich)
	(LK dachte)
	(MF da an eine anreise freitags den vierten juli und die abreise)
	[01;31m(SIMPX[00m
		(VF das)
		(LK weis)
		(MF ich noch nicht so genau)
		(NF da ich eventuell ein paar tage noch in hannover verbringen will so um den siebten achten juli)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'NF'], 'family': ['DM', 'SIMPX', 'KOORD', 'VF', 'LK', 'MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NN', 'PDS', 'VAFIN', 'APPRART', 'NN', 'ART', 'ADJA', 'NN', 'KON', 'PPER', 'VVFIN', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'ART', 'ADJA', 'NN', 'KON', 'ART', 'NN', 'PDS', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ADV', 'ADJD', 'KOUS', 'PPER', 'ADV', 'ART', 'PIDAT', 'NN', 'ADV', 'APPR', 'NE', 'VVINF', 'VMFIN', 'ADV', 'APPR', 'ART', 'ADJA', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 48), 'span': (24, 48), 'left siblings': ['DM', 'SIMPX', 'KOORD', 'VF', 'LK', 'MF'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP also die termin der ware am samstag den funften juli und ich dachte da an eine anreise freitags den vierten juli und die abreise das weis ich noch nicht so genau da ich eventuell ein paar tage noch in hannover verbringen will so um den siebten achten juli)

Sentence 725:
0 Initial errors
0 on fringe, 0 iterations

Sentence 726:
0 Initial errors
0 on fringe, 0 iterations

Sentence 727:
0 Initial errors
0 on fringe, 0 iterations

Sentence 728:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Clause Attachment
1 Error:UNSET add
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX naturlich konnen sie auch fliegen)
	(DM wobei)
	(SIMPX da wurde ich ihnen von abraten)
	[01;36m(SIMPX[00m
		(SIMPX das lohnt sich nicht bis hannover)
		[01;31m(SIMPX[00m
			[01;31m(KOORD[00m
				(KON oder)[01;31m)[00m
			[01;36m(SIMPX[00m
				(LK mochten)
				(MF sie das)[01;36m)[00m[01;31m)[00m[01;36m)[00m)
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'KOORD', 'LK', 'MF'], 'mover info': [('SIMPX', (12, 18))], 'old_family': ['SIMPX', 'DM', 'SIMPX', 'SIMPX', 'SIMPX'], 'start left siblings': ['SIMPX', 'DM', 'SIMPX'], 'auto preterminals': ('ADV', 'VMFIN', 'PPER', 'ADV', 'VVINF', 'PWAV', 'ADV', 'VAFIN', 'PPER', 'PPER', 'PROP', 'VVINF', 'PDS', 'VVFIN', 'PRF', 'PTKNEG', 'APPR', 'NE', 'KON', 'VMFIN', 'PPER', 'PDS'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 22), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': ['KOORD', 'LK', 'MF'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX naturlich konnen sie auch fliegen)
	(DM wobei)
	(SIMPX da wurde ich ihnen von abraten)
	(SIMPX
		(SIMPX das lohnt sich nicht bis hannover)
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		[01;36m(SIMPX[00m
			(LK mochten)
			(MF sie das)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['LK', 'MF'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'PDS'), 'right siblings': [], 'left siblings': [(SIMPX (VF (NX (PDS das))) (LK (VXFIN (VVFIN lohnt))) (MF (NX (PRF sich)) (ADVX (PTKNEG nicht)) (PX (APPR bis) (NX (NE hannover))))), (KOORD (KON oder))], 'auto preterminal span': (19, 22), 'span': (19, 22), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX naturlich konnen sie auch fliegen)
	(DM wobei)
	(SIMPX da wurde ich ihnen von abraten)
	(SIMPX
		(SIMPX das lohnt sich nicht bis hannover)
		[01;31m(KOORD[00m
			(KON oder)[01;31m)[00m
		(SIMPX mochten sie das)))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('PDS', 'VVFIN', 'PRF', 'PTKNEG', 'APPR', 'NE', 'KON', 'VMFIN', 'PPER', 'PDS'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (12, 22), 'span': (18, 19), 'left siblings': ['SIMPX'], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP naturlich konnen sie auch fliegen wobei da wurde ich ihnen von abraten das lohnt sich nicht bis hannover oder mochten sie das)

Sentence 729:
13 Initial errors
0 on fringe, 9 iterations
3 Error:Clause Attachment
2 Error:Modifier Attachment
2 Error:Modifier Attachment
1 Error:UNSET add
1 Error:UNSET add
1 Error:Clause Attachment
1 Error:Modifier Attachment
1 Error:Unary
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF ich)
		(LK habe)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(NX
					(PRF mich)) [01;33mSIMPX)[00m[01;36m)[00m
			(ADVX ja)[01;31m)[00m[01;31m)[00m
	[01;36m(SIMPX[00m
		[01;33m(SIMPX[00m (SIMPX ich habe mich da auch schon erkundigt)
		[01;31m(SIMPX[00m [01;33m(NX[00m
			[01;31m(LV[00m
				[01;31m(NX[00m
					(NX der zug)
					[01;31m(PX[00m
						(ADVX hier) [01;33mNX)[00m
						(PX in bonn)[01;31m)[00m[01;31m)[00m[01;31m)[00m [01;33mSIMPX)[00m
			[01;36m(SIMPX[00m
				(VF der)
				(LK fahrt)
				(MF um acht uhr neununddreisig)
				(VC ab)[01;36m)[00m[01;31m)[00m[01;36m)[00m
	[01;36m(SIMPX[00m
		(SIMPX und das habe ich mir schon zurechtgelegt)
		(SIMPX den wurde ich eigentlich ganz gerne nehmen)[01;36m)[00m)
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'LV', 'VF', 'LK', 'MF', 'VC'], 'mover info': [('SIMPX', (5, 12))], 'old_family': ['DM', 'SIMPX', 'SIMPX', 'SIMPX', 'SIMPX', 'SIMPX'], 'start left siblings': ['DM', 'SIMPX'], 'auto preterminals': ('PTKANT', 'PPER', 'VAFIN', 'PRF', 'ADV', 'PPER', 'VAFIN', 'PRF', 'ADV', 'ADV', 'ADV', 'VVPP', 'ART', 'NN', 'ADV', 'APPR', 'NE', 'PDS', 'VVFIN', 'APPR', 'CARD', 'NN', 'CARD', 'PTKVZ', 'KON', 'PDS', 'VAFIN', 'PPER', 'PRF', 'ADV', 'VVPP', 'PDS', 'VAFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'VVINF'), 'start right siblings': ['SIMPX', 'SIMPX', 'SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 38), 'adding node already present': False, 'movers': ['SIMPX'], 'old_parent': 'TOP', 'added and moved': True, 'end right siblings': ['LV', 'VF', 'LK', 'MF', 'VC'], 'classified_type': 'Clause Attachment', 'type': 'move', 'added label': 'SIMPX'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF ich)
		(LK habe)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(NX
					(PRF mich)) [01;33mSIMPX)[00m[01;36m)[00m
			(ADVX ja)[01;31m)[00m[01;31m)[00m
	(SIMPX
		(SIMPX
			(SIMPX ich habe mich da auch schon erkundigt)
			[01;31m(LV[00m [01;33m(NX[00m
				[01;31m(NX[00m
					(NX der zug)
					[01;31m(PX[00m
						(ADVX hier) [01;33mNX)[00m
						(PX in bonn)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
		[01;36m(SIMPX[00m
			(VF der)
			(LK fahrt)
			(MF um acht uhr neununddreisig)
			(VC ab)[01;36m)[00m)
	[01;36m(SIMPX[00m
		(SIMPX und das habe ich mir schon zurechtgelegt)
		(SIMPX den wurde ich eigentlich ganz gerne nehmen)[01;36m)[00m)
Step:Modifier Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'ADVX'], 'mover info': [('ADVX', (4, 5))], 'old_family': ['NX', 'ADVX'], 'start left siblings': ['NX'], 'auto preterminals': ('PPER', 'VAFIN', 'PRF', 'ADV'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (1, 5), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF ich)
			(LK habe)
			(MF mich)[01;36m)[00m
		(ADVX ja)[01;31m)[00m
	(SIMPX
		(SIMPX
			(SIMPX ich habe mich da auch schon erkundigt)
			[01;31m(LV[00m [01;33m(NX[00m
				[01;31m(NX[00m
					(NX der zug)
					[01;31m(PX[00m
						(ADVX hier) [01;33mNX)[00m
						(PX in bonn)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
		[01;36m(SIMPX[00m
			(VF der)
			(LK fahrt)
			(MF um acht uhr neununddreisig)
			(VC ab)[01;36m)[00m)
	[01;36m(SIMPX[00m
		(SIMPX und das habe ich mir schon zurechtgelegt)
		(SIMPX den wurde ich eigentlich ganz gerne nehmen)[01;36m)[00m)
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'ADVX', 'PX'], 'mover info': [('ADVX', (14, 15))], 'old_family': ['ADVX', 'PX'], 'start left siblings': [], 'auto preterminals': ('ART', 'NN', 'ADV', 'APPR', 'NE'), 'start right siblings': ['PX'], 'end left siblings': ['NX'], 'auto preterminal span': (12, 17), 'adding node already present': False, 'movers': ['ADVX'], 'old_parent': 'PX', 'POS confusion': ('ADV', 'ADV'), 'added and moved': True, 'end right siblings': ['PX'], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'SIMPX'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF ich)
			(LK habe)
			(MF mich)[01;36m)[00m
		(ADVX ja)[01;31m)[00m
	(SIMPX
		(SIMPX
			(SIMPX ich habe mich da auch schon erkundigt)
			[01;31m(LV[00m
				[01;31m(NX[00m
					(NX der zug hier)
					(PX in bonn)[01;31m)[00m[01;31m)[00m)
		[01;36m(SIMPX[00m
			(VF der)
			(LK fahrt)
			(MF um acht uhr neununddreisig)
			(VC ab)[01;36m)[00m)
	[01;36m(SIMPX[00m
		(SIMPX und das habe ich mir schon zurechtgelegt)
		(SIMPX den wurde ich eigentlich ganz gerne nehmen)[01;36m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'PRF'), 'right siblings': [(ADVX (ADV ja))], 'left siblings': [], 'auto preterminal span': (1, 4), 'span': (1, 4), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		(SIMPX ich habe mich)
		(ADVX ja)[01;31m)[00m
	(SIMPX
		(SIMPX
			(SIMPX ich habe mich da auch schon erkundigt)
			[01;31m(LV[00m
				[01;31m(NX[00m
					(NX der zug hier)
					(PX in bonn)[01;31m)[00m[01;31m)[00m)
		[01;36m(SIMPX[00m
			(VF der)
			(LK fahrt)
			(MF um acht uhr neununddreisig)
			(VC ab)[01;36m)[00m)
	[01;36m(SIMPX[00m
		(SIMPX und das habe ich mir schon zurechtgelegt)
		(SIMPX den wurde ich eigentlich ganz gerne nehmen)[01;36m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VVFIN', 'APPR', 'CARD', 'NN', 'CARD', 'PTKVZ'), 'right siblings': [], 'left siblings': [(SIMPX (SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VAFIN habe))) (MF (NX (PRF mich)) (ADVX (ADV da)) (ADVX (ADV auch)) (ADVX (ADV schon))) (VC (VXINF (VVPP erkundigt)))) (LV (NX (NX (NX (ART der) (NN zug)) (ADVX (ADV hier))) (PX (APPR in) (NX (NE bonn))))))], 'auto preterminal span': (17, 24), 'span': (17, 24), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		(SIMPX ich habe mich)
		(ADVX ja)[01;31m)[00m
	(SIMPX
		(SIMPX
			(SIMPX ich habe mich da auch schon erkundigt)
			[01;31m(LV[00m
				[01;31m(NX[00m
					(NX der zug hier)
					(PX in bonn)[01;31m)[00m[01;31m)[00m)
		(SIMPX der fahrt um acht uhr neununddreisig ab))
	[01;36m(SIMPX[00m
		(SIMPX und das habe ich mir schon zurechtgelegt)
		(SIMPX den wurde ich eigentlich ganz gerne nehmen)[01;36m)[00m)
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['DM', 'SIMPX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PDS', 'VAFIN', 'PPER', 'PRF', 'ADV', 'VVPP', 'PDS', 'VAFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'VVINF'), 'right siblings': [], 'left siblings': [(DM (PTKANT ja)), (SIMPX (SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VAFIN habe))) (MF (NX (PRF mich)))) (ADVX (ADV ja))), (SIMPX (SIMPX (SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VAFIN habe))) (MF (NX (PRF mich)) (ADVX (ADV da)) (ADVX (ADV auch)) (ADVX (ADV schon))) (VC (VXINF (VVPP erkundigt)))) (LV (NX (NX (NX (ART der) (NN zug)) (ADVX (ADV hier))) (PX (APPR in) (NX (NE bonn)))))) (SIMPX (VF (NX (PDS der))) (LK (VXFIN (VVFIN fahrt))) (MF (PX (APPR um) (NX (NX (ADJX (CARD acht)) (NN uhr)) (ADJX (CARD neununddreisig))))) (VC (PTKVZ ab))))], 'auto preterminal span': (24, 38), 'span': (24, 38), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		(SIMPX ich habe mich)
		(ADVX ja)[01;31m)[00m
	(SIMPX
		(SIMPX
			(SIMPX ich habe mich da auch schon erkundigt)
			[01;31m(LV[00m
				[01;31m(NX[00m
					(NX der zug hier)
					(PX in bonn)[01;31m)[00m[01;31m)[00m)
		(SIMPX der fahrt um acht uhr neununddreisig ab))
	(SIMPX und das habe ich mir schon zurechtgelegt den wurde ich eigentlich ganz gerne nehmen))
Step:Modifier Attachment
{'subtrees': ['SIMPX', 'ADVX'], 'family': ['DM', 'SIMPX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'VAFIN', 'PRF', 'ADV', 'PPER', 'VAFIN', 'PRF', 'ADV', 'ADV', 'ADV', 'VVPP', 'ART', 'NN', 'ADV', 'APPR', 'NE', 'PDS', 'VVFIN', 'APPR', 'CARD', 'NN', 'CARD', 'PTKVZ', 'KON', 'PDS', 'VAFIN', 'PPER', 'PRF', 'ADV', 'VVPP', 'PDS', 'VAFIN', 'PPER', 'ADV', 'ADV', 'ADV', 'VVINF'), 'right siblings': ['SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 38), 'span': (1, 5), 'left siblings': ['DM'], 'label': 'SIMPX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX ich habe mich)
	(ADVX ja)
	(SIMPX
		(SIMPX
			(SIMPX ich habe mich da auch schon erkundigt)
			[01;31m(LV[00m
				[01;31m(NX[00m
					(NX der zug hier)
					(PX in bonn)[01;31m)[00m[01;31m)[00m)
		(SIMPX der fahrt um acht uhr neununddreisig ab))
	(SIMPX und das habe ich mir schon zurechtgelegt den wurde ich eigentlich ganz gerne nehmen))
Step:Unary
{'subtrees': ['NX'], 'family': ['SIMPX', 'LV'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'PRF', 'ADV', 'ADV', 'ADV', 'VVPP', 'ART', 'NN', 'ADV', 'APPR', 'NE'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (5, 17), 'span': (12, 17), 'left siblings': ['SIMPX'], 'label': 'LV', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX ich habe mich)
	(ADVX ja)
	(SIMPX
		(SIMPX
			(SIMPX ich habe mich da auch schon erkundigt)
			[01;31m(NX[00m
				(NX der zug hier)
				(PX in bonn)[01;31m)[00m)
		(SIMPX der fahrt um acht uhr neununddreisig ab))
	(SIMPX und das habe ich mir schon zurechtgelegt den wurde ich eigentlich ganz gerne nehmen))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['SIMPX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'PRF', 'ADV', 'ADV', 'ADV', 'VVPP', 'ART', 'NN', 'ADV', 'APPR', 'NE'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (5, 17), 'span': (12, 17), 'left siblings': ['SIMPX'], 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP ja ich habe mich ja ich habe mich da auch schon erkundigt der zug hier in bonn der fahrt um acht uhr neununddreisig ab und das habe ich mir schon zurechtgelegt den wurde ich eigentlich ganz gerne nehmen)

Sentence 730:
0 Initial errors
0 on fringe, 0 iterations

Sentence 731:
0 Initial errors
0 on fringe, 0 iterations

Sentence 732:
0 Initial errors
0 on fringe, 0 iterations

Sentence 733:
0 Initial errors
0 on fringe, 0 iterations

Sentence 734:
13 Initial errors
0 on fringe, 7 iterations
4 Error:PP Attachment
2 Error:Single Word Phrase
2 Error:Single Word Phrase
2 Error:Modifier Attachment
1 Error:Modifier Attachment
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK haben)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX sie)
				(ADVX da)
				(ADVX schon)[01;31m)[00m
			[01;36m(ADVX[00m [01;31m(VC[00m
				[01;31m(VXINF[00m
					(VVPP uberlegt)[01;31m)[00m[01;31m)[00m[01;36m)[00m
			[01;31m(NF[00m [01;33m(PX[00m
				[01;31m(PX[00m
					(APPR in)
					[01;31m(NX[00m
						(NX was) [01;33mPX)[00m
						(PX fur eine art von hotel)[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;36m)[00m)
	(ADJX
		[01;36m(ADJX[00m
			(ADJX teuer)
			[01;31m(ADJX[00m
				(ADJD billig)[01;31m)[00m[01;36m)[00m
		[01;36m(NX[00m [01;31m(ADJX[00m
			(ADJD zentral)[01;31m)[00m[01;36m)[00m))
Step:PP Attachment
{'new_parent': 'SIMPX', 'new_family': ['LK', 'MF', 'VC', 'NF', 'PX'], 'mover info': [('PX', (7, 12))], 'old_family': ['NX', 'PX'], 'start left siblings': ['NX'], 'auto preterminals': ('VAFIN', 'PPER', 'ADV', 'ADV', 'VVPP', 'APPR', 'PWS', 'APPR', 'ART', 'NN', 'APPR', 'NN'), 'start right siblings': [], 'end left siblings': ['LK', 'MF', 'VC', 'NF'], 'auto preterminal span': (0, 12), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'NX'}
(TOP
	(SIMPX
		(LK haben)
		(MF
			[01;31m(MF[00m
				(NX sie)
				(ADVX da)
				(ADVX schon)[01;31m)[00m
			[01;36m(ADVX[00m [01;31m(VC[00m
				[01;31m(VXINF[00m
					(VVPP uberlegt)[01;31m)[00m[01;31m)[00m[01;36m)[00m
			[01;31m(NF[00m
				(PX
					(APPR in)
					(NX was))[01;31m)[00m
			(PX fur eine art von hotel)))
	(ADJX
		[01;36m(ADJX[00m
			(ADJX teuer)
			[01;31m(ADJX[00m
				(ADJD billig)[01;31m)[00m[01;36m)[00m
		[01;36m(NX[00m [01;31m(ADJX[00m
			(ADJD zentral)[01;31m)[00m[01;36m)[00m))
Step:Single Word Phrase
{'family': ['ADVX'], 'auto preterminal span': (4, 5), 'span': (4, 5), 'subtrees': ['VVPP'], 'parent': 'VC', 'over_word': True, 'auto preterminals': ('VVPP',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VXINF', 'ADVX')}
(TOP
	(SIMPX
		(LK haben)
		(MF
			[01;31m(MF[00m
				(NX sie)
				(ADVX da)
				(ADVX schon)[01;31m)[00m
			[01;31m(VC[00m
				(ADVX
					(VVPP uberlegt))[01;31m)[00m
			[01;31m(NF[00m
				(PX
					(APPR in)
					(NX was))[01;31m)[00m
			(PX fur eine art von hotel)))
	(ADJX
		[01;36m(ADJX[00m
			(ADJX teuer)
			[01;31m(ADJX[00m
				(ADJD billig)[01;31m)[00m[01;36m)[00m
		[01;36m(NX[00m [01;31m(ADJX[00m
			(ADJD zentral)[01;31m)[00m[01;36m)[00m))
Step:Single Word Phrase
{'family': ['ADJX', 'ADJX', 'NX'], 'auto preterminal span': (14, 15), 'span': (14, 15), 'subtrees': ['ADJD'], 'parent': 'ADJX', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'NX')}
(TOP
	(SIMPX
		(LK haben)
		(MF
			[01;31m(MF[00m
				(NX sie)
				(ADVX da)
				(ADVX schon)[01;31m)[00m
			[01;31m(VC[00m
				(ADVX
					(VVPP uberlegt))[01;31m)[00m
			[01;31m(NF[00m
				(PX
					(APPR in)
					(NX was))[01;31m)[00m
			(PX fur eine art von hotel)))
	(ADJX
		[01;36m(ADJX[00m
			(ADJX teuer)
			[01;31m(ADJX[00m
				(ADJD billig)[01;31m)[00m[01;36m)[00m
		(NX zentral)))
Step:Modifier Attachment
{'new_parent': 'ADJX', 'new_family': ['ADJX', 'ADJD'], 'mover info': [('ADJX', (12, 13))], 'old_family': ['ADJX', 'ADJX', 'NX'], 'start left siblings': [], 'auto preterminals': ('ADJD', 'ADJD', 'ADJD'), 'start right siblings': ['ADJX', 'NX'], 'end left siblings': [], 'auto preterminal span': (12, 15), 'movers': ['ADJX'], 'old_parent': 'ADJX', 'POS confusion': ('ADJD', 'ADJD'), 'end right siblings': ['ADJD'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(LK haben)
		(MF
			[01;31m(MF[00m
				(NX sie)
				(ADVX da)
				(ADVX schon)[01;31m)[00m
			[01;31m(VC[00m
				(ADVX
					(VVPP uberlegt))[01;31m)[00m
			[01;31m(NF[00m
				(PX
					(APPR in)
					(NX was))[01;31m)[00m
			(PX fur eine art von hotel)))
	(ADJX teuer billig zentral))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX', 'ADVX'], 'family': ['MF', 'VC', 'NF', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'ADV', 'VVPP', 'APPR', 'PWS', 'APPR', 'ART', 'NN', 'APPR', 'NN'), 'right siblings': ['VC', 'NF', 'PX'], 'parent': 'MF', 'auto preterminal span': (1, 12), 'span': (1, 4), 'left siblings': [], 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX
		(LK haben)
		(MF
			(NX sie)
			(ADVX da)
			(ADVX schon)
			[01;31m(VC[00m
				(ADVX
					(VVPP uberlegt))[01;31m)[00m
			[01;31m(NF[00m
				(PX
					(APPR in)
					(NX was))[01;31m)[00m
			(PX fur eine art von hotel)))
	(ADJX teuer billig zentral))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['NX', 'ADVX', 'ADVX', 'VC', 'NF', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'ADV', 'VVPP', 'APPR', 'PWS', 'APPR', 'ART', 'NN', 'APPR', 'NN'), 'right siblings': ['NF', 'PX'], 'parent': 'MF', 'auto preterminal span': (1, 12), 'span': (4, 5), 'left siblings': ['NX', 'ADVX', 'ADVX'], 'label': 'VC', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(LK haben)
		(MF
			(NX sie)
			(ADVX da)
			(ADVX schon)
			(ADVX uberlegt)
			[01;31m(NF[00m
				(PX
					(APPR in)
					(NX was))[01;31m)[00m
			(PX fur eine art von hotel)))
	(ADJX teuer billig zentral))
Step:Unary
{'subtrees': ['PX'], 'family': ['NX', 'ADVX', 'ADVX', 'ADVX', 'NF', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'ADV', 'VVPP', 'APPR', 'PWS', 'APPR', 'ART', 'NN', 'APPR', 'NN'), 'right siblings': ['PX'], 'parent': 'MF', 'auto preterminal span': (1, 12), 'span': (5, 7), 'left siblings': ['NX', 'ADVX', 'ADVX', 'ADVX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP haben sie da schon uberlegt in was fur eine art von hotel teuer billig zentral)

Sentence 735:
0 Initial errors
0 on fringe, 0 iterations

Sentence 736:
27 Initial errors
0 on fringe, 18 iterations
4 Error:Modifier Attachment
3 Error:UNSET move
2 Error:Single Word Phrase
2 Error:Different label
2 Error:UNSET move
2 Error:Modifier Attachment
1 Error:Clause Attachment
1 Error:UNSET remove
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:PP Attachment
1 Error:PP Attachment
1 Error:Modifier Attachment
1 Error:UNSET add
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM also)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK haben)
		(MF hier jetzt drei hotels)
		(NF die wir wieder gerne empfehlen)[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			[01;31m(NX[00m
				(PX zum einen)
				(NX das hotel am thielenplatz)[01;31m)[00m[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF das)
			(LK liegt)
			[01;36m(PX[00m
				(MF [01;33m(PX[00m
					(ADVX so)
					[01;31m(PX[00m
						[01;31m(PX[00m
							(APPR bis)
							(NX hundert dreisig mark)[01;31m)[00m [01;33mPX)[00m
						(PX pro zimmer)[01;31m)[00m)[01;36m)[00m[01;36m)[00m[01;31m)[00m
	[01;36m(SIMPX[00m
		(SIMPX und dann gibt es ein zentralhotel)
		(SIMPX das ist wirklich auch sehr zentral)[01;36m)[00m
	[01;31m(SIMPX[00m
		(VF das)
		(LK geht)
		[01;36m(PX[00m
			(MF [01;33m(PX[00m
				(ADVX so)
				[01;31m(PX[00m
					(APPR bis)
					(NX zweihundert zwanzig)[01;31m)[00m)[01;36m)[00m[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		[01;31m(PX[00m
			(ADVX naturlich) [01;33mPX)[00m
			(ADVX jetzt)
			[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
		(NX das grandhotel)[01;31m)[00m [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	[01;36m(SIMPX[00m
		[01;36m(NF[00m
			[01;36m(C[00m [01;31m(DM[00m
				(PWAV wobei)[01;31m)[00m[01;36m)[00m
			[01;31m(SIMPX[00m
				[01;36m(MF[00m [01;31m(VF[00m
					(NX
						(PPER ich))[01;31m)[00m[01;36m)[00m
				(LK weis)
				(MF ja nicht)
				(NF
					(SIMPX
						(C ob)
						[01;31m(MF[00m
							(NX
								(PDS das))[01;31m)[00m))[01;31m)[00m[01;36m)[00m[01;36m)[00m)
Step:Modifier Attachment
{'new_parent': 'PX', 'new_family': ['ADVX', 'APPR', 'NX'], 'mover info': [('ADVX', (21, 22))], 'old_family': ['ADVX', 'PX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'APPR', 'CARD', 'CARD', 'NN', 'APPR', 'NN'), 'start right siblings': ['PX'], 'end left siblings': [], 'auto preterminal span': (21, 28), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['APPR', 'NX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(DM also)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK haben)
		(MF hier jetzt drei hotels)
		(NF die wir wieder gerne empfehlen)[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			[01;31m(NX[00m
				(PX zum einen)
				(NX das hotel am thielenplatz)[01;31m)[00m[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF das)
			(LK liegt)
			(MF so bis hundert dreisig mark pro zimmer)[01;36m)[00m[01;31m)[00m
	[01;36m(SIMPX[00m
		(SIMPX und dann gibt es ein zentralhotel)
		(SIMPX das ist wirklich auch sehr zentral)[01;36m)[00m
	[01;31m(SIMPX[00m
		(VF das)
		(LK geht)
		[01;36m(PX[00m
			(MF [01;33m(PX[00m
				(ADVX so)
				[01;31m(PX[00m
					(APPR bis)
					(NX zweihundert zwanzig)[01;31m)[00m)[01;36m)[00m[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		[01;31m(PX[00m
			(ADVX naturlich) [01;33mPX)[00m
			(ADVX jetzt)
			[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
		(NX das grandhotel)[01;31m)[00m [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	[01;36m(SIMPX[00m
		[01;36m(NF[00m
			[01;36m(C[00m [01;31m(DM[00m
				(PWAV wobei)[01;31m)[00m[01;36m)[00m
			[01;31m(SIMPX[00m
				[01;36m(MF[00m [01;31m(VF[00m
					(NX
						(PPER ich))[01;31m)[00m[01;36m)[00m
				(LK weis)
				(MF ja nicht)
				(NF
					(SIMPX
						(C ob)
						[01;31m(MF[00m
							(NX
								(PDS das))[01;31m)[00m))[01;31m)[00m[01;36m)[00m[01;36m)[00m)
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['DM', 'VF', 'LK', 'MF', 'NF'], 'mover info': [('DM', (62, 63))], 'old_family': ['DM', 'DM', 'SIMPX', 'SIMPX', 'SIMPX', 'SIMPX', 'SIMPX', 'NX', 'SIMPX', 'DM', 'SIMPX'], 'start left siblings': ['DM', 'DM', 'SIMPX', 'SIMPX', 'SIMPX', 'SIMPX', 'SIMPX', 'NX', 'SIMPX'], 'auto preterminals': ('PTKANT', 'ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'CARD', 'NN', 'PRELS', 'PPER', 'ADV', 'ADV', 'VVFIN', 'APPRART', 'PIS', 'ART', 'NN', 'APPRART', 'NE', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'NN', 'APPR', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'ART', 'NE', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADJD', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'KON', 'ADV', 'ADV', 'APPR', 'ADJA', 'NN', 'ART', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'CARD', 'NN', 'VVINF', 'PWAV', 'PPER', 'VVFIN', 'ADV', 'PTKNEG', 'KOUS', 'PDS'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 69), 'adding node already present': False, 'movers': ['DM'], 'old_parent': 'TOP', 'POS confusion': ('PWAV', 'PWAV'), 'added and moved': True, 'end right siblings': ['VF', 'LK', 'MF', 'NF'], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'MF'}
(TOP
	(DM ja)
	(DM also)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK haben)
		(MF hier jetzt drei hotels)
		(NF die wir wieder gerne empfehlen)[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			[01;31m(NX[00m
				(PX zum einen)
				(NX das hotel am thielenplatz)[01;31m)[00m[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF das)
			(LK liegt)
			(MF so bis hundert dreisig mark pro zimmer)[01;36m)[00m[01;31m)[00m
	[01;36m(SIMPX[00m
		(SIMPX und dann gibt es ein zentralhotel)
		(SIMPX das ist wirklich auch sehr zentral)[01;36m)[00m
	[01;31m(SIMPX[00m
		(VF das)
		(LK geht)
		[01;36m(PX[00m
			(MF [01;33m(PX[00m
				(ADVX so)
				[01;31m(PX[00m
					(APPR bis)
					(NX zweihundert zwanzig)[01;31m)[00m)[01;36m)[00m[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		[01;31m(PX[00m
			(ADVX naturlich) [01;33mPX)[00m
			(ADVX jetzt)
			[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
		(NX das grandhotel)[01;31m)[00m [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			[01;36m(C[00m [01;31m(DM[00m
				(PWAV wobei)[01;31m)[00m[01;36m)[00m
			[01;36m(MF[00m [01;31m(VF[00m
				(NX
					(PPER ich))[01;31m)[00m[01;36m)[00m
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:Single Word Phrase
{'family': ['C', 'VF', 'LK', 'MF', 'NF'], 'auto preterminal span': (62, 63), 'span': (62, 63), 'subtrees': ['PWAV'], 'parent': 'SIMPX', 'over_word': True, 'auto preterminals': ('PWAV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('DM', 'C')}
(TOP
	(DM ja)
	(DM also)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK haben)
		(MF hier jetzt drei hotels)
		(NF die wir wieder gerne empfehlen)[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			[01;31m(NX[00m
				(PX zum einen)
				(NX das hotel am thielenplatz)[01;31m)[00m[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF das)
			(LK liegt)
			(MF so bis hundert dreisig mark pro zimmer)[01;36m)[00m[01;31m)[00m
	[01;36m(SIMPX[00m
		(SIMPX und dann gibt es ein zentralhotel)
		(SIMPX das ist wirklich auch sehr zentral)[01;36m)[00m
	[01;31m(SIMPX[00m
		(VF das)
		(LK geht)
		[01;36m(PX[00m
			(MF [01;33m(PX[00m
				(ADVX so)
				[01;31m(PX[00m
					(APPR bis)
					(NX zweihundert zwanzig)[01;31m)[00m)[01;36m)[00m[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		[01;31m(PX[00m
			(ADVX naturlich) [01;33mPX)[00m
			(ADVX jetzt)
			[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
		(NX das grandhotel)[01;31m)[00m [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			[01;36m(MF[00m [01;31m(VF[00m
				(NX
					(PPER ich))[01;31m)[00m[01;36m)[00m
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:Different label
{'family': ['C', 'MF', 'LK', 'MF', 'NF'], 'auto preterminal span': (63, 64), 'span': (63, 64), 'subtrees': ['NX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('PPER',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('VF', 'MF')}
(TOP
	(DM ja)
	(DM also)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK haben)
		(MF hier jetzt drei hotels)
		(NF die wir wieder gerne empfehlen)[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			[01;31m(NX[00m
				(PX zum einen)
				(NX das hotel am thielenplatz)[01;31m)[00m[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF das)
			(LK liegt)
			(MF so bis hundert dreisig mark pro zimmer)[01;36m)[00m[01;31m)[00m
	[01;36m(SIMPX[00m
		(SIMPX und dann gibt es ein zentralhotel)
		(SIMPX das ist wirklich auch sehr zentral)[01;36m)[00m
	[01;31m(SIMPX[00m
		(VF das)
		(LK geht)
		[01;36m(PX[00m
			(MF [01;33m(PX[00m
				(ADVX so)
				[01;31m(PX[00m
					(APPR bis)
					(NX zweihundert zwanzig)[01;31m)[00m)[01;36m)[00m[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		[01;31m(PX[00m
			(ADVX naturlich) [01;33mPX)[00m
			(ADVX jetzt)
			[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
		(NX das grandhotel)[01;31m)[00m [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'NF', 'LV'], 'mover info': [('LV', (13, 19))], 'old_family': ['LV', 'VF', 'LK', 'MF'], 'start left siblings': [], 'auto preterminals': ('PTKANT', 'ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'CARD', 'NN', 'PRELS', 'PPER', 'ADV', 'ADV', 'VVFIN', 'APPRART', 'PIS', 'ART', 'NN', 'APPRART', 'NE', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'NN', 'APPR', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'ART', 'NE', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADJD', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'KON', 'ADV', 'ADV', 'APPR', 'ADJA', 'NN', 'ART', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'CARD', 'NN', 'VVINF', 'PWAV', 'PPER', 'VVFIN', 'ADV', 'PTKNEG', 'KOUS', 'PDS'), 'start right siblings': ['VF', 'LK', 'MF'], 'end left siblings': ['VF', 'LK', 'MF', 'NF'], 'auto preterminal span': (0, 69), 'movers': ['LV'], 'old_parent': 'SIMPX', 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM ja)
	(DM also)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK haben)
		(MF hier jetzt drei hotels)
		(NF die wir wieder gerne empfehlen)
		[01;31m(LV[00m
			[01;31m(NX[00m
				(PX zum einen)
				(NX das hotel am thielenplatz)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	[01;36m(SIMPX[00m
		(SIMPX und dann gibt es ein zentralhotel)
		(SIMPX das ist wirklich auch sehr zentral)[01;36m)[00m
	[01;31m(SIMPX[00m
		(VF das)
		(LK geht)
		[01;36m(PX[00m
			(MF [01;33m(PX[00m
				(ADVX so)
				[01;31m(PX[00m
					(APPR bis)
					(NX zweihundert zwanzig)[01;31m)[00m)[01;36m)[00m[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		[01;31m(PX[00m
			(ADVX naturlich) [01;33mPX)[00m
			(ADVX jetzt)
			[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
		(NX das grandhotel)[01;31m)[00m [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:Modifier Attachment
{'new_parent': 'PX', 'new_family': ['ADVX', 'APPR', 'NX'], 'mover info': [('ADVX', (42, 43))], 'old_family': ['ADVX', 'PX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'APPR', 'CARD', 'CARD'), 'start right siblings': ['PX'], 'end left siblings': [], 'auto preterminal span': (42, 46), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['APPR', 'NX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(DM also)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK haben)
		(MF hier jetzt drei hotels)
		(NF die wir wieder gerne empfehlen)
		[01;31m(LV[00m
			[01;31m(NX[00m
				(PX zum einen)
				(NX das hotel am thielenplatz)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	[01;36m(SIMPX[00m
		(SIMPX und dann gibt es ein zentralhotel)
		(SIMPX das ist wirklich auch sehr zentral)[01;36m)[00m
	[01;31m(SIMPX[00m
		(VF das)
		(LK geht)
		[01;33m(PX[00m (MF so bis zweihundert zwanzig)[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		[01;31m(PX[00m
			(ADVX naturlich) [01;33mPX)[00m
			(ADVX jetzt)
			[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
		(NX das grandhotel)[01;31m)[00m [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['DM', 'DM', 'SIMPX', 'SIMPX', 'SIMPX', 'SIMPX', 'NX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ADV', 'VVFIN', 'PPER', 'ART', 'NE', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADJD'), 'right siblings': [(SIMPX (VF (NX (PDS das))) (LK (VXFIN (VVFIN geht))) (MF (PX (ADVX (ADV so)) (APPR bis) (NX (CARD zweihundert) (CARD zwanzig))))), (NX (KON und) (PX (ADVX (ADV naturlich)) (ADVX (ADV jetzt)) (PX (APPR fur) (NX (ADJX (ADJA gehobene)) (NN anspruche)))) (NX (ART das) (NE grandhotel))), (SIMPX (VF (ADVX (ADV da))) (LK (VXFIN (VMFIN musten))) (MF (NX (PPER sie)) (ADVX (ADV allerdings)) (ADVX (ADV schon)) (NX (ADJX (CARD funfhundert)) (NN mark))) (VC (VXINF (VVINF hinlegen)))), (NF (SIMPX (C (PWAV wobei)) (MF (NX (PPER ich))) (LK (VXFIN (VVFIN weis))) (MF (ADVX (ADV ja)) (ADVX (PTKNEG nicht))) (NF (SIMPX (C (KOUS ob)) (MF (NX (PDS das)))))))], 'left siblings': [(DM (PTKANT ja)), (DM (ADVX (ADV also))), (SIMPX (VF (NX (PPER wir))) (LK (VXFIN (VAFIN haben))) (MF (ADVX (ADV hier)) (ADVX (ADV jetzt)) (NX (ADJX (CARD drei)) (NN hotels))) (NF (R (C (NX (PRELS die))) (MF (NX (PPER wir)) (ADVX (ADV wieder)) (ADVX (ADV gerne))) (VC (VXFIN (VVFIN empfehlen))))) (LV (NX (PX (APPRART zum) (NX (PIS einen))) (NX (NX (ART das) (NN hotel)) (PX (APPRART am) (NX (NE thielenplatz))))))), (SIMPX (VF (NX (PDS das))) (LK (VXFIN (VVFIN liegt))) (MF (PX (PX (ADVX (ADV so)) (APPR bis) (NX (ADJX (CARD hundert) (CARD dreisig)) (NN mark))) (PX (APPR pro) (NX (NN zimmer))))))], 'auto preterminal span': (28, 40), 'span': (28, 40), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(DM ja)
	(DM also)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK haben)
		(MF hier jetzt drei hotels)
		(NF die wir wieder gerne empfehlen)
		[01;31m(LV[00m
			[01;31m(NX[00m
				(PX zum einen)
				(NX das hotel am thielenplatz)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	(SIMPX und dann gibt es ein zentralhotel das ist wirklich auch sehr zentral)
	[01;31m(SIMPX[00m
		(VF das)
		(LK geht)
		[01;33m(PX[00m (MF so bis zweihundert zwanzig)[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		[01;31m(PX[00m
			(ADVX naturlich) [01;33mPX)[00m
			(ADVX jetzt)
			[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
		(NX das grandhotel)[01;31m)[00m [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'NF', 'LV'], 'family': ['DM', 'DM', 'SIMPX', 'SIMPX', 'SIMPX', 'SIMPX', 'NX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'CARD', 'NN', 'PRELS', 'PPER', 'ADV', 'ADV', 'VVFIN', 'APPRART', 'PIS', 'ART', 'NN', 'APPRART', 'NE', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'NN', 'APPR', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'ART', 'NE', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADJD', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'KON', 'ADV', 'ADV', 'APPR', 'ADJA', 'NN', 'ART', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'CARD', 'NN', 'VVINF', 'PWAV', 'PPER', 'VVFIN', 'ADV', 'PTKNEG', 'KOUS', 'PDS'), 'right siblings': ['SIMPX', 'SIMPX', 'SIMPX', 'NX', 'SIMPX', 'NF'], 'parent': 'TOP', 'auto preterminal span': (0, 69), 'span': (2, 19), 'left siblings': ['DM', 'DM'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(VF wir)
	(LK haben)
	(MF hier jetzt drei hotels)
	(NF die wir wieder gerne empfehlen)
	[01;31m(LV[00m
		[01;31m(NX[00m
			(PX zum einen)
			(NX das hotel am thielenplatz)[01;31m)[00m[01;31m)[00m
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	(SIMPX und dann gibt es ein zentralhotel das ist wirklich auch sehr zentral)
	[01;31m(SIMPX[00m
		(VF das)
		(LK geht)
		[01;33m(PX[00m (MF so bis zweihundert zwanzig)[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		[01;31m(PX[00m
			(ADVX naturlich) [01;33mPX)[00m
			(ADVX jetzt)
			[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
		(NX das grandhotel)[01;31m)[00m [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:Unary
{'subtrees': ['NX'], 'family': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'LV', 'SIMPX', 'SIMPX', 'SIMPX', 'NX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'CARD', 'NN', 'PRELS', 'PPER', 'ADV', 'ADV', 'VVFIN', 'APPRART', 'PIS', 'ART', 'NN', 'APPRART', 'NE', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'NN', 'APPR', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'ART', 'NE', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADJD', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'KON', 'ADV', 'ADV', 'APPR', 'ADJA', 'NN', 'ART', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'CARD', 'NN', 'VVINF', 'PWAV', 'PPER', 'VVFIN', 'ADV', 'PTKNEG', 'KOUS', 'PDS'), 'right siblings': ['SIMPX', 'SIMPX', 'SIMPX', 'NX', 'SIMPX', 'NF'], 'parent': 'TOP', 'auto preterminal span': (0, 69), 'span': (13, 19), 'left siblings': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF'], 'label': 'LV', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(VF wir)
	(LK haben)
	(MF hier jetzt drei hotels)
	(NF die wir wieder gerne empfehlen)
	[01;31m(NX[00m
		(PX zum einen)
		(NX das hotel am thielenplatz)[01;31m)[00m
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	(SIMPX und dann gibt es ein zentralhotel das ist wirklich auch sehr zentral)
	[01;31m(SIMPX[00m
		(VF das)
		(LK geht)
		[01;33m(PX[00m (MF so bis zweihundert zwanzig)[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		[01;31m(PX[00m
			(ADVX naturlich) [01;33mPX)[00m
			(ADVX jetzt)
			[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
		(NX das grandhotel)[01;31m)[00m [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:UNSET remove
{'subtrees': ['PX', 'NX'], 'family': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'NX', 'SIMPX', 'SIMPX', 'SIMPX', 'NX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'CARD', 'NN', 'PRELS', 'PPER', 'ADV', 'ADV', 'VVFIN', 'APPRART', 'PIS', 'ART', 'NN', 'APPRART', 'NE', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'NN', 'APPR', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'ART', 'NE', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADJD', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'KON', 'ADV', 'ADV', 'APPR', 'ADJA', 'NN', 'ART', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'CARD', 'NN', 'VVINF', 'PWAV', 'PPER', 'VVFIN', 'ADV', 'PTKNEG', 'KOUS', 'PDS'), 'right siblings': ['SIMPX', 'SIMPX', 'SIMPX', 'NX', 'SIMPX', 'NF'], 'parent': 'TOP', 'auto preterminal span': (0, 69), 'span': (13, 19), 'left siblings': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(VF wir)
	(LK haben)
	(MF hier jetzt drei hotels)
	(NF die wir wieder gerne empfehlen)
	(PX zum einen)
	(NX das hotel am thielenplatz)
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	(SIMPX und dann gibt es ein zentralhotel das ist wirklich auch sehr zentral)
	[01;31m(SIMPX[00m
		(VF das)
		(LK geht)
		[01;33m(PX[00m (MF so bis zweihundert zwanzig)[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		[01;31m(PX[00m
			(ADVX naturlich) [01;33mPX)[00m
			(ADVX jetzt)
			[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
		(NX das grandhotel)[01;31m)[00m [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'PX', 'NX', 'SIMPX', 'SIMPX', 'SIMPX', 'NX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'CARD', 'NN', 'PRELS', 'PPER', 'ADV', 'ADV', 'VVFIN', 'APPRART', 'PIS', 'ART', 'NN', 'APPRART', 'NE', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'NN', 'APPR', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'ART', 'NE', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADJD', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'KON', 'ADV', 'ADV', 'APPR', 'ADJA', 'NN', 'ART', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'CARD', 'NN', 'VVINF', 'PWAV', 'PPER', 'VVFIN', 'ADV', 'PTKNEG', 'KOUS', 'PDS'), 'right siblings': ['NX', 'SIMPX', 'NF'], 'parent': 'TOP', 'auto preterminal span': (0, 69), 'span': (40, 46), 'left siblings': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'PX', 'NX', 'SIMPX', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(VF wir)
	(LK haben)
	(MF hier jetzt drei hotels)
	(NF die wir wieder gerne empfehlen)
	(PX zum einen)
	(NX das hotel am thielenplatz)
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	(SIMPX und dann gibt es ein zentralhotel das ist wirklich auch sehr zentral)
	(VF das)
	(LK geht)
	[01;33m(PX[00m (MF so bis zweihundert zwanzig)
	[01;31m(NX[00m
		(KON und)
		[01;31m(PX[00m
			(ADVX naturlich) [01;33mPX)[00m
			(ADVX jetzt)
			[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
		(NX das grandhotel)[01;31m)[00m [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:PP Attachment
{'subtrees': ['KON', 'PX', 'NX'], 'family': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'PX', 'NX', 'SIMPX', 'SIMPX', 'VF', 'LK', 'MF', 'NX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'CARD', 'NN', 'PRELS', 'PPER', 'ADV', 'ADV', 'VVFIN', 'APPRART', 'PIS', 'ART', 'NN', 'APPRART', 'NE', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'NN', 'APPR', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'ART', 'NE', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADJD', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'KON', 'ADV', 'ADV', 'APPR', 'ADJA', 'NN', 'ART', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'CARD', 'NN', 'VVINF', 'PWAV', 'PPER', 'VVFIN', 'ADV', 'PTKNEG', 'KOUS', 'PDS'), 'right siblings': ['SIMPX', 'NF'], 'parent': 'TOP', 'auto preterminal span': (0, 69), 'span': (46, 54), 'left siblings': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'PX', 'NX', 'SIMPX', 'SIMPX', 'VF', 'LK', 'MF'], 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(VF wir)
	(LK haben)
	(MF hier jetzt drei hotels)
	(NF die wir wieder gerne empfehlen)
	(PX zum einen)
	(NX das hotel am thielenplatz)
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	(SIMPX und dann gibt es ein zentralhotel das ist wirklich auch sehr zentral)
	(VF das)
	(LK geht)
	[01;33m(PX[00m (MF so bis zweihundert zwanzig)
	(KON und)
	[01;31m(PX[00m
		(ADVX naturlich) [01;33mPX)[00m
		(ADVX jetzt)
		[01;33m(PX (PX[00m (PX fur gehobene anspruche)[01;31m)[00m
	(NX das grandhotel) [01;33mPX)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:PP Attachment
{'subtrees': ['ADVX', 'ADVX', 'PX'], 'family': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'PX', 'NX', 'SIMPX', 'SIMPX', 'VF', 'LK', 'MF', 'KON', 'PX', 'NX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'CARD', 'NN', 'PRELS', 'PPER', 'ADV', 'ADV', 'VVFIN', 'APPRART', 'PIS', 'ART', 'NN', 'APPRART', 'NE', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'NN', 'APPR', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'ART', 'NE', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADJD', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'KON', 'ADV', 'ADV', 'APPR', 'ADJA', 'NN', 'ART', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'CARD', 'NN', 'VVINF', 'PWAV', 'PPER', 'VVFIN', 'ADV', 'PTKNEG', 'KOUS', 'PDS'), 'right siblings': ['NX', 'SIMPX', 'NF'], 'parent': 'TOP', 'auto preterminal span': (0, 69), 'span': (47, 52), 'left siblings': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'PX', 'NX', 'SIMPX', 'SIMPX', 'VF', 'LK', 'MF', 'KON'], 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(VF wir)
	(LK haben)
	(MF hier jetzt drei hotels)
	(NF die wir wieder gerne empfehlen)
	(PX zum einen)
	(NX das hotel am thielenplatz)
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	(SIMPX und dann gibt es ein zentralhotel das ist wirklich auch sehr zentral)
	(VF das)
	(LK geht)
	[01;36m(PX[00m
		(MF so bis zweihundert zwanzig)
		(KON und)
		(ADVX naturlich)[01;36m)[00m
	(ADVX jetzt)
	[01;36m(PX[00m
		[01;33m(PX[00m (PX fur gehobene anspruche)
		(NX das grandhotel)[01;36m)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:Modifier Attachment
{'subtrees': ['MF', 'KON', 'ADVX'], 'family': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'PX', 'NX', 'SIMPX', 'SIMPX', 'VF', 'LK', 'PX', 'ADVX', 'PX', 'NX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'APPR', 'CARD', 'CARD', 'KON', 'ADV'), 'right siblings': [(ADVX (ADV jetzt)), (PX (APPR fur) (NX (ADJX (ADJA gehobene)) (NN anspruche))), (NX (ART das) (NE grandhotel)), (SIMPX (VF (ADVX (ADV da))) (LK (VXFIN (VMFIN musten))) (MF (NX (PPER sie)) (ADVX (ADV allerdings)) (ADVX (ADV schon)) (NX (ADJX (CARD funfhundert)) (NN mark))) (VC (VXINF (VVINF hinlegen)))), (NF (SIMPX (C (PWAV wobei)) (MF (NX (PPER ich))) (LK (VXFIN (VVFIN weis))) (MF (ADVX (ADV ja)) (ADVX (PTKNEG nicht))) (NF (SIMPX (C (KOUS ob)) (MF (NX (PDS das)))))))], 'left siblings': [(DM (PTKANT ja)), (DM (ADVX (ADV also))), (VF (NX (PPER wir))), (LK (VXFIN (VAFIN haben))), (MF (ADVX (ADV hier)) (ADVX (ADV jetzt)) (NX (ADJX (CARD drei)) (NN hotels))), (NF (R (C (NX (PRELS die))) (MF (NX (PPER wir)) (ADVX (ADV wieder)) (ADVX (ADV gerne))) (VC (VXFIN (VVFIN empfehlen))))), (PX (APPRART zum) (NX (PIS einen))), (NX (NX (ART das) (NN hotel)) (PX (APPRART am) (NX (NE thielenplatz)))), (SIMPX (VF (NX (PDS das))) (LK (VXFIN (VVFIN liegt))) (MF (PX (PX (ADVX (ADV so)) (APPR bis) (NX (ADJX (CARD hundert) (CARD dreisig)) (NN mark))) (PX (APPR pro) (NX (NN zimmer)))))), (SIMPX (SIMPX (KOORD (KON und)) (VF (ADVX (ADV dann))) (LK (VXFIN (VVFIN gibt))) (MF (NX (PPER es)) (NX (ART ein) (NE zentralhotel)))) (SIMPX (VF (NX (PDS das))) (LK (VXFIN (VAFIN ist))) (MF (ADVX (ADV wirklich)) (ADVX (ADV auch)) (ADJX (ADVX (ADV sehr)) (ADJD zentral))))), (VF (NX (PDS das))), (LK (VXFIN (VVFIN geht)))], 'auto preterminal span': (42, 48), 'span': (42, 48), 'parent': 'TOP', 'label': 'PX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(DM ja)
	(DM also)
	(VF wir)
	(LK haben)
	(MF hier jetzt drei hotels)
	(NF die wir wieder gerne empfehlen)
	(PX zum einen)
	(NX das hotel am thielenplatz)
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	(SIMPX und dann gibt es ein zentralhotel das ist wirklich auch sehr zentral)
	(VF das)
	(LK geht)
	(PX so bis zweihundert zwanzig und naturlich)
	(ADVX jetzt)
	[01;36m(PX[00m
		[01;33m(PX[00m (PX fur gehobene anspruche)
		(NX das grandhotel)[01;36m)[00m
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:UNSET add
{'subtrees': ['PX', 'NX'], 'family': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'PX', 'NX', 'SIMPX', 'SIMPX', 'VF', 'LK', 'PX', 'ADVX', 'PX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ADJA', 'NN', 'ART', 'NE'), 'right siblings': [(SIMPX (VF (ADVX (ADV da))) (LK (VXFIN (VMFIN musten))) (MF (NX (PPER sie)) (ADVX (ADV allerdings)) (ADVX (ADV schon)) (NX (ADJX (CARD funfhundert)) (NN mark))) (VC (VXINF (VVINF hinlegen)))), (NF (SIMPX (C (PWAV wobei)) (MF (NX (PPER ich))) (LK (VXFIN (VVFIN weis))) (MF (ADVX (ADV ja)) (ADVX (PTKNEG nicht))) (NF (SIMPX (C (KOUS ob)) (MF (NX (PDS das)))))))], 'left siblings': [(DM (PTKANT ja)), (DM (ADVX (ADV also))), (VF (NX (PPER wir))), (LK (VXFIN (VAFIN haben))), (MF (ADVX (ADV hier)) (ADVX (ADV jetzt)) (NX (ADJX (CARD drei)) (NN hotels))), (NF (R (C (NX (PRELS die))) (MF (NX (PPER wir)) (ADVX (ADV wieder)) (ADVX (ADV gerne))) (VC (VXFIN (VVFIN empfehlen))))), (PX (APPRART zum) (NX (PIS einen))), (NX (NX (ART das) (NN hotel)) (PX (APPRART am) (NX (NE thielenplatz)))), (SIMPX (VF (NX (PDS das))) (LK (VXFIN (VVFIN liegt))) (MF (PX (PX (ADVX (ADV so)) (APPR bis) (NX (ADJX (CARD hundert) (CARD dreisig)) (NN mark))) (PX (APPR pro) (NX (NN zimmer)))))), (SIMPX (SIMPX (KOORD (KON und)) (VF (ADVX (ADV dann))) (LK (VXFIN (VVFIN gibt))) (MF (NX (PPER es)) (NX (ART ein) (NE zentralhotel)))) (SIMPX (VF (NX (PDS das))) (LK (VXFIN (VAFIN ist))) (MF (ADVX (ADV wirklich)) (ADVX (ADV auch)) (ADJX (ADVX (ADV sehr)) (ADJD zentral))))), (VF (NX (PDS das))), (LK (VXFIN (VVFIN geht))), (PX (MF (PX (ADVX (ADV so)) (APPR bis) (NX (CARD zweihundert) (CARD zwanzig)))) (KON und) (ADVX (ADV naturlich))), (ADVX (ADV jetzt))], 'auto preterminal span': (49, 54), 'span': (49, 54), 'parent': 'TOP', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	(DM also)
	(VF wir)
	(LK haben)
	(MF hier jetzt drei hotels)
	(NF die wir wieder gerne empfehlen)
	(PX zum einen)
	(NX das hotel am thielenplatz)
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	(SIMPX und dann gibt es ein zentralhotel das ist wirklich auch sehr zentral)
	(VF das)
	(LK geht)
	(PX so bis zweihundert zwanzig und naturlich)
	(ADVX jetzt)
	[01;33m(PX[00m (PX fur gehobene anspruche das grandhotel)
	[01;31m(SIMPX[00m
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark) [01;33mPX)[00m
		(VC hinlegen)[01;31m)[00m
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'PX', 'NX', 'SIMPX', 'SIMPX', 'VF', 'LK', 'PX', 'ADVX', 'PX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'CARD', 'NN', 'PRELS', 'PPER', 'ADV', 'ADV', 'VVFIN', 'APPRART', 'PIS', 'ART', 'NN', 'APPRART', 'NE', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'NN', 'APPR', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'ART', 'NE', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADJD', 'PDS', 'VVFIN', 'ADV', 'APPR', 'CARD', 'CARD', 'KON', 'ADV', 'ADV', 'APPR', 'ADJA', 'NN', 'ART', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'CARD', 'NN', 'VVINF', 'PWAV', 'PPER', 'VVFIN', 'ADV', 'PTKNEG', 'KOUS', 'PDS'), 'right siblings': ['NF'], 'parent': 'TOP', 'auto preterminal span': (0, 69), 'span': (54, 62), 'left siblings': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'PX', 'NX', 'SIMPX', 'SIMPX', 'VF', 'LK', 'PX', 'ADVX', 'PX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(VF wir)
	(LK haben)
	(MF hier jetzt drei hotels)
	(NF die wir wieder gerne empfehlen)
	(PX zum einen)
	(NX das hotel am thielenplatz)
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	(SIMPX und dann gibt es ein zentralhotel das ist wirklich auch sehr zentral)
	(VF das)
	(LK geht)
	(PX so bis zweihundert zwanzig und naturlich)
	(ADVX jetzt)
	[01;36m(PX[00m
		(PX fur gehobene anspruche das grandhotel)
		(VF da)
		(LK musten)
		(MF sie allerdings schon funfhundert mark)[01;36m)[00m
	(VC hinlegen)
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:UNSET add
{'subtrees': ['PX', 'VF', 'LK', 'MF'], 'family': ['DM', 'DM', 'VF', 'LK', 'MF', 'NF', 'PX', 'NX', 'SIMPX', 'SIMPX', 'VF', 'LK', 'PX', 'ADVX', 'PX', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ADJA', 'NN', 'ART', 'NE', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'CARD', 'NN'), 'right siblings': [(VC (VXINF (VVINF hinlegen))), (NF (SIMPX (C (PWAV wobei)) (MF (NX (PPER ich))) (LK (VXFIN (VVFIN weis))) (MF (ADVX (ADV ja)) (ADVX (PTKNEG nicht))) (NF (SIMPX (C (KOUS ob)) (MF (NX (PDS das)))))))], 'left siblings': [(DM (PTKANT ja)), (DM (ADVX (ADV also))), (VF (NX (PPER wir))), (LK (VXFIN (VAFIN haben))), (MF (ADVX (ADV hier)) (ADVX (ADV jetzt)) (NX (ADJX (CARD drei)) (NN hotels))), (NF (R (C (NX (PRELS die))) (MF (NX (PPER wir)) (ADVX (ADV wieder)) (ADVX (ADV gerne))) (VC (VXFIN (VVFIN empfehlen))))), (PX (APPRART zum) (NX (PIS einen))), (NX (NX (ART das) (NN hotel)) (PX (APPRART am) (NX (NE thielenplatz)))), (SIMPX (VF (NX (PDS das))) (LK (VXFIN (VVFIN liegt))) (MF (PX (PX (ADVX (ADV so)) (APPR bis) (NX (ADJX (CARD hundert) (CARD dreisig)) (NN mark))) (PX (APPR pro) (NX (NN zimmer)))))), (SIMPX (SIMPX (KOORD (KON und)) (VF (ADVX (ADV dann))) (LK (VXFIN (VVFIN gibt))) (MF (NX (PPER es)) (NX (ART ein) (NE zentralhotel)))) (SIMPX (VF (NX (PDS das))) (LK (VXFIN (VAFIN ist))) (MF (ADVX (ADV wirklich)) (ADVX (ADV auch)) (ADJX (ADVX (ADV sehr)) (ADJD zentral))))), (VF (NX (PDS das))), (LK (VXFIN (VVFIN geht))), (PX (MF (PX (ADVX (ADV so)) (APPR bis) (NX (CARD zweihundert) (CARD zwanzig)))) (KON und) (ADVX (ADV naturlich))), (ADVX (ADV jetzt))], 'auto preterminal span': (49, 61), 'span': (49, 61), 'parent': 'TOP', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	(DM also)
	(VF wir)
	(LK haben)
	(MF hier jetzt drei hotels)
	(NF die wir wieder gerne empfehlen)
	(PX zum einen)
	(NX das hotel am thielenplatz)
	(SIMPX das liegt so bis hundert dreisig mark pro zimmer)
	(SIMPX und dann gibt es ein zentralhotel das ist wirklich auch sehr zentral)
	(VF das)
	(LK geht)
	(PX so bis zweihundert zwanzig und naturlich)
	(ADVX jetzt)
	(PX fur gehobene anspruche das grandhotel da musten sie allerdings schon funfhundert mark)
	(VC hinlegen)
	(NF
		(SIMPX
			(C wobei)
			(MF ich)
			(LK weis)
			(MF ja nicht)
			(NF
				(SIMPX
					(C ob)
					[01;31m(MF[00m
						(NX
							(PDS das))[01;31m)[00m)))))
Step:Unary
{'subtrees': ['NX'], 'family': ['C', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PDS'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (67, 69), 'span': (68, 69), 'left siblings': ['C'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ja also wir haben hier jetzt drei hotels die wir wieder gerne empfehlen zum einen das hotel am thielenplatz das liegt so bis hundert dreisig mark pro zimmer und dann gibt es ein zentralhotel das ist wirklich auch sehr zentral das geht so bis zweihundert zwanzig und naturlich jetzt fur gehobene anspruche das grandhotel da musten sie allerdings schon funfhundert mark hinlegen wobei ich weis ja nicht ob das)

Sentence 737:
0 Initial errors
0 on fringe, 0 iterations

Sentence 738:
3 Initial errors
0 on fringe, 1 iterations
3 Error:NP Internal Structure
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(NX[00m
	(NX
		(ART das)
		[01;31m(NX[00m
			[01;31m(NX[00m
				(NE zentralhotel)[01;31m)[00m [01;33mNX)[00m
			(NX kaiserhof)[01;31m)[00m))
Step:NP Internal Structure
{'new_parent': 'NX', 'new_family': ['ART', 'NE'], 'mover info': [('ART', (0, 1))], 'old_family': ['ART', 'NX'], 'start left siblings': [], 'auto preterminals': ('ART', 'NE', 'NE'), 'start right siblings': ['NX'], 'end left siblings': [], 'auto preterminal span': (0, 3), 'movers': ['ART'], 'old_parent': 'NX', 'POS confusion': ('ART', 'ART'), 'end right siblings': ['NE'], 'classified_type': 'NP Internal Structure', 'type': 'move'}
(TOP das zentralhotel kaiserhof)

Sentence 739:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX das ist auch ein sehr schones hotel)
	(DM also)
	(SIMPX
		(LK ist)
		(MF auch mit aufenthaltsraumen und konferenzraumen)
		(NF
			(SIMPX
				(C wenn)
				(MF
					(NX sie)
					[01;31m(ADVX[00m
						(ADJX geschaftlich)
						[01;36m(ADVX[00m
							(ADV unterwegs)[01;36m)[00m[01;31m)[00m)
				(VC sind)))))
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADJX', 'ADVX'], 'mover info': [('ADJX', (17, 18))], 'old_family': ['ADJX', 'ADV'], 'start left siblings': [], 'auto preterminals': ('PPER', 'ADJD', 'ADV'), 'start right siblings': ['ADV'], 'end left siblings': ['NX'], 'auto preterminal span': (16, 19), 'movers': ['ADJX'], 'old_parent': 'ADVX', 'POS confusion': ('ADJD', 'ADJD'), 'end right siblings': ['ADVX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP ja das ist auch ein sehr schones hotel also ist auch mit aufenthaltsraumen und konferenzraumen wenn sie geschaftlich unterwegs sind)

Sentence 740:
0 Initial errors
0 on fringe, 0 iterations

Sentence 741:
5 Initial errors
0 on fringe, 2 iterations
3 Error:Modifier Attachment
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;31m(ADVX[00m
		[01;36m(DM[00m [01;31m(ADVX[00m
			(ADV naturlich)[01;31m)[00m[01;36m)[00m
		[01;33m(PX[00m (ADVX da)[01;31m)[00m
	[01;31m(PX[00m
		(ADVX grade)
		(PX am wochenende)[01;31m)[00m) [01;33mPX)[00m
Step:Modifier Attachment
{'new_parent': 'PX', 'new_family': ['ADVX', 'ADVX', 'PX'], 'mover info': [('ADVX', (2, 3))], 'old_family': ['ADVX', 'ADVX'], 'start left siblings': ['ADVX'], 'auto preterminals': ('PTKANT', 'ADV', 'ADV', 'ADV', 'APPRART', 'NN'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (0, 6), 'movers': ['ADVX'], 'old_parent': 'ADVX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ADVX', 'PX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(DM ja)
	[01;36m(DM[00m [01;31m(ADVX[00m
		(ADV naturlich)[01;31m)[00m[01;36m)[00m
	(PX da grade am wochenende))
Step:Single Word Phrase
{'family': ['DM', 'DM', 'PX'], 'auto preterminal span': (1, 2), 'span': (1, 2), 'subtrees': ['ADV'], 'parent': 'TOP', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'DM')}
(TOP ja naturlich da grade am wochenende)

Sentence 742:
0 Initial errors
0 on fringe, 0 iterations

Sentence 743:
20 Initial errors
0 on fringe, 16 iterations
4 Error:UNSET move
2 Error:UNSET move
1 Error:UNSET add
1 Error:Single Word Phrase
1 Error:Single Word Phrase
1 Error:Unary
1 Error:UNSET add
1 Error:Single Word Phrase
1 Error:Unary
1 Error:UNSET remove
1 Error:Unary
1 Error:Modifier Attachment
1 Error:Unary
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(VF dann)
			(LK wurde)
			(MF ich)
			(VC sagen)[01;36m)[00m
		[01;31m(NF[00m
			(SIMPX
				(VF dann)
				(LK nehme)
				(MF ich das))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(LK kann)
		[01;31m(MF[00m [01;33m(MF[00m
			(NX
				(PPER ich))[01;31m)[00m[01;31m)[00m
	[01;31m(DM[00m
		(ADVX
			(ADV also))[01;31m)[00m [01;33mMF)[00m
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF
			[01;31m(ADVX[00m
				(ADVX noch)
				(PTKNEG nicht)[01;31m)[00m
			(ADJX ganz sicher))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				[01;36m(NX[00m
					(ART der)[01;36m)[00m
				[01;36m(R[00m
					[01;36m(NX[00m
						[01;36m(C[00m
							(PWS was)[01;36m)[00m[01;36m)[00m
					(MF
						[01;31m(NX[00m
							[01;31m(NX[00m
								[01;36m(NX[00m
									(ART das)[01;36m)[00m
								[01;36m(NX[00m
									(NN [01;33m(NX[00m ende)[01;36m)[00m[01;31m)[00m
							(NX der abreise)[01;31m)[00m) [01;33mNX)[00m
					(VC anging)[01;36m)[00m[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['ART', 'NX'], 'mover info': [('ART', (25, 26))], 'old_family': ['ART', 'NN'], 'start left siblings': [], 'auto preterminals': ('ART', 'NN', 'ART', 'NN'), 'start right siblings': ['NN'], 'end left siblings': [], 'auto preterminal span': (25, 29), 'movers': ['ART'], 'old_parent': 'NX', 'POS confusion': ('ART', 'ART'), 'end right siblings': ['NX'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(VF dann)
			(LK wurde)
			(MF ich)
			(VC sagen)[01;36m)[00m
		[01;31m(NF[00m
			(SIMPX
				(VF dann)
				(LK nehme)
				(MF ich das))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(LK kann)
		[01;31m(MF[00m [01;33m(MF[00m
			(NX
				(PPER ich))[01;31m)[00m[01;31m)[00m
	[01;31m(DM[00m
		(ADVX
			(ADV also))[01;31m)[00m [01;33mMF)[00m
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF
			[01;31m(ADVX[00m
				(ADVX noch)
				(PTKNEG nicht)[01;31m)[00m
			(ADJX ganz sicher))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				[01;36m(NX[00m
					(ART der)[01;36m)[00m
				[01;36m(R[00m
					[01;36m(NX[00m
						[01;36m(C[00m
							(PWS was)[01;36m)[00m[01;36m)[00m
					(MF
						[01;36m(NX[00m
							(ART das)[01;36m)[00m
						(NX ende der abreise))
					(VC anging)[01;36m)[00m[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'DM'], 'mover info': [('DM', (11, 12))], 'old_family': ['SIMPX', 'SIMPX', 'DM', 'DM', 'SIMPX', 'SIMPX'], 'start left siblings': ['SIMPX', 'SIMPX'], 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'VVINF', 'ADV', 'VVFIN', 'PPER', 'PDS', 'KON', 'VMFIN', 'PPER', 'ADV', 'KOUS', 'VVPP', 'PPER', 'VAFIN', 'ADV', 'PTKNEG', 'ADV', 'ADJD', 'PWS', 'ART', 'NN', 'ART', 'PWS', 'ART', 'NN', 'ART', 'NN', 'VVFIN', 'KOUS', 'PPER', 'PRF', 'APPRART', 'NN', 'ART', 'NN', 'ADV', 'ADV', 'VVFIN', 'APPR', 'PPER'), 'start right siblings': ['DM', 'SIMPX', 'SIMPX'], 'end left siblings': ['NX'], 'auto preterminal span': (0, 42), 'movers': ['DM'], 'old_parent': 'TOP', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(VF dann)
			(LK wurde)
			(MF ich)
			(VC sagen)[01;36m)[00m
		[01;31m(NF[00m
			(SIMPX
				(VF dann)
				(LK nehme)
				(MF ich das))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(LK kann)
		(MF
			(NX ich)
			[01;31m(DM[00m
				(ADVX
					(ADV also))[01;31m)[00m)[01;31m)[00m
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF
			[01;31m(ADVX[00m
				(ADVX noch)
				(PTKNEG nicht)[01;31m)[00m
			(ADJX ganz sicher))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				[01;36m(NX[00m
					(ART der)[01;36m)[00m
				[01;36m(R[00m
					[01;36m(NX[00m
						[01;36m(C[00m
							(PWS was)[01;36m)[00m[01;36m)[00m
					(MF
						[01;36m(NX[00m
							(ART das)[01;36m)[00m
						(NX ende der abreise))
					(VC anging)[01;36m)[00m[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'VVINF'), 'right siblings': [(NF (SIMPX (VF (ADVX (ADV dann))) (LK (VXFIN (VVFIN nehme))) (MF (NX (PPER ich)) (NX (PDS das)))))], 'left siblings': [], 'auto preterminal span': (0, 4), 'span': (0, 4), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX dann wurde ich sagen)
		[01;31m(NF[00m
			(SIMPX
				(VF dann)
				(LK nehme)
				(MF ich das))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(LK kann)
		(MF
			(NX ich)
			[01;31m(DM[00m
				(ADVX
					(ADV also))[01;31m)[00m)[01;31m)[00m
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF
			[01;31m(ADVX[00m
				(ADVX noch)
				(PTKNEG nicht)[01;31m)[00m
			(ADJX ganz sicher))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				[01;36m(NX[00m
					(ART der)[01;36m)[00m
				[01;36m(R[00m
					[01;36m(NX[00m
						[01;36m(C[00m
							(PWS was)[01;36m)[00m[01;36m)[00m
					(MF
						[01;36m(NX[00m
							(ART das)[01;36m)[00m
						(NX ende der abreise))
					(VC anging)[01;36m)[00m[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:Single Word Phrase
{'subtrees': ['ART'], 'family': ['C', 'ART', 'NX', 'NX', 'PWS', 'MF', 'VC'], 'over_word': True, 'over words': True, 'auto preterminals': ('ART',), 'right siblings': [(PWS was), (MF (ART das) (NX (NX (NN ende)) (NX (ART der) (NN abreise)))), (VC (VXFIN (VVFIN anging)))], 'left siblings': [(C (NX (PWS was))), (ART den), (NX (NN ende))], 'auto preterminal span': (23, 24), 'span': (23, 24), 'parent': 'SIMPX', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX dann wurde ich sagen)
		[01;31m(NF[00m
			(SIMPX
				(VF dann)
				(LK nehme)
				(MF ich das))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(LK kann)
		(MF
			(NX ich)
			[01;31m(DM[00m
				(ADVX
					(ADV also))[01;31m)[00m)[01;31m)[00m
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF
			[01;31m(ADVX[00m
				(ADVX noch)
				(PTKNEG nicht)[01;31m)[00m
			(ADJX ganz sicher))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				(NX der)
				[01;36m(R[00m
					[01;36m(NX[00m
						[01;36m(C[00m
							(PWS was)[01;36m)[00m[01;36m)[00m
					(MF
						[01;36m(NX[00m
							(ART das)[01;36m)[00m
						(NX ende der abreise))
					(VC anging)[01;36m)[00m[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:Single Word Phrase
{'subtrees': ['PWS'], 'family': ['C', 'ART', 'NX', 'NX', 'C', 'MF', 'VC'], 'over_word': True, 'over words': True, 'auto preterminals': ('PWS',), 'right siblings': [(MF (ART das) (NX (NX (NN ende)) (NX (ART der) (NN abreise)))), (VC (VXFIN (VVFIN anging)))], 'left siblings': [(C (NX (PWS was))), (ART den), (NX (NN ende)), (NX (ART der))], 'auto preterminal span': (24, 25), 'span': (24, 25), 'parent': 'SIMPX', 'label': 'C', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX dann wurde ich sagen)
		[01;31m(NF[00m
			(SIMPX
				(VF dann)
				(LK nehme)
				(MF ich das))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(LK kann)
		(MF
			(NX ich)
			[01;31m(DM[00m
				(ADVX
					(ADV also))[01;31m)[00m)[01;31m)[00m
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF
			[01;31m(ADVX[00m
				(ADVX noch)
				(PTKNEG nicht)[01;31m)[00m
			(ADJX ganz sicher))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				(NX der)
				[01;36m(R[00m
					[01;36m(NX[00m
						(C
							(PWS was))[01;36m)[00m
					(MF
						[01;36m(NX[00m
							(ART das)[01;36m)[00m
						(NX ende der abreise))
					(VC anging)[01;36m)[00m[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:Unary
{'subtrees': ['C'], 'family': ['C', 'ART', 'NX', 'NX', 'NX', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('PWS',), 'right siblings': [(MF (ART das) (NX (NX (NN ende)) (NX (ART der) (NN abreise)))), (VC (VXFIN (VVFIN anging)))], 'left siblings': [(C (NX (PWS was))), (ART den), (NX (NN ende)), (NX (ART der))], 'auto preterminal span': (24, 25), 'span': (24, 25), 'parent': 'SIMPX', 'label': 'NX', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX dann wurde ich sagen)
		[01;31m(NF[00m
			(SIMPX
				(VF dann)
				(LK nehme)
				(MF ich das))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(LK kann)
		(MF
			(NX ich)
			[01;31m(DM[00m
				(ADVX
					(ADV also))[01;31m)[00m)[01;31m)[00m
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF
			[01;31m(ADVX[00m
				(ADVX noch)
				(PTKNEG nicht)[01;31m)[00m
			(ADJX ganz sicher))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				(NX der)
				[01;36m(R[00m
					(NX was)
					(MF
						[01;36m(NX[00m
							(ART das)[01;36m)[00m
						(NX ende der abreise))
					(VC anging)[01;36m)[00m[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:UNSET add
{'subtrees': ['NX', 'MF', 'VC'], 'family': ['C', 'ART', 'NX', 'NX', 'R'], 'over_word': False, 'over words': False, 'auto preterminals': ('PWS', 'ART', 'NN', 'ART', 'NN', 'VVFIN'), 'right siblings': [], 'left siblings': [(C (NX (PWS was))), (ART den), (NX (NN ende)), (NX (ART der))], 'auto preterminal span': (24, 30), 'span': (24, 30), 'parent': 'SIMPX', 'label': 'R', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX dann wurde ich sagen)
		[01;31m(NF[00m
			(SIMPX
				(VF dann)
				(LK nehme)
				(MF ich das))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(LK kann)
		(MF
			(NX ich)
			[01;31m(DM[00m
				(ADVX
					(ADV also))[01;31m)[00m)[01;31m)[00m
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF
			[01;31m(ADVX[00m
				(ADVX noch)
				(PTKNEG nicht)[01;31m)[00m
			(ADJX ganz sicher))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				(NX der)
				(R
					(NX was)
					(MF
						[01;36m(NX[00m
							(ART das)[01;36m)[00m
						(NX ende der abreise))
					(VC anging))[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:Single Word Phrase
{'subtrees': ['ART'], 'family': ['NX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ART',), 'right siblings': [(NX (NX (NN ende)) (NX (ART der) (NN abreise)))], 'left siblings': [], 'auto preterminal span': (25, 26), 'span': (25, 26), 'parent': 'MF', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX dann wurde ich sagen)
		[01;31m(NF[00m
			(SIMPX
				(VF dann)
				(LK nehme)
				(MF ich das))[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(LK kann)
		(MF
			(NX ich)
			[01;31m(DM[00m
				(ADVX
					(ADV also))[01;31m)[00m)[01;31m)[00m
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF
			[01;31m(ADVX[00m
				(ADVX noch)
				(PTKNEG nicht)[01;31m)[00m
			(ADJX ganz sicher))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				(NX der)
				(R was das ende der abreise anging)[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'VVINF', 'ADV', 'VVFIN', 'PPER', 'PDS'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 8), 'span': (4, 8), 'left siblings': ['SIMPX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX dann wurde ich sagen dann nehme ich das)
	[01;31m(SIMPX[00m
		(KOORD und)
		(LK kann)
		(MF
			(NX ich)
			[01;31m(DM[00m
				(ADVX
					(ADV also))[01;31m)[00m)[01;31m)[00m
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF
			[01;31m(ADVX[00m
				(ADVX noch)
				(PTKNEG nicht)[01;31m)[00m
			(ADJX ganz sicher))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				(NX der)
				(R was das ende der abreise anging)[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:UNSET remove
{'subtrees': ['KOORD', 'LK', 'MF'], 'family': ['SIMPX', 'SIMPX', 'DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'VVINF', 'ADV', 'VVFIN', 'PPER', 'PDS', 'KON', 'VMFIN', 'PPER', 'ADV', 'KOUS', 'VVPP', 'PPER', 'VAFIN', 'ADV', 'PTKNEG', 'ADV', 'ADJD', 'PWS', 'ART', 'NN', 'ART', 'PWS', 'ART', 'NN', 'ART', 'NN', 'VVFIN', 'KOUS', 'PPER', 'PRF', 'APPRART', 'NN', 'ART', 'NN', 'ADV', 'ADV', 'VVFIN', 'APPR', 'PPER'), 'right siblings': ['DM', 'SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 42), 'span': (8, 12), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX dann wurde ich sagen dann nehme ich das)
	(KOORD und)
	(LK kann)
	(MF
		(NX ich)
		[01;31m(DM[00m
			(ADVX
				(ADV also))[01;31m)[00m)
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF
			[01;31m(ADVX[00m
				(ADVX noch)
				(PTKNEG nicht)[01;31m)[00m
			(ADJX ganz sicher))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				(NX der)
				(R was das ende der abreise anging)[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['NX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (10, 12), 'span': (11, 12), 'left siblings': ['NX'], 'label': 'DM', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX dann wurde ich sagen dann nehme ich das)
	(KOORD und)
	(LK kann)
	(MF ich also)
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF
			[01;31m(ADVX[00m
				(ADVX noch)
				(PTKNEG nicht)[01;31m)[00m
			(ADJX ganz sicher))
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				(NX der)
				(R was das ende der abreise anging)[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'PTKNEG'], 'family': ['ADVX', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PTKNEG', 'ADV', 'ADJD'), 'right siblings': ['ADJX'], 'parent': 'MF', 'auto preterminal span': (16, 20), 'span': (16, 18), 'left siblings': [], 'label': 'ADVX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX dann wurde ich sagen dann nehme ich das)
	(KOORD und)
	(LK kann)
	(MF ich also)
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF noch nicht ganz sicher)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				(NX der)
				(R was das ende der abreise anging)[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:Unary
{'subtrees': ['NX'], 'family': ['C', 'ART', 'NX', 'NX', 'R'], 'over_word': False, 'over words': False, 'auto preterminals': ('PWS', 'ART', 'NN', 'ART', 'PWS', 'ART', 'NN', 'ART', 'NN', 'VVFIN'), 'right siblings': ['ART', 'NX', 'NX', 'R'], 'parent': 'SIMPX', 'auto preterminal span': (20, 30), 'span': (20, 21), 'left siblings': [], 'label': 'C', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX dann wurde ich sagen dann nehme ich das)
	(KOORD und)
	(LK kann)
	(MF ich also)
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF noch nicht ganz sicher)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(NX was)
				(ART den)
				(NX ende) [01;33mSIMPX)[00m
				(NX der)
				(R was das ende der abreise anging)[01;31m)[00m[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:Unary
{'subtrees': ['NX', 'ART', 'NX', 'NX', 'R'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PWS', 'ART', 'NN', 'ART', 'PWS', 'ART', 'NN', 'ART', 'NN', 'VVFIN'), 'right siblings': [], 'parent': 'NF', 'auto preterminal span': (20, 30), 'span': (20, 30), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX dann wurde ich sagen dann nehme ich das)
	(KOORD und)
	(LK kann)
	(MF ich also)
	(DM wie gesagt)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK war)
		(MF noch nicht ganz sicher)
		[01;31m(NF[00m
			(NX was)
			(ART den)
			(NX ende) [01;33mSIMPX)[00m
			(NX der)
			(R was das ende der abreise anging)[01;31m)[00m)
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:UNSET remove
{'subtrees': ['NX', 'ART', 'NX', 'NX', 'R'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'PTKNEG', 'ADV', 'ADJD', 'PWS', 'ART', 'NN', 'ART', 'PWS', 'ART', 'NN', 'ART', 'NN', 'VVFIN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (14, 30), 'span': (20, 30), 'left siblings': ['VF', 'LK', 'MF'], 'label': 'NF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX dann wurde ich sagen dann nehme ich das)
	(KOORD und)
	(LK kann)
	(MF ich also)
	(DM wie gesagt)
	(SIMPX
		[01;36m(SIMPX[00m
			(VF ich)
			(LK war)
			(MF noch nicht ganz sicher)
			(NX was)
			(ART den)
			(NX ende)[01;36m)[00m
		(NX der)
		(R was das ende der abreise anging))
	(SIMPX das ich mich im laufe der woche noch mal melde bei ihnen))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'NX', 'ART', 'NX'], 'family': ['SIMPX', 'NX', 'R'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'PTKNEG', 'ADV', 'ADJD', 'PWS', 'ART', 'NN'), 'right siblings': [(NX (ART der)), (R (NX (C (PWS was))) (MF (NX (ART das)) (NX (NX (NN ende)) (NX (ART der) (NN abreise)))) (VC (VXFIN (VVFIN anging))))], 'left siblings': [], 'auto preterminal span': (14, 23), 'span': (14, 23), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP dann wurde ich sagen dann nehme ich das und kann ich also wie gesagt ich war noch nicht ganz sicher was den ende der was das ende der abreise anging das ich mich im laufe der woche noch mal melde bei ihnen)

Sentence 744:
0 Initial errors
0 on fringe, 0 iterations

Sentence 745:
0 Initial errors
0 on fringe, 0 iterations

Sentence 746:
0 Initial errors
0 on fringe, 0 iterations

Sentence 747:
0 Initial errors
0 on fringe, 0 iterations

Sentence 748:
0 Initial errors
0 on fringe, 0 iterations

Sentence 749:
0 Initial errors
0 on fringe, 0 iterations

Sentence 750:
0 Initial errors
0 on fringe, 0 iterations

Sentence 751:
0 Initial errors
0 on fringe, 0 iterations

Sentence 752:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;31m(DM[00m
		(NX
			(ADVX dann)
			(NX alles gute))[01;31m)[00m
	(SIMPX und ich melde mich dann in den nachsten wochen noch mal))
Step:Unary
{'subtrees': ['NX'], 'family': ['DM', 'DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'PIS', 'NN', 'KON', 'PPER', 'VVFIN', 'PRF', 'ADV', 'APPR', 'ART', 'ADJA', 'NN', 'ADV', 'ADV'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 15), 'span': (1, 4), 'left siblings': ['DM'], 'label': 'DM', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ja dann alles gute und ich melde mich dann in den nachsten wochen noch mal)

Sentence 753:
0 Initial errors
0 on fringe, 0 iterations

Sentence 754:
0 Initial errors
0 on fringe, 0 iterations

Sentence 755:
0 Initial errors
0 on fringe, 0 iterations

Sentence 756:
0 Initial errors
0 on fringe, 0 iterations

Sentence 757:
11 Initial errors
0 on fringe, 6 iterations
3 Error:PP Attachment
2 Error:Single Word Phrase
2 Error:PP Attachment
2 Error:Modifier Attachment
1 Error:UNSET add
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	(SIMPX
		(VF ich)
		(LK bin)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;36m(MF[00m
					(NX
						(NN frau)
						(NE bartels)) [01;33mSIMPX)[00m[01;36m)[00m
				[01;36m(NF[00m
					(PX [01;33m(PX[00m
						(APPRART vom)
						[01;31m(NX[00m
							[01;31m(NX[00m
								(NX reiseburo) [01;33mPX)[00m
								[01;36m(ADJX[00m [01;31m(NX[00m [01;33m(ADJX[00m
									(NE zentral)[01;31m)[00m[01;36m)[00m[01;31m)[00m
							(PX in hannover)[01;31m)[00m)[01;36m)[00m[01;31m)[00m[01;31m)[00m)) [01;33mADJX)[00m
Step:PP Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'PX'], 'mover info': [('PX', (4, 9))], 'old_family': ['NX', 'PX'], 'start left siblings': ['NX'], 'auto preterminals': ('PPER', 'VAFIN', 'NN', 'NE', 'APPRART', 'NN', 'NE', 'APPR', 'NE'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 9), 'movers': ['PX'], 'old_parent': 'NX', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(VF ich)
			(LK bin)
			(MF frau bartels)[01;36m)[00m
		[01;36m(NF[00m
			(PX [01;33m(PX[00m
				(APPRART vom)
				[01;31m(NX[00m
					[01;31m(NX[00m
						(NX reiseburo) [01;33mPX)[00m
						[01;36m(ADJX[00m [01;31m(NX[00m [01;33m(ADJX[00m
							(NE zentral)[01;31m)[00m[01;36m)[00m[01;31m)[00m
					(PX in hannover)[01;31m)[00m)[01;36m)[00m)) [01;33mADJX)[00m
Step:Single Word Phrase
{'family': ['NX', 'ADJX'], 'auto preterminal span': (6, 7), 'span': (6, 7), 'subtrees': ['NE'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('NE',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(VF ich)
			(LK bin)
			(MF frau bartels)[01;36m)[00m
		[01;36m(NF[00m
			(PX [01;33m(PX[00m
				(APPRART vom)
				[01;31m(NX[00m
					[01;31m(NX[00m
						(NX reiseburo) [01;33mPX)[00m
						[01;33m(ADJX[00m (ADJX zentral)[01;31m)[00m
					(PX in hannover)[01;31m)[00m)[01;36m)[00m)) [01;33mADJX)[00m
Step:PP Attachment
{'new_parent': 'PX', 'new_family': ['APPRART', 'NX', 'PX'], 'mover info': [('PX', (7, 9))], 'old_family': ['NX', 'PX'], 'start left siblings': ['NX'], 'auto preterminals': ('APPRART', 'NN', 'NE', 'APPR', 'NE'), 'start right siblings': [], 'end left siblings': ['APPRART', 'NX'], 'auto preterminal span': (4, 9), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'NF'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(VF ich)
			(LK bin)
			(MF frau bartels)[01;36m)[00m
		(NF [01;33m(PX[00m
			(PX
				(APPRART vom)
				[01;31m(NX[00m
					(NX reiseburo) [01;33mPX)[00m
					[01;33m(ADJX[00m (ADJX zentral)[01;31m)[00m
				(PX in hannover))))) [01;33mADJX)[00m
Step:Modifier Attachment
{'new_parent': 'PX', 'new_family': ['APPRART', 'NX', 'ADJX', 'PX'], 'mover info': [('ADJX', (6, 7))], 'old_family': ['NX', 'ADJX'], 'start left siblings': ['NX'], 'auto preterminals': ('APPRART', 'NN', 'NE', 'APPR', 'NE'), 'start right siblings': [], 'end left siblings': ['APPRART', 'NX'], 'auto preterminal span': (4, 9), 'adding node already present': False, 'movers': ['ADJX'], 'old_parent': 'NX', 'POS confusion': ('NE', 'NE'), 'added and moved': True, 'end right siblings': ['PX'], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'ADJX'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(VF ich)
			(LK bin)
			(MF frau bartels)[01;36m)[00m
		(NF
			(PX
				[01;36m(PX[00m
					(APPRART vom)
					(NX reiseburo)[01;36m)[00m
				(ADJX zentral in hannover)))))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'NN', 'NE'), 'right siblings': [(NF (PX (APPRART vom) (NX (NN reiseburo)) (ADJX (ADJX (NE zentral)) (PX (APPR in) (NX (NE hannover))))))], 'left siblings': [], 'auto preterminal span': (0, 4), 'span': (0, 4), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX ich bin frau bartels)
		(NF
			(PX
				[01;36m(PX[00m
					(APPRART vom)
					(NX reiseburo)[01;36m)[00m
				(ADJX zentral in hannover)))))
Step:UNSET add
{'subtrees': ['APPRART', 'NX'], 'family': ['PX', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'NN'), 'right siblings': [(ADJX (ADJX (NE zentral)) (PX (APPR in) (NX (NE hannover))))], 'left siblings': [], 'auto preterminal span': (4, 6), 'span': (4, 6), 'parent': 'PX', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP ich bin frau bartels vom reiseburo zentral in hannover)

Sentence 758:
0 Initial errors
0 on fringe, 0 iterations

Sentence 759:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Single Word Phrase
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF hier)
		(LK spricht)
		(MF
			(NX
				[01;36m(NX[00m
					[01;36m(MF[00m
						(NE matthias)[01;36m)[00m[01;36m)[00m
				(NE oborski)))))
Step:Single Word Phrase
{'subtrees': ['NE'], 'family': ['MF', 'NE'], 'over_word': True, 'over words': True, 'auto preterminals': ('NE',), 'right siblings': [(NE oborski)], 'left siblings': [], 'auto preterminal span': (2, 3), 'span': (2, 3), 'parent': 'NX', 'label': 'MF', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(SIMPX
		(VF hier)
		(LK spricht)
		(MF
			(NX
				[01;36m(NX[00m
					(MF
						(NE matthias))[01;36m)[00m
				(NE oborski)))))
Step:Unary
{'subtrees': ['MF'], 'family': ['NX', 'NE'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE',), 'right siblings': [(NE oborski)], 'left siblings': [], 'auto preterminal span': (2, 3), 'span': (2, 3), 'parent': 'NX', 'label': 'NX', 'classified_type': 'Unary', 'type': 'add'}
(TOP hier spricht matthias oborski)

Sentence 760:
0 Initial errors
0 on fringe, 0 iterations

Sentence 761:
3 Initial errors
0 on fringe, 3 iterations
1 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:NP Internal Structure
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX und zwar muste ich im august vom funfzehnten bis zum siebzehnten in hannover sein)
	(SIMPX
		(KOORD und)
		(VF ich)
		(LK hatte)
		[01;31m(VC[00m
			(PTKVZ vor)[01;31m)[00m
		(NF
			(SIMPX
				(MF
					(PX mit dem zug)
					(PX
						[01;31m(PX[00m
							(APPR ab)
							[01;33m(NX[00m (NX bonn)[01;31m)[00m
						(NX hannover))) [01;33mNX)[00m
				(VC zu fahren)))))
Step:Single Word Phrase
{'subtrees': ['PTKVZ'], 'family': ['KOORD', 'VF', 'LK', 'VC', 'NF'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'PPER', 'VAFIN', 'PTKVZ', 'APPR', 'ART', 'NN', 'APPR', 'NE', 'NE', 'PTKZU', 'VVINF'), 'right siblings': ['NF'], 'parent': 'SIMPX', 'auto preterminal span': (14, 26), 'span': (17, 18), 'left siblings': ['KOORD', 'VF', 'LK'], 'label': 'VC', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(SIMPX und zwar muste ich im august vom funfzehnten bis zum siebzehnten in hannover sein)
	(SIMPX
		(KOORD und)
		(VF ich)
		(LK hatte)
		(PTKVZ vor)
		(NF
			(SIMPX
				(MF
					(PX mit dem zug)
					(PX
						[01;31m(PX[00m
							(APPR ab)
							[01;33m(NX[00m (NX bonn)[01;31m)[00m
						(NX hannover))) [01;33mNX)[00m
				(VC zu fahren)))))
Step:UNSET remove
{'subtrees': ['APPR', 'NX'], 'family': ['PX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NE', 'NE'), 'right siblings': ['NX'], 'parent': 'PX', 'auto preterminal span': (21, 24), 'span': (21, 23), 'left siblings': [], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX und zwar muste ich im august vom funfzehnten bis zum siebzehnten in hannover sein)
	(SIMPX
		(KOORD und)
		(VF ich)
		(LK hatte)
		(PTKVZ vor)
		(NF
			(SIMPX
				(MF
					(PX mit dem zug)
					(PX
						(APPR ab)
						[01;36m(NX[00m
							(NX bonn)
							(NX hannover)[01;36m)[00m))
				(VC zu fahren)))))
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['APPR', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE', 'NE'), 'right siblings': [], 'left siblings': [(APPR ab)], 'auto preterminal span': (22, 24), 'span': (22, 24), 'parent': 'PX', 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'add'}
(TOP und zwar muste ich im august vom funfzehnten bis zum siebzehnten in hannover sein und ich hatte vor mit dem zug ab bonn hannover zu fahren)

Sentence 762:
6 Initial errors
0 on fringe, 4 iterations
3 Error:Co-ordination
1 Error:UNSET add
1 Error:Modifier Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF da)
		(LK fahren)
		[01;36m(MF[00m
			(MF erst mal verschiedene zuge)
			[01;36m(NX[00m [01;31m(NF[00m [01;33m(NX[00m
				(NX drei)
				[01;31m(ADVX[00m
					[01;36m(ADVX[00m
						(ADVX morgens)
						(ADVX mittags) [01;33mNX)[00m[01;36m)[00m
					(KON und)
					(ADVX abends)[01;31m)[00m[01;31m)[00m[01;36m)[00m[01;36m)[00m)
	(SIMPX da konnten sie sich schon mal auswahlen))
Step:Co-ordination
{'new_parent': 'NF', 'new_family': ['NX', 'ADVX', 'KON', 'ADVX'], 'mover info': [('KON', (9, 10)), ('ADVX', (10, 11))], 'old_family': ['ADVX', 'ADVX', 'KON', 'ADVX'], 'start left siblings': ['ADVX', 'ADVX'], 'auto preterminals': ('CARD', 'ADV', 'ADV', 'KON', 'ADV'), 'start right siblings': [], 'end left siblings': ['NX', 'ADVX'], 'auto preterminal span': (6, 11), 'adding node already present': False, 'movers': ['KON', 'ADVX'], 'old_parent': 'ADVX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'Co-ordination', 'type': 'move', 'added label': 'NX'}
(TOP
	(SIMPX
		(VF da)
		(LK fahren)
		[01;36m(MF[00m
			(MF erst mal verschiedene zuge)
			(NX
				[01;31m(NF[00m
					[01;36m(NX[00m
						(NX drei)
						(ADVX morgens mittags)[01;36m)[00m
					(KON und)
					(ADVX abends)[01;31m)[00m)[01;36m)[00m)
	(SIMPX da konnten sie sich schon mal auswahlen))
Step:UNSET add
{'subtrees': ['MF', 'NX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'ADJA', 'NN', 'CARD', 'ADV', 'ADV', 'KON', 'ADV'), 'right siblings': [], 'left siblings': [(VF (ADVX (ADV da))), (LK (VXFIN (VVFIN fahren)))], 'auto preterminal span': (2, 11), 'span': (2, 11), 'parent': 'SIMPX', 'label': 'MF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(VF da)
		(LK fahren)
		(MF
			(MF erst mal verschiedene zuge)
			(NX
				[01;31m(NF[00m
					[01;36m(NX[00m
						(NX drei)
						(ADVX morgens mittags)[01;36m)[00m
					(KON und)
					(ADVX abends)[01;31m)[00m)))
	(SIMPX da konnten sie sich schon mal auswahlen))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX'], 'family': ['NX', 'KON', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'ADV', 'ADV'), 'right siblings': [(KON und), (ADVX (ADV abends))], 'left siblings': [], 'auto preterminal span': (6, 9), 'span': (6, 9), 'parent': 'NF', 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(VF da)
		(LK fahren)
		(MF
			(MF erst mal verschiedene zuge)
			(NX
				[01;31m(NF[00m
					(NX drei morgens mittags)
					(KON und)
					(ADVX abends)[01;31m)[00m)))
	(SIMPX da konnten sie sich schon mal auswahlen))
Step:Unary
{'subtrees': ['NX', 'KON', 'ADVX'], 'family': ['NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'ADV', 'ADV', 'KON', 'ADV'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (6, 11), 'span': (6, 11), 'left siblings': [], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP da fahren erst mal verschiedene zuge drei morgens mittags und abends da konnten sie sich schon mal auswahlen)

Sentence 763:
0 Initial errors
0 on fringe, 0 iterations

Sentence 764:
7 Initial errors
0 on fringe, 5 iterations
3 Error:Modifier Attachment
1 Error:Clause Attachment
1 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(NX und dann diese zwei nachte die sie da bleiben mochten)
	[01;31m(SIMPX[00m
		(VF da)
		(LK wurde)
		(MF ich mal)
		(VC nachschauen)[01;31m)[00m
	[01;36m(SIMPX[00m
		(SIMPX da haben wir verschiedene preisklassen)
		(SIMPX
			(VF und zwar)
			(LK gibt)
			(MF
				(NX es)
				(APPR zwischen)
				(PX
					(PX von funfundachtzig)
					(PX
						[01;31m(PX[00m
							(APPR bis)
							[01;36m(ADVX[00m [01;31m(NX[00m [01;33m(NX[00m
								(CARD funfhundert)[01;31m)[00m[01;36m)[00m[01;31m)[00m
						[01;31m(ADVX[00m
							(ADV aufwarts)[01;31m)[00m))))[01;36m)[00m) [01;33mNX)[00m
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['CARD', 'ADVX'], 'mover info': [('ADVX', (29, 30))], 'old_family': ['PX', 'ADVX'], 'start left siblings': ['PX'], 'auto preterminals': ('APPR', 'CARD', 'ADV'), 'start right siblings': [], 'end left siblings': ['CARD'], 'auto preterminal span': (27, 30), 'movers': ['ADVX'], 'old_parent': 'PX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(NX und dann diese zwei nachte die sie da bleiben mochten)
	[01;31m(SIMPX[00m
		(VF da)
		(LK wurde)
		(MF ich mal)
		(VC nachschauen)[01;31m)[00m
	[01;36m(SIMPX[00m
		(SIMPX da haben wir verschiedene preisklassen)
		(SIMPX
			(VF und zwar)
			(LK gibt)
			(MF
				(NX es)
				(APPR zwischen)
				(PX
					(PX von funfundachtzig)
					(PX
						(APPR bis)
						(NX
							[01;36m(ADVX[00m
								(CARD funfhundert)[01;36m)[00m
							[01;31m(ADVX[00m
								(ADV aufwarts)[01;31m)[00m)))))[01;36m)[00m)
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['NX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'ADJA', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'APPR', 'APPR', 'CARD', 'APPR', 'CARD', 'ADV'), 'right siblings': [], 'left siblings': [(NX (KON und) (ADVX (ADV dann)) (NX (NX (PDAT diese) (ADJX (CARD zwei)) (NN nachte)) (R (C (NX (PRELS die))) (MF (NX (PPER sie)) (ADVX (ADV da))) (VC (VXINF (VVINF bleiben)) (VXFIN (VMFIN mochten)))))), (SIMPX (VF (ADVX (ADV da))) (LK (VXFIN (VAFIN wurde))) (MF (NX (PPER ich)) (ADVX (ADV mal))) (VC (VXINF (VVINF nachschauen))))], 'auto preterminal span': (15, 30), 'span': (15, 30), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(NX und dann diese zwei nachte die sie da bleiben mochten)
	[01;31m(SIMPX[00m
		(VF da)
		(LK wurde)
		(MF ich mal)
		(VC nachschauen)[01;31m)[00m
	(SIMPX
		(SIMPX da haben wir verschiedene preisklassen)
		(SIMPX
			(VF und zwar)
			(LK gibt)
			(MF
				(NX es)
				(APPR zwischen)
				(PX
					(PX von funfundachtzig)
					(PX
						(APPR bis)
						(NX
							[01;36m(ADVX[00m
								(CARD funfhundert)[01;36m)[00m
							[01;31m(ADVX[00m
								(ADV aufwarts)[01;31m)[00m)))))))
Step:Single Word Phrase
{'subtrees': ['CARD'], 'family': ['ADVX', 'ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('CARD',), 'right siblings': [(ADVX (ADV aufwarts))], 'left siblings': [], 'auto preterminal span': (28, 29), 'span': (28, 29), 'parent': 'NX', 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(NX und dann diese zwei nachte die sie da bleiben mochten)
	[01;31m(SIMPX[00m
		(VF da)
		(LK wurde)
		(MF ich mal)
		(VC nachschauen)[01;31m)[00m
	(SIMPX
		(SIMPX da haben wir verschiedene preisklassen)
		(SIMPX
			(VF und zwar)
			(LK gibt)
			(MF
				(NX es)
				(APPR zwischen)
				(PX
					(PX von funfundachtzig)
					(PX
						(APPR bis)
						(NX
							(ADVX funfhundert)
							[01;31m(ADVX[00m
								(ADV aufwarts)[01;31m)[00m)))))))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['NX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ADV', 'PDAT', 'CARD', 'NN', 'PRELS', 'PPER', 'ADV', 'VVINF', 'VMFIN', 'ADV', 'VAFIN', 'PPER', 'ADV', 'VVINF', 'ADV', 'VAFIN', 'PPER', 'ADJA', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'APPR', 'APPR', 'CARD', 'APPR', 'CARD', 'ADV'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 30), 'span': (10, 15), 'left siblings': ['NX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(NX und dann diese zwei nachte die sie da bleiben mochten)
	(VF da)
	(LK wurde)
	(MF ich mal)
	(VC nachschauen)
	(SIMPX
		(SIMPX da haben wir verschiedene preisklassen)
		(SIMPX
			(VF und zwar)
			(LK gibt)
			(MF
				(NX es)
				(APPR zwischen)
				(PX
					(PX von funfundachtzig)
					(PX
						(APPR bis)
						(NX
							(ADVX funfhundert)
							[01;31m(ADVX[00m
								(ADV aufwarts)[01;31m)[00m)))))))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['ADVX', 'ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('CARD', 'ADV'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (28, 30), 'span': (29, 30), 'left siblings': ['ADVX'], 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP und dann diese zwei nachte die sie da bleiben mochten da wurde ich mal nachschauen da haben wir verschiedene preisklassen und zwar gibt es zwischen von funfundachtzig bis funfhundert aufwarts)

Sentence 765:
9 Initial errors
0 on fringe, 6 iterations
3 Error:Modifier Attachment
2 Error:Single Word Phrase
1 Error:Single Word Phrase
1 Error:Single Word Phrase
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX es kann schon eine gehobene preisklasse sein)
	(SIMPX
		(KOORD und)
		(VF hauptsache)
		(LK ist)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(KOUS das)[01;31m)[00m
				[01;36m(NX[00m
					(MF
						[01;31m(NX[00m
							(ART das)
							[01;36m(NX[00m
								(NN [01;33m(NX[00m hotel)[01;36m)[00m[01;31m)[00m
						[01;36m(NX[00m [01;31m(ADJX[00m
							(ADJD zentral)[01;31m)[00m[01;36m)[00m) [01;33mNX)[00m[01;36m)[00m
				(VC liegt)[01;31m)[00m[01;31m)[00m))
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['ART', 'NN', 'ADJX'], 'mover info': [('ADJX', (13, 14))], 'old_family': ['NX', 'ADJX'], 'start left siblings': ['NX'], 'auto preterminals': ('ART', 'NN', 'ADJD'), 'start right siblings': [], 'end left siblings': ['ART', 'NN'], 'auto preterminal span': (11, 14), 'adding node already present': False, 'movers': ['ADJX'], 'old_parent': 'MF', 'POS confusion': ('ADJD', 'ADJD'), 'added and moved': True, 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'NX'}
(TOP
	(SIMPX es kann schon eine gehobene preisklasse sein)
	(SIMPX
		(KOORD und)
		(VF hauptsache)
		(LK ist)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(KOUS das)[01;31m)[00m
				(MF
					(NX
						(ART das)
						(NX
							[01;36m(NX[00m
								(NN hotel)[01;36m)[00m
							[01;36m(NX[00m [01;31m(ADJX[00m
								(ADJD zentral)[01;31m)[00m[01;36m)[00m)))
				(VC liegt)[01;31m)[00m[01;31m)[00m))
Step:Single Word Phrase
{'family': ['NN', 'NX'], 'auto preterminal span': (13, 14), 'span': (13, 14), 'subtrees': ['ADJD'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'NX')}
(TOP
	(SIMPX es kann schon eine gehobene preisklasse sein)
	(SIMPX
		(KOORD und)
		(VF hauptsache)
		(LK ist)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(KOUS das)[01;31m)[00m
				(MF
					(NX
						(ART das)
						(NX
							[01;36m(NX[00m
								(NN hotel)[01;36m)[00m
							(NX zentral))))
				(VC liegt)[01;31m)[00m[01;31m)[00m))
Step:Single Word Phrase
{'subtrees': ['NN'], 'family': ['NX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('NN',), 'right siblings': [(NX (ADJD zentral))], 'left siblings': [], 'auto preterminal span': (12, 13), 'span': (12, 13), 'parent': 'NX', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(SIMPX es kann schon eine gehobene preisklasse sein)
	(SIMPX
		(KOORD und)
		(VF hauptsache)
		(LK ist)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					(KOUS das)[01;31m)[00m
				(MF das hotel zentral)
				(VC liegt)[01;31m)[00m[01;31m)[00m))
Step:Single Word Phrase
{'subtrees': ['KOUS'], 'family': ['C', 'MF', 'VC'], 'over_word': True, 'over words': True, 'auto preterminals': ('KOUS', 'ART', 'NN', 'ADJD', 'VVFIN'), 'right siblings': ['MF', 'VC'], 'parent': 'SIMPX', 'auto preterminal span': (10, 15), 'span': (10, 11), 'left siblings': [], 'label': 'C', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(SIMPX es kann schon eine gehobene preisklasse sein)
	(SIMPX
		(KOORD und)
		(VF hauptsache)
		(LK ist)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(KOUS das)
				(MF das hotel zentral)
				(VC liegt)[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['KOUS', 'MF', 'VC'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'ART', 'NN', 'ADJD', 'VVFIN'), 'right siblings': [], 'parent': 'NF', 'auto preterminal span': (10, 15), 'span': (10, 15), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX es kann schon eine gehobene preisklasse sein)
	(SIMPX
		(KOORD und)
		(VF hauptsache)
		(LK ist)
		[01;31m(NF[00m
			(KOUS das)
			(MF das hotel zentral)
			(VC liegt)[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['KOUS', 'MF', 'VC'], 'family': ['KOORD', 'VF', 'LK', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'NN', 'VAFIN', 'KOUS', 'ART', 'NN', 'ADJD', 'VVFIN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (7, 15), 'span': (10, 15), 'left siblings': ['KOORD', 'VF', 'LK'], 'label': 'NF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP es kann schon eine gehobene preisklasse sein und hauptsache ist das das hotel zentral liegt)

Sentence 766:
0 Initial errors
0 on fringe, 0 iterations

Sentence 767:
2 Initial errors
0 on fringe, 1 iterations
2 Error:NP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF eines der hotels)
		(LK ist)
		(MF [01;33m(NX[00m
			(NX
				(ART das)
				[01;31m(NX[00m
					(NX grandhotel) [01;33mNX)[00m
					(NX musmann)[01;31m)[00m)))
	(SIMPX das liegt sehr zentral))
Step:NP Attachment
{'new_parent': 'NX', 'new_family': ['ART', 'NX', 'NX'], 'mover info': [('NX', (5, 6))], 'old_family': ['NX', 'NX'], 'start left siblings': [], 'auto preterminals': ('ART', 'NE', 'NE'), 'start right siblings': ['NX'], 'end left siblings': ['ART'], 'auto preterminal span': (4, 7), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'NX', 'POS confusion': ('NE', 'NE'), 'added and moved': True, 'end right siblings': ['NX'], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'NX'}
(TOP eines der hotels ist das grandhotel musmann das liegt sehr zentral)

Sentence 768:
1 Initial errors
0 on fringe, 1 iterations
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		(VF und platze haben die auch noch)
		(LK sehe)
		(MF ich)[01;31m)[00m
	(DM ja)
	(SIMPX kostet dann einzelzimmer dreihundert funfzig die nacht))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'NN', 'VAFIN', 'PDS', 'ADV', 'ADV', 'VVFIN', 'PPER', 'PTKANT', 'VVFIN', 'ADV', 'NN', 'CARD', 'CARD', 'ART', 'NN'), 'right siblings': ['DM', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 16), 'span': (0, 8), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP und platze haben die auch noch sehe ich ja kostet dann einzelzimmer dreihundert funfzig die nacht)

Sentence 769:
0 Initial errors
0 on fringe, 0 iterations

Sentence 770:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:NP Internal Structure
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(PX
		[01;31m(PX[00m
			(APPR mit)
			[01;33m(NX[00m (NX bad)[01;31m)[00m
		[01;36m(NX[00m [01;31m(ADVX[00m
			(ADV naturlich)[01;31m)[00m[01;36m)[00m)) [01;33mNX)[00m
Step:Single Word Phrase
{'family': ['PX', 'NX'], 'auto preterminal span': (2, 3), 'span': (2, 3), 'subtrees': ['ADV'], 'parent': 'PX', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'NX')}
(TOP
	(PX
		[01;31m(PX[00m
			(APPR mit)
			[01;33m(NX[00m (NX bad)[01;31m)[00m
		(NX naturlich))) [01;33mNX)[00m
Step:UNSET remove
{'subtrees': ['APPR', 'NX'], 'family': ['PX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NN', 'ADV'), 'right siblings': ['NX'], 'parent': 'PX', 'auto preterminal span': (0, 3), 'span': (0, 2), 'left siblings': [], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(PX
		(APPR mit)
		[01;36m(NX[00m
			(NX bad)
			(NX naturlich)[01;36m)[00m))
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['APPR', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'ADV'), 'right siblings': [], 'left siblings': [(APPR mit)], 'auto preterminal span': (1, 3), 'span': (1, 3), 'parent': 'PX', 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'add'}
(TOP mit bad naturlich)

Sentence 771:
0 Initial errors
0 on fringe, 0 iterations

Sentence 772:
0 Initial errors
0 on fringe, 0 iterations

Sentence 773:
0 Initial errors
0 on fringe, 0 iterations

Sentence 774:
0 Initial errors
0 on fringe, 0 iterations

Sentence 775:
3 Initial errors
0 on fringe, 3 iterations
1 Error:UNSET add
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		[01;36m(PX[00m
			(KOORD und)
			[01;31m(LV[00m
				(PX
					(APPR mit)
					(NX der zugverbindung))[01;31m)[00m[01;36m)[00m
		[01;36m(SIMPX[00m
			(VF wie lange)
			(LK wird)
			(MF das)
			(VC dauern)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['KOORD', 'LV'], 'family': ['PX', 'VF', 'LK', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'APPR', 'ART', 'NN'), 'right siblings': [(VF (ADJX (ADVX (PWAV wie)) (ADJD lange))), (LK (VXFIN (VAFIN wird))), (MF (NX (PDS das))), (VC (VXINF (VVINF dauern)))], 'left siblings': [], 'auto preterminal span': (0, 4), 'span': (0, 4), 'parent': 'SIMPX', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(PX
			(KOORD und)
			[01;31m(LV[00m
				(PX
					(APPR mit)
					(NX der zugverbindung))[01;31m)[00m)
		[01;36m(SIMPX[00m
			(VF wie lange)
			(LK wird)
			(MF das)
			(VC dauern)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['PX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PWAV', 'ADJD', 'VAFIN', 'PDS', 'VVINF'), 'right siblings': [], 'left siblings': [(PX (KOORD (KON und)) (LV (PX (APPR mit) (NX (ART der) (NN zugverbindung)))))], 'auto preterminal span': (4, 9), 'span': (4, 9), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(PX
			(KOORD und)
			[01;31m(LV[00m
				(PX
					(APPR mit)
					(NX der zugverbindung))[01;31m)[00m)
		(SIMPX wie lange wird das dauern)))
Step:Unary
{'subtrees': ['PX'], 'family': ['KOORD', 'LV'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'APPR', 'ART', 'NN'), 'right siblings': [], 'parent': 'PX', 'auto preterminal span': (0, 4), 'span': (1, 4), 'left siblings': ['KOORD'], 'label': 'LV', 'classified_type': 'Unary', 'type': 'remove'}
(TOP und mit der zugverbindung wie lange wird das dauern)

Sentence 776:
0 Initial errors
0 on fringe, 0 iterations

Sentence 777:
10 Initial errors
0 on fringe, 7 iterations
2 Error:Different label
2 Error:Different label
2 Error:Co-ordination
1 Error:UNSET add
1 Error:Single Word Phrase
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			[01;36m(LKMVC[00m [01;31m(SIMPX[00m
				(LK kommen)
				(MF dann am hauptbahnhof)
				(VC an)[01;31m)[00m[01;36m)[00m
			(KON und)
			[01;36m(LKMVC[00m [01;31m(SIMPX[00m
				(LK konnen)
				(MF ja dann ein taxi)
				(VC nehmen)[01;31m)[00m[01;36m)[00m[01;36m)[00m
		[01;36m(SIMPX[00m
			[01;36m(KOORD[00m
				(KON und)[01;36m)[00m
			[01;31m(SIMPX[00m
				(LK kommen)
				(MF
					(PX
						(ADVX direkt)
						[01;36m(PX[00m
							(APPRART zum)
							(NX hotel)[01;36m)[00m))[01;31m)[00m[01;36m)[00m[01;31m)[00m)
Step:Different label
{'family': ['LKMVC', 'KON', 'SIMPX', 'KON', 'SIMPX'], 'auto preterminal span': (0, 5), 'span': (0, 5), 'subtrees': ['LK', 'MF', 'VC'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('VVFIN', 'ADV', 'APPRART', 'NN', 'PTKVZ'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('SIMPX', 'LKMVC')}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(LKMVC kommen dann am hauptbahnhof an)
			(KON und)
			[01;36m(LKMVC[00m [01;31m(SIMPX[00m
				(LK konnen)
				(MF ja dann ein taxi)
				(VC nehmen)[01;31m)[00m[01;36m)[00m[01;36m)[00m
		[01;36m(SIMPX[00m
			[01;36m(KOORD[00m
				(KON und)[01;36m)[00m
			[01;31m(SIMPX[00m
				(LK kommen)
				(MF
					(PX
						(ADVX direkt)
						[01;36m(PX[00m
							(APPRART zum)
							(NX hotel)[01;36m)[00m))[01;31m)[00m[01;36m)[00m[01;31m)[00m)
Step:Different label
{'family': ['LKMVC', 'KON', 'LKMVC', 'KON', 'SIMPX'], 'auto preterminal span': (6, 12), 'span': (6, 12), 'subtrees': ['LK', 'MF', 'VC'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('VMFIN', 'ADV', 'ADV', 'ART', 'NN', 'VVINF'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('SIMPX', 'LKMVC')}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(LKMVC kommen dann am hauptbahnhof an)
			(KON und)
			(LKMVC konnen ja dann ein taxi nehmen)[01;36m)[00m
		[01;36m(SIMPX[00m
			[01;36m(KOORD[00m
				(KON und)[01;36m)[00m
			[01;31m(SIMPX[00m
				(LK kommen)
				(MF
					(PX
						(ADVX direkt)
						[01;36m(PX[00m
							(APPRART zum)
							(NX hotel)[01;36m)[00m))[01;31m)[00m[01;36m)[00m[01;31m)[00m)
Step:Co-ordination
{'new_parent': 'SIMPX', 'new_family': ['KON', 'LK', 'MF'], 'mover info': [('KON', (12, 13))], 'old_family': ['LKMVC', 'KON', 'LKMVC', 'KON', 'SIMPX'], 'start left siblings': ['LKMVC', 'KON', 'LKMVC'], 'auto preterminals': ('VVFIN', 'ADV', 'APPRART', 'NN', 'PTKVZ', 'KON', 'VMFIN', 'ADV', 'ADV', 'ART', 'NN', 'VVINF', 'KON', 'VVFIN', 'ADV', 'APPRART', 'NN'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 17), 'movers': ['KON'], 'old_parent': 'SIMPX', 'POS confusion': ('KON', 'KON'), 'end right siblings': ['LK', 'MF'], 'classified_type': 'Co-ordination', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(LKMVC kommen dann am hauptbahnhof an)
			(KON und)
			(LKMVC konnen ja dann ein taxi nehmen)[01;36m)[00m
		(SIMPX
			[01;36m(KOORD[00m
				(KON und)[01;36m)[00m
			(LK kommen)
			(MF
				(PX
					(ADVX direkt)
					[01;36m(PX[00m
						(APPRART zum)
						(NX hotel)[01;36m)[00m)))[01;31m)[00m)
Step:UNSET add
{'subtrees': ['LKMVC', 'KON', 'LKMVC'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'ADV', 'APPRART', 'NN', 'PTKVZ', 'KON', 'VMFIN', 'ADV', 'ADV', 'ART', 'NN', 'VVINF'), 'right siblings': [(SIMPX (KON und) (LK (VXFIN (VVFIN kommen))) (MF (PX (ADVX (ADV direkt)) (APPRART zum) (NX (NN hotel)))))], 'left siblings': [], 'auto preterminal span': (0, 12), 'span': (0, 12), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX kommen dann am hauptbahnhof an und konnen ja dann ein taxi nehmen)
		(SIMPX
			[01;36m(KOORD[00m
				(KON und)[01;36m)[00m
			(LK kommen)
			(MF
				(PX
					(ADVX direkt)
					[01;36m(PX[00m
						(APPRART zum)
						(NX hotel)[01;36m)[00m)))[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['KOORD', 'LK', 'MF'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON',), 'right siblings': [(LK (VXFIN (VVFIN kommen))), (MF (PX (ADVX (ADV direkt)) (APPRART zum) (NX (NN hotel))))], 'left siblings': [], 'auto preterminal span': (12, 13), 'span': (12, 13), 'parent': 'SIMPX', 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX kommen dann am hauptbahnhof an und konnen ja dann ein taxi nehmen)
		(SIMPX
			(KOORD und)
			(LK kommen)
			(MF
				(PX
					(ADVX direkt)
					[01;36m(PX[00m
						(APPRART zum)
						(NX hotel)[01;36m)[00m)))[01;31m)[00m)
Step:UNSET add
{'subtrees': ['APPRART', 'NX'], 'family': ['ADVX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'NN'), 'right siblings': [], 'left siblings': [(ADVX (ADV direkt))], 'auto preterminal span': (15, 17), 'span': (15, 17), 'parent': 'PX', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX kommen dann am hauptbahnhof an und konnen ja dann ein taxi nehmen)
		(SIMPX und kommen direkt zum hotel)[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'ADV', 'APPRART', 'NN', 'PTKVZ', 'KON', 'VMFIN', 'ADV', 'ADV', 'ART', 'NN', 'VVINF', 'KON', 'VVFIN', 'ADV', 'APPRART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 17), 'span': (0, 17), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP kommen dann am hauptbahnhof an und konnen ja dann ein taxi nehmen und kommen direkt zum hotel)

Sentence 778:
11 Initial errors
0 on fringe, 5 iterations
6 Error:UNSET move
2 Error:Co-ordination
1 Error:NP Internal Structure
1 Error:UNSET remove
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(VF dann)
			(LK buche)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX ich)
				(NX das)
				[01;31m(PX[00m
					(APPR fur)
					[01;31m(NX[00m [01;33m(NX[00m
						(PPER sie)[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
		[01;31m(DM[00m [01;33m(NX[00m
			(NX
				(NN herr)
				[01;31m(NX[00m
					(NE obrowski) [01;33mNX)[00m
					(KON und)
					[01;36m(NX[00m
						(NE oborski)[01;36m)[00m[01;31m)[00m)[01;31m)[00m [01;33mNX) MF)[00m[01;36m)[00m
	(SIMPX und dann muste ich nur von ihnen noch die kontonummer haben und die formalitaten))
Step:UNSET move
{'new_parent': 'NX', 'new_family': ['PPER', 'DM'], 'mover info': [('DM', (7, 11))], 'old_family': ['DM', 'SIMPX', 'DM', 'SIMPX'], 'start left siblings': ['DM', 'SIMPX'], 'auto preterminals': ('PTKANT', 'ADV', 'VVFIN', 'PPER', 'PDS', 'APPR', 'PPER', 'NN', 'NE', 'KON', 'NE', 'KON', 'ADV', 'VMFIN', 'PPER', 'ADV', 'APPR', 'PPER', 'ADV', 'ART', 'NN', 'VAINF', 'KON', 'ART', 'NN'), 'start right siblings': ['SIMPX'], 'end left siblings': ['PPER'], 'auto preterminal span': (0, 25), 'movers': ['DM'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		(VF dann)
		(LK buche)
		(MF
			(NX ich)
			(NX das)
			[01;31m(PX[00m
				(APPR fur)
				(NX
					(PPER sie)
					[01;31m(DM[00m [01;33m(NX[00m
						(NX
							(NN herr)
							[01;31m(NX[00m
								(NE obrowski) [01;33mNX)[00m
								(KON und)
								[01;36m(NX[00m
									(NE oborski)[01;36m)[00m[01;31m)[00m)[01;31m)[00m)[01;31m)[00m))
	(SIMPX und dann muste ich nur von ihnen noch die kontonummer haben und die formalitaten))
Step:Co-ordination
{'new_parent': 'NX', 'new_family': ['NN', 'NE', 'KON', 'NX'], 'mover info': [('NE', (8, 9)), ('KON', (9, 10))], 'old_family': ['NE', 'KON', 'NE'], 'start left siblings': [], 'auto preterminals': ('NN', 'NE', 'KON', 'NE'), 'start right siblings': ['NE'], 'end left siblings': ['NN'], 'auto preterminal span': (7, 11), 'movers': ['NE', 'KON'], 'old_parent': 'NX', 'end right siblings': ['NX'], 'classified_type': 'Co-ordination', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		(VF dann)
		(LK buche)
		(MF
			(NX ich)
			(NX das)
			[01;31m(PX[00m
				(APPR fur)
				(NX
					(PPER sie)
					[01;31m(DM[00m
						(NX
							[01;36m(NX[00m
								(NN herr)
								(NE obrowski)[01;36m)[00m
							(KON und)
							(NX oborski))[01;31m)[00m)[01;31m)[00m))
	(SIMPX und dann muste ich nur von ihnen noch die kontonummer haben und die formalitaten))
Step:NP Internal Structure
{'subtrees': ['NN', 'NE'], 'family': ['NX', 'KON', 'NX'], 'over_word': False, 'over words': True, 'auto preterminals': ('NN', 'NE'), 'right siblings': [(KON und), (NX (NE oborski))], 'left siblings': [], 'auto preterminal span': (7, 9), 'span': (7, 9), 'parent': 'NX', 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX
		(VF dann)
		(LK buche)
		(MF
			(NX ich)
			(NX das)
			[01;31m(PX[00m
				(APPR fur)
				(NX
					(PPER sie)
					[01;31m(DM[00m
						(NX
							(NX herr obrowski)
							(KON und)
							(NX oborski))[01;31m)[00m)[01;31m)[00m))
	(SIMPX und dann muste ich nur von ihnen noch die kontonummer haben und die formalitaten))
Step:UNSET remove
{'subtrees': ['APPR', 'NX'], 'family': ['NX', 'NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'PDS', 'APPR', 'PPER', 'NN', 'NE', 'KON', 'NE'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (3, 11), 'span': (5, 11), 'left siblings': ['NX', 'NX'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX
		(VF dann)
		(LK buche)
		(MF
			(NX ich)
			(NX das)
			(APPR fur)
			(NX
				(PPER sie)
				[01;31m(DM[00m
					(NX
						(NX herr obrowski)
						(KON und)
						(NX oborski))[01;31m)[00m)))
	(SIMPX und dann muste ich nur von ihnen noch die kontonummer haben und die formalitaten))
Step:Unary
{'subtrees': ['NX'], 'family': ['PPER', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'NN', 'NE', 'KON', 'NE'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (6, 11), 'span': (7, 11), 'left siblings': ['PPER'], 'label': 'DM', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ja dann buche ich das fur sie herr obrowski und oborski und dann muste ich nur von ihnen noch die kontonummer haben und die formalitaten)

Sentence 779:
0 Initial errors
0 on fringe, 0 iterations

Sentence 780:
0 Initial errors
0 on fringe, 0 iterations

Sentence 781:
1 Initial errors
0 on fringe, 1 iterations
1 Error:NP Internal Structure
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM einen moment)
	(SIMPX da mus ich erst mal mein portemonnaie aufmachen)
	(SIMPX
		(VF die kontonummer)
		(LK ist)
		(MF
			(NX
				[01;36m(NX[00m
					(NX neun)
					(NX vier)[01;36m)[00m
				(NX sechs)
				(NX zwo)
				(NX drei)
				(NX acht)))))
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['NX', 'NX', 'NX', 'NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'CARD'), 'right siblings': [(NX (CARD sechs)), (NX (CARD zwo)), (NX (CARD drei)), (NX (CARD acht))], 'left siblings': [], 'auto preterminal span': (14, 16), 'span': (14, 16), 'parent': 'NX', 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'add'}
(TOP ja einen moment da mus ich erst mal mein portemonnaie aufmachen die kontonummer ist neun vier sechs zwo drei acht)

Sentence 782:
0 Initial errors
0 on fringe, 0 iterations

Sentence 783:
0 Initial errors
0 on fringe, 0 iterations

Sentence 784:
0 Initial errors
0 on fringe, 0 iterations

Sentence 785:
3 Initial errors
0 on fringe, 2 iterations
2 Error:Single Word Phrase
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;36m(DM[00m
		(NX
			[01;36m(ADJX[00m [01;31m(NX[00m
				(NE raiffeisenbank)[01;31m)[00m[01;36m)[00m
			(NX bonn))[01;36m)[00m)
Step:Single Word Phrase
{'family': ['ADJX', 'NX'], 'auto preterminal span': (1, 2), 'span': (1, 2), 'subtrees': ['NE'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('NE',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP
	(DM ja)
	[01;36m(DM[00m
		(NX
			(ADJX raiffeisenbank)
			(NX bonn))[01;36m)[00m)
Step:Unary
{'subtrees': ['NX'], 'family': ['DM', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE', 'NE'), 'right siblings': [], 'left siblings': [(DM (PTKANT ja))], 'auto preterminal span': (1, 3), 'span': (1, 3), 'parent': 'TOP', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP ja raiffeisenbank bonn)

Sentence 786:
0 Initial errors
0 on fringe, 0 iterations

Sentence 787:
7 Initial errors
0 on fringe, 4 iterations
4 Error:NP Attachment
1 Error:UNSET add
1 Error:Modifier Attachment
1 Error:NP Internal Structure
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(NX[00m
			(KON und)
			(NX der name)
			(ADVX noch)
			(ADVX mal)[01;31m)[00m
		[01;36m(NX[00m
			[01;31m(NX[00m [01;33m(NX[00m
				(BS o)
				(BS b)
				(BS o)
				(BS r)
				(BS s)
				(BS k)
				(BS i)[01;31m)[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					(NE matthias)[01;31m)[00m [01;33mNX)[00m
				(PX mit t t h)[01;31m)[00m[01;36m)[00m)[01;36m)[00m
Step:NP Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'NE'], 'mover info': [('NX', (5, 12))], 'old_family': ['NX', 'NX', 'NX'], 'start left siblings': ['NX'], 'auto preterminals': ('KON', 'ART', 'NN', 'ADV', 'ADV', 'BS', 'BS', 'BS', 'BS', 'BS', 'BS', 'BS', 'NE', 'APPR', 'BS', 'BS', 'BS'), 'start right siblings': ['NX'], 'end left siblings': [], 'auto preterminal span': (0, 17), 'movers': ['NX'], 'old_parent': 'TOP', 'end right siblings': ['NE'], 'classified_type': 'NP Attachment', 'type': 'move'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(NX[00m
			(KON und)
			(NX der name)
			(ADVX noch)
			(ADVX mal)[01;31m)[00m
		(NX
			(NX
				[01;31m(NX[00m
					(BS o)
					(BS b)
					(BS o)
					(BS r)
					(BS s)
					(BS k)
					(BS i)[01;31m)[00m
				(NE matthias))
			(PX mit t t h)))[01;36m)[00m
Step:UNSET add
{'subtrees': ['NX', 'NX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ART', 'NN', 'ADV', 'ADV', 'BS', 'BS', 'BS', 'BS', 'BS', 'BS', 'BS', 'NE', 'APPR', 'BS', 'BS', 'BS'), 'right siblings': [], 'left siblings': [], 'auto preterminal span': (0, 17), 'span': (0, 17), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		[01;31m(NX[00m
			(KON und)
			(NX der name)
			(ADVX noch)
			(ADVX mal)[01;31m)[00m
		(NX
			(NX
				[01;31m(NX[00m
					(BS o)
					(BS b)
					(BS o)
					(BS r)
					(BS s)
					(BS k)
					(BS i)[01;31m)[00m
				(NE matthias))
			(PX mit t t h))))
Step:Modifier Attachment
{'subtrees': ['KON', 'NX', 'ADVX', 'ADVX'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'ART', 'NN', 'ADV', 'ADV', 'BS', 'BS', 'BS', 'BS', 'BS', 'BS', 'BS', 'NE', 'APPR', 'BS', 'BS', 'BS'), 'right siblings': ['NX'], 'parent': 'SIMPX', 'auto preterminal span': (0, 17), 'span': (0, 5), 'left siblings': [], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX
		(KON und)
		(NX der name)
		(ADVX noch)
		(ADVX mal)
		(NX
			(NX
				[01;31m(NX[00m
					(BS o)
					(BS b)
					(BS o)
					(BS r)
					(BS s)
					(BS k)
					(BS i)[01;31m)[00m
				(NE matthias))
			(PX mit t t h))))
Step:NP Internal Structure
{'subtrees': ['BS', 'BS', 'BS', 'BS', 'BS', 'BS', 'BS'], 'family': ['NX', 'NE'], 'over_word': False, 'over words': True, 'auto preterminals': ('BS', 'BS', 'BS', 'BS', 'BS', 'BS', 'BS', 'NE'), 'right siblings': ['NE'], 'parent': 'NX', 'auto preterminal span': (5, 13), 'span': (5, 12), 'left siblings': [], 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'remove'}
(TOP und der name noch mal o b o r s k i matthias mit t t h)

Sentence 788:
0 Initial errors
0 on fringe, 0 iterations

Sentence 789:
0 Initial errors
0 on fringe, 0 iterations

Sentence 790:
11 Initial errors
0 on fringe, 9 iterations
2 Error:UNSET move
2 Error:NP Attachment
1 Error:Unary
1 Error:UNSET add
1 Error:Unary
1 Error:UNSET remove
1 Error:Unary
1 Error:Single Word Phrase
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM nein)
	(SIMPX
		(VF jetzt)
		(LK habe)
		[01;31m(MF[00m
			(NX ich)
			[01;31m(NX[00m [01;33m(NX[00m
				(PDS das)[01;31m)[00m[01;31m)[00m
		[01;31m(VC[00m
			[01;31m(VXINF[00m
				(VVPP vermerkt)[01;31m)[00m[01;31m)[00m) [01;33mNX)[00m
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK schicke)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(NX ihnen)
				(ADVX dann)[01;36m)[00m
			[01;36m(SIMPX[00m
				[01;36m(NF[00m
					[01;36m(NF[00m
						(SIMPX
							(C wenn)
							(MF sie mir ihre adresse grade noch)
							(VC geben wurden))[01;36m)[00m
					(NX das)[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m)
Step:UNSET move
{'new_parent': 'NX', 'new_family': ['PDS', 'VC'], 'mover info': [('VC', (5, 6))], 'old_family': ['VF', 'LK', 'MF', 'VC'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'PDS', 'VVPP'), 'start right siblings': [], 'end left siblings': ['PDS'], 'auto preterminal span': (1, 6), 'movers': ['VC'], 'old_parent': 'SIMPX', 'POS confusion': ('VVPP', 'VVPP'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM nein)
	(SIMPX
		(VF jetzt)
		(LK habe)
		[01;31m(MF[00m
			(NX ich)
			(NX
				(PDS das)
				[01;31m(VC[00m
					[01;31m(VXINF[00m
						(VVPP vermerkt)[01;31m)[00m[01;31m)[00m)[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK schicke)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(NX ihnen)
				(ADVX dann)[01;36m)[00m
			[01;36m(SIMPX[00m
				[01;36m(NF[00m
					[01;36m(NF[00m
						(SIMPX
							(C wenn)
							(MF sie mir ihre adresse grade noch)
							(VC geben wurden))[01;36m)[00m
					(NX das)[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m)
Step:NP Attachment
{'new_parent': 'SIMPX', 'new_family': ['KOORD', 'VF', 'LK', 'MF', 'SIMPX', 'NX'], 'mover info': [('SIMPX', (11, 20)), ('NX', (20, 21))], 'old_family': ['NX', 'ADVX', 'SIMPX', 'NX'], 'start left siblings': ['NX', 'ADVX'], 'auto preterminals': ('KON', 'PPER', 'VVFIN', 'PPER', 'ADV', 'KOUS', 'PPER', 'PPER', 'PPOSAT', 'NN', 'ADV', 'ADV', 'VVINF', 'VAFIN', 'PDS'), 'start right siblings': [], 'end left siblings': ['KOORD', 'VF', 'LK', 'MF'], 'auto preterminal span': (6, 21), 'movers': ['SIMPX', 'NX'], 'old_parent': 'MF', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	(DM nein)
	(SIMPX
		(VF jetzt)
		(LK habe)
		[01;31m(MF[00m
			(NX ich)
			(NX
				(PDS das)
				[01;31m(VC[00m
					[01;31m(VXINF[00m
						(VVPP vermerkt)[01;31m)[00m[01;31m)[00m)[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK schicke)
		(MF ihnen dann)
		[01;36m(SIMPX[00m
			[01;36m(NF[00m
				[01;36m(NF[00m
					(SIMPX
						(C wenn)
						(MF sie mir ihre adresse grade noch)
						(VC geben wurden))[01;36m)[00m
				(NX das)[01;36m)[00m[01;36m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['KOORD', 'VF', 'LK', 'MF', 'NF', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'PPER', 'PPOSAT', 'NN', 'ADV', 'ADV', 'VVINF', 'VAFIN'), 'right siblings': [(NX (PDS das))], 'left siblings': [(KOORD (KON und)), (VF (NX (PPER ich))), (LK (VXFIN (VVFIN schicke))), (MF (NX (PPER ihnen)) (ADVX (ADV dann)))], 'auto preterminal span': (11, 20), 'span': (11, 20), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM nein)
	(SIMPX
		(VF jetzt)
		(LK habe)
		[01;31m(MF[00m
			(NX ich)
			(NX
				(PDS das)
				[01;31m(VC[00m
					[01;31m(VXINF[00m
						(VVPP vermerkt)[01;31m)[00m[01;31m)[00m)[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK schicke)
		(MF ihnen dann)
		[01;36m(SIMPX[00m
			[01;36m(NF[00m
				(NF wenn sie mir ihre adresse grade noch geben wurden)
				(NX das)[01;36m)[00m[01;36m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['NF', 'NX'], 'family': ['KOORD', 'VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'PPER', 'PPOSAT', 'NN', 'ADV', 'ADV', 'VVINF', 'VAFIN', 'PDS'), 'right siblings': [], 'left siblings': [(KOORD (KON und)), (VF (NX (PPER ich))), (LK (VXFIN (VVFIN schicke))), (MF (NX (PPER ihnen)) (ADVX (ADV dann)))], 'auto preterminal span': (11, 21), 'span': (11, 21), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM nein)
	(SIMPX
		(VF jetzt)
		(LK habe)
		[01;31m(MF[00m
			(NX ich)
			(NX
				(PDS das)
				[01;31m(VC[00m
					[01;31m(VXINF[00m
						(VVPP vermerkt)[01;31m)[00m[01;31m)[00m)[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK schicke)
		(MF ihnen dann)
		[01;36m(SIMPX[00m
			(NF
				(NF wenn sie mir ihre adresse grade noch geben wurden)
				(NX das))[01;36m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['NF'], 'family': ['KOORD', 'VF', 'LK', 'MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'PPER', 'PPOSAT', 'NN', 'ADV', 'ADV', 'VVINF', 'VAFIN', 'PDS'), 'right siblings': [], 'left siblings': [(KOORD (KON und)), (VF (NX (PPER ich))), (LK (VXFIN (VVFIN schicke))), (MF (NX (PPER ihnen)) (ADVX (ADV dann)))], 'auto preterminal span': (11, 21), 'span': (11, 21), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM nein)
	(SIMPX
		(VF jetzt)
		(LK habe)
		[01;31m(MF[00m
			(NX ich)
			(NX
				(PDS das)
				[01;31m(VC[00m
					[01;31m(VXINF[00m
						(VVPP vermerkt)[01;31m)[00m[01;31m)[00m)[01;31m)[00m)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK schicke)
		(MF ihnen dann)
		(SIMPX wenn sie mir ihre adresse grade noch geben wurden das)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['NX', 'NX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'PDS', 'VVPP'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (1, 6), 'span': (3, 6), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM nein)
	(SIMPX
		(VF jetzt)
		(LK habe)
		(NX ich)
		(NX
			(PDS das)
			[01;31m(VC[00m
				[01;31m(VXINF[00m
					(VVPP vermerkt)[01;31m)[00m[01;31m)[00m))
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK schicke)
		(MF ihnen dann)
		(SIMPX wenn sie mir ihre adresse grade noch geben wurden das)[01;31m)[00m)
Step:Unary
{'subtrees': ['VXINF'], 'family': ['PDS', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VVPP'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (4, 6), 'span': (5, 6), 'left siblings': ['PDS'], 'label': 'VC', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM nein)
	(SIMPX
		(VF jetzt)
		(LK habe)
		(NX ich)
		(NX
			(PDS das)
			[01;31m(VXINF[00m
				(VVPP vermerkt)[01;31m)[00m))
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK schicke)
		(MF ihnen dann)
		(SIMPX wenn sie mir ihre adresse grade noch geben wurden das)[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['VVPP'], 'family': ['PDS', 'VXINF'], 'over_word': True, 'over words': True, 'auto preterminals': ('PDS', 'VVPP'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (4, 6), 'span': (5, 6), 'left siblings': ['PDS'], 'label': 'VXINF', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(DM nein)
	(SIMPX jetzt habe ich das vermerkt)
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF ich)
		(LK schicke)
		(MF ihnen dann)
		(SIMPX wenn sie mir ihre adresse grade noch geben wurden das)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['KOORD', 'VF', 'LK', 'MF', 'SIMPX'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'VAFIN', 'PPER', 'PDS', 'VVPP', 'KON', 'PPER', 'VVFIN', 'PPER', 'ADV', 'KOUS', 'PPER', 'PPER', 'PPOSAT', 'NN', 'ADV', 'ADV', 'VVINF', 'VAFIN', 'PDS'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 21), 'span': (6, 21), 'left siblings': ['DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP nein jetzt habe ich das vermerkt und ich schicke ihnen dann wenn sie mir ihre adresse grade noch geben wurden das)

Sentence 791:
7 Initial errors
0 on fringe, 5 iterations
2 Error:Single Word Phrase
2 Error:Modifier Attachment
1 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		(VF da)
		(LK ist)
		(MF
			[01;31m(NX[00m
				[01;31m(NX[00m
					[01;31m(NX[00m
						[01;31m(ADJX[00m
							(ADJA hirschberger)[01;31m)[00m
						[01;36m(NX[00m
							(NN strase)[01;36m)[00m[01;31m)[00m
					(NX vierundsechzig)[01;31m)[00m
				(PX
					(APPR in)
					(NX
						(NX
							(NX funf)
							(NX drei)
							(NX eins)
							(NX eins)
							[01;36m(ADJX[00m [01;31m(NX[00m
								(CARD neun)[01;31m)[00m[01;36m)[00m)
						(NE bonn)))[01;31m)[00m)))
Step:Single Word Phrase
{'family': ['NX', 'NX', 'NX', 'NX', 'ADJX'], 'auto preterminal span': (11, 12), 'span': (11, 12), 'subtrees': ['CARD'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('CARD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP
	(DM ja)
	(SIMPX
		(VF da)
		(LK ist)
		(MF
			[01;31m(NX[00m
				[01;31m(NX[00m
					[01;31m(NX[00m
						[01;31m(ADJX[00m
							(ADJA hirschberger)[01;31m)[00m
						[01;36m(NX[00m
							(NN strase)[01;36m)[00m[01;31m)[00m
					(NX vierundsechzig)[01;31m)[00m
				(PX in funf drei eins eins neun bonn)[01;31m)[00m)))
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['ADJX', 'NX', 'NX'], 'mover info': [('ADJX', (3, 4))], 'old_family': ['ADJX', 'NN'], 'start left siblings': [], 'auto preterminals': ('ADJA', 'NN', 'CARD'), 'start right siblings': ['NN'], 'end left siblings': [], 'auto preterminal span': (3, 6), 'movers': ['ADJX'], 'old_parent': 'NX', 'POS confusion': ('ADJA', 'ADJA'), 'end right siblings': ['NX', 'NX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		(VF da)
		(LK ist)
		(MF
			[01;31m(NX[00m
				[01;31m(NX[00m
					[01;31m(ADJX[00m
						(ADJA hirschberger)[01;31m)[00m
					(NX strase)
					(NX vierundsechzig)[01;31m)[00m
				(PX in funf drei eins eins neun bonn)[01;31m)[00m)))
Step:Single Word Phrase
{'subtrees': ['ADJA'], 'family': ['ADJX', 'NX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADJA', 'NN', 'CARD'), 'right siblings': ['NX', 'NX'], 'parent': 'NX', 'auto preterminal span': (3, 6), 'span': (3, 4), 'left siblings': [], 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX
		(VF da)
		(LK ist)
		(MF
			[01;31m(NX[00m
				[01;31m(NX[00m
					(ADJA hirschberger)
					(NX strase)
					(NX vierundsechzig)[01;31m)[00m
				(PX in funf drei eins eins neun bonn)[01;31m)[00m)))
Step:UNSET remove
{'subtrees': ['ADJA', 'NX', 'NX'], 'family': ['NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJA', 'NN', 'CARD', 'APPR', 'CARD', 'CARD', 'CARD', 'CARD', 'CARD', 'NE'), 'right siblings': ['PX'], 'parent': 'NX', 'auto preterminal span': (3, 13), 'span': (3, 6), 'left siblings': [], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX
		(VF da)
		(LK ist)
		(MF
			[01;31m(NX[00m
				(ADJA hirschberger)
				(NX strase)
				(NX vierundsechzig)
				(PX in funf drei eins eins neun bonn)[01;31m)[00m)))
Step:Unary
{'subtrees': ['ADJA', 'NX', 'NX', 'PX'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJA', 'NN', 'CARD', 'APPR', 'CARD', 'CARD', 'CARD', 'CARD', 'CARD', 'NE'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (3, 13), 'span': (3, 13), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ja da ist hirschberger strase vierundsechzig in funf drei eins eins neun bonn)

Sentence 792:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Single Word Phrase
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX dann schicke ich ihnen die quittung zu)
	[01;31m(DM[00m
		(KON und)
		[01;36m(DM[00m
			(PTKANT ja)[01;36m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['PTKANT'], 'family': ['KON', 'DM'], 'over_word': True, 'over words': True, 'auto preterminals': ('PTKANT',), 'right siblings': [], 'left siblings': [(KON und)], 'auto preterminal span': (8, 9), 'span': (8, 9), 'parent': 'DM', 'label': 'DM', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(SIMPX dann schicke ich ihnen die quittung zu)
	[01;31m(DM[00m
		(KON und)
		(DM ja)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['KON', 'DM'], 'family': ['SIMPX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'PPER', 'ART', 'NN', 'PTKVZ', 'KON', 'PTKANT'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 9), 'span': (7, 9), 'left siblings': ['SIMPX'], 'label': 'DM', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP dann schicke ich ihnen die quittung zu und ja)

Sentence 793:
0 Initial errors
0 on fringe, 0 iterations

Sentence 794:
5 Initial errors
0 on fringe, 3 iterations
3 Error:Co-ordination
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(DM[00m
		[01;31m(NX[00m
			(NX vielen dank)
			[01;33m(PX[00m (PX fur die buchung)[01;31m)[00m[01;31m)[00m
	[01;31m(DM[00m
		[01;31m(PX[00m
			(KON und)
			(PX auf wiederhoren)[01;31m)[00m[01;31m)[00m) [01;33mPX)[00m
Step:Co-ordination
{'new_parent': 'PX', 'new_family': ['PX', 'KON', 'PX'], 'mover info': [('PX', (2, 5))], 'old_family': ['NX', 'PX'], 'start left siblings': ['NX'], 'auto preterminals': ('PIDAT', 'NN', 'APPR', 'ART', 'NN', 'KON', 'APPR', 'NN'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (0, 8), 'movers': ['PX'], 'old_parent': 'NX', 'end right siblings': ['KON', 'PX'], 'classified_type': 'Co-ordination', 'type': 'move'}
(TOP
	[01;31m(DM[00m
		(NX
			(PIDAT vielen)
			(NN dank))[01;31m)[00m
	[01;31m(DM[00m
		(PX
			(PX fur die buchung)
			(KON und)
			(PX auf wiederhoren))[01;31m)[00m)
Step:Unary
{'subtrees': ['NX'], 'family': ['DM', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PIDAT', 'NN', 'APPR', 'ART', 'NN', 'KON', 'APPR', 'NN'), 'right siblings': ['DM'], 'parent': 'TOP', 'auto preterminal span': (0, 8), 'span': (0, 2), 'left siblings': [], 'label': 'DM', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(NX vielen dank)
	[01;31m(DM[00m
		(PX
			(PX fur die buchung)
			(KON und)
			(PX auf wiederhoren))[01;31m)[00m)
Step:Unary
{'subtrees': ['PX'], 'family': ['NX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PIDAT', 'NN', 'APPR', 'ART', 'NN', 'KON', 'APPR', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 8), 'span': (2, 8), 'left siblings': ['NX'], 'label': 'DM', 'classified_type': 'Unary', 'type': 'remove'}
(TOP vielen dank fur die buchung und auf wiederhoren)

Sentence 795:
0 Initial errors
0 on fringe, 0 iterations

Sentence 796:
0 Initial errors
0 on fringe, 0 iterations

Sentence 797:
8 Initial errors
0 on fringe, 5 iterations
4 Error:UNSET move
1 Error:Single Word Phrase
1 Error:Single Word Phrase
1 Error:Single Word Phrase
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(NX[00m
		[01;31m(NX[00m
			[01;31m(ADJX[00m
				(FM first)[01;31m)[00m
			[01;36m(NX[00m
				(FM class)[01;36m)[00m[01;31m)[00m
		[01;36m(NX[00m
			(NN [01;33m(NX (DM[00m reiseburo)[01;36m)[00m[01;31m)[00m
	[01;31m(DM[00m
		(NX
			(NE schmidt))[01;31m)[00m [01;33mDM) NX)[00m
	(DM guten tag))
Step:UNSET move
{'new_parent': 'DM', 'new_family': ['NN', 'NX'], 'mover info': [('NN', (2, 3))], 'old_family': ['NX', 'NN'], 'start left siblings': ['NX'], 'auto preterminals': ('FM', 'FM', 'NN', 'NE', 'ADJA', 'NN'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (0, 6), 'adding node already present': False, 'movers': ['NN'], 'old_parent': 'NX', 'POS confusion': ('NN', 'NN'), 'added and moved': True, 'end right siblings': ['NX'], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'NX'}
(TOP
	[01;31m(NX[00m
		[01;31m(ADJX[00m
			(FM first)[01;31m)[00m
		[01;36m(NX[00m
			(FM class)[01;36m)[00m[01;31m)[00m
	(NX
		(DM
			[01;36m(NX[00m
				(NN reiseburo)[01;36m)[00m
			(NX schmidt)))
	(DM guten tag))
Step:Single Word Phrase
{'subtrees': ['FM'], 'family': ['ADJX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('FM',), 'right siblings': [], 'left siblings': [(ADJX (FM first))], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'NX', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	[01;31m(NX[00m
		[01;31m(ADJX[00m
			(FM first)[01;31m)[00m
		(NX class)[01;31m)[00m
	(NX
		(DM
			[01;36m(NX[00m
				(NN reiseburo)[01;36m)[00m
			(NX schmidt)))
	(DM guten tag))
Step:Single Word Phrase
{'subtrees': ['NN'], 'family': ['NX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('NN',), 'right siblings': [(NX (NE schmidt))], 'left siblings': [], 'auto preterminal span': (2, 3), 'span': (2, 3), 'parent': 'DM', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	[01;31m(NX[00m
		[01;31m(ADJX[00m
			(FM first)[01;31m)[00m
		(NX class)[01;31m)[00m
	(NX reiseburo schmidt)
	(DM guten tag))
Step:Single Word Phrase
{'subtrees': ['FM'], 'family': ['ADJX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('FM', 'FM'), 'right siblings': ['NX'], 'parent': 'NX', 'auto preterminal span': (0, 2), 'span': (0, 1), 'left siblings': [], 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	[01;31m(NX[00m
		(FM first)
		(NX class)[01;31m)[00m
	(NX reiseburo schmidt)
	(DM guten tag))
Step:UNSET remove
{'subtrees': ['FM', 'NX'], 'family': ['NX', 'NX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('FM', 'FM', 'NN', 'NE', 'ADJA', 'NN'), 'right siblings': ['NX', 'DM'], 'parent': 'TOP', 'auto preterminal span': (0, 6), 'span': (0, 2), 'left siblings': [], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP first class reiseburo schmidt guten tag)

Sentence 798:
0 Initial errors
0 on fringe, 0 iterations

Sentence 799:
0 Initial errors
0 on fringe, 0 iterations

Sentence 800:
0 Initial errors
0 on fringe, 0 iterations

Sentence 801:
0 Initial errors
0 on fringe, 0 iterations

Sentence 802:
12 Initial errors
0 on fringe, 9 iterations
4 Error:Co-ordination
1 Error:Unary
1 Error:UNSET add
1 Error:Single Word Phrase
1 Error:Modifier Attachment
1 Error:UNSET remove
1 Error:Clause Attachment
1 Error:Clause Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	[01;31m(NX[00m
		(ADVX erst)
		(ADVX mal)
		(NX die frage)
		[01;36m(NF[00m
			(SIMPX [01;33m(SIMPX (NF[00m
				(C wie)
				(MF sie)
				(VC anreisen mochten))[01;36m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(C ob)
		(MF sie mit der bahn)
		(VC fahren)
		[01;31m(NF[00m
			[01;31m(PX[00m
				[01;36m(PX[00m
					[01;36m(NF[00m
						(KON oder)
						(PX mit dem bus) [01;33mSIMPX) NF) SIMPX) SIMPX)[00m[01;36m)[00m[01;36m)[00m
				[01;36m(DM[00m
					(KON oder)[01;36m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:Co-ordination
{'new_parent': 'SIMPX', 'new_family': ['C', 'MF', 'VC', 'NF', 'KON'], 'mover info': [('KON', (18, 19))], 'old_family': ['KON', 'PX', 'KON'], 'start left siblings': ['KON', 'PX'], 'auto preterminals': ('KOUS', 'PPER', 'APPR', 'ART', 'NN', 'VVFIN', 'KON', 'APPR', 'ART', 'NN', 'KON'), 'start right siblings': [], 'end left siblings': ['C', 'MF', 'VC', 'NF'], 'auto preterminal span': (8, 19), 'movers': ['KON'], 'old_parent': 'PX', 'POS confusion': ('KON', 'KON'), 'end right siblings': [], 'classified_type': 'Co-ordination', 'type': 'move'}
(TOP [01;33m(SIMPX[00m
	[01;31m(NX[00m
		(ADVX erst)
		(ADVX mal)
		(NX die frage)
		[01;36m(NF[00m
			(SIMPX [01;33m(SIMPX (NF[00m
				(C wie)
				(MF sie)
				(VC anreisen mochten))[01;36m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(C ob)
			(MF sie mit der bahn)
			(VC fahren)
			(NF oder mit dem bus) [01;33mNF) SIMPX) SIMPX)[00m[01;36m)[00m
		[01;36m(DM[00m
			(KON oder)[01;36m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['ADVX', 'ADVX', 'NX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'VVINF', 'VMFIN'), 'right siblings': [], 'left siblings': [(ADVX (ADV erst)), (ADVX (ADV mal)), (NX (ART die) (NN frage))], 'auto preterminal span': (4, 8), 'span': (4, 8), 'parent': 'NX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP [01;33m(SIMPX[00m
	[01;31m(NX[00m
		(ADVX erst)
		(ADVX mal)
		(NX die frage)
		[01;33m(SIMPX (NF[00m (NF wie sie anreisen mochten)[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(C ob)
			(MF sie mit der bahn)
			(VC fahren)
			(NF oder mit dem bus) [01;33mNF) SIMPX) SIMPX)[00m[01;36m)[00m
		[01;36m(DM[00m
			(KON oder)[01;36m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['C', 'MF', 'VC', 'NF'], 'family': ['SIMPX', 'KON'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'APPR', 'ART', 'NN', 'VVFIN', 'KON', 'APPR', 'ART', 'NN'), 'right siblings': [(KON oder)], 'left siblings': [], 'auto preterminal span': (8, 18), 'span': (8, 18), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP [01;33m(SIMPX[00m
	[01;31m(NX[00m
		(ADVX erst)
		(ADVX mal)
		(NX die frage)
		[01;33m(SIMPX (NF[00m (NF wie sie anreisen mochten)[01;31m)[00m
	[01;31m(SIMPX[00m
		(SIMPX ob sie mit der bahn fahren oder mit dem bus) [01;33mNF) SIMPX) SIMPX)[00m
		[01;36m(DM[00m
			(KON oder)[01;36m)[00m[01;31m)[00m)
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['SIMPX', 'DM'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON',), 'right siblings': [], 'left siblings': [(SIMPX (C (KOUS ob)) (MF (NX (PPER sie)) (PX (APPR mit) (NX (ART der) (NN bahn)))) (VC (VXFIN (VVFIN fahren))) (NF (PX (KON oder) (PX (APPR mit) (NX (ART dem) (NN bus))))))], 'auto preterminal span': (18, 19), 'span': (18, 19), 'parent': 'SIMPX', 'label': 'DM', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP [01;33m(SIMPX[00m
	[01;31m(NX[00m
		(ADVX erst)
		(ADVX mal)
		(NX die frage)
		[01;33m(SIMPX (NF[00m (NF wie sie anreisen mochten)[01;31m)[00m
	[01;31m(SIMPX[00m
		(SIMPX ob sie mit der bahn fahren oder mit dem bus) [01;33mNF) SIMPX) SIMPX)[00m
		(DM oder)[01;31m)[00m)
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX', 'NX', 'NF'], 'family': ['NX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'ART', 'NN', 'KOUS', 'PPER', 'VVINF', 'VMFIN', 'KOUS', 'PPER', 'APPR', 'ART', 'NN', 'VVFIN', 'KON', 'APPR', 'ART', 'NN', 'KON'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 19), 'span': (0, 8), 'left siblings': [], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP [01;33m(SIMPX[00m
	(ADVX erst)
	(ADVX mal)
	(NX die frage)
	[01;33m(SIMPX (NF[00m (NF wie sie anreisen mochten)
	[01;31m(SIMPX[00m
		(SIMPX ob sie mit der bahn fahren oder mit dem bus) [01;33mNF) SIMPX) SIMPX)[00m
		(DM oder)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['SIMPX', 'DM'], 'family': ['ADVX', 'ADVX', 'NX', 'NF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'ART', 'NN', 'KOUS', 'PPER', 'VVINF', 'VMFIN', 'KOUS', 'PPER', 'APPR', 'ART', 'NN', 'VVFIN', 'KON', 'APPR', 'ART', 'NN', 'KON'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 19), 'span': (8, 19), 'left siblings': ['ADVX', 'ADVX', 'NX', 'NF'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	[01;36m(SIMPX[00m
		(ADVX erst)
		(ADVX mal)
		(NX die frage)
		[01;36m(NF[00m
			[01;36m(SIMPX[00m
				(NF wie sie anreisen mochten)
				(SIMPX ob sie mit der bahn fahren oder mit dem bus)[01;36m)[00m[01;36m)[00m[01;36m)[00m
	(DM oder))
Step:Clause Attachment
{'subtrees': ['ADVX', 'ADVX', 'NX', 'NF', 'SIMPX'], 'family': ['SIMPX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'ART', 'NN', 'KOUS', 'PPER', 'VVINF', 'VMFIN', 'KOUS', 'PPER', 'APPR', 'ART', 'NN', 'VVFIN', 'KON', 'APPR', 'ART', 'NN'), 'right siblings': [(DM (KON oder))], 'left siblings': [], 'auto preterminal span': (0, 18), 'span': (0, 18), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(ADVX erst)
		(ADVX mal)
		(NX die frage)
		[01;36m(NF[00m
			[01;36m(SIMPX[00m
				(NF wie sie anreisen mochten)
				(SIMPX ob sie mit der bahn fahren oder mit dem bus)[01;36m)[00m[01;36m)[00m)
	(DM oder))
Step:Clause Attachment
{'subtrees': ['NF', 'SIMPX'], 'family': ['ADVX', 'ADVX', 'NX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'VVINF', 'VMFIN', 'KOUS', 'PPER', 'APPR', 'ART', 'NN', 'VVFIN', 'KON', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(ADVX (ADV erst)), (ADVX (ADV mal)), (NX (ART die) (NN frage))], 'auto preterminal span': (4, 18), 'span': (4, 18), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(ADVX erst)
		(ADVX mal)
		(NX die frage)
		[01;36m(NF[00m
			(SIMPX
				(NF wie sie anreisen mochten)
				(SIMPX ob sie mit der bahn fahren oder mit dem bus))[01;36m)[00m)
	(DM oder))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['ADVX', 'ADVX', 'NX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'VVINF', 'VMFIN', 'KOUS', 'PPER', 'APPR', 'ART', 'NN', 'VVFIN', 'KON', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(ADVX (ADV erst)), (ADVX (ADV mal)), (NX (ART die) (NN frage))], 'auto preterminal span': (4, 18), 'span': (4, 18), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP erst mal die frage wie sie anreisen mochten ob sie mit der bahn fahren oder mit dem bus oder)

Sentence 803:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		(VF ich)
		(LK dachte)
		(MF
			(NX mir)
			[01;31m(PX[00m
				(ADVX moglichst)
				[01;36m(PX[00m
					(APPR mit)
					(NX der bahn)[01;36m)[00m[01;31m)[00m)))
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'PX'], 'mover info': [('ADVX', (4, 5))], 'old_family': ['ADVX', 'APPR', 'NX'], 'start left siblings': [], 'auto preterminals': ('PRF', 'ADV', 'APPR', 'ART', 'NN'), 'start right siblings': ['APPR', 'NX'], 'end left siblings': ['NX'], 'auto preterminal span': (3, 8), 'movers': ['ADVX'], 'old_parent': 'PX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['PX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP ja ich dachte mir moglichst mit der bahn)

Sentence 804:
0 Initial errors
0 on fringe, 0 iterations

Sentence 805:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(ADVX
		[01;36m(ADVX[00m [01;31m(ADJX[00m
			(ADJD lieber)[01;31m)[00m[01;36m)[00m
		(ADVX gern)
		(ADVX morgens)))
Step:Single Word Phrase
{'family': ['ADVX', 'ADVX', 'ADVX'], 'auto preterminal span': (0, 1), 'span': (0, 1), 'subtrees': ['ADJD'], 'parent': 'ADVX', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'ADVX')}
(TOP lieber gern morgens)

Sentence 806:
0 Initial errors
0 on fringe, 0 iterations

Sentence 807:
0 Initial errors
0 on fringe, 0 iterations

Sentence 808:
14 Initial errors
0 on fringe, 10 iterations
2 Error:Clause Attachment
2 Error:UNSET move
2 Error:UNSET move
2 Error:PP Attachment
1 Error:PP Attachment
1 Error:PP Attachment
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(VF da)
			(LK ware)
			[01;31m(MF[00m
				(ADVX noch)
				[01;36m(NX[00m
					(NX die frage)
					[01;36m(PX[00m
						(ADVX naturlich)
						(PX nach dem hotel)[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m
		[01;36m(SIMPX[00m
			[01;31m(SIMPX[00m
				(C ob)
				[01;31m(MF[00m [01;33m(MF[00m
					(NX sie)
					(NX was)[01;31m)[00m[01;31m)[00m
			[01;31m(SIMPX[00m
				[01;31m(C[00m
					[01;31m(NX[00m
						(NX was)
						[01;33m(PX[00m (PX fur einen hotelwunsch)[01;31m)[00m[01;31m)[00m
				[01;31m(MF[00m
					(NX
						(PPER sie))[01;31m)[00m [01;33mPX) MF)[00m
				(VC haben)[01;31m)[00m[01;36m)[00m[01;36m)[00m)
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'SIMPX', 'C', 'MF', 'VC'], 'mover info': [('SIMPX', (1, 10)), ('SIMPX', (10, 13))], 'old_family': ['DM', 'SIMPX', 'SIMPX', 'SIMPX'], 'start left siblings': ['DM'], 'auto preterminals': ('PTKANT', 'ADV', 'VAFIN', 'ADV', 'ART', 'NN', 'ADV', 'APPR', 'ART', 'NN', 'KOUS', 'PPER', 'PIS', 'PWS', 'APPR', 'ART', 'NN', 'PPER', 'VAFIN'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 19), 'movers': ['SIMPX', 'SIMPX'], 'old_parent': 'TOP', 'end right siblings': ['C', 'MF', 'VC'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		[01;31m(SIMPX[00m
			(VF da)
			(LK ware)
			[01;31m(MF[00m
				(ADVX noch)
				[01;36m(NX[00m
					(NX die frage)
					[01;36m(PX[00m
						(ADVX naturlich)
						(PX nach dem hotel)[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m
		[01;36m(SIMPX[00m
			[01;31m(SIMPX[00m
				(C ob)
				[01;31m(MF[00m [01;33m(MF[00m
					(NX sie)
					(NX was)[01;31m)[00m[01;31m)[00m
			[01;31m(C[00m
				[01;31m(NX[00m
					(NX was)
					[01;33m(PX[00m (PX fur einen hotelwunsch)[01;31m)[00m[01;31m)[00m
			[01;31m(MF[00m
				(NX
					(PPER sie))[01;31m)[00m [01;33mPX) MF)[00m
			(VC haben)[01;36m)[00m))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'C', 'MF'], 'mover info': [('C', (13, 17)), ('MF', (17, 18))], 'old_family': ['SIMPX', 'SIMPX', 'C', 'MF', 'VC'], 'start left siblings': ['SIMPX', 'SIMPX'], 'auto preterminals': ('ADV', 'VAFIN', 'ADV', 'ART', 'NN', 'ADV', 'APPR', 'ART', 'NN', 'KOUS', 'PPER', 'PIS', 'PWS', 'APPR', 'ART', 'NN', 'PPER', 'VAFIN'), 'start right siblings': ['VC'], 'end left siblings': ['NX', 'NX'], 'auto preterminal span': (1, 19), 'movers': ['C', 'MF'], 'old_parent': 'SIMPX', 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		[01;31m(SIMPX[00m
			(VF da)
			(LK ware)
			[01;31m(MF[00m
				(ADVX noch)
				[01;36m(NX[00m
					(NX die frage)
					[01;36m(PX[00m
						(ADVX naturlich)
						(PX nach dem hotel)[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m
		[01;36m(SIMPX[00m
			[01;31m(SIMPX[00m
				(C ob)
				(MF
					(NX sie)
					(NX was)
					[01;31m(C[00m
						[01;31m(NX[00m
							(NX was)
							[01;33m(PX[00m (PX fur einen hotelwunsch)[01;31m)[00m[01;31m)[00m
					[01;31m(MF[00m
						(NX
							(PPER sie))[01;31m)[00m)[01;31m)[00m [01;33mPX)[00m
			(VC haben)[01;36m)[00m))
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['C', 'MF', 'VC'], 'mover info': [('VC', (18, 19))], 'old_family': ['SIMPX', 'SIMPX', 'VC'], 'start left siblings': ['SIMPX', 'SIMPX'], 'auto preterminals': ('ADV', 'VAFIN', 'ADV', 'ART', 'NN', 'ADV', 'APPR', 'ART', 'NN', 'KOUS', 'PPER', 'PIS', 'PWS', 'APPR', 'ART', 'NN', 'PPER', 'VAFIN'), 'start right siblings': [], 'end left siblings': ['C', 'MF'], 'auto preterminal span': (1, 19), 'movers': ['VC'], 'old_parent': 'SIMPX', 'POS confusion': ('VAFIN', 'VAFIN'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		[01;31m(SIMPX[00m
			(VF da)
			(LK ware)
			[01;31m(MF[00m
				(ADVX noch)
				[01;36m(NX[00m
					(NX die frage)
					[01;36m(PX[00m
						(ADVX naturlich)
						(PX nach dem hotel)[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m
		(SIMPX
			(C ob)
			(MF
				(NX sie)
				(NX was)
				[01;31m(C[00m
					[01;31m(NX[00m
						(NX was)
						[01;33m(PX[00m (PX fur einen hotelwunsch)[01;31m)[00m[01;31m)[00m
				[01;31m(MF[00m
					(NX
						(PPER sie))[01;31m)[00m) [01;33mPX)[00m
			(VC haben))))
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['PX', 'NX'], 'mover info': [('PX', (14, 17))], 'old_family': ['NX', 'PX'], 'start left siblings': ['NX'], 'auto preterminals': ('PPER', 'PIS', 'PWS', 'APPR', 'ART', 'NN', 'PPER'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (11, 18), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': ['NX'], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP
	(DM ja)
	(SIMPX
		[01;31m(SIMPX[00m
			(VF da)
			(LK ware)
			[01;31m(MF[00m
				(ADVX noch)
				[01;36m(NX[00m
					(NX die frage)
					[01;36m(PX[00m
						(ADVX naturlich)
						(PX nach dem hotel)[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m
		(SIMPX
			(C ob)
			(MF
				(NX sie)
				(NX was)
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(PX
					[01;31m(MF[00m
						(PX fur einen hotelwunsch)
						(NX sie)[01;31m)[00m))
			(VC haben))))
Step:PP Attachment
{'subtrees': ['NX', 'ADVX', 'PX'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'ADV', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(ADVX (ADV noch))], 'auto preterminal span': (4, 10), 'span': (4, 10), 'parent': 'MF', 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX
		[01;31m(SIMPX[00m
			(VF da)
			(LK ware)
			[01;31m(MF[00m
				(ADVX noch)
				(NX
					(NX die frage)
					[01;36m(PX[00m
						(ADVX naturlich)
						(PX nach dem hotel)[01;36m)[00m)[01;31m)[00m[01;31m)[00m
		(SIMPX
			(C ob)
			(MF
				(NX sie)
				(NX was)
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(PX
					[01;31m(MF[00m
						(PX fur einen hotelwunsch)
						(NX sie)[01;31m)[00m))
			(VC haben))))
Step:PP Attachment
{'subtrees': ['ADVX', 'PX'], 'family': ['NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(NX (ART die) (NN frage))], 'auto preterminal span': (6, 10), 'span': (6, 10), 'parent': 'NX', 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX
		[01;31m(SIMPX[00m
			(VF da)
			(LK ware)
			[01;31m(MF[00m
				(ADVX noch)
				(NX die frage naturlich nach dem hotel)[01;31m)[00m[01;31m)[00m
		(SIMPX
			(C ob)
			(MF
				(NX sie)
				(NX was)
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(PX
					[01;31m(MF[00m
						(PX fur einen hotelwunsch)
						(NX sie)[01;31m)[00m))
			(VC haben))))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'ADV', 'ART', 'NN', 'ADV', 'APPR', 'ART', 'NN', 'KOUS', 'PPER', 'PIS', 'PWS', 'APPR', 'ART', 'NN', 'PPER', 'VAFIN'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (1, 19), 'span': (1, 10), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX
		(VF da)
		(LK ware)
		[01;31m(MF[00m
			(ADVX noch)
			(NX die frage naturlich nach dem hotel)[01;31m)[00m
		(SIMPX
			(C ob)
			(MF
				(NX sie)
				(NX was)
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(PX
					[01;31m(MF[00m
						(PX fur einen hotelwunsch)
						(NX sie)[01;31m)[00m))
			(VC haben))))
Step:UNSET remove
{'subtrees': ['ADVX', 'NX'], 'family': ['VF', 'LK', 'MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'ADV', 'ART', 'NN', 'ADV', 'APPR', 'ART', 'NN', 'KOUS', 'PPER', 'PIS', 'PWS', 'APPR', 'ART', 'NN', 'PPER', 'VAFIN'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (1, 19), 'span': (3, 10), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX
		(VF da)
		(LK ware)
		(ADVX noch)
		(NX die frage naturlich nach dem hotel)
		(SIMPX
			(C ob)
			(MF
				(NX sie)
				(NX was)
				[01;31m(C[00m
					(NX
						(PWS was))[01;31m)[00m
				(PX
					[01;31m(MF[00m
						(PX fur einen hotelwunsch)
						(NX sie)[01;31m)[00m))
			(VC haben))))
Step:Unary
{'subtrees': ['NX'], 'family': ['NX', 'NX', 'C', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'PIS', 'PWS', 'APPR', 'ART', 'NN', 'PPER'), 'right siblings': ['PX'], 'parent': 'MF', 'auto preterminal span': (11, 18), 'span': (13, 14), 'left siblings': ['NX', 'NX'], 'label': 'C', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(SIMPX
		(VF da)
		(LK ware)
		(ADVX noch)
		(NX die frage naturlich nach dem hotel)
		(SIMPX
			(C ob)
			(MF
				(NX sie)
				(NX was)
				(NX was)
				(PX
					[01;31m(MF[00m
						(PX fur einen hotelwunsch)
						(NX sie)[01;31m)[00m))
			(VC haben))))
Step:Unary
{'subtrees': ['PX', 'NX'], 'family': ['MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'PPER'), 'right siblings': [], 'parent': 'PX', 'auto preterminal span': (14, 18), 'span': (14, 18), 'left siblings': [], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ja da ware noch die frage naturlich nach dem hotel ob sie was was fur einen hotelwunsch sie haben)

Sentence 809:
12 Initial errors
0 on fringe, 7 iterations
4 Error:Co-ordination
2 Error:Different label
2 Error:Co-ordination
1 Error:UNSET add
1 Error:PP Attachment
1 Error:Unary
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP [01;33m(SIMPX[00m
		[01;31m(SIMPX[00m
			(C ob)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX sie)
				[01;31m(ADJX[00m
					[01;36m(ADJX[00m
						(ADJX zentral)
						[01;36m(PX[00m
							[01;36m(NF[00m
								(KON oder)
								(PX am flughafen) [01;33mMF) SIMPX)[00m[01;36m)[00m[01;36m)[00m[01;36m)[00m
					(KON oder)[01;31m)[00m[01;31m)[00m[01;31m)[00m
		(DM ja)
		[01;36m(SIMPX[00m
			(SIMPX wenn sie mit der bahn kommen)
			[01;36m(MF[00m [01;31m(PX[00m
				(ADVX dann)
				(ADVX naturlich)
				(ADVX nicht)
				(PX am flughafen)[01;31m)[00m[01;36m)[00m[01;36m)[00m)[01;36m)[00m
Step:Co-ordination
{'new_parent': 'SIMPX', 'new_family': ['C', 'MF', 'KON'], 'mover info': [('KON', (6, 7))], 'old_family': ['ADJX', 'KON', 'PX', 'KON'], 'start left siblings': ['ADJX', 'KON', 'PX'], 'auto preterminals': ('KOUS', 'PPER', 'ADJD', 'KON', 'APPRART', 'NN', 'KON'), 'start right siblings': [], 'end left siblings': ['C', 'MF'], 'auto preterminal span': (0, 7), 'movers': ['KON'], 'old_parent': 'ADJX', 'POS confusion': ('KON', 'KON'), 'end right siblings': [], 'classified_type': 'Co-ordination', 'type': 'move'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			[01;36m(SIMPX[00m
				(C ob)
				(MF
					(NX sie)
					(ADJX
						(ADJX zentral)
						[01;36m(PX[00m
							[01;36m(NF[00m
								(KON oder)
								(PX am flughafen)[01;36m)[00m[01;36m)[00m))[01;36m)[00m
			(KON oder)[01;31m)[00m
		(DM ja)
		[01;36m(SIMPX[00m
			(SIMPX wenn sie mit der bahn kommen)
			[01;36m(MF[00m [01;31m(PX[00m
				(ADVX dann)
				(ADVX naturlich)
				(ADVX nicht)
				(PX am flughafen)[01;31m)[00m[01;36m)[00m[01;36m)[00m)[01;36m)[00m
Step:Different label
{'family': ['SIMPX', 'DM', 'SIMPX', 'MF'], 'auto preterminal span': (14, 19), 'span': (14, 19), 'subtrees': ['ADVX', 'ADVX', 'ADVX', 'PX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('ADV', 'ADV', 'PTKNEG', 'APPRART', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('PX', 'MF')}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			[01;36m(SIMPX[00m
				(C ob)
				(MF
					(NX sie)
					(ADJX
						(ADJX zentral)
						[01;36m(PX[00m
							[01;36m(NF[00m
								(KON oder)
								(PX am flughafen)[01;36m)[00m[01;36m)[00m))[01;36m)[00m
			(KON oder)[01;31m)[00m
		(DM ja)
		[01;36m(SIMPX[00m
			(SIMPX wenn sie mit der bahn kommen)
			(MF dann naturlich nicht am flughafen)[01;36m)[00m)[01;36m)[00m
Step:Co-ordination
{'new_parent': 'SIMPX', 'new_family': ['C', 'MF', 'KON', 'DM', 'SIMPX', 'MF'], 'mover info': [('DM', (7, 8)), ('SIMPX', (8, 14)), ('MF', (14, 19))], 'old_family': ['SIMPX', 'DM', 'SIMPX', 'MF'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('KOUS', 'PPER', 'ADJD', 'KON', 'APPRART', 'NN', 'KON', 'PTKANT', 'KOUS', 'PPER', 'APPR', 'ART', 'NN', 'VVFIN', 'ADV', 'ADV', 'PTKNEG', 'APPRART', 'NN'), 'start right siblings': [], 'end left siblings': ['C', 'MF', 'KON'], 'auto preterminal span': (0, 19), 'movers': ['DM', 'SIMPX', 'MF'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'Co-ordination', 'type': 'move'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(C ob)
			(MF
				(NX sie)
				(ADJX
					(ADJX zentral)
					[01;36m(PX[00m
						[01;36m(NF[00m
							(KON oder)
							(PX am flughafen)[01;36m)[00m[01;36m)[00m))[01;36m)[00m
		(KON oder)
		(DM ja)
		[01;36m(SIMPX[00m
			(SIMPX wenn sie mit der bahn kommen)
			(MF dann naturlich nicht am flughafen)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['C', 'MF'], 'family': ['SIMPX', 'KON', 'DM', 'SIMPX', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ADJD', 'KON', 'APPRART', 'NN'), 'right siblings': [(KON oder), (DM (PTKANT ja)), (SIMPX (C (KOUS wenn)) (MF (NX (PPER sie)) (PX (APPR mit) (NX (ART der) (NN bahn)))) (VC (VXFIN (VVFIN kommen)))), (MF (ADVX (ADV dann)) (ADVX (ADV naturlich)) (ADVX (PTKNEG nicht)) (PX (APPRART am) (NX (NN flughafen))))], 'left siblings': [], 'auto preterminal span': (0, 6), 'span': (0, 6), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(C ob)
			(MF
				(NX sie)
				(ADJX
					(ADJX zentral)
					[01;36m(PX[00m
						[01;36m(NF[00m
							(KON oder)
							(PX am flughafen)[01;36m)[00m[01;36m)[00m)))
		(KON oder)
		(DM ja)
		[01;36m(SIMPX[00m
			(SIMPX wenn sie mit der bahn kommen)
			(MF dann naturlich nicht am flughafen)[01;36m)[00m))
Step:PP Attachment
{'subtrees': ['KON', 'PX'], 'family': ['ADJX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'APPRART', 'NN'), 'right siblings': [], 'left siblings': [(ADJX (ADJD zentral))], 'auto preterminal span': (3, 6), 'span': (3, 6), 'parent': 'ADJX', 'label': 'NF', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(C ob)
			(MF
				(NX sie)
				(ADJX
					(ADJX zentral)
					[01;36m(PX[00m
						(NF
							(KON oder)
							(PX am flughafen))[01;36m)[00m)))
		(KON oder)
		(DM ja)
		[01;36m(SIMPX[00m
			(SIMPX wenn sie mit der bahn kommen)
			(MF dann naturlich nicht am flughafen)[01;36m)[00m))
Step:Unary
{'subtrees': ['NF'], 'family': ['ADJX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'APPRART', 'NN'), 'right siblings': [], 'left siblings': [(ADJX (ADJD zentral))], 'auto preterminal span': (3, 6), 'span': (3, 6), 'parent': 'ADJX', 'label': 'PX', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX ob sie zentral oder am flughafen)
		(KON oder)
		(DM ja)
		[01;36m(SIMPX[00m
			(SIMPX wenn sie mit der bahn kommen)
			(MF dann naturlich nicht am flughafen)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['SIMPX', 'MF'], 'family': ['SIMPX', 'KON', 'DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'APPR', 'ART', 'NN', 'VVFIN', 'ADV', 'ADV', 'PTKNEG', 'APPRART', 'NN'), 'right siblings': [], 'left siblings': [(SIMPX (C (KOUS ob)) (MF (NX (PPER sie)) (ADJX (ADJX (ADJD zentral)) (PX (NF (KON oder) (PX (APPRART am) (NX (NN flughafen)))))))), (KON oder), (DM (PTKANT ja))], 'auto preterminal span': (8, 19), 'span': (8, 19), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP ob sie zentral oder am flughafen oder ja wenn sie mit der bahn kommen dann naturlich nicht am flughafen)

Sentence 810:
0 Initial errors
0 on fringe, 0 iterations

Sentence 811:
0 Initial errors
0 on fringe, 0 iterations

Sentence 812:
5 Initial errors
0 on fringe, 2 iterations
4 Error:UNSET move
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(LK habe)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX ich)
				(NX mir)
				(ADVX noch)[01;31m)[00m[01;31m)[00m
		[01;36m(NX[00m
			(PIAT keine) [01;33mMF)[00m[01;36m)[00m[01;36m)[00m
	(DM ja)
	(SIMPX habe ich mir noch keine gedanken drum gemacht))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'ADVX', 'PIAT'], 'mover info': [('PIAT', (4, 5))], 'old_family': ['SIMPX', 'PIAT', 'DM', 'SIMPX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('VAFIN', 'PPER', 'PRF', 'ADV', 'PIAT', 'PTKANT', 'VAFIN', 'PPER', 'PRF', 'ADV', 'PIAT', 'NN', 'PROP', 'VVPP'), 'start right siblings': ['DM', 'SIMPX'], 'end left siblings': ['NX', 'NX', 'ADVX'], 'auto preterminal span': (0, 14), 'movers': ['PIAT'], 'old_parent': 'TOP', 'POS confusion': ('PIAT', 'PIAT'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(LK habe)
		(MF
			(NX ich)
			(NX mir)
			(ADVX noch)
			[01;36m(NX[00m
				(PIAT keine)[01;36m)[00m))
	(DM ja)
	(SIMPX habe ich mir noch keine gedanken drum gemacht))
Step:Single Word Phrase
{'subtrees': ['PIAT'], 'family': ['NX', 'NX', 'ADVX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('PIAT',), 'right siblings': [], 'left siblings': [(NX (PPER ich)), (NX (PRF mir)), (ADVX (ADV noch))], 'auto preterminal span': (4, 5), 'span': (4, 5), 'parent': 'MF', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP habe ich mir noch keine ja habe ich mir noch keine gedanken drum gemacht)

Sentence 813:
0 Initial errors
0 on fringe, 0 iterations

Sentence 814:
0 Initial errors
0 on fringe, 0 iterations

Sentence 815:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK hatten)
		(MF sie da eines)
		(NF
			(R
				(C
					[01;31m(NX[00m
						(PRELS das)[01;31m)[00m)
				(MF sie mir)
				(VC empfehlen konnten)))))
Step:Single Word Phrase
{'subtrees': ['PRELS'], 'family': ['NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('PRELS',), 'right siblings': [], 'parent': 'C', 'auto preterminal span': (4, 5), 'span': (4, 5), 'left siblings': [], 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP hatten sie da eines das sie mir empfehlen konnten)

Sentence 816:
0 Initial errors
0 on fringe, 0 iterations

Sentence 817:
0 Initial errors
0 on fringe, 0 iterations

Sentence 818:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF sie)
		(LK sagten)
		(MF
			(ADVX gerade)
			[01;31m(NX[00m
				(ADVX nicht)
				(ADVX gerade)
				[01;36m(NX[00m
					(ART das)
					(NN billigste)[01;36m)[00m[01;31m)[00m)))
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'ADVX', 'ADVX', 'NX'], 'mover info': [('ADVX', (3, 4)), ('ADVX', (4, 5))], 'old_family': ['ADVX', 'ADVX', 'ART', 'NN'], 'start left siblings': [], 'auto preterminals': ('ADV', 'PTKNEG', 'ADV', 'ART', 'NN'), 'start right siblings': ['ART', 'NN'], 'end left siblings': ['ADVX'], 'auto preterminal span': (2, 7), 'movers': ['ADVX', 'ADVX'], 'old_parent': 'NX', 'end right siblings': ['NX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP sie sagten gerade nicht gerade das billigste)

Sentence 819:
0 Initial errors
0 on fringe, 0 iterations

Sentence 820:
9 Initial errors
0 on fringe, 6 iterations
4 Error:NP Attachment
1 Error:UNSET add
1 Error:UNSET remove
1 Error:PP Attachment
1 Error:UNSET remove
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(KOORD und)
		(VF das)
		(LK hatte)
		[01;31m(MF[00m [01;33m(MF[00m
			(ADVX halt)
			[01;31m(NX[00m [01;33m(NX[00m
				(NX eine preisklasse)
				[01;31m(PX[00m
					(APPR von)
					[01;31m(NX[00m
						(PX pro ubernachtung) [01;33mNX) MF) SIMPX)[00m
						[01;33m(NX[00m (NX einzelzimmer zweihundert funfundvierzig bis zweihundert funfundneunzig mark)[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(PX je nachdem)) [01;33mNX)[00m
Step:NP Attachment
{'new_parent': 'SIMPX', 'new_family': ['KOORD', 'VF', 'LK', 'MF', 'NX'], 'mover info': [('NX', (9, 16))], 'old_family': ['PX', 'NX'], 'start left siblings': ['PX'], 'auto preterminals': ('KON', 'PDS', 'VAFIN', 'ADV', 'ART', 'NN', 'APPR', 'APPR', 'NN', 'NN', 'CARD', 'CARD', 'APPR', 'CARD', 'CARD', 'NN'), 'start right siblings': [], 'end left siblings': ['KOORD', 'VF', 'LK', 'MF'], 'auto preterminal span': (0, 16), 'movers': ['NX'], 'old_parent': 'NX', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(KOORD und)
			(VF das)
			(LK hatte)
			(MF
				(ADVX halt)
				(NX
					(NX eine preisklasse)
					[01;31m(PX[00m
						(APPR von)
						[01;31m(NX[00m
							(PX
								(APPR pro)
								(NX ubernachtung))[01;31m)[00m[01;31m)[00m))[01;36m)[00m
		[01;33m(NX[00m (NX einzelzimmer zweihundert funfundvierzig bis zweihundert funfundneunzig mark)[01;31m)[00m
	(PX je nachdem)) [01;33mNX)[00m
Step:UNSET add
{'subtrees': ['KOORD', 'VF', 'LK', 'MF'], 'family': ['SIMPX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PDS', 'VAFIN', 'ADV', 'ART', 'NN', 'APPR', 'APPR', 'NN'), 'right siblings': [(NX (NX (NN einzelzimmer)) (NX (ADJX (ADJX (CARD zweihundert) (CARD funfundvierzig)) (APPR bis) (ADJX (CARD zweihundert) (CARD funfundneunzig))) (NN mark)))], 'left siblings': [], 'auto preterminal span': (0, 9), 'span': (0, 9), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX
			(KOORD und)
			(VF das)
			(LK hatte)
			(MF
				(ADVX halt)
				(NX
					(NX eine preisklasse)
					[01;31m(PX[00m
						(APPR von)
						[01;31m(NX[00m
							(PX
								(APPR pro)
								(NX ubernachtung))[01;31m)[00m[01;31m)[00m)))
		[01;33m(NX[00m (NX einzelzimmer zweihundert funfundvierzig bis zweihundert funfundneunzig mark)[01;31m)[00m
	(PX je nachdem)) [01;33mNX)[00m
Step:UNSET remove
{'subtrees': ['SIMPX', 'NX'], 'family': ['SIMPX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PDS', 'VAFIN', 'ADV', 'ART', 'NN', 'APPR', 'APPR', 'NN', 'NN', 'CARD', 'CARD', 'APPR', 'CARD', 'CARD', 'NN', 'ADV', 'PROP'), 'right siblings': ['PX'], 'parent': 'TOP', 'auto preterminal span': (0, 18), 'span': (0, 16), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX
		(KOORD und)
		(VF das)
		(LK hatte)
		(MF
			(ADVX halt)
			(NX
				(NX eine preisklasse)
				[01;31m(PX[00m
					(APPR von)
					[01;31m(NX[00m
						(PX
							(APPR pro)
							(NX ubernachtung))[01;31m)[00m[01;31m)[00m)))
	[01;36m(NX[00m
		(NX einzelzimmer zweihundert funfundvierzig bis zweihundert funfundneunzig mark)
		(PX je nachdem)[01;36m)[00m)
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['SIMPX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'CARD', 'CARD', 'APPR', 'CARD', 'CARD', 'NN', 'ADV', 'PROP'), 'right siblings': [], 'left siblings': [(SIMPX (KOORD (KON und)) (VF (NX (PDS das))) (LK (VXFIN (VAFIN hatte))) (MF (ADVX (ADV halt)) (NX (NX (ART eine) (NN preisklasse)) (PX (APPR von) (NX (PX (APPR pro) (NX (NN ubernachtung))))))))], 'auto preterminal span': (9, 18), 'span': (9, 18), 'parent': 'TOP', 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(KOORD und)
		(VF das)
		(LK hatte)
		(MF
			(ADVX halt)
			(NX
				(NX eine preisklasse)
				[01;31m(PX[00m
					(APPR von)
					[01;31m(NX[00m
						(PX
							(APPR pro)
							(NX ubernachtung))[01;31m)[00m[01;31m)[00m)))
	(NX einzelzimmer zweihundert funfundvierzig bis zweihundert funfundneunzig mark je nachdem))
Step:UNSET remove
{'subtrees': ['APPR', 'NX'], 'family': ['NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'APPR', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (4, 9), 'span': (6, 9), 'left siblings': ['NX'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX
		(KOORD und)
		(VF das)
		(LK hatte)
		(MF
			(ADVX halt)
			(NX
				(NX eine preisklasse)
				(APPR von)
				[01;31m(NX[00m
					(PX
						(APPR pro)
						(NX ubernachtung))[01;31m)[00m)))
	(NX einzelzimmer zweihundert funfundvierzig bis zweihundert funfundneunzig mark je nachdem))
Step:Unary
{'subtrees': ['PX'], 'family': ['NX', 'APPR', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'APPR', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (4, 9), 'span': (7, 9), 'left siblings': ['NX', 'APPR'], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP und das hatte halt eine preisklasse von pro ubernachtung einzelzimmer zweihundert funfundvierzig bis zweihundert funfundneunzig mark je nachdem)

Sentence 821:
0 Initial errors
0 on fringe, 0 iterations

Sentence 822:
0 Initial errors
0 on fringe, 0 iterations

Sentence 823:
0 Initial errors
0 on fringe, 0 iterations

Sentence 824:
0 Initial errors
0 on fringe, 0 iterations

Sentence 825:
0 Initial errors
0 on fringe, 0 iterations

Sentence 826:
6 Initial errors
0 on fringe, 5 iterations
2 Error:Different label
1 Error:Single Word Phrase
1 Error:Single Word Phrase
1 Error:PP Attachment
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM wie gesagt)
	(SIMPX was war das jetzt)
	(SIMPX montag der vierte august wollte ich dann los)
	[01;31m(PX[00m
		(KON und)
		(ADVX dann)
		[01;36m(NX[00m [01;31m(ADJX[00m
			(NX drei vier tage)
			[01;36m(ADVX[00m
				(ADJD spater)[01;36m)[00m[01;31m)[00m[01;36m)[00m
		(ADVX wieder)
		(PX nach hause)[01;31m)[00m
	(SIMPX
		(VF dann)
		(LK ist)
		[01;36m(NX[00m
			(ART das)[01;36m)[00m
		[01;31m(MF[00m
			(NX die ausstellung)
			(ADVX vorbei)[01;31m)[00m))
Step:Different label
{'family': ['KON', 'ADVX', 'NX', 'ADVX', 'PX'], 'auto preterminal span': (16, 20), 'span': (16, 20), 'subtrees': ['NX', 'ADJD'], 'parent': 'PX', 'over_word': False, 'auto preterminals': ('CARD', 'CARD', 'NN', 'ADJD'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('ADJX', 'NX')}
(TOP
	(DM wie gesagt)
	(SIMPX was war das jetzt)
	(SIMPX montag der vierte august wollte ich dann los)
	[01;31m(PX[00m
		(KON und)
		(ADVX dann)
		(NX
			(NX drei vier tage)
			[01;36m(ADVX[00m
				(ADJD spater)[01;36m)[00m)
		(ADVX wieder)
		(PX nach hause)[01;31m)[00m
	(SIMPX
		(VF dann)
		(LK ist)
		[01;36m(NX[00m
			(ART das)[01;36m)[00m
		[01;31m(MF[00m
			(NX die ausstellung)
			(ADVX vorbei)[01;31m)[00m))
Step:Single Word Phrase
{'subtrees': ['ADJD'], 'family': ['NX', 'ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADJD',), 'right siblings': [], 'left siblings': [(NX (ADJX (ADJX (CARD drei)) (ADJX (CARD vier))) (NN tage))], 'auto preterminal span': (19, 20), 'span': (19, 20), 'parent': 'NX', 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM wie gesagt)
	(SIMPX was war das jetzt)
	(SIMPX montag der vierte august wollte ich dann los)
	[01;31m(PX[00m
		(KON und)
		(ADVX dann)
		(NX drei vier tage spater)
		(ADVX wieder)
		(PX nach hause)[01;31m)[00m
	(SIMPX
		(VF dann)
		(LK ist)
		[01;36m(NX[00m
			(ART das)[01;36m)[00m
		[01;31m(MF[00m
			(NX die ausstellung)
			(ADVX vorbei)[01;31m)[00m))
Step:Single Word Phrase
{'subtrees': ['ART'], 'family': ['VF', 'LK', 'NX', 'MF'], 'over_word': True, 'over words': True, 'auto preterminals': ('ART',), 'right siblings': [(MF (NX (ART die) (NN ausstellung)) (ADVX (ADV vorbei)))], 'left siblings': [(VF (ADVX (ADV dann))), (LK (VXFIN (VAFIN ist)))], 'auto preterminal span': (25, 26), 'span': (25, 26), 'parent': 'SIMPX', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM wie gesagt)
	(SIMPX was war das jetzt)
	(SIMPX montag der vierte august wollte ich dann los)
	[01;31m(PX[00m
		(KON und)
		(ADVX dann)
		(NX drei vier tage spater)
		(ADVX wieder)
		(PX nach hause)[01;31m)[00m
	(SIMPX
		(VF dann)
		(LK ist)
		(NX das)
		[01;31m(MF[00m
			(NX die ausstellung)
			(ADVX vorbei)[01;31m)[00m))
Step:PP Attachment
{'subtrees': ['KON', 'ADVX', 'NX', 'ADVX', 'PX'], 'family': ['DM', 'SIMPX', 'SIMPX', 'PX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'VVPP', 'PWS', 'VAFIN', 'PDS', 'ADV', 'NN', 'ART', 'ADJA', 'NN', 'VVFIN', 'PPER', 'ADV', 'PTKVZ', 'KON', 'ADV', 'CARD', 'CARD', 'NN', 'ADJD', 'ADV', 'APPR', 'NN', 'ADV', 'VAFIN', 'ART', 'ART', 'NN', 'ADV'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 29), 'span': (14, 23), 'left siblings': ['DM', 'SIMPX', 'SIMPX'], 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(DM wie gesagt)
	(SIMPX was war das jetzt)
	(SIMPX montag der vierte august wollte ich dann los)
	(KON und)
	(ADVX dann)
	(NX drei vier tage spater)
	(ADVX wieder)
	(PX nach hause)
	(SIMPX
		(VF dann)
		(LK ist)
		(NX das)
		[01;31m(MF[00m
			(NX die ausstellung)
			(ADVX vorbei)[01;31m)[00m))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX'], 'family': ['VF', 'LK', 'NX', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'ART', 'ART', 'NN', 'ADV'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (23, 29), 'span': (26, 29), 'left siblings': ['VF', 'LK', 'NX'], 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP wie gesagt was war das jetzt montag der vierte august wollte ich dann los und dann drei vier tage spater wieder nach hause dann ist das die ausstellung vorbei)

Sentence 827:
0 Initial errors
0 on fringe, 0 iterations

Sentence 828:
0 Initial errors
0 on fringe, 0 iterations

Sentence 829:
2 Initial errors
0 on fringe, 2 iterations
1 Error:UNSET remove
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK ware)
		(MF
			(NX ihnen)
			(NX [01;33m(NX[00m
				(NX die abfahrt)
				[01;31m(PX[00m
					(PX von bonn) [01;33mNX)[00m
					(NX sechs uhr funfundvierzig)[01;31m)[00m)
			(ADJX zu fruh))))
Step:UNSET remove
{'subtrees': ['PX', 'NX'], 'family': ['NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'NE', 'CARD', 'NN', 'CARD'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (2, 9), 'span': (4, 9), 'left siblings': ['NX'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX
		(LK ware)
		(MF
			(NX ihnen)
			(NX
				[01;36m(NX[00m
					(NX die abfahrt)
					(PX von bonn)[01;36m)[00m
				(NX sechs uhr funfundvierzig))
			(ADJX zu fruh))))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'NE'), 'right siblings': [(NX (NX (ADJX (CARD sechs)) (NN uhr)) (ADJX (CARD funfundvierzig)))], 'left siblings': [], 'auto preterminal span': (2, 6), 'span': (2, 6), 'parent': 'NX', 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP ware ihnen die abfahrt von bonn sechs uhr funfundvierzig zu fruh)

Sentence 830:
0 Initial errors
0 on fringe, 0 iterations

Sentence 831:
0 Initial errors
0 on fringe, 0 iterations

Sentence 832:
0 Initial errors
0 on fringe, 0 iterations

Sentence 833:
0 Initial errors
0 on fringe, 0 iterations

Sentence 834:
0 Initial errors
0 on fringe, 0 iterations

Sentence 835:
0 Initial errors
0 on fringe, 0 iterations

Sentence 836:
0 Initial errors
0 on fringe, 0 iterations

Sentence 837:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(DM[00m
		(KON und)[01;31m)[00m
	(DM ja))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['DM', 'DM'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON', 'PTKANT'), 'right siblings': ['DM'], 'parent': 'TOP', 'auto preterminal span': (0, 2), 'span': (0, 1), 'left siblings': [], 'label': 'DM', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP und ja)

Sentence 838:
0 Initial errors
0 on fringe, 0 iterations

Sentence 839:
0 Initial errors
0 on fringe, 0 iterations

Sentence 840:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Single Word Phrase
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK wird)
		(MF
			(NX
				[01;36m(NX[00m
					(ART das)[01;36m)[00m
				[01;36m(NX[00m
					(NN gepack)[01;36m)[00m))
		(VC nachgesendet))
	(SIMPX mus ich das selber schleppen))
Step:Single Word Phrase
{'subtrees': ['ART'], 'family': ['NX', 'NN'], 'over_word': True, 'over words': True, 'auto preterminals': ('ART',), 'right siblings': [(NN gepack)], 'left siblings': [], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'NX', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(SIMPX
		(LK wird)
		(MF
			(NX
				(NX das)
				[01;36m(NX[00m
					(NN gepack)[01;36m)[00m))
		(VC nachgesendet))
	(SIMPX mus ich das selber schleppen))
Step:Single Word Phrase
{'subtrees': ['NN'], 'family': ['NX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('NN',), 'right siblings': [], 'left siblings': [(NX (ART das))], 'auto preterminal span': (2, 3), 'span': (2, 3), 'parent': 'NX', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP wird das gepack nachgesendet mus ich das selber schleppen)

Sentence 841:
0 Initial errors
0 on fringe, 0 iterations

Sentence 842:
0 Initial errors
0 on fringe, 0 iterations

Sentence 843:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM nee)
	(SIMPX das musten sie)
	(SIMPX [01;33m(SIMPX[00m
		(VF das)
		(LK musten)
		[01;31m(FKOORD[00m
			(MVC sie schon selber zum zum bahnhof bringen) [01;33mSIMPX)[00m
			(KON und)
			(MVCN
				(MF von da aus dann halt)
				(VC
					(VXINF transportieren)
					[01;36m(VXFIN[00m [01;31m(VXINF[00m
						(VVINF lassen)[01;31m)[00m[01;36m)[00m)
				(NF vielleicht))[01;31m)[00m))
Step:Single Word Phrase
{'family': ['VXINF', 'VXFIN'], 'auto preterminal span': (20, 21), 'span': (20, 21), 'subtrees': ['VVINF'], 'parent': 'VC', 'over_word': True, 'auto preterminals': ('VVINF',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VXINF', 'VXFIN')}
(TOP
	(DM nee)
	(SIMPX das musten sie)
	(SIMPX [01;33m(SIMPX[00m
		(VF das)
		(LK musten)
		[01;31m(FKOORD[00m
			(MVC sie schon selber zum zum bahnhof bringen) [01;33mSIMPX)[00m
			(KON und)
			(MVCN von da aus dann halt transportieren lassen vielleicht)[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['MVC', 'KON', 'MVCN'], 'family': ['VF', 'LK', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VMFIN', 'PPER', 'ADV', 'ADV', 'APPRART', 'APPRART', 'NN', 'VVINF', 'KON', 'APPR', 'ADV', 'APZR', 'ADV', 'ADV', 'VVINF', 'VVINF', 'ADV'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (4, 22), 'span': (6, 22), 'left siblings': ['VF', 'LK'], 'label': 'FKOORD', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM nee)
	(SIMPX das musten sie)
	(SIMPX
		[01;36m(SIMPX[00m
			(VF das)
			(LK musten)
			(MVC sie schon selber zum zum bahnhof bringen)[01;36m)[00m
		(KON und)
		(MVCN von da aus dann halt transportieren lassen vielleicht)))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MVC'], 'family': ['SIMPX', 'KON', 'MVCN'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VMFIN', 'PPER', 'ADV', 'ADV', 'APPRART', 'APPRART', 'NN', 'VVINF'), 'right siblings': [(KON und), (MVCN (MF (PX (APPR von) (ADVX (ADV da)) (APZR aus)) (ADVX (ADV dann)) (ADVX (ADV halt))) (VC (VXINF (VVINF transportieren)) (VXFIN (VVINF lassen))) (NF (ADVX (ADV vielleicht))))], 'left siblings': [], 'auto preterminal span': (4, 13), 'span': (4, 13), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP nee das musten sie das musten sie schon selber zum zum bahnhof bringen und von da aus dann halt transportieren lassen vielleicht)

Sentence 844:
0 Initial errors
0 on fringe, 0 iterations

Sentence 845:
5 Initial errors
0 on fringe, 4 iterations
2 Error:UNSET move
1 Error:Modifier Attachment
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM prima)
	(SIMPX
		(VF dann)
		(LK bitte)
		[01;31m(MF[00m [01;33m(MF[00m
			(NX ich)
			(NX sie)
			(ADVX doch)[01;31m)[00m
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(MF[00m
					(NX
						(PDS das))[01;31m)[00m [01;33mMF)[00m
				(VC zu buchen)[01;31m)[00m[01;31m)[00m)
	(DM ja))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['MF', 'NX'], 'mover info': [('MF', (4, 7))], 'old_family': ['VF', 'LK', 'MF', 'NF'], 'start left siblings': ['VF', 'LK'], 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'PPER', 'ADV', 'PDS', 'PTKZU', 'VVINF'), 'start right siblings': ['NF'], 'end left siblings': [], 'auto preterminal span': (2, 10), 'movers': ['MF'], 'old_parent': 'SIMPX', 'end right siblings': ['NX'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM ja)
	(DM prima)
	(SIMPX
		(VF dann)
		(LK bitte)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(MF
					[01;31m(MF[00m
						(NX ich)
						(NX sie)
						(ADVX doch)[01;31m)[00m
					(NX das))
				(VC zu buchen)[01;31m)[00m[01;31m)[00m)
	(DM ja))
Step:Modifier Attachment
{'subtrees': ['NX', 'NX', 'ADVX'], 'family': ['MF', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'PPER', 'ADV', 'PDS'), 'right siblings': ['NX'], 'parent': 'MF', 'auto preterminal span': (4, 8), 'span': (4, 7), 'left siblings': [], 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(DM prima)
	(SIMPX
		(VF dann)
		(LK bitte)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(MF ich sie doch das)
				(VC zu buchen)[01;31m)[00m[01;31m)[00m)
	(DM ja))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VF', 'LK', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'PPER', 'ADV', 'PDS', 'PTKZU', 'VVINF'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (2, 10), 'span': (4, 10), 'left siblings': ['VF', 'LK'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(DM prima)
	(SIMPX
		(VF dann)
		(LK bitte)
		[01;31m(SIMPX[00m
			(MF ich sie doch das)
			(VC zu buchen)[01;31m)[00m)
	(DM ja))
Step:UNSET remove
{'subtrees': ['MF', 'VC'], 'family': ['VF', 'LK', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'PPER', 'ADV', 'PDS', 'PTKZU', 'VVINF'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (2, 10), 'span': (4, 10), 'left siblings': ['VF', 'LK'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ja prima dann bitte ich sie doch das zu buchen ja)

Sentence 846:
0 Initial errors
0 on fringe, 0 iterations

Sentence 847:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Single Word Phrase
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM sicher)
	(DM herr klein)
	(SIMPX
		(VF ich)
		(LK mache)
		[01;31m(MF[00m
			(NX
				(PDS das))[01;31m)[00m
		[01;36m(ADJX[00m [01;31m(VC[00m
			(PTKVZ fertig)[01;31m)[00m[01;36m)[00m)
	(SIMPX
		(KOORD und)
		[01;36m(SIMPX[00m
			(VF dann)
			(LK werde)
			(MF ich sie noch mal)
			(VC anrufen)[01;36m)[00m))
Step:Single Word Phrase
{'family': ['VF', 'LK', 'MF', 'ADJX'], 'auto preterminal span': (7, 8), 'span': (7, 8), 'subtrees': ['PTKVZ'], 'parent': 'SIMPX', 'over_word': True, 'auto preterminals': ('PTKVZ',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VC', 'ADJX')}
(TOP
	(DM ja)
	(DM sicher)
	(DM herr klein)
	(SIMPX
		(VF ich)
		(LK mache)
		[01;31m(MF[00m
			(NX
				(PDS das))[01;31m)[00m
		(ADJX fertig))
	(SIMPX
		(KOORD und)
		[01;36m(SIMPX[00m
			(VF dann)
			(LK werde)
			(MF ich sie noch mal)
			(VC anrufen)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'PPER', 'ADV', 'ADV', 'VVINF'), 'right siblings': [], 'left siblings': [(KOORD (KON und))], 'auto preterminal span': (9, 16), 'span': (9, 16), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	(DM sicher)
	(DM herr klein)
	(SIMPX
		(VF ich)
		(LK mache)
		[01;31m(MF[00m
			(NX
				(PDS das))[01;31m)[00m
		(ADJX fertig))
	(SIMPX und dann werde ich sie noch mal anrufen))
Step:Unary
{'subtrees': ['NX'], 'family': ['VF', 'LK', 'MF', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'PDS', 'PTKVZ'), 'right siblings': ['ADJX'], 'parent': 'SIMPX', 'auto preterminal span': (4, 8), 'span': (6, 7), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ja sicher herr klein ich mache das fertig und dann werde ich sie noch mal anrufen)

Sentence 848:
0 Initial errors
0 on fringe, 0 iterations

Sentence 849:
0 Initial errors
0 on fringe, 0 iterations

Sentence 850:
0 Initial errors
0 on fringe, 0 iterations

Sentence 851:
0 Initial errors
0 on fringe, 0 iterations

Sentence 852:
0 Initial errors
0 on fringe, 0 iterations

Sentence 853:
0 Initial errors
0 on fringe, 0 iterations

Sentence 854:
0 Initial errors
0 on fringe, 0 iterations

Sentence 855:
0 Initial errors
0 on fringe, 0 iterations

Sentence 856:
13 Initial errors
0 on fringe, 10 iterations
2 Error:Single Word Phrase
2 Error:Single Word Phrase
2 Error:Clause Attachment
1 Error:UNSET add
1 Error:UNSET add
1 Error:Unary
1 Error:Unary
1 Error:Unary
1 Error:UNSET add
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX
			(VF ich)
			[01;36m(LKMVCN[00m
				(LK habe)
				(VC gehort)
				(NF
					(SIMPX
						(VF wir)
						[01;36m(LKMVC[00m
							(LK sollen)
							(MF zusammen)
							(VC verreisen)
							[01;36m(SIMPX[00m
								(NF
									[01;36m(MF[00m
										(PX
											(APPR nach)
											(NX hannover))[01;36m)[00m
									[01;36m(VC[00m [01;36m(VXINF[00m [01;31m(ADJX[00m
										(ADJD geschaftlich)[01;31m)[00m[01;36m)[00m[01;36m)[00m)[01;36m)[00m[01;36m)[00m))[01;36m)[00m)
		[01;31m(SIMPX[00m
			[01;31m(KOORD[00m
				(KON und)[01;31m)[00m
			[01;36m(SIMPX[00m
				(LK ware)
				(MF doch gut)
				(NF
					(SIMPX
						(C wenn)
						(FKOORD
							(MVC wir uns eben zusammensetzen)
							(KON und)
							(MVC
								(MF die sache)
								[01;36m(VXINF[00m
									(VC
										[01;31m(VXFIN[00m
											(VVFIN klaren)[01;31m)[00m)[01;36m)[00m))))[01;36m)[00m[01;31m)[00m)[01;36m)[00m
Step:Single Word Phrase
{'family': ['PX', 'VXINF'], 'auto preterminal span': (9, 10), 'span': (9, 10), 'subtrees': ['ADJD'], 'parent': 'NF', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'VXINF')}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX
			(VF ich)
			[01;36m(LKMVCN[00m
				(LK habe)
				(VC gehort)
				(NF
					(SIMPX
						(VF wir)
						[01;36m(LKMVC[00m
							(LK sollen)
							(MF zusammen)
							(VC verreisen)
							[01;36m(SIMPX[00m
								(NF
									[01;36m(MF[00m
										(PX
											(APPR nach)
											(NX hannover))[01;36m)[00m
									[01;36m(VC[00m
										(VXINF
											(ADJD geschaftlich))[01;36m)[00m)[01;36m)[00m[01;36m)[00m))[01;36m)[00m)
		[01;31m(SIMPX[00m
			[01;31m(KOORD[00m
				(KON und)[01;31m)[00m
			[01;36m(SIMPX[00m
				(LK ware)
				(MF doch gut)
				(NF
					(SIMPX
						(C wenn)
						(FKOORD
							(MVC wir uns eben zusammensetzen)
							(KON und)
							(MVC
								(MF die sache)
								[01;36m(VXINF[00m
									(VC
										[01;31m(VXFIN[00m
											(VVFIN klaren)[01;31m)[00m)[01;36m)[00m))))[01;36m)[00m[01;31m)[00m)[01;36m)[00m
Step:Single Word Phrase
{'family': ['VXINF'], 'auto preterminal span': (22, 23), 'span': (22, 23), 'subtrees': ['VVFIN'], 'parent': 'VC', 'over_word': True, 'auto preterminals': ('VVFIN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VXFIN', 'VXINF')}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX
			(VF ich)
			[01;36m(LKMVCN[00m
				(LK habe)
				(VC gehort)
				(NF
					(SIMPX
						(VF wir)
						[01;36m(LKMVC[00m
							(LK sollen)
							(MF zusammen)
							(VC verreisen)
							[01;36m(SIMPX[00m
								(NF
									[01;36m(MF[00m
										(PX
											(APPR nach)
											(NX hannover))[01;36m)[00m
									[01;36m(VC[00m
										(VXINF
											(ADJD geschaftlich))[01;36m)[00m)[01;36m)[00m[01;36m)[00m))[01;36m)[00m)
		[01;31m(SIMPX[00m
			[01;31m(KOORD[00m
				(KON und)[01;31m)[00m
			[01;36m(SIMPX[00m
				(LK ware)
				(MF doch gut)
				(NF wenn wir uns eben zusammensetzen und die sache klaren)[01;36m)[00m[01;31m)[00m)[01;36m)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'KOORD', 'LK', 'MF', 'NF'], 'mover info': [('SIMPX', (0, 10))], 'old_family': ['SIMPX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('PPER', 'VAFIN', 'VVPP', 'PPER', 'VMFIN', 'ADV', 'VVINF', 'APPR', 'NE', 'ADJD', 'KON', 'VAFIN', 'ADV', 'ADJD', 'KOUS', 'PPER', 'PRF', 'ADV', 'VVFIN', 'KON', 'ART', 'NN', 'VVFIN'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 23), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': ['KOORD', 'LK', 'MF', 'NF'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(SIMPX
			(VF ich)
			[01;36m(LKMVCN[00m
				(LK habe)
				(VC gehort)
				(NF
					(SIMPX
						(VF wir)
						[01;36m(LKMVC[00m
							(LK sollen)
							(MF zusammen)
							(VC verreisen)
							[01;36m(SIMPX[00m
								(NF
									[01;36m(MF[00m
										(PX
											(APPR nach)
											(NX hannover))[01;36m)[00m
									[01;36m(VC[00m
										(VXINF
											(ADJD geschaftlich))[01;36m)[00m)[01;36m)[00m[01;36m)[00m))[01;36m)[00m)
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(LK ware)
			(MF doch gut)
			(NF wenn wir uns eben zusammensetzen und die sache klaren)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['LK', 'VC', 'NF'], 'family': ['VF', 'LKMVCN'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'VVPP', 'PPER', 'VMFIN', 'ADV', 'VVINF', 'APPR', 'NE', 'ADJD'), 'right siblings': [], 'left siblings': [(VF (NX (PPER ich)))], 'auto preterminal span': (1, 10), 'span': (1, 10), 'parent': 'SIMPX', 'label': 'LKMVCN', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(VF ich)
			(LKMVCN
				(LK habe)
				(VC gehort)
				(NF
					(SIMPX
						(VF wir)
						[01;36m(LKMVC[00m
							(LK sollen)
							(MF zusammen)
							(VC verreisen)
							[01;36m(SIMPX[00m
								(NF
									[01;36m(MF[00m
										(PX
											(APPR nach)
											(NX hannover))[01;36m)[00m
									[01;36m(VC[00m
										(VXINF
											(ADJD geschaftlich))[01;36m)[00m)[01;36m)[00m[01;36m)[00m))))
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(LK ware)
			(MF doch gut)
			(NF wenn wir uns eben zusammensetzen und die sache klaren)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['LK', 'MF', 'VC', 'NF'], 'family': ['VF', 'LKMVC'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'ADV', 'VVINF', 'APPR', 'NE', 'ADJD'), 'right siblings': [], 'left siblings': [(VF (NX (PPER wir)))], 'auto preterminal span': (4, 10), 'span': (4, 10), 'parent': 'SIMPX', 'label': 'LKMVC', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(VF ich)
			(LKMVCN
				(LK habe)
				(VC gehort)
				(NF
					(SIMPX
						(VF wir)
						(LKMVC
							(LK sollen)
							(MF zusammen)
							(VC verreisen)
							[01;36m(SIMPX[00m
								(NF
									[01;36m(MF[00m
										(PX
											(APPR nach)
											(NX hannover))[01;36m)[00m
									[01;36m(VC[00m
										(VXINF
											(ADJD geschaftlich))[01;36m)[00m)[01;36m)[00m)))))
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(LK ware)
			(MF doch gut)
			(NF wenn wir uns eben zusammensetzen und die sache klaren)[01;36m)[00m))
Step:Unary
{'subtrees': ['PX'], 'family': ['MF', 'VXINF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NE'), 'right siblings': [(VXINF (ADJD geschaftlich))], 'left siblings': [], 'auto preterminal span': (7, 9), 'span': (7, 9), 'parent': 'NF', 'label': 'MF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(VF ich)
			(LKMVCN
				(LK habe)
				(VC gehort)
				(NF
					(SIMPX
						(VF wir)
						(LKMVC
							(LK sollen)
							(MF zusammen)
							(VC verreisen)
							[01;36m(SIMPX[00m
								(NF
									(MF nach hannover)
									[01;36m(VC[00m
										(VXINF
											(ADJD geschaftlich))[01;36m)[00m)[01;36m)[00m)))))
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(LK ware)
			(MF doch gut)
			(NF wenn wir uns eben zusammensetzen und die sache klaren)[01;36m)[00m))
Step:Unary
{'subtrees': ['NF'], 'family': ['LK', 'MF', 'VC', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NE', 'ADJD'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VMFIN sollen))), (MF (ADVX (ADV zusammen))), (VC (VXINF (VVINF verreisen)))], 'auto preterminal span': (7, 10), 'span': (7, 10), 'parent': 'LKMVC', 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(VF ich)
			(LKMVCN
				(LK habe)
				(VC gehort)
				(NF
					(SIMPX
						(VF wir)
						(LKMVC
							(LK sollen)
							(MF zusammen)
							(VC verreisen)
							(SIMPX
								(NF
									(MF nach hannover)
									[01;36m(VC[00m
										(VXINF
											(ADJD geschaftlich))[01;36m)[00m)))))))
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(LK ware)
			(MF doch gut)
			(NF wenn wir uns eben zusammensetzen und die sache klaren)[01;36m)[00m))
Step:Unary
{'subtrees': ['VXINF'], 'family': ['MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJD',), 'right siblings': [], 'left siblings': [(MF (PX (APPR nach) (NX (NE hannover))))], 'auto preterminal span': (9, 10), 'span': (9, 10), 'parent': 'NF', 'label': 'VC', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX ich habe gehort wir sollen zusammen verreisen nach hannover geschaftlich)
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		[01;36m(SIMPX[00m
			(LK ware)
			(MF doch gut)
			(NF wenn wir uns eben zusammensetzen und die sache klaren)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['LK', 'MF', 'NF'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'ADV', 'ADJD', 'KOUS', 'PPER', 'PRF', 'ADV', 'VVFIN', 'KON', 'ART', 'NN', 'VVFIN'), 'right siblings': [], 'left siblings': [(SIMPX (VF (NX (PPER ich))) (LKMVCN (LK (VXFIN (VAFIN habe))) (VC (VXINF (VVPP gehort))) (NF (SIMPX (VF (NX (PPER wir))) (LKMVC (LK (VXFIN (VMFIN sollen))) (MF (ADVX (ADV zusammen))) (VC (VXINF (VVINF verreisen))) (SIMPX (NF (MF (PX (APPR nach) (NX (NE hannover)))) (VC (VXINF (ADJD geschaftlich)))))))))), (KOORD (KON und))], 'auto preterminal span': (11, 23), 'span': (11, 23), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX ich habe gehort wir sollen zusammen verreisen nach hannover geschaftlich)
		[01;31m(KOORD[00m
			(KON und)[01;31m)[00m
		(SIMPX ware doch gut wenn wir uns eben zusammensetzen und die sache klaren)))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('PPER', 'VAFIN', 'VVPP', 'PPER', 'VMFIN', 'ADV', 'VVINF', 'APPR', 'NE', 'ADJD', 'KON', 'VAFIN', 'ADV', 'ADJD', 'KOUS', 'PPER', 'PRF', 'ADV', 'VVFIN', 'KON', 'ART', 'NN', 'VVFIN'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (0, 23), 'span': (10, 11), 'left siblings': ['SIMPX'], 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP ich habe gehort wir sollen zusammen verreisen nach hannover geschaftlich und ware doch gut wenn wir uns eben zusammensetzen und die sache klaren)

Sentence 857:
0 Initial errors
0 on fringe, 0 iterations

Sentence 858:
3 Initial errors
0 on fringe, 3 iterations
1 Error:UNSET add
1 Error:UNSET remove
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX musten uns das zu machen)
	(DM also)
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF ich)
			(LK habe)
			(MF hier schon eine liste)
			(VC liegen)[01;36m)[00m
		(DM und zwar)
		[01;31m(NF[00m
			(NX
				(NX der zugverbindungen)
				(PX von bonn nach hannover))[01;31m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['SIMPX', 'DM', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'ADV', 'ART', 'NN', 'VVINF'), 'right siblings': [(DM (KON und) (ADVX (ADV zwar))), (NF (NX (NX (ART der) (NN zugverbindungen)) (PX (PX (APPR von) (NX (NE bonn))) (PX (APPR nach) (NX (NE hannover))))))], 'left siblings': [], 'auto preterminal span': (6, 13), 'span': (6, 13), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX musten uns das zu machen)
	(DM also)
	[01;31m(SIMPX[00m
		(SIMPX ich habe hier schon eine liste liegen)
		(DM und zwar)
		[01;31m(NF[00m
			(NX
				(NX der zugverbindungen)
				(PX von bonn nach hannover))[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['SIMPX', 'DM', 'NF'], 'family': ['SIMPX', 'DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PRF', 'PDS', 'PTKZU', 'VVINF', 'ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'ART', 'NN', 'VVINF', 'KON', 'ADV', 'ART', 'NN', 'APPR', 'NE', 'APPR', 'NE'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 21), 'span': (6, 21), 'left siblings': ['SIMPX', 'DM'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX musten uns das zu machen)
	(DM also)
	(SIMPX ich habe hier schon eine liste liegen)
	(DM und zwar)
	[01;31m(NF[00m
		(NX
			(NX der zugverbindungen)
			(PX von bonn nach hannover))[01;31m)[00m)
Step:Unary
{'subtrees': ['NX'], 'family': ['SIMPX', 'DM', 'SIMPX', 'DM', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PRF', 'PDS', 'PTKZU', 'VVINF', 'ADV', 'PPER', 'VAFIN', 'ADV', 'ADV', 'ART', 'NN', 'VVINF', 'KON', 'ADV', 'ART', 'NN', 'APPR', 'NE', 'APPR', 'NE'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 21), 'span': (15, 21), 'left siblings': ['SIMPX', 'DM', 'SIMPX', 'DM'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP musten uns das zu machen also ich habe hier schon eine liste liegen und zwar der zugverbindungen von bonn nach hannover)

Sentence 859:
0 Initial errors
0 on fringe, 0 iterations

Sentence 860:
0 Initial errors
0 on fringe, 0 iterations

Sentence 861:
0 Initial errors
0 on fringe, 0 iterations

Sentence 862:
0 Initial errors
0 on fringe, 0 iterations

Sentence 863:
0 Initial errors
0 on fringe, 0 iterations

Sentence 864:
0 Initial errors
0 on fringe, 0 iterations

Sentence 865:
0 Initial errors
0 on fringe, 0 iterations

Sentence 866:
0 Initial errors
0 on fringe, 0 iterations

Sentence 867:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		(VF ich)
		(LK wurde)
		(VC sagen)
		(NF
			(SIMPX
				(VF wir)
				(LK wurden)
				(MF
					[01;36m(ADVX[00m [01;31m(ADJX[00m
						(ADJD besser)[01;31m)[00m[01;36m)[00m
					(ADJX ziemlich fruh))
				(VC fahren)
				(NF damit wir morgens direkt da sind und dann direkt auf die messe losgehen konnen)))))
Step:Single Word Phrase
{'family': ['ADVX', 'ADJX'], 'auto preterminal span': (6, 7), 'span': (6, 7), 'subtrees': ['ADJD'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'ADVX')}
(TOP ja ich wurde sagen wir wurden besser ziemlich fruh fahren damit wir morgens direkt da sind und dann direkt auf die messe losgehen konnen)

Sentence 868:
5 Initial errors
0 on fringe, 2 iterations
4 Error:Modifier Attachment
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(LK denke)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX ich)
				(ADVX auch)[01;31m)[00m[01;31m)[00m
		[01;31m(ADJX[00m
			(ADVX aber)
			(ADVX nicht)
			(ADJX zu fruh)[01;31m)[00m[01;36m)[00m) [01;33mMF)[00m
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'ADJX'], 'mover info': [('ADJX', (4, 8))], 'old_family': ['DM', 'SIMPX', 'ADJX'], 'start left siblings': ['DM', 'SIMPX'], 'auto preterminals': ('PTKANT', 'VVFIN', 'PPER', 'ADV', 'ADV', 'PTKNEG', 'PTKA', 'ADJD'), 'start right siblings': [], 'end left siblings': ['NX', 'ADVX'], 'auto preterminal span': (0, 8), 'movers': ['ADJX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		(LK denke)
		(MF
			(NX ich)
			(ADVX auch)
			[01;31m(ADJX[00m
				(ADVX aber)
				(ADVX nicht)
				(ADJX zu fruh)[01;31m)[00m)))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX', 'ADJX'], 'family': ['NX', 'ADVX', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'ADV', 'PTKNEG', 'PTKA', 'ADJD'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 8), 'span': (4, 8), 'left siblings': ['NX', 'ADVX'], 'label': 'ADJX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP ja denke ich auch aber nicht zu fruh)

Sentence 869:
0 Initial errors
0 on fringe, 0 iterations

Sentence 870:
0 Initial errors
0 on fringe, 0 iterations

Sentence 871:
0 Initial errors
0 on fringe, 0 iterations

Sentence 872:
0 Initial errors
0 on fringe, 0 iterations

Sentence 873:
0 Initial errors
0 on fringe, 0 iterations

Sentence 874:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK habe)
		(MF
			(NX ich)
			(NX mir)
			(ADVX da)
			(NX mich)
			(ADVX da)
			(ADVX auch)
			(ADVX noch)
			[01;31m(ADJX[00m
				(NX so ein bischen)
				(ADJD schlau)[01;31m)[00m)
		(VC gemacht)))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADJD'], 'family': ['NX', 'NX', 'ADVX', 'NX', 'ADVX', 'ADVX', 'ADVX', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'PRF', 'ADV', 'PRF', 'ADV', 'ADV', 'ADV', 'ADV', 'ART', 'PIS', 'ADJD'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (4, 15), 'span': (11, 15), 'left siblings': ['NX', 'NX', 'ADVX', 'NX', 'ADVX', 'ADVX', 'ADVX'], 'label': 'ADJX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP ja und dann habe ich mir da mich da auch noch so ein bischen schlau gemacht)

Sentence 875:
0 Initial errors
0 on fringe, 0 iterations

Sentence 876:
0 Initial errors
0 on fringe, 0 iterations

Sentence 877:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK dachte)
		(MF
			[01;36m(NX[00m [01;31m(ADVX[00m
				(ADV mehr)[01;31m)[00m[01;36m)[00m
			(PX an theaterbesuch im ballhof)))
	(SIMPX da kommen auch die andern kollegen mit))
Step:Single Word Phrase
{'family': ['NX', 'PX'], 'auto preterminal span': (2, 3), 'span': (2, 3), 'subtrees': ['ADV'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'NX')}
(TOP ich dachte mehr an theaterbesuch im ballhof da kommen auch die andern kollegen mit)

Sentence 878:
0 Initial errors
0 on fringe, 0 iterations

Sentence 879:
0 Initial errors
0 on fringe, 0 iterations

Sentence 880:
0 Initial errors
0 on fringe, 0 iterations

Sentence 881:
0 Initial errors
0 on fringe, 0 iterations

Sentence 882:
0 Initial errors
0 on fringe, 0 iterations

Sentence 883:
0 Initial errors
0 on fringe, 0 iterations

Sentence 884:
0 Initial errors
0 on fringe, 0 iterations

Sentence 885:
7 Initial errors
0 on fringe, 1 iterations
7 Error:NP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP [01;33m(VF (NX (NX[00m
		(NX das)
		[01;31m(SIMPX[00m
			[01;31m(VF[00m
				[01;31m(NX[00m
					(NX was) [01;33mNX)[00m
					(PX fur ein hotel)[01;31m)[00m[01;31m)[00m [01;33mNX) VF)[00m
			(LK wurden)
			(MF sie)
			(VC vorziehen)[01;31m)[00m)[01;36m)[00m
Step:NP Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'NX', 'PX'], 'mover info': [('NX', (0, 1))], 'old_family': ['NX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('PDS', 'PWS', 'APPR', 'ART', 'NN', 'VAFIN', 'PPER', 'VVINF'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 8), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'TOP', 'POS confusion': ('PDS', 'PDS'), 'added and moved': True, 'end right siblings': ['NX', 'PX'], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'NX'}
(TOP das was fur ein hotel wurden sie vorziehen)

Sentence 886:
0 Initial errors
0 on fringe, 0 iterations

Sentence 887:
0 Initial errors
0 on fringe, 0 iterations

Sentence 888:
0 Initial errors
0 on fringe, 0 iterations

Sentence 889:
0 Initial errors
0 on fringe, 0 iterations

Sentence 890:
0 Initial errors
0 on fringe, 0 iterations

Sentence 891:
0 Initial errors
0 on fringe, 0 iterations

Sentence 892:
0 Initial errors
0 on fringe, 0 iterations

Sentence 893:
0 Initial errors
0 on fringe, 0 iterations

Sentence 894:
0 Initial errors
0 on fringe, 0 iterations

Sentence 895:
1 Initial errors
0 on fringe, 1 iterations
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(VF der)
			(LK meinte)[01;36m)[00m
		(NF das ware in ordnung)))
Step:UNSET add
{'subtrees': ['VF', 'LK'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VVFIN'), 'right siblings': [(NF (SIMPX (VF (NX (PDS das))) (LK (VXFIN (VAFIN ware))) (MF (PX (APPR in) (NX (NN ordnung))))))], 'left siblings': [], 'auto preterminal span': (0, 2), 'span': (0, 2), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP der meinte das ware in ordnung)

Sentence 896:
0 Initial errors
0 on fringe, 0 iterations

Sentence 897:
0 Initial errors
0 on fringe, 0 iterations

Sentence 898:
0 Initial errors
0 on fringe, 0 iterations

Sentence 899:
0 Initial errors
0 on fringe, 0 iterations

Sentence 900:
0 Initial errors
0 on fringe, 0 iterations

Sentence 901:
0 Initial errors
0 on fringe, 0 iterations

Sentence 902:
0 Initial errors
0 on fringe, 0 iterations

Sentence 903:
0 Initial errors
0 on fringe, 0 iterations

Sentence 904:
6 Initial errors
0 on fringe, 4 iterations
2 Error:Single Word Phrase
2 Error:NP Attachment
1 Error:NP Internal Structure
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF dann)
		(LK mache)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX ich)
				[01;33m(NX[00m (NX die sache)[01;31m)[00m
			[01;36m(NX[00m [01;31m(VC[00m
				(PTKVZ feste)[01;31m)[00m [01;33mNX)[00m[01;36m)[00m
			[01;31m(NF[00m
				(PX
					(APPRART im)
					(NX reiseburo))[01;31m)[00m[01;36m)[00m))
Step:Single Word Phrase
{'family': ['VF', 'LK', 'MF', 'NX', 'NF'], 'auto preterminal span': (5, 6), 'span': (5, 6), 'subtrees': ['PTKVZ'], 'parent': 'SIMPX', 'over_word': True, 'auto preterminals': ('PTKVZ',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VC', 'NX')}
(TOP
	(SIMPX
		(VF dann)
		(LK mache)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX ich)
				[01;33m(NX[00m (NX die sache)[01;31m)[00m
			(NX feste) [01;33mNX)[00m
			[01;31m(NF[00m
				(PX
					(APPRART im)
					(NX reiseburo))[01;31m)[00m[01;36m)[00m))
Step:NP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'NX', 'NF'], 'mover info': [('NX', (5, 6)), ('NF', (6, 8))], 'old_family': ['VF', 'LK', 'MF', 'NX', 'NF'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'ART', 'NN', 'PTKVZ', 'APPRART', 'NN'), 'start right siblings': [], 'end left siblings': ['NX', 'NX'], 'auto preterminal span': (0, 8), 'movers': ['NX', 'NF'], 'old_parent': 'SIMPX', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(VF dann)
		(LK mache)
		(MF
			(NX ich)
			[01;36m(NX[00m
				(NX die sache)
				(NX feste)[01;36m)[00m
			[01;31m(NF[00m
				(PX
					(APPRART im)
					(NX reiseburo))[01;31m)[00m)))
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['NX', 'NX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'PTKVZ'), 'right siblings': [(NF (PX (APPRART im) (NX (NN reiseburo))))], 'left siblings': [(NX (PPER ich))], 'auto preterminal span': (3, 6), 'span': (3, 6), 'parent': 'MF', 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'add'}
(TOP
	(SIMPX
		(VF dann)
		(LK mache)
		(MF
			(NX ich)
			(NX die sache feste)
			[01;31m(NF[00m
				(PX
					(APPRART im)
					(NX reiseburo))[01;31m)[00m)))
Step:Unary
{'subtrees': ['PX'], 'family': ['NX', 'NX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ART', 'NN', 'PTKVZ', 'APPRART', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 8), 'span': (6, 8), 'left siblings': ['NX', 'NX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP dann mache ich die sache feste im reiseburo)

Sentence 905:
0 Initial errors
0 on fringe, 0 iterations

Sentence 906:
0 Initial errors
0 on fringe, 0 iterations

Sentence 907:
0 Initial errors
0 on fringe, 0 iterations

Sentence 908:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Single Word Phrase
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(DM[00m
		(ADVX dann)
		[01;36m(DM[00m
			(PTKANT ja)[01;36m)[00m[01;31m)[00m
	(SIMPX ich habe ja noch eine telefonnummer von dem hotel))
Step:Single Word Phrase
{'subtrees': ['PTKANT'], 'family': ['ADVX', 'DM'], 'over_word': True, 'over words': True, 'auto preterminals': ('PTKANT',), 'right siblings': [], 'left siblings': [(ADVX (ADV dann))], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'DM', 'label': 'DM', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	[01;31m(DM[00m
		(ADVX dann)
		(DM ja)[01;31m)[00m
	(SIMPX ich habe ja noch eine telefonnummer von dem hotel))
Step:UNSET remove
{'subtrees': ['ADVX', 'DM'], 'family': ['DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PTKANT', 'PPER', 'VAFIN', 'ADV', 'ADV', 'ART', 'NN', 'APPR', 'ART', 'NN'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 11), 'span': (0, 2), 'left siblings': [], 'label': 'DM', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP dann ja ich habe ja noch eine telefonnummer von dem hotel)

Sentence 909:
0 Initial errors
0 on fringe, 0 iterations

Sentence 910:
0 Initial errors
0 on fringe, 0 iterations

Sentence 911:
0 Initial errors
0 on fringe, 0 iterations

Sentence 912:
0 Initial errors
0 on fringe, 0 iterations

Sentence 913:
0 Initial errors
0 on fringe, 0 iterations

Sentence 914:
0 Initial errors
0 on fringe, 0 iterations

Sentence 915:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM
		[01;36m(DM[00m
			(ITJ tschus)[01;36m)[00m
		(ADVX dann)))
Step:Single Word Phrase
{'subtrees': ['ITJ'], 'family': ['DM', 'ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ITJ',), 'right siblings': [(ADVX (ADV dann))], 'left siblings': [], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'DM', 'label': 'DM', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP ja tschus dann)

Sentence 916:
0 Initial errors
0 on fringe, 0 iterations

Sentence 917:
5 Initial errors
0 on fringe, 4 iterations
2 Error:NP Attachment
1 Error:Unary
1 Error:Unary
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(DM[00m
		[01;31m(NX[00m
			(NX reiseagentur)
			[01;33m(NX[00m (NX maritim)[01;31m)[00m[01;31m)[00m
	[01;31m(DM[00m
		[01;31m(NX[00m
			(NX fischenbeck) [01;33mNX)[00m
			(PX am apparat)[01;31m)[00m[01;31m)[00m
	(DM guten tag))
Step:NP Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'NX', 'PX'], 'mover info': [('NX', (1, 2))], 'old_family': ['NX', 'NX'], 'start left siblings': ['NX'], 'auto preterminals': ('NN', 'NE', 'NE', 'APPRART', 'NN', 'ADJA', 'NN'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (0, 7), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'NX', 'POS confusion': ('NE', 'NE'), 'added and moved': True, 'end right siblings': ['NX', 'PX'], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'NX'}
(TOP
	[01;31m(DM[00m
		(NX
			(NN reiseagentur))[01;31m)[00m
	[01;31m(DM[00m
		[01;31m(NX[00m
			(NX maritim fischenbeck)
			(PX am apparat)[01;31m)[00m[01;31m)[00m
	(DM guten tag))
Step:Unary
{'subtrees': ['NX'], 'family': ['DM', 'DM', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'NE', 'NE', 'APPRART', 'NN', 'ADJA', 'NN'), 'right siblings': ['DM', 'DM'], 'parent': 'TOP', 'auto preterminal span': (0, 7), 'span': (0, 1), 'left siblings': [], 'label': 'DM', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(NX reiseagentur)
	[01;31m(DM[00m
		[01;31m(NX[00m
			(NX maritim fischenbeck)
			(PX am apparat)[01;31m)[00m[01;31m)[00m
	(DM guten tag))
Step:Unary
{'subtrees': ['NX', 'PX'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE', 'NE', 'APPRART', 'NN'), 'right siblings': [], 'parent': 'DM', 'auto preterminal span': (1, 5), 'span': (1, 5), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(NX reiseagentur)
	[01;31m(DM[00m
		(NX maritim fischenbeck)
		(PX am apparat)[01;31m)[00m
	(DM guten tag))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['NX', 'DM', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'NE', 'NE', 'APPRART', 'NN', 'ADJA', 'NN'), 'right siblings': ['DM'], 'parent': 'TOP', 'auto preterminal span': (0, 7), 'span': (1, 5), 'left siblings': ['NX'], 'label': 'DM', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP reiseagentur maritim fischenbeck am apparat guten tag)

Sentence 918:
5 Initial errors
0 on fringe, 4 iterations
2 Error:Single Word Phrase
1 Error:Unary
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM guten tag)
	(SIMPX
		(VF hier)
		(LK ist)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;36m(ADJX[00m [01;31m(NX[00m
					(NE meurer)[01;31m)[00m[01;36m)[00m
				[01;36m(NF[00m
					(PX
						(APPR aus)
						(NX bonn))[01;36m)[00m[01;31m)[00m[01;31m)[00m))
Step:Single Word Phrase
{'family': ['ADJX', 'PX'], 'auto preterminal span': (4, 5), 'span': (4, 5), 'subtrees': ['NE'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('NE',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP
	(DM guten tag)
	(SIMPX
		(VF hier)
		(LK ist)
		[01;31m(MF[00m
			[01;31m(NX[00m
				(ADJX meurer)
				[01;36m(NF[00m
					(PX
						(APPR aus)
						(NX bonn))[01;36m)[00m[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['PX'], 'family': ['ADJX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NE'), 'right siblings': [], 'left siblings': [(ADJX (NE meurer))], 'auto preterminal span': (5, 7), 'span': (5, 7), 'parent': 'NX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM guten tag)
	(SIMPX
		(VF hier)
		(LK ist)
		[01;31m(MF[00m
			[01;31m(NX[00m
				(ADJX meurer)
				(NF aus bonn)[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['NX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'NE', 'APPR', 'NE'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (2, 7), 'span': (4, 7), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM guten tag)
	(SIMPX
		(VF hier)
		(LK ist)
		[01;31m(NX[00m
			(ADJX meurer)
			(NF aus bonn)[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['ADJX', 'NF'], 'family': ['VF', 'LK', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'NE', 'APPR', 'NE'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (2, 7), 'span': (4, 7), 'left siblings': ['VF', 'LK'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP guten tag hier ist meurer aus bonn)

Sentence 919:
0 Initial errors
0 on fringe, 0 iterations

Sentence 920:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Single Word Phrase
1 Error:Unary
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM und zwar)
	(PX fur den funfzehnten juli)
	[01;36m(NF[00m
		(SIMPX
			(KOORD und)
			(VF ich)
			(LK muste)
			(MF
				[01;31m(PX[00m
					(PX um neun uhr morgens)
					[01;36m(ADJX[00m [01;31m(ADVX[00m
						(ADV ungefahr)[01;31m)[00m[01;36m)[00m[01;31m)[00m
				(ADVX da))
			(VC sein))[01;36m)[00m)
Step:Single Word Phrase
{'family': ['PX', 'ADJX'], 'auto preterminal span': (13, 14), 'span': (13, 14), 'subtrees': ['ADV'], 'parent': 'PX', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'ADJX')}
(TOP
	(DM und zwar)
	(PX fur den funfzehnten juli)
	[01;36m(NF[00m
		(SIMPX
			(KOORD und)
			(VF ich)
			(LK muste)
			(MF
				[01;31m(PX[00m
					(PX um neun uhr morgens)
					(ADJX ungefahr)[01;31m)[00m
				(ADVX da))
			(VC sein))[01;36m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['DM', 'PX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PPER', 'VMFIN', 'APPR', 'CARD', 'NN', 'ADV', 'ADV', 'ADV', 'VAINF'), 'right siblings': [], 'left siblings': [(DM (KON und) (ADVX (ADV zwar))), (PX (APPR fur) (NX (ART den) (ADJX (ADJA funfzehnten)) (NN juli)))], 'auto preterminal span': (6, 16), 'span': (6, 16), 'parent': 'TOP', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM und zwar)
	(PX fur den funfzehnten juli)
	(NF
		(SIMPX
			(KOORD und)
			(VF ich)
			(LK muste)
			(MF
				[01;31m(PX[00m
					(PX um neun uhr morgens)
					(ADJX ungefahr)[01;31m)[00m
				(ADVX da))
			(VC sein))))
Step:Modifier Attachment
{'subtrees': ['PX', 'ADJX'], 'family': ['PX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'CARD', 'NN', 'ADV', 'ADV', 'ADV'), 'right siblings': ['ADVX'], 'parent': 'MF', 'auto preterminal span': (9, 15), 'span': (9, 14), 'left siblings': [], 'label': 'PX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP und zwar fur den funfzehnten juli und ich muste um neun uhr morgens ungefahr da sein)

Sentence 921:
0 Initial errors
0 on fringe, 0 iterations

Sentence 922:
0 Initial errors
0 on fringe, 0 iterations

Sentence 923:
2 Initial errors
0 on fringe, 1 iterations
2 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX
		(VF
			(SIMPX
				(C wenn)
				(MF
					(NX ich)
					[01;31m(NX[00m
						(PX mit dem flug)
						[01;36m(NX[00m
							(PDS das)[01;36m)[00m[01;31m)[00m
					(PX an demselben tag))
				(VC packe)))
		(LK ginge)
		(MF das eigentlich auch)))
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'PX', 'NX', 'PX'], 'mover info': [('PX', (3, 6))], 'old_family': ['PX', 'PDS'], 'start left siblings': [], 'auto preterminals': ('PPER', 'APPR', 'ART', 'NN', 'PDS', 'APPR', 'PDAT', 'NN'), 'start right siblings': ['PDS'], 'end left siblings': ['NX'], 'auto preterminal span': (2, 10), 'movers': ['PX'], 'old_parent': 'NX', 'end right siblings': ['NX', 'PX'], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP also wenn ich mit dem flug das an demselben tag packe ginge das eigentlich auch)

Sentence 924:
8 Initial errors
0 on fringe, 2 iterations
7 Error:UNSET move
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK ist)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX es)
				(ADVX denn)
				[01;31m(NX[00m [01;33m(NX[00m
					(NX ein termin)
					[01;31m(PX[00m [01;33m(PX[00m
						(APPR unter)
						[01;33m(NX[00m (NX der woche)[01;31m)[00m[01;31m)[00m[01;31m)[00m
			[01;31m(NF[00m
				(NX
					(ART der)
					(ADJX funfzehnte)
					(NN juli))[01;31m)[00m[01;36m)[00m)) [01;33mNX) PX) NX)[00m
Step:UNSET move
{'new_parent': 'PX', 'new_family': ['APPR', 'NX', 'NF'], 'mover info': [('NF', (8, 11))], 'old_family': ['LK', 'MF', 'NF'], 'start left siblings': ['LK', 'MF'], 'auto preterminals': ('VAFIN', 'PPER', 'ADV', 'ART', 'NN', 'APPR', 'ART', 'NN', 'ART', 'ADJA', 'NN'), 'start right siblings': [], 'end left siblings': ['APPR', 'NX'], 'auto preterminal span': (0, 11), 'adding node already present': False, 'movers': ['NF'], 'old_parent': 'SIMPX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'NX'}
(TOP
	(SIMPX
		(LK ist)
		(MF
			(NX es)
			(ADVX denn)
			(NX
				(NX ein termin)
				(PX
					(APPR unter)
					(NX
						(NX der woche)
						[01;31m(NF[00m
							(NX
								(ART der)
								(ADJX funfzehnte)
								(NN juli))[01;31m)[00m))))))
Step:Unary
{'subtrees': ['NX'], 'family': ['NX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'ART', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (6, 11), 'span': (8, 11), 'left siblings': ['NX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ist es denn ein termin unter der woche der funfzehnte juli)

Sentence 925:
0 Initial errors
0 on fringe, 0 iterations

Sentence 926:
0 Initial errors
0 on fringe, 0 iterations

Sentence 927:
6 Initial errors
0 on fringe, 4 iterations
2 Error:PP Attachment
2 Error:PP Attachment
1 Error:NP Internal Structure
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX
		[01;31m(LV[00m
			(SIMPX
				(C wenn)
				(MF sie)
				(VC fliegen mochten))[01;31m)[00m
		(VF es)
		(LK gibt)
		(MF [01;33m(NX[00m
			(NX einen flug)
			[01;31m(NX[00m
				[01;31m(NX[00m
					(NX jeden tag) [01;33mNX)[00m
					[01;33m(PX (PX[00m (PX von montag bis freitag)[01;31m)[00m
				(PX um sieben uhr zehn)[01;31m)[00m [01;33mPX)[00m
			(PX von kolnbonn))) [01;33mPX)[00m
	(SIMPX und dann kommen sie in hannover um acht uhr zehn an))
Step:PP Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'PX', 'PX'], 'mover info': [('PX', (12, 16))], 'old_family': ['NX', 'PX'], 'start left siblings': ['NX'], 'auto preterminals': ('PIDAT', 'NN', 'APPR', 'NN', 'APPR', 'NN', 'APPR', 'CARD', 'NN', 'CARD'), 'start right siblings': [], 'end left siblings': ['NX'], 'auto preterminal span': (10, 20), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': ['PX'], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX
		[01;31m(LV[00m
			(SIMPX
				(C wenn)
				(MF sie)
				(VC fliegen mochten))[01;31m)[00m
		(VF es)
		(LK gibt)
		(MF [01;33m(NX[00m
			(NX einen flug)
			[01;31m(NX[00m
				(NX jeden tag) [01;33mNX)[00m
				[01;33m(PX[00m (PX von montag bis freitag um sieben uhr zehn)[01;31m)[00m
			(PX von kolnbonn))) [01;33mPX)[00m
	(SIMPX und dann kommen sie in hannover um acht uhr zehn an))
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'PX', 'PX'], 'mover info': [('PX', (12, 20))], 'old_family': ['NX', 'PX'], 'start left siblings': ['NX'], 'auto preterminals': ('ART', 'NN', 'PIDAT', 'NN', 'APPR', 'NN', 'APPR', 'NN', 'APPR', 'CARD', 'NN', 'CARD', 'APPR', 'NE'), 'start right siblings': [], 'end left siblings': ['NX', 'NX'], 'auto preterminal span': (8, 22), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': ['PX'], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX
		[01;31m(LV[00m
			(SIMPX
				(C wenn)
				(MF sie)
				(VC fliegen mochten))[01;31m)[00m
		(VF es)
		(LK gibt)
		(MF
			[01;36m(NX[00m
				(NX einen flug)
				(NX jeden tag)[01;36m)[00m
			(PX von montag bis freitag um sieben uhr zehn von kolnbonn)))
	(SIMPX und dann kommen sie in hannover um acht uhr zehn an))
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'PIDAT', 'NN'), 'right siblings': [(PX (PX (PX (PX (APPR von) (NX (NN montag))) (PX (APPR bis) (NX (NN freitag)))) (PX (APPR um) (NX (NX (ADJX (CARD sieben)) (NN uhr)) (ADJX (CARD zehn))))) (PX (APPR von) (NX (NE kolnbonn))))], 'left siblings': [], 'auto preterminal span': (8, 12), 'span': (8, 12), 'parent': 'MF', 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'add'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX
		[01;31m(LV[00m
			(SIMPX
				(C wenn)
				(MF sie)
				(VC fliegen mochten))[01;31m)[00m
		(VF es)
		(LK gibt)
		(MF einen flug jeden tag von montag bis freitag um sieben uhr zehn von kolnbonn))
	(SIMPX und dann kommen sie in hannover um acht uhr zehn an))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['LV', 'VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'VVINF', 'VMFIN', 'PPER', 'VVFIN', 'ART', 'NN', 'PIDAT', 'NN', 'APPR', 'NN', 'APPR', 'NN', 'APPR', 'CARD', 'NN', 'CARD', 'APPR', 'NE'), 'right siblings': ['VF', 'LK', 'MF'], 'parent': 'SIMPX', 'auto preterminal span': (2, 22), 'span': (2, 6), 'left siblings': [], 'label': 'LV', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ja also wenn sie fliegen mochten es gibt einen flug jeden tag von montag bis freitag um sieben uhr zehn von kolnbonn und dann kommen sie in hannover um acht uhr zehn an)

Sentence 928:
0 Initial errors
0 on fringe, 0 iterations

Sentence 929:
0 Initial errors
0 on fringe, 0 iterations

Sentence 930:
4 Initial errors
0 on fringe, 2 iterations
3 Error:PP Attachment
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK geht)
		(MF
			(ADVX auch)
			(ADVX irgendwie)
			(ADVX noch)
			[01;36m(NX[00m
				[01;31m(NX[00m
					(NX ein nachtexpres)
					(KON oder)
					[01;33m(PX[00m (ADVX so)[01;31m)[00m
				[01;31m(PX[00m
					(PROP dahin)[01;31m)[00m[01;36m)[00m))) [01;33mPX)[00m
Step:PP Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'KON', 'ADVX', 'PX'], 'mover info': [('PX', (8, 9))], 'old_family': ['ADVX', 'ADVX', 'ADVX', 'NX', 'PX'], 'start left siblings': ['ADVX', 'ADVX', 'ADVX', 'NX'], 'auto preterminals': ('ADV', 'ADV', 'ADV', 'ART', 'NN', 'KON', 'ADV', 'PROP'), 'start right siblings': [], 'end left siblings': ['NX', 'KON', 'ADVX'], 'auto preterminal span': (1, 9), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'MF', 'POS confusion': ('PROP', 'PROP'), 'added and moved': True, 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP
	(SIMPX
		(LK geht)
		(MF
			(ADVX auch)
			(ADVX irgendwie)
			(ADVX noch)
			(NX
				(NX ein nachtexpres)
				(KON oder)
				(PX
					(ADVX so)
					[01;31m(PX[00m
						(PROP dahin)[01;31m)[00m)))))
Step:Single Word Phrase
{'subtrees': ['PROP'], 'family': ['ADVX', 'PX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV', 'PROP'), 'right siblings': [], 'parent': 'PX', 'auto preterminal span': (7, 9), 'span': (8, 9), 'left siblings': ['ADVX'], 'label': 'PX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP geht auch irgendwie noch ein nachtexpres oder so dahin)

Sentence 931:
0 Initial errors
0 on fringe, 0 iterations

Sentence 932:
0 Initial errors
0 on fringe, 0 iterations

Sentence 933:
5 Initial errors
0 on fringe, 4 iterations
2 Error:Different label
1 Error:UNSET add
1 Error:Single Word Phrase
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX sie konnen nur tagsuber fahren)
	(SIMPX
		(VF der erste zug)
		(LK geht)
		[01;36m(MF[00m
			(MF um funf uhr zehn)
			(VC ab)
			(NF von bonn)[01;36m)[00m)
	(SIMPX
		(VF da)
		(FKOORD
			(LKMVCN musten sie allerdings umsteigen in dusseldorf hauptbahnhof)
			(KON und)
			[01;36m(LKM[00m [01;31m(LKVCN[00m
				(LK kamen)
				[01;31m(VC[00m
					(PTKVZ an)[01;31m)[00m
				[01;31m(NF[00m
					(PX um sechs uhr zehn)
					(PX in hannover)[01;31m)[00m[01;31m)[00m[01;36m)[00m)))
Step:Different label
{'family': ['LKMVCN', 'KON', 'LKM'], 'auto preterminal span': (26, 34), 'span': (26, 34), 'subtrees': ['LK', 'VC', 'NF'], 'parent': 'FKOORD', 'over_word': False, 'auto preterminals': ('VVFIN', 'PTKVZ', 'APPR', 'CARD', 'NN', 'CARD', 'APPR', 'NE'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('LKVCN', 'LKM')}
(TOP
	(DM also)
	(SIMPX sie konnen nur tagsuber fahren)
	(SIMPX
		(VF der erste zug)
		(LK geht)
		[01;36m(MF[00m
			(MF um funf uhr zehn)
			(VC ab)
			(NF von bonn)[01;36m)[00m)
	(SIMPX
		(VF da)
		(FKOORD
			(LKMVCN musten sie allerdings umsteigen in dusseldorf hauptbahnhof)
			(KON und)
			(LKM
				(LK kamen)
				[01;31m(VC[00m
					(PTKVZ an)[01;31m)[00m
				[01;31m(NF[00m
					(PX um sechs uhr zehn)
					(PX in hannover)[01;31m)[00m))))
Step:UNSET add
{'subtrees': ['MF', 'VC', 'NF'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'CARD', 'NN', 'CARD', 'PTKVZ', 'APPR', 'NE'), 'right siblings': [], 'left siblings': [(VF (NX (ART der) (ADJX (ADJA erste)) (NN zug))), (LK (VXFIN (VVFIN geht)))], 'auto preterminal span': (10, 17), 'span': (10, 17), 'parent': 'SIMPX', 'label': 'MF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX sie konnen nur tagsuber fahren)
	(SIMPX der erste zug geht um funf uhr zehn ab von bonn)
	(SIMPX
		(VF da)
		(FKOORD
			(LKMVCN musten sie allerdings umsteigen in dusseldorf hauptbahnhof)
			(KON und)
			(LKM
				(LK kamen)
				[01;31m(VC[00m
					(PTKVZ an)[01;31m)[00m
				[01;31m(NF[00m
					(PX um sechs uhr zehn)
					(PX in hannover)[01;31m)[00m))))
Step:Single Word Phrase
{'subtrees': ['PTKVZ'], 'family': ['LK', 'VC', 'NF'], 'over_word': True, 'over words': True, 'auto preterminals': ('VVFIN', 'PTKVZ', 'APPR', 'CARD', 'NN', 'CARD', 'APPR', 'NE'), 'right siblings': ['NF'], 'parent': 'LKM', 'auto preterminal span': (26, 34), 'span': (27, 28), 'left siblings': ['LK'], 'label': 'VC', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(DM also)
	(SIMPX sie konnen nur tagsuber fahren)
	(SIMPX der erste zug geht um funf uhr zehn ab von bonn)
	(SIMPX
		(VF da)
		(FKOORD
			(LKMVCN musten sie allerdings umsteigen in dusseldorf hauptbahnhof)
			(KON und)
			(LKM
				(LK kamen)
				(PTKVZ an)
				[01;31m(NF[00m
					(PX um sechs uhr zehn)
					(PX in hannover)[01;31m)[00m))))
Step:PP Attachment
{'subtrees': ['PX', 'PX'], 'family': ['LK', 'PTKVZ', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PTKVZ', 'APPR', 'CARD', 'NN', 'CARD', 'APPR', 'NE'), 'right siblings': [], 'parent': 'LKM', 'auto preterminal span': (26, 34), 'span': (28, 34), 'left siblings': ['LK', 'PTKVZ'], 'label': 'NF', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP also sie konnen nur tagsuber fahren der erste zug geht um funf uhr zehn ab von bonn da musten sie allerdings umsteigen in dusseldorf hauptbahnhof und kamen an um sechs uhr zehn in hannover)

Sentence 934:
0 Initial errors
0 on fringe, 0 iterations

Sentence 935:
7 Initial errors
0 on fringe, 6 iterations
2 Error:Co-ordination
1 Error:Unary
1 Error:Modifier Attachment
1 Error:UNSET remove
1 Error:UNSET add
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM oh)
	[01;31m(DM[00m
		[01;36m(DM[00m
			(NX
				(NN moment))[01;36m)[00m
		(ADVX mal)[01;31m)[00m
	(SIMPX
		(VF sie)
		(FKOORD
			(LKMVC kommen in dusseldorf um sechs uhr sechs an)
			(KON und)
			[01;36m(LKMVCN[00m
				[01;31m(LKMVC[00m
					(LK mussen)
					(MF da)
					[01;33m(VC (VC[00m (VC umsteigen)[01;31m)[00m
				[01;31m(LKMVCN[00m
					(LK kommen) [01;33mVC)[00m
					(MF in hannover)
					(VC an) [01;33mVC)[00m
					(NF um neun uhr zwei)[01;31m)[00m[01;36m)[00m)))
Step:Co-ordination
{'new_parent': 'LKMVCN', 'new_family': ['LKMVC', 'LK', 'MF', 'VC', 'NF'], 'mover info': [('LKMVC', (13, 16))], 'old_family': ['LKMVC', 'KON', 'LKMVC', 'LKMVCN'], 'start left siblings': ['LKMVC', 'KON'], 'auto preterminals': ('VVFIN', 'APPR', 'NE', 'APPR', 'CARD', 'NN', 'CARD', 'PTKVZ', 'KON', 'VMFIN', 'ADV', 'VVINF', 'VVFIN', 'APPR', 'NE', 'PTKVZ', 'APPR', 'CARD', 'NN', 'CARD'), 'start right siblings': ['LKMVCN'], 'end left siblings': [], 'auto preterminal span': (4, 24), 'movers': ['LKMVC'], 'old_parent': 'FKOORD', 'end right siblings': ['LK', 'MF', 'VC', 'NF'], 'classified_type': 'Co-ordination', 'type': 'move'}
(TOP
	(DM oh)
	[01;31m(DM[00m
		[01;36m(DM[00m
			(NX
				(NN moment))[01;36m)[00m
		(ADVX mal)[01;31m)[00m
	(SIMPX
		(VF sie)
		(FKOORD
			(LKMVC kommen in dusseldorf um sechs uhr sechs an)
			(KON und)
			(LKMVCN
				[01;31m(LKMVC[00m
					(LK mussen)
					(MF da)
					[01;33m(VC (VC[00m (VC umsteigen)[01;31m)[00m
				(LK kommen) [01;33mVC)[00m
				(MF in hannover)
				(VC an) [01;33mVC)[00m
				(NF um neun uhr zwei)))))
Step:Unary
{'subtrees': ['NX'], 'family': ['DM', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN',), 'right siblings': [(ADVX (ADV mal))], 'left siblings': [], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'DM', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM oh)
	[01;31m(DM[00m
		(DM moment)
		(ADVX mal)[01;31m)[00m
	(SIMPX
		(VF sie)
		(FKOORD
			(LKMVC kommen in dusseldorf um sechs uhr sechs an)
			(KON und)
			(LKMVCN
				[01;31m(LKMVC[00m
					(LK mussen)
					(MF da)
					[01;33m(VC (VC[00m (VC umsteigen)[01;31m)[00m
				(LK kommen) [01;33mVC)[00m
				(MF in hannover)
				(VC an) [01;33mVC)[00m
				(NF um neun uhr zwei)))))
Step:Modifier Attachment
{'subtrees': ['DM', 'ADVX'], 'family': ['DM', 'DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'NN', 'ADV', 'PPER', 'VVFIN', 'APPR', 'NE', 'APPR', 'CARD', 'NN', 'CARD', 'PTKVZ', 'KON', 'VMFIN', 'ADV', 'VVINF', 'VVFIN', 'APPR', 'NE', 'PTKVZ', 'APPR', 'CARD', 'NN', 'CARD'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 24), 'span': (1, 3), 'left siblings': ['DM'], 'label': 'DM', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(DM oh)
	(DM moment)
	(ADVX mal)
	(SIMPX
		(VF sie)
		(FKOORD
			(LKMVC kommen in dusseldorf um sechs uhr sechs an)
			(KON und)
			(LKMVCN
				[01;31m(LKMVC[00m
					(LK mussen)
					(MF da)
					[01;33m(VC (VC[00m (VC umsteigen)[01;31m)[00m
				(LK kommen) [01;33mVC)[00m
				(MF in hannover)
				(VC an) [01;33mVC)[00m
				(NF um neun uhr zwei)))))
Step:UNSET remove
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['LKMVC', 'LK', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'ADV', 'VVINF', 'VVFIN', 'APPR', 'NE', 'PTKVZ', 'APPR', 'CARD', 'NN', 'CARD'), 'right siblings': ['LK', 'MF', 'VC', 'NF'], 'parent': 'LKMVCN', 'auto preterminal span': (13, 24), 'span': (13, 16), 'left siblings': [], 'label': 'LKMVC', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM oh)
	(DM moment)
	(ADVX mal)
	(SIMPX
		(VF sie)
		(FKOORD
			(LKMVC kommen in dusseldorf um sechs uhr sechs an)
			(KON und)
			(LKMVCN
				(LK mussen)
				(MF da)
				[01;36m(VC[00m
					[01;36m(VC[00m
						(VC umsteigen)
						(LK kommen)[01;36m)[00m
					(MF in hannover)
					(VC an)[01;36m)[00m
				(NF um neun uhr zwei)))))
Step:UNSET add
{'subtrees': ['VC', 'LK'], 'family': ['LK', 'MF', 'VC', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVINF', 'VVFIN'), 'right siblings': [(MF (PX (APPR in) (NX (NE hannover)))), (VC (PTKVZ an)), (NF (PX (APPR um) (NX (NX (ADJX (CARD neun)) (NN uhr)) (ADJX (CARD zwei)))))], 'left siblings': [(LK (VXFIN (VMFIN mussen))), (MF (ADVX (ADV da)))], 'auto preterminal span': (15, 17), 'span': (15, 17), 'parent': 'LKMVCN', 'label': 'VC', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM oh)
	(DM moment)
	(ADVX mal)
	(SIMPX
		(VF sie)
		(FKOORD
			(LKMVC kommen in dusseldorf um sechs uhr sechs an)
			(KON und)
			(LKMVCN
				(LK mussen)
				(MF da)
				[01;36m(VC[00m
					(VC umsteigen kommen)
					(MF in hannover)
					(VC an)[01;36m)[00m
				(NF um neun uhr zwei)))))
Step:UNSET add
{'subtrees': ['VC', 'MF', 'VC'], 'family': ['LK', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVINF', 'VVFIN', 'APPR', 'NE', 'PTKVZ'), 'right siblings': [(NF (PX (APPR um) (NX (NX (ADJX (CARD neun)) (NN uhr)) (ADJX (CARD zwei)))))], 'left siblings': [(LK (VXFIN (VMFIN mussen))), (MF (ADVX (ADV da)))], 'auto preterminal span': (15, 20), 'span': (15, 20), 'parent': 'LKMVCN', 'label': 'VC', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP oh moment mal sie kommen in dusseldorf um sechs uhr sechs an und mussen da umsteigen kommen in hannover an um neun uhr zwei)

Sentence 936:
0 Initial errors
0 on fringe, 0 iterations

Sentence 937:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX der fahrt)
		(DM ah)
		(DM entschuldigung)
		(SIMPX der fahrt nur samstag sonntag))[01;36m)[00m
Step:Clause Attachment
{'subtrees': ['SIMPX', 'DM', 'DM', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VVFIN', 'ITJ', 'NN', 'PDS', 'VVFIN', 'ADV', 'NN', 'NN'), 'right siblings': [], 'left siblings': [], 'auto preterminal span': (0, 9), 'span': (0, 9), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP der fahrt ah entschuldigung der fahrt nur samstag sonntag)

Sentence 938:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		[01;36m(ADVX[00m
			(VF
				[01;31m(ADJX[00m
					(ADJD taglich)[01;31m)[00m)[01;36m)[00m
		(LK fahrt)
		(MF dann um sechs uhr funf der erste zug)))
Step:Single Word Phrase
{'family': ['ADVX'], 'auto preterminal span': (0, 1), 'span': (0, 1), 'subtrees': ['ADJD'], 'parent': 'VF', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'ADVX')}
(TOP taglich fahrt dann um sechs uhr funf der erste zug)

Sentence 939:
0 Initial errors
0 on fringe, 0 iterations

Sentence 940:
3 Initial errors
0 on fringe, 3 iterations
1 Error:Unary
1 Error:Modifier Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(ADJX[00m
		[01;36m(DM[00m
			(ADVX
				(ADV also))[01;36m)[00m
		[01;36m(ADJX[00m
			(ADVX auch)
			(ADJX zu spat)[01;36m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['ADVX'], 'family': ['DM', 'ADVX', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV',), 'right siblings': [(ADVX (ADV auch)), (ADJX (PTKA zu) (ADJD spat))], 'left siblings': [], 'auto preterminal span': (0, 1), 'span': (0, 1), 'parent': 'ADJX', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(ADJX[00m
		(DM also)
		[01;36m(ADJX[00m
			(ADVX auch)
			(ADJX zu spat)[01;36m)[00m[01;31m)[00m)
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADJX'], 'family': ['DM', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'PTKA', 'ADJD'), 'right siblings': [], 'left siblings': [(DM (ADVX (ADV also)))], 'auto preterminal span': (1, 4), 'span': (1, 4), 'parent': 'ADJX', 'label': 'ADJX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	[01;31m(ADJX[00m
		(DM also)
		(ADJX auch zu spat)[01;31m)[00m)
Step:Unary
{'subtrees': ['DM', 'ADJX'], 'family': ['ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'PTKA', 'ADJD'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 4), 'span': (0, 4), 'left siblings': [], 'label': 'ADJX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP also auch zu spat)

Sentence 941:
3 Initial errors
0 on fringe, 2 iterations
2 Error:UNSET move
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(DM[00m
		[01;31m(DM[00m
			(ITJ ah)[01;31m)[00m
		[01;31m(DM[00m
			(PTKANT nee)[01;31m)[00m[01;36m)[00m
	(SIMPX das ist ja)
	(SIMPX das ist zu spat))
Step:UNSET move
{'new_parent': 'DM', 'new_family': ['DM', 'PTKANT'], 'mover info': [('DM', (0, 1))], 'old_family': ['DM', 'DM', 'SIMPX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('ITJ', 'PTKANT', 'PDS', 'VAFIN', 'ADV', 'PDS', 'VAFIN', 'PTKA', 'ADJD'), 'start right siblings': ['DM', 'SIMPX', 'SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 9), 'movers': ['DM'], 'old_parent': 'TOP', 'POS confusion': ('ITJ', 'ITJ'), 'end right siblings': ['PTKANT'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM
		[01;31m(DM[00m
			(ITJ ah)[01;31m)[00m
		(PTKANT nee))
	(SIMPX das ist ja)
	(SIMPX das ist zu spat))
Step:Single Word Phrase
{'subtrees': ['ITJ'], 'family': ['DM', 'PTKANT'], 'over_word': True, 'over words': True, 'auto preterminals': ('ITJ', 'PTKANT'), 'right siblings': ['PTKANT'], 'parent': 'DM', 'auto preterminal span': (0, 2), 'span': (0, 1), 'left siblings': [], 'label': 'DM', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP ah nee das ist ja das ist zu spat)

Sentence 942:
0 Initial errors
0 on fringe, 0 iterations

Sentence 943:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(NX
		[01;36m(ADJX[00m
			(ADVX ungefahr)
			(ADJX zweihundert dreisig)[01;36m)[00m
		(NN mark)))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADJX'], 'family': ['ADJX', 'NN'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'CARD', 'CARD'), 'right siblings': [(NN mark)], 'left siblings': [], 'auto preterminal span': (0, 3), 'span': (0, 3), 'parent': 'NX', 'label': 'ADJX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP ungefahr zweihundert dreisig mark)

Sentence 944:
4 Initial errors
0 on fringe, 2 iterations
2 Error:Single Word Phrase
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK bleibe)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(ADVX sowieso)
				(NX einige tage)[01;31m)[00m
			[01;36m(ADVX[00m [01;31m(VC[00m
				(PTKVZ da)[01;31m)[00m[01;36m)[00m[01;36m)[00m))
Step:Single Word Phrase
{'family': ['VF', 'LK', 'MF', 'ADVX'], 'auto preterminal span': (6, 7), 'span': (6, 7), 'subtrees': ['PTKVZ'], 'parent': 'SIMPX', 'over_word': True, 'auto preterminals': ('PTKVZ',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VC', 'ADVX')}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK bleibe)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(ADVX sowieso)
				(NX einige tage)[01;31m)[00m
			(ADVX da)[01;36m)[00m))
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'NX', 'ADVX'], 'mover info': [('ADVX', (6, 7))], 'old_family': ['VF', 'LK', 'MF', 'ADVX'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'PIAT', 'NN', 'PTKVZ'), 'start right siblings': [], 'end left siblings': ['ADVX', 'NX'], 'auto preterminal span': (1, 7), 'movers': ['ADVX'], 'old_parent': 'SIMPX', 'POS confusion': ('PTKVZ', 'PTKVZ'), 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP also ich bleibe sowieso einige tage da)

Sentence 945:
4 Initial errors
0 on fringe, 2 iterations
2 Error:Single Word Phrase
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK bleibe)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX
					(ADJX drei)
					(NN tage))[01;31m)[00m
			[01;36m(ADVX[00m [01;31m(VC[00m
				(PTKVZ da)[01;31m)[00m[01;36m)[00m[01;36m)[00m)
	(SIMPX das waren auf jeden fall dann mal drei nachte))
Step:Single Word Phrase
{'family': ['VF', 'LK', 'MF', 'ADVX'], 'auto preterminal span': (4, 5), 'span': (4, 5), 'subtrees': ['PTKVZ'], 'parent': 'SIMPX', 'over_word': True, 'auto preterminals': ('PTKVZ',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VC', 'ADVX')}
(TOP
	(SIMPX
		(VF ich)
		(LK bleibe)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX
					(ADJX drei)
					(NN tage))[01;31m)[00m
			(ADVX da)[01;36m)[00m)
	(SIMPX das waren auf jeden fall dann mal drei nachte))
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX'], 'mover info': [('ADVX', (4, 5))], 'old_family': ['VF', 'LK', 'MF', 'ADVX'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('PPER', 'VVFIN', 'CARD', 'NN', 'PTKVZ'), 'start right siblings': [], 'end left siblings': ['NX'], 'auto preterminal span': (0, 5), 'movers': ['ADVX'], 'old_parent': 'SIMPX', 'POS confusion': ('PTKVZ', 'PTKVZ'), 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP ich bleibe drei tage da das waren auf jeden fall dann mal drei nachte)

Sentence 946:
1 Initial errors
0 on fringe, 1 iterations
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wieviel)
		(LK kostet)
		(MF
			(ADVX denn)
			[01;36m(NX[00m
				(NX ein hotel)
				(PX in hannover)[01;36m)[00m)))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['ADVX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'NE'), 'right siblings': [], 'left siblings': [(ADVX (ADV denn))], 'auto preterminal span': (3, 7), 'span': (3, 7), 'parent': 'MF', 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP wieviel kostet denn ein hotel in hannover)

Sentence 947:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(NX
		(ADVX so)
		[01;31m(NX[00m
			(NN mittelklasse)[01;31m)[00m))
Step:Single Word Phrase
{'subtrees': ['NN'], 'family': ['ADVX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (0, 2), 'span': (1, 2), 'left siblings': ['ADVX'], 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP so mittelklasse)

Sentence 948:
0 Initial errors
0 on fringe, 0 iterations

Sentence 949:
0 Initial errors
0 on fringe, 0 iterations

Sentence 950:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		(VF am bahnhof oder am flughafen direkt)
		(LK kann)
		(MF ich ihnen eines)
		(VC anbieten)[01;31m)[00m)
Step:Unary
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'NN', 'KON', 'APPRART', 'NN', 'ADV', 'VMFIN', 'PPER', 'PPER', 'PIS', 'VVINF'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 11), 'span': (0, 11), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP am bahnhof oder am flughafen direkt kann ich ihnen eines anbieten)

Sentence 951:
17 Initial errors
0 on fringe, 6 iterations
7 Error:UNSET move
5 Error:Modifier Attachment
2 Error:UNSET move
1 Error:Modifier Attachment
1 Error:UNSET remove
1 Error:NP Internal Structure
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF das)
			(LK ist)
			[01;36m(NX[00m
				(MF [01;33m(NX (MF[00m
					[01;31m(ADVX[00m
						(ADVX so)
						(ADV ungefahr)[01;31m)[00m
					[01;31m(NX[00m
						[01;31m(NX[00m
							(ADJX mittlere)
							(NN preisklasse)[01;31m)[00m [01;33mMF) NX)[00m
						(PX mit restaurant konferenzraum garage und sauna)[01;31m)[00m)[01;36m)[00m[01;36m)[00m
		[01;31m(NF[00m [01;33m(SIMPX (VF (NX[00m
			[01;31m(NX[00m
				(ART das)
				[01;36m(NX[00m
					(NN [01;33m(NX[00m hotel)[01;36m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(NX
				(NE forahotel))[01;31m)[00m [01;33mNX) NX) VF)[00m
		(LK heist)
		(MF das)[01;31m)[00m) [01;33mSIMPX)[00m
Step:UNSET move
{'new_parent': 'VF', 'new_family': ['NF', 'NX'], 'mover info': [('NF', (12, 14))], 'old_family': ['VF', 'LK', 'MF', 'NF'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('PDS', 'VAFIN', 'ADV', 'ADV', 'ADJA', 'NN', 'APPR', 'NN', 'NN', 'NN', 'KON', 'NN', 'ART', 'NN', 'NE', 'VVFIN', 'PDS'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (0, 17), 'adding node already present': False, 'movers': ['NF'], 'old_parent': 'SIMPX', 'added and moved': True, 'end right siblings': ['NX'], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'NX'}
(TOP
	(SIMPX
		(VF das)
		(LK ist)
		[01;36m(NX[00m
			(MF [01;33m(NX (MF[00m
				[01;31m(ADVX[00m
					(ADVX so)
					(ADV ungefahr)[01;31m)[00m
				[01;31m(NX[00m
					[01;31m(NX[00m
						(ADJX mittlere)
						(NN preisklasse)[01;31m)[00m [01;33mMF) NX)[00m
					(PX mit restaurant konferenzraum garage und sauna)[01;31m)[00m)[01;36m)[00m)
	(SIMPX
		(NX
			(VF
				[01;31m(NF[00m
					[01;31m(NX[00m
						(ART das)
						[01;36m(NX[00m
							(NN [01;33m(NX[00m hotel)[01;36m)[00m[01;31m)[00m[01;31m)[00m
				(NX forahotel))) [01;33mNX)[00m
		(LK heist)
		(MF das)))
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['ADVX', 'ADJX', 'NN'], 'mover info': [('ADVX', (2, 4))], 'old_family': ['ADVX', 'NX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'ADV', 'ADJA', 'NN', 'APPR', 'NN', 'NN', 'NN', 'KON', 'NN'), 'start right siblings': ['NX'], 'end left siblings': [], 'auto preterminal span': (2, 12), 'adding node already present': False, 'movers': ['ADVX'], 'old_parent': 'MF', 'added and moved': True, 'end right siblings': ['ADJX', 'NN'], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'NX'}
(TOP
	(SIMPX
		(VF das)
		(LK ist)
		(MF
			(NX
				(MF
					(NX
						[01;31m(ADVX[00m
							(ADVX so)
							(ADV ungefahr)[01;31m)[00m
						(ADJX mittlere)
						(NN preisklasse)))
				(PX mit restaurant konferenzraum garage und sauna))))
	(SIMPX
		(NX
			(VF
				[01;31m(NF[00m
					[01;31m(NX[00m
						(ART das)
						[01;36m(NX[00m
							(NN [01;33m(NX[00m hotel)[01;36m)[00m[01;31m)[00m[01;31m)[00m
				(NX forahotel))) [01;33mNX)[00m
		(LK heist)
		(MF das)))
Step:UNSET move
{'new_parent': 'NF', 'new_family': ['ART', 'NX'], 'mover info': [('ART', (12, 13))], 'old_family': ['ART', 'NN'], 'start left siblings': [], 'auto preterminals': ('ART', 'NN'), 'start right siblings': ['NN'], 'end left siblings': [], 'auto preterminal span': (12, 14), 'movers': ['ART'], 'old_parent': 'NX', 'POS confusion': ('ART', 'ART'), 'end right siblings': ['NX'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(VF das)
		(LK ist)
		(MF
			(NX
				(MF
					(NX
						[01;31m(ADVX[00m
							(ADVX so)
							(ADV ungefahr)[01;31m)[00m
						(ADJX mittlere)
						(NN preisklasse)))
				(PX mit restaurant konferenzraum garage und sauna))))
	(SIMPX
		(NX
			(VF
				[01;31m(NF[00m
					(ART das)
					[01;33m(NX[00m (NX hotel)[01;31m)[00m
				(NX forahotel))) [01;33mNX)[00m
		(LK heist)
		(MF das)))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADV'], 'family': ['ADVX', 'ADJX', 'NN'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'ADJA', 'NN'), 'right siblings': ['ADJX', 'NN'], 'parent': 'NX', 'auto preterminal span': (2, 6), 'span': (2, 4), 'left siblings': [], 'label': 'ADVX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX das ist so ungefahr mittlere preisklasse mit restaurant konferenzraum garage und sauna)
	(SIMPX
		(NX
			(VF
				[01;31m(NF[00m
					(ART das)
					[01;33m(NX[00m (NX hotel)[01;31m)[00m
				(NX forahotel))) [01;33mNX)[00m
		(LK heist)
		(MF das)))
Step:UNSET remove
{'subtrees': ['ART', 'NX'], 'family': ['NF', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'NE'), 'right siblings': ['NX'], 'parent': 'VF', 'auto preterminal span': (12, 15), 'span': (12, 14), 'left siblings': [], 'label': 'NF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX das ist so ungefahr mittlere preisklasse mit restaurant konferenzraum garage und sauna)
	(SIMPX
		(NX
			(VF
				(ART das)
				[01;36m(NX[00m
					(NX hotel)
					(NX forahotel)[01;36m)[00m))
		(LK heist)
		(MF das)))
Step:NP Internal Structure
{'subtrees': ['NX', 'NX'], 'family': ['ART', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'NE'), 'right siblings': [], 'left siblings': [(ART das)], 'auto preterminal span': (13, 15), 'span': (13, 15), 'parent': 'VF', 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'add'}
(TOP das ist so ungefahr mittlere preisklasse mit restaurant konferenzraum garage und sauna das hotel forahotel heist das)

Sentence 952:
0 Initial errors
0 on fringe, 0 iterations

Sentence 953:
0 Initial errors
0 on fringe, 0 iterations

Sentence 954:
0 Initial errors
0 on fringe, 0 iterations

Sentence 955:
0 Initial errors
0 on fringe, 0 iterations

Sentence 956:
0 Initial errors
0 on fringe, 0 iterations

Sentence 957:
0 Initial errors
0 on fringe, 0 iterations

Sentence 958:
0 Initial errors
0 on fringe, 0 iterations

Sentence 959:
0 Initial errors
0 on fringe, 0 iterations

Sentence 960:
0 Initial errors
0 on fringe, 0 iterations

Sentence 961:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(NX
		(ADVX auch)
		[01;36m(NX[00m
			(ADVX so)
			[01;31m(NX[00m
				(ADJX zentrale)
				(NN lage)[01;31m)[00m[01;36m)[00m
		(ADVX eher)))
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['ADVX', 'ADJX', 'NN'], 'mover info': [('ADVX', (1, 2))], 'old_family': ['ADVX', 'ADVX', 'NX', 'ADVX'], 'start left siblings': ['ADVX'], 'auto preterminals': ('ADV', 'ADV', 'ADJA', 'NN', 'ADV'), 'start right siblings': ['NX', 'ADVX'], 'end left siblings': [], 'auto preterminal span': (0, 5), 'movers': ['ADVX'], 'old_parent': 'NX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ADJX', 'NN'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP auch so zentrale lage eher)

Sentence 962:
0 Initial errors
0 on fringe, 0 iterations

Sentence 963:
11 Initial errors
0 on fringe, 5 iterations
4 Error:UNSET move
3 Error:NP Internal Structure
2 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF da)
		(LK kann)
		(MF
			(NX ich)
			(NX ihnen)
			(NX [01;33m(NX[00m
				(ART das)
				[01;31m(NX[00m
					[01;31m(NX[00m
						(NE grandhotel)[01;31m)[00m [01;33mNX)[00m
					[01;36m(ADJX[00m [01;31m(NX[00m
						(NE musmann)[01;31m)[00m[01;36m)[00m[01;31m)[00m))
		(VC anbieten))
	[01;36m(NX[00m
		(ART [01;33m(NX[00m das)
		[01;31m(NX[00m
			[01;31m(NX[00m
				(ADJX zentrale)
				(NN lage)[01;31m)[00m [01;33mNX)[00m
			(PX mit garage)[01;31m)[00m[01;36m)[00m
	(SIMPX die brauchen sie zwar nicht)
	(SIMPX
		(VF da)
		(LK liegt)
		(MF
			(NX die preiskategorie fur ein einzelzimmer)
			(PX
				(APPR bei)
				(NX [01;33m(ADJX[00m
					(NX hundert achtundsiebzig mark)
					(APPR bis)
					[01;31m(NX[00m
						(ADJX funfhundert achtzehn) [01;33mADJX)[00m
						(NN mark)[01;31m)[00m)))))
Step:UNSET move
{'new_parent': 'NX', 'new_family': ['ART', 'ADJX', 'NN'], 'mover info': [('ART', (8, 9))], 'old_family': ['SIMPX', 'ART', 'NX', 'SIMPX', 'SIMPX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('ADV', 'VMFIN', 'PPER', 'PPER', 'ART', 'NE', 'NE', 'VVINF', 'ART', 'ADJA', 'NN', 'APPR', 'NN', 'PDS', 'VVFIN', 'PPER', 'ADV', 'PTKNEG', 'ADV', 'VVFIN', 'ART', 'NN', 'APPR', 'ART', 'NN', 'APPR', 'CARD', 'CARD', 'NN', 'APPR', 'CARD', 'CARD', 'NN'), 'start right siblings': ['NX', 'SIMPX', 'SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 33), 'movers': ['ART'], 'old_parent': 'TOP', 'POS confusion': ('ART', 'ART'), 'end right siblings': ['ADJX', 'NN'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(VF da)
		(LK kann)
		(MF
			(NX ich)
			(NX ihnen)
			(NX [01;33m(NX[00m
				(ART das)
				[01;31m(NX[00m
					[01;31m(NX[00m
						(NE grandhotel)[01;31m)[00m [01;33mNX)[00m
					[01;36m(ADJX[00m [01;31m(NX[00m
						(NE musmann)[01;31m)[00m[01;36m)[00m[01;31m)[00m))
		(VC anbieten))
	(NX das zentrale lage mit garage)
	(SIMPX die brauchen sie zwar nicht)
	(SIMPX
		(VF da)
		(LK liegt)
		(MF
			(NX die preiskategorie fur ein einzelzimmer)
			(PX
				(APPR bei)
				(NX [01;33m(ADJX[00m
					(NX hundert achtundsiebzig mark)
					(APPR bis)
					[01;31m(NX[00m
						(ADJX funfhundert achtzehn) [01;33mADJX)[00m
						(NN mark)[01;31m)[00m)))))
Step:NP Internal Structure
{'new_parent': 'NX', 'new_family': ['ART', 'NE'], 'mover info': [('ART', (4, 5))], 'old_family': ['ART', 'NX'], 'start left siblings': [], 'auto preterminals': ('ART', 'NE', 'NE'), 'start right siblings': ['NX'], 'end left siblings': [], 'auto preterminal span': (4, 7), 'movers': ['ART'], 'old_parent': 'NX', 'POS confusion': ('ART', 'ART'), 'end right siblings': ['NE'], 'classified_type': 'NP Internal Structure', 'type': 'move'}
(TOP
	(SIMPX
		(VF da)
		(LK kann)
		(MF
			(NX ich)
			(NX ihnen)
			(NX
				(NX das grandhotel)
				[01;36m(ADJX[00m [01;31m(NX[00m
					(NE musmann)[01;31m)[00m[01;36m)[00m))
		(VC anbieten))
	(NX das zentrale lage mit garage)
	(SIMPX die brauchen sie zwar nicht)
	(SIMPX
		(VF da)
		(LK liegt)
		(MF
			(NX die preiskategorie fur ein einzelzimmer)
			(PX
				(APPR bei)
				(NX [01;33m(ADJX[00m
					(NX hundert achtundsiebzig mark)
					(APPR bis)
					[01;31m(NX[00m
						(ADJX funfhundert achtzehn) [01;33mADJX)[00m
						(NN mark)[01;31m)[00m)))))
Step:Single Word Phrase
{'family': ['NX', 'ADJX'], 'auto preterminal span': (6, 7), 'span': (6, 7), 'subtrees': ['NE'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('NE',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP
	(SIMPX da kann ich ihnen das grandhotel musmann anbieten)
	(NX das zentrale lage mit garage)
	(SIMPX die brauchen sie zwar nicht)
	(SIMPX
		(VF da)
		(LK liegt)
		(MF
			(NX die preiskategorie fur ein einzelzimmer)
			(PX
				(APPR bei)
				(NX [01;33m(ADJX[00m
					(NX hundert achtundsiebzig mark)
					(APPR bis)
					[01;31m(NX[00m
						(ADJX funfhundert achtzehn) [01;33mADJX)[00m
						(NN mark)[01;31m)[00m)))))
Step:UNSET remove
{'subtrees': ['ADJX', 'NN'], 'family': ['NX', 'APPR', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'CARD', 'NN', 'APPR', 'CARD', 'CARD', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (26, 33), 'span': (30, 33), 'left siblings': ['NX', 'APPR'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX da kann ich ihnen das grandhotel musmann anbieten)
	(NX das zentrale lage mit garage)
	(SIMPX die brauchen sie zwar nicht)
	(SIMPX
		(VF da)
		(LK liegt)
		(MF
			(NX die preiskategorie fur ein einzelzimmer)
			(PX
				(APPR bei)
				(NX
					[01;36m(ADJX[00m
						(NX hundert achtundsiebzig mark)
						(APPR bis)
						(ADJX funfhundert achtzehn)[01;36m)[00m
					(NN mark))))))
Step:Modifier Attachment
{'subtrees': ['NX', 'APPR', 'ADJX'], 'family': ['ADJX', 'NN'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'CARD', 'NN', 'APPR', 'CARD', 'CARD'), 'right siblings': [(NN mark)], 'left siblings': [], 'auto preterminal span': (26, 32), 'span': (26, 32), 'parent': 'NX', 'label': 'ADJX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP da kann ich ihnen das grandhotel musmann anbieten das zentrale lage mit garage die brauchen sie zwar nicht da liegt die preiskategorie fur ein einzelzimmer bei hundert achtundsiebzig mark bis funfhundert achtzehn mark)

Sentence 964:
10 Initial errors
0 on fringe, 4 iterations
4 Error:UNSET move
4 Error:Modifier Attachment
1 Error:Modifier Attachment
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		[01;31m(VF[00m
			[01;31m(SIMPX[00m
				(KOORD oder)
				[01;36m(VF[00m
					[01;36m(SIMPX[00m
						(C was)
						(MF
							[01;31m(ADJX[00m
								[01;31m(ADVX[00m
									(ADVX noch)
									[01;36m(ADVX[00m
										(ADV [01;33m(ADJX[00m etwas)[01;36m)[00m[01;31m)[00m
								(ADJD preiswerter)[01;31m)[00m) [01;33mADJX)[00m
						(VC ware)[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m
		(LK ware)
		(MF hotel loccumerhof))
	[01;31m(ADJX[00m
		(ADJX
			(ADVX auch)
			[01;36m(ADJX[00m
				(ADVX zentral)
				(ADJD gelegen)[01;36m)[00m)
		(PX mit konferenzraum)[01;31m)[00m)
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['KOORD', 'VF', 'LK', 'MF'], 'mover info': [('KOORD', (0, 1))], 'old_family': ['KOORD', 'C', 'MF', 'VC'], 'start left siblings': [], 'auto preterminals': ('KON', 'PWS', 'ADV', 'ADV', 'ADJD', 'VAFIN', 'VAFIN', 'NN', 'NE'), 'start right siblings': ['C', 'MF', 'VC'], 'end left siblings': [], 'auto preterminal span': (0, 9), 'movers': ['KOORD'], 'old_parent': 'SIMPX', 'POS confusion': ('KON', 'KON'), 'end right siblings': ['VF', 'LK', 'MF'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(KOORD oder)
		(VF
			(SIMPX
				(C was)
				(MF
					[01;31m(ADJX[00m
						[01;31m(ADVX[00m
							(ADVX noch)
							[01;36m(ADVX[00m
								(ADV [01;33m(ADJX[00m etwas)[01;36m)[00m[01;31m)[00m
						(ADJD preiswerter)[01;31m)[00m) [01;33mADJX)[00m
				(VC ware)))
		(LK ware)
		(MF hotel loccumerhof))
	[01;31m(ADJX[00m
		(ADJX
			(ADVX auch)
			[01;36m(ADJX[00m
				(ADVX zentral)
				(ADJD gelegen)[01;36m)[00m)
		(PX mit konferenzraum)[01;31m)[00m)
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'ADJX'], 'mover info': [('ADVX', (2, 3))], 'old_family': ['ADVX', 'ADV'], 'start left siblings': [], 'auto preterminals': ('ADV', 'ADV', 'ADJD'), 'start right siblings': ['ADV'], 'end left siblings': [], 'auto preterminal span': (2, 5), 'movers': ['ADVX'], 'old_parent': 'ADVX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ADJX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(SIMPX oder was noch etwas preiswerter ware ware hotel loccumerhof)
	[01;31m(ADJX[00m
		(ADJX
			(ADVX auch)
			[01;36m(ADJX[00m
				(ADVX zentral)
				(ADJD gelegen)[01;36m)[00m)
		(PX mit konferenzraum)[01;31m)[00m)
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADJD'], 'family': ['ADVX', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADJD'), 'right siblings': [], 'left siblings': [(ADVX (ADV auch))], 'auto preterminal span': (10, 12), 'span': (10, 12), 'parent': 'ADJX', 'label': 'ADJX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(SIMPX oder was noch etwas preiswerter ware ware hotel loccumerhof)
	[01;31m(ADJX[00m
		(ADJX auch zentral gelegen)
		(PX mit konferenzraum)[01;31m)[00m)
Step:PP Attachment
{'subtrees': ['ADJX', 'PX'], 'family': ['SIMPX', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PWS', 'ADV', 'ADV', 'ADJD', 'VAFIN', 'VAFIN', 'NN', 'NE', 'ADV', 'ADV', 'ADJD', 'APPR', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 14), 'span': (9, 14), 'left siblings': ['SIMPX'], 'label': 'ADJX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP oder was noch etwas preiswerter ware ware hotel loccumerhof auch zentral gelegen mit konferenzraum)

Sentence 965:
2 Initial errors
0 on fringe, 2 iterations
1 Error:UNSET remove
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(NX
		(NX die preislage)
		(NX [01;33m(ADJX[00m
			(NX hundert funfundvierzig mark)
			(APPR bis)
			[01;31m(NX[00m
				(ADJX hundert achtzig) [01;33mADJX)[00m
				(NN mark)[01;31m)[00m)))
Step:UNSET remove
{'subtrees': ['ADJX', 'NN'], 'family': ['NX', 'APPR', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'CARD', 'NN', 'APPR', 'CARD', 'CARD', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (2, 9), 'span': (6, 9), 'left siblings': ['NX', 'APPR'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(NX
		(NX die preislage)
		(NX
			[01;36m(ADJX[00m
				(NX hundert funfundvierzig mark)
				(APPR bis)
				(ADJX hundert achtzig)[01;36m)[00m
			(NN mark))))
Step:Modifier Attachment
{'subtrees': ['NX', 'APPR', 'ADJX'], 'family': ['ADJX', 'NN'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'CARD', 'NN', 'APPR', 'CARD', 'CARD'), 'right siblings': [(NN mark)], 'left siblings': [], 'auto preterminal span': (2, 8), 'span': (2, 8), 'parent': 'NX', 'label': 'ADJX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP die preislage hundert funfundvierzig mark bis hundert achtzig mark)

Sentence 966:
4 Initial errors
0 on fringe, 1 iterations
4 Error:UNSET move
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		[01;31m(VF[00m
			[01;31m(SIMPX[00m
				(KOORD aber)
				[01;36m(SIMPX[00m
					[01;36m(VF[00m
						(C wenn)
						(MF man es)
						(VC zusammenrechnet)[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m
		(LK ware)
		(MF ja eigentlich der flug doch noch gunstiger)))
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['KOORD', 'VF', 'LK', 'MF'], 'mover info': [('KOORD', (0, 1))], 'old_family': ['KOORD', 'C', 'MF', 'VC'], 'start left siblings': [], 'auto preterminals': ('KON', 'KOUS', 'PIS', 'PPER', 'VVFIN', 'VAFIN', 'ADV', 'ADV', 'ART', 'NN', 'ADV', 'ADV', 'ADJD'), 'start right siblings': ['C', 'MF', 'VC'], 'end left siblings': [], 'auto preterminal span': (0, 13), 'movers': ['KOORD'], 'old_parent': 'SIMPX', 'POS confusion': ('KON', 'KON'), 'end right siblings': ['VF', 'LK', 'MF'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP aber wenn man es zusammenrechnet ware ja eigentlich der flug doch noch gunstiger)

Sentence 967:
0 Initial errors
0 on fringe, 0 iterations

Sentence 968:
0 Initial errors
0 on fringe, 0 iterations

Sentence 969:
0 Initial errors
0 on fringe, 0 iterations

Sentence 970:
0 Initial errors
0 on fringe, 0 iterations

Sentence 971:
0 Initial errors
0 on fringe, 0 iterations

Sentence 972:
0 Initial errors
0 on fringe, 0 iterations

Sentence 973:
0 Initial errors
0 on fringe, 0 iterations

Sentence 974:
11 Initial errors
0 on fringe, 6 iterations
4 Error:NP Attachment
2 Error:UNSET move
2 Error:Clause Attachment
1 Error:UNSET add
1 Error:Unary
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM ja)
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich aber)
		(VC sagen)
		(NF
			(SIMPX
				(VF ich)
				(LK nehme)
				[01;36m(MF[00m
					[01;31m(MF[00m
						(PX auf jeden fall)
						(ADVX mal)
						(NX den hinflug)[01;31m)[00m
					[01;31m(NF[00m
						(ADVX
							(ADV einfach))[01;31m)[00m[01;36m)[00m)))
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF das)
		(LK waren)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(ADVX
					(ADV dann)) [01;33mSIMPX)[00m[01;36m)[00m
			[01;36m(SIMPX[00m
				[01;31m(SIMPX[00m
					(VF wieviel)
					(LK sagten)
					[01;31m(MF[00m [01;33m(MF[00m
						(NX
							(PPER sie))[01;31m)[00m[01;31m)[00m
				(NX zweihundert)[01;36m)[00m[01;31m)[00m[01;31m)[00m) [01;33mMF)[00m
Step:NP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'NX'], 'mover info': [('NX', (22, 23))], 'old_family': ['ADVX', 'SIMPX', 'NX'], 'start left siblings': ['ADVX', 'SIMPX'], 'auto preterminals': ('ADV', 'PWS', 'VVFIN', 'PPER', 'CARD'), 'start right siblings': [], 'end left siblings': ['NX'], 'auto preterminal span': (18, 23), 'movers': ['NX'], 'old_parent': 'MF', 'POS confusion': ('CARD', 'CARD'), 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(DM ja)
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich aber)
		(VC sagen)
		(NF
			(SIMPX
				(VF ich)
				(LK nehme)
				[01;36m(MF[00m
					[01;31m(MF[00m
						(PX auf jeden fall)
						(ADVX mal)
						(NX den hinflug)[01;31m)[00m
					[01;31m(NF[00m
						(ADVX
							(ADV einfach))[01;31m)[00m[01;36m)[00m)))
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF das)
		(LK waren)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(ADVX
					(ADV dann)) [01;33mSIMPX)[00m[01;36m)[00m
			(SIMPX wieviel sagten sie zweihundert)[01;31m)[00m[01;31m)[00m)
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['PX', 'ADVX', 'NX', 'NF'], 'mover info': [('NF', (15, 16))], 'old_family': ['VF', 'LK', 'MF', 'NF'], 'start left siblings': ['VF', 'LK', 'MF'], 'auto preterminals': ('PPER', 'VVFIN', 'APPR', 'PIDAT', 'NN', 'ADV', 'ART', 'NN', 'ADV'), 'start right siblings': [], 'end left siblings': ['PX', 'ADVX', 'NX'], 'auto preterminal span': (7, 16), 'movers': ['NF'], 'old_parent': 'SIMPX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM ja)
	(DM ja)
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich aber)
		(VC sagen)
		(NF
			(SIMPX
				(VF ich)
				(LK nehme)
				(MF
					(PX auf jeden fall)
					(ADVX mal)
					(NX den hinflug)
					[01;31m(NF[00m
						(ADVX
							(ADV einfach))[01;31m)[00m))))
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF das)
		(LK waren)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(ADVX
					(ADV dann)) [01;33mSIMPX)[00m[01;36m)[00m
			(SIMPX wieviel sagten sie zweihundert)[01;31m)[00m[01;31m)[00m)
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'SIMPX'], 'mover info': [('SIMPX', (19, 23))], 'old_family': ['ADVX', 'SIMPX'], 'start left siblings': ['ADVX'], 'auto preterminals': ('PDS', 'VAFIN', 'ADV', 'PWS', 'VVFIN', 'PPER', 'CARD'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (16, 23), 'movers': ['SIMPX'], 'old_parent': 'MF', 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(DM ja)
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich aber)
		(VC sagen)
		(NF
			(SIMPX
				(VF ich)
				(LK nehme)
				(MF
					(PX auf jeden fall)
					(ADVX mal)
					(NX den hinflug)
					[01;31m(NF[00m
						(ADVX
							(ADV einfach))[01;31m)[00m))))
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF das)
			(LK waren)
			(MF dann)[01;36m)[00m
		(SIMPX wieviel sagten sie zweihundert)[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VAFIN', 'ADV'), 'right siblings': [(SIMPX (VF (NX (PWS wieviel))) (LK (VXFIN (VVFIN sagten))) (MF (NX (PPER sie)) (NX (CARD zweihundert))))], 'left siblings': [], 'auto preterminal span': (16, 19), 'span': (16, 19), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	(DM ja)
	(SIMPX
		(VF dann)
		(LK wurde)
		(MF ich aber)
		(VC sagen)
		(NF
			(SIMPX
				(VF ich)
				(LK nehme)
				(MF
					(PX auf jeden fall)
					(ADVX mal)
					(NX den hinflug)
					[01;31m(NF[00m
						(ADVX
							(ADV einfach))[01;31m)[00m))))
	[01;31m(SIMPX[00m
		(SIMPX das waren dann)
		(SIMPX wieviel sagten sie zweihundert)[01;31m)[00m)
Step:Unary
{'subtrees': ['ADVX'], 'family': ['PX', 'ADVX', 'NX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'PIDAT', 'NN', 'ADV', 'ART', 'NN', 'ADV'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (9, 16), 'span': (15, 16), 'left siblings': ['PX', 'ADVX', 'NX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(DM ja)
	(SIMPX dann wurde ich aber sagen ich nehme auf jeden fall mal den hinflug einfach)
	[01;31m(SIMPX[00m
		(SIMPX das waren dann)
		(SIMPX wieviel sagten sie zweihundert)[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['DM', 'DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PTKANT', 'ADV', 'VAFIN', 'PPER', 'ADV', 'VVINF', 'PPER', 'VVFIN', 'APPR', 'PIDAT', 'NN', 'ADV', 'ART', 'NN', 'ADV', 'PDS', 'VAFIN', 'ADV', 'PWS', 'VVFIN', 'PPER', 'CARD'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 23), 'span': (16, 23), 'left siblings': ['DM', 'DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP ja ja dann wurde ich aber sagen ich nehme auf jeden fall mal den hinflug einfach das waren dann wieviel sagten sie zweihundert)

Sentence 975:
0 Initial errors
0 on fringe, 0 iterations

Sentence 976:
3 Initial errors
0 on fringe, 3 iterations
1 Error:UNSET remove
1 Error:Modifier Attachment
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(NX[00m
	(NX zweihundert dreisig mark)
	[01;31m(NX[00m
		(KON und)
		[01;31m(NX[00m
			(NX eine einfache fahrt) [01;33mNX)[00m
			(ADVX zuruck)[01;31m)[00m[01;31m)[00m
	(DM ja))
Step:UNSET remove
{'subtrees': ['KON', 'NX'], 'family': ['NX', 'NX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'CARD', 'NN', 'KON', 'ART', 'ADJA', 'NN', 'ADV', 'PTKANT'), 'right siblings': ['DM'], 'parent': 'TOP', 'auto preterminal span': (0, 9), 'span': (3, 8), 'left siblings': ['NX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP [01;33m(NX[00m
	(NX zweihundert dreisig mark)
	(KON und)
	[01;31m(NX[00m
		(NX eine einfache fahrt) [01;33mNX)[00m
		(ADVX zuruck)[01;31m)[00m
	(DM ja))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX'], 'family': ['NX', 'KON', 'NX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'CARD', 'NN', 'KON', 'ART', 'ADJA', 'NN', 'ADV', 'PTKANT'), 'right siblings': ['DM'], 'parent': 'TOP', 'auto preterminal span': (0, 9), 'span': (4, 8), 'left siblings': ['NX', 'KON'], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	[01;36m(NX[00m
		(NX zweihundert dreisig mark)
		(KON und)
		(NX eine einfache fahrt)[01;36m)[00m
	(ADVX zuruck)
	(DM ja))
Step:UNSET add
{'subtrees': ['NX', 'KON', 'NX'], 'family': ['NX', 'ADVX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD', 'CARD', 'NN', 'KON', 'ART', 'ADJA', 'NN'), 'right siblings': [(ADVX (ADV zuruck)), (DM (PTKANT ja))], 'left siblings': [], 'auto preterminal span': (0, 7), 'span': (0, 7), 'parent': 'TOP', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP zweihundert dreisig mark und eine einfache fahrt zuruck ja)

Sentence 977:
0 Initial errors
0 on fringe, 0 iterations

Sentence 978:
0 Initial errors
0 on fringe, 0 iterations

Sentence 979:
0 Initial errors
0 on fringe, 0 iterations

Sentence 980:
0 Initial errors
0 on fringe, 0 iterations

Sentence 981:
0 Initial errors
0 on fringe, 0 iterations

Sentence 982:
0 Initial errors
0 on fringe, 0 iterations

Sentence 983:
0 Initial errors
0 on fringe, 0 iterations

Sentence 984:
0 Initial errors
0 on fringe, 0 iterations

Sentence 985:
6 Initial errors
0 on fringe, 2 iterations
4 Error:UNSET move
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			(LK sagen)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX sie)
				(NX mir)
				(NX ihren namen)
				(ADVX noch)
				(ADVX mal)[01;31m)[00m[01;31m)[00m
		[01;36m(ADVX[00m [01;31m(DM[00m
			(PTKANT bitte)[01;31m)[00m[01;36m)[00m) [01;33mMF)[00m[01;36m)[00m
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'NX', 'ADVX', 'ADVX', 'DM'], 'mover info': [('DM', (7, 8))], 'old_family': ['SIMPX', 'DM'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('VVIMP', 'PPER', 'PPER', 'PPOSAT', 'NN', 'ADV', 'ADV', 'PTKANT'), 'start right siblings': [], 'end left siblings': ['NX', 'NX', 'NX', 'ADVX', 'ADVX'], 'auto preterminal span': (0, 8), 'movers': ['DM'], 'old_parent': 'TOP', 'POS confusion': ('PTKANT', 'PTKANT'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(LK sagen)
		(MF
			(NX sie)
			(NX mir)
			(NX ihren namen)
			(ADVX noch)
			(ADVX mal)
			[01;36m(ADVX[00m [01;31m(DM[00m
				(PTKANT bitte)[01;31m)[00m[01;36m)[00m)))
Step:Single Word Phrase
{'family': ['NX', 'NX', 'NX', 'ADVX', 'ADVX', 'ADVX'], 'auto preterminal span': (7, 8), 'span': (7, 8), 'subtrees': ['PTKANT'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('PTKANT',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('DM', 'ADVX')}
(TOP sagen sie mir ihren namen noch mal bitte)

Sentence 986:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(DM[00m
		(NX
			(NE meurer))[01;31m)[00m)
Step:Unary
{'subtrees': ['NX'], 'family': ['DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('NE',), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 1), 'span': (0, 1), 'left siblings': [], 'label': 'DM', 'classified_type': 'Unary', 'type': 'remove'}
(TOP meurer)

Sentence 987:
0 Initial errors
0 on fringe, 0 iterations

Sentence 988:
3 Initial errors
0 on fringe, 3 iterations
1 Error:UNSET add
1 Error:UNSET remove
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(KOORD und)
		(LK wurden)
		(MF
			(NX sie)
			(NX mir)
			(ADVX bitte)
			(ADVX noch)
			(PX [01;33m(PX[00m
				(APPR fur)
				[01;31m(NX[00m
					(NX die nachte) [01;33mPX)[00m
					(APPRART vom)
					(DM also)
					(NX
						(NX dienstag nacht)
						[01;36m(PX[00m
							(APPR bis)
							(NX freitag nacht)[01;36m)[00m)[01;31m)[00m)
			(ADVX noch)
			(NX das hotel))
		(VC buchen)))
Step:UNSET add
{'subtrees': ['APPR', 'NX'], 'family': ['NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NN', 'ADV'), 'right siblings': [], 'left siblings': [(NX (NX (NN dienstag)) (ADVX (ADV nacht)))], 'auto preterminal span': (13, 16), 'span': (13, 16), 'parent': 'NX', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(KOORD und)
		(LK wurden)
		(MF
			(NX sie)
			(NX mir)
			(ADVX bitte)
			(ADVX noch)
			(PX [01;33m(PX[00m
				(APPR fur)
				[01;31m(NX[00m
					(NX die nachte) [01;33mPX)[00m
					(APPRART vom)
					(DM also)
					(NX dienstag nacht bis freitag nacht)[01;31m)[00m)
			(ADVX noch)
			(NX das hotel))
		(VC buchen)))
Step:UNSET remove
{'subtrees': ['NX', 'APPRART', 'DM', 'NX'], 'family': ['APPR', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'APPRART', 'ADV', 'NN', 'ADV', 'APPR', 'NN', 'ADV'), 'right siblings': [], 'parent': 'PX', 'auto preterminal span': (6, 16), 'span': (7, 16), 'left siblings': ['APPR'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX
		(KOORD und)
		(LK wurden)
		(MF
			(NX sie)
			(NX mir)
			(ADVX bitte)
			(ADVX noch)
			(PX
				[01;36m(PX[00m
					(APPR fur)
					(NX die nachte)[01;36m)[00m
				(APPRART vom)
				(DM also)
				(NX dienstag nacht bis freitag nacht))
			(ADVX noch)
			(NX das hotel))
		(VC buchen)))
Step:UNSET add
{'subtrees': ['APPR', 'NX'], 'family': ['PX', 'APPRART', 'DM', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN'), 'right siblings': [(APPRART vom), (DM (ADVX (ADV also))), (NX (NX (NX (NN dienstag)) (ADVX (ADV nacht))) (PX (APPR bis) (NX (NX (NN freitag)) (ADVX (ADV nacht)))))], 'left siblings': [], 'auto preterminal span': (6, 9), 'span': (6, 9), 'parent': 'PX', 'label': 'PX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP und wurden sie mir bitte noch fur die nachte vom also dienstag nacht bis freitag nacht noch das hotel buchen)

Sentence 989:
0 Initial errors
0 on fringe, 0 iterations

Sentence 990:
0 Initial errors
0 on fringe, 0 iterations

Sentence 991:
0 Initial errors
0 on fringe, 0 iterations

Sentence 992:
0 Initial errors
0 on fringe, 0 iterations

Sentence 993:
2 Initial errors
0 on fringe, 1 iterations
2 Error:NP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(PX[00m
	(PX
		(APPR fur)
		[01;31m(NX[00m
			(NX hundert funfundvierzig mark) [01;33mPX)[00m
			(NX das einzelzimmer)[01;31m)[00m))
Step:NP Attachment
{'new_parent': 'PX', 'new_family': ['APPR', 'NX', 'NX'], 'mover info': [('NX', (1, 4))], 'old_family': ['NX', 'NX'], 'start left siblings': [], 'auto preterminals': ('APPR', 'CARD', 'CARD', 'NN', 'ART', 'NN'), 'start right siblings': ['NX'], 'end left siblings': ['APPR'], 'auto preterminal span': (0, 6), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': ['NX'], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP fur hundert funfundvierzig mark das einzelzimmer)

Sentence 994:
0 Initial errors
0 on fringe, 0 iterations

Sentence 995:
0 Initial errors
0 on fringe, 0 iterations

Sentence 996:
4 Initial errors
0 on fringe, 1 iterations
4 Error:NP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM gut)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(VF das)
			(LK ist)
			[01;31m(MF[00m [01;33m(MF[00m
				(ADVX dann)
				(PX vom vierzehnten juli bis zum siebzehnten juli)[01;31m)[00m[01;31m)[00m
		(NX einzelzimmer hotel loccumerhof)[01;36m)[00m) [01;33mMF)[00m
Step:NP Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'PX', 'NX'], 'mover info': [('NX', (11, 14))], 'old_family': ['DM', 'SIMPX', 'NX'], 'start left siblings': ['DM', 'SIMPX'], 'auto preterminals': ('ITJ', 'PDS', 'VAFIN', 'ADV', 'APPRART', 'ADJA', 'NN', 'APPR', 'APPRART', 'ADJA', 'NN', 'NN', 'NN', 'NE'), 'start right siblings': [], 'end left siblings': ['ADVX', 'PX'], 'auto preterminal span': (0, 14), 'movers': ['NX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP gut das ist dann vom vierzehnten juli bis zum siebzehnten juli einzelzimmer hotel loccumerhof)

Sentence 997:
0 Initial errors
0 on fringe, 0 iterations

Sentence 998:
0 Initial errors
0 on fringe, 0 iterations

Sentence 999:
2 Initial errors
0 on fringe, 2 iterations
1 Error:UNSET add
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wann)
		(LK kann)
		[01;36m(FKOORD[00m
			(MF
				(NX ich)
				(PX bei ihnen)
				(NX
					[01;36m(NX[00m
						(NX das flugticket)
						(KON und)
						(NX die hotelbuchung)[01;36m)[00m
					(KON und)
					(ADVX so weiter)))
			(VC abholen)[01;36m)[00m))
Step:UNSET add
{'subtrees': ['MF', 'VC'], 'family': ['VF', 'LK', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'APPR', 'PPER', 'ART', 'NN', 'KON', 'ART', 'NN', 'KON', 'ADV', 'ADV', 'VVINF'), 'right siblings': [], 'left siblings': [(VF (PX (PWAV wann))), (LK (VXFIN (VMFIN kann)))], 'auto preterminal span': (2, 14), 'span': (2, 14), 'parent': 'SIMPX', 'label': 'FKOORD', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(VF wann)
		(LK kann)
		(FKOORD
			(MF
				(NX ich)
				(PX bei ihnen)
				(NX
					[01;36m(NX[00m
						(NX das flugticket)
						(KON und)
						(NX die hotelbuchung)[01;36m)[00m
					(KON und)
					(ADVX so weiter)))
			(VC abholen))))
Step:UNSET add
{'subtrees': ['NX', 'KON', 'NX'], 'family': ['NX', 'KON', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'KON', 'ART', 'NN'), 'right siblings': [(KON und), (ADVX (ADVX (ADV so)) (ADV weiter))], 'left siblings': [], 'auto preterminal span': (5, 10), 'span': (5, 10), 'parent': 'NX', 'label': 'NX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP wann kann ich bei ihnen das flugticket und die hotelbuchung und so weiter abholen)

Sentence 1000:
8 Initial errors
0 on fringe, 5 iterations
2 Error:Clause Attachment
2 Error:UNSET move
2 Error:NP Attachment
1 Error:UNSET remove
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX ich mache ihnen das jetzt fertig)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(LK konnen)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX
					(PPER sie))[01;31m)[00m[01;31m)[00m
		[01;31m(SIMPX[00m
			[01;31m(VF[00m
				(ADVX
					(ADV morgen))[01;31m)[00m [01;33mMF)[00m
			(LK kommt)
			(MF die bestatigung)[01;31m)[00m[01;36m)[00m
	(SIMPX
		(LK konnen)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX sie)
				(NX es)[01;31m)[00m
			(NX ticket)[01;36m)[00m
		(VC abholen)))
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'VF', 'LK', 'MF'], 'mover info': [('SIMPX', (6, 8))], 'old_family': ['SIMPX', 'SIMPX', 'SIMPX', 'SIMPX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('PPER', 'VVFIN', 'PPER', 'PDS', 'ADV', 'PTKVZ', 'VMFIN', 'PPER', 'ADV', 'VVFIN', 'ART', 'NN', 'VMFIN', 'PPER', 'PPER', 'NN', 'VVINF'), 'start right siblings': ['SIMPX', 'SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 17), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': ['VF', 'LK', 'MF'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX ich mache ihnen das jetzt fertig)
	(SIMPX
		[01;31m(SIMPX[00m
			(LK konnen)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX
					(PPER sie))[01;31m)[00m[01;31m)[00m
		[01;31m(VF[00m
			(ADVX
				(ADV morgen))[01;31m)[00m [01;33mMF)[00m
		(LK kommt)
		(MF die bestatigung))
	(SIMPX
		(LK konnen)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX sie)
				(NX es)[01;31m)[00m
			(NX ticket)[01;36m)[00m
		(VC abholen)))
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'VF'], 'mover info': [('VF', (8, 9))], 'old_family': ['SIMPX', 'VF', 'LK', 'MF'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('VMFIN', 'PPER', 'ADV', 'VVFIN', 'ART', 'NN'), 'start right siblings': ['LK', 'MF'], 'end left siblings': ['NX'], 'auto preterminal span': (6, 12), 'movers': ['VF'], 'old_parent': 'SIMPX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX ich mache ihnen das jetzt fertig)
	(SIMPX
		[01;31m(SIMPX[00m
			(LK konnen)
			(MF
				(NX sie)
				[01;31m(VF[00m
					(ADVX
						(ADV morgen))[01;31m)[00m)[01;31m)[00m
		(LK kommt)
		(MF die bestatigung))
	(SIMPX
		(LK konnen)
		[01;36m(MF[00m
			[01;31m(MF[00m
				(NX sie)
				(NX es)[01;31m)[00m
			(NX ticket)[01;36m)[00m
		(VC abholen)))
Step:NP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'NX', 'NX'], 'mover info': [('NX', (15, 16))], 'old_family': ['LK', 'MF', 'NX', 'VC'], 'start left siblings': ['LK', 'MF'], 'auto preterminals': ('VMFIN', 'PPER', 'PPER', 'NN', 'VVINF'), 'start right siblings': ['VC'], 'end left siblings': ['NX', 'NX'], 'auto preterminal span': (12, 17), 'movers': ['NX'], 'old_parent': 'SIMPX', 'POS confusion': ('NN', 'NN'), 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	(SIMPX ich mache ihnen das jetzt fertig)
	(SIMPX
		[01;31m(SIMPX[00m
			(LK konnen)
			(MF
				(NX sie)
				[01;31m(VF[00m
					(ADVX
						(ADV morgen))[01;31m)[00m)[01;31m)[00m
		(LK kommt)
		(MF die bestatigung))
	(SIMPX konnen sie es ticket abholen))
Step:UNSET remove
{'subtrees': ['LK', 'MF'], 'family': ['SIMPX', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'ADV', 'VVFIN', 'ART', 'NN'), 'right siblings': ['LK', 'MF'], 'parent': 'SIMPX', 'auto preterminal span': (6, 12), 'span': (6, 9), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX ich mache ihnen das jetzt fertig)
	(SIMPX
		(LK konnen)
		(MF
			(NX sie)
			[01;31m(VF[00m
				(ADVX
					(ADV morgen))[01;31m)[00m)
		(LK kommt)
		(MF die bestatigung))
	(SIMPX konnen sie es ticket abholen))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['NX', 'VF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (7, 9), 'span': (8, 9), 'left siblings': ['NX'], 'label': 'VF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ich mache ihnen das jetzt fertig konnen sie morgen kommt die bestatigung konnen sie es ticket abholen)

Sentence 1001:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1002:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1003:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1004:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1005:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1006:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1007:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1008:
1 Initial errors
0 on fringe, 1 iterations
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wir)
		(LK wollten)
		(MF
			(PX in den nachsten drei monaten)
			(ADVX doch)
			(ADVX noch)
			(ADVX mal)
			(APPR nach)
			[01;31m(PX[00m
				(PX nach hannover)
				(PX zu unserer filiale)[01;31m)[00m)
		(VC fahren)))
Step:PP Attachment
{'subtrees': ['PX', 'PX'], 'family': ['PX', 'ADVX', 'ADVX', 'ADVX', 'APPR', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'ADJA', 'CARD', 'NN', 'ADV', 'ADV', 'ADV', 'APPR', 'APPR', 'NE', 'APPR', 'PPOSAT', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 16), 'span': (11, 16), 'left siblings': ['PX', 'ADVX', 'ADVX', 'ADVX', 'APPR'], 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP wir wollten in den nachsten drei monaten doch noch mal nach nach hannover zu unserer filiale fahren)

Sentence 1009:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1010:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1011:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1012:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1013:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(PX
				(APPR in)
				(NX zwei wochen))[01;31m)[00m
		(VF das)
		(LK ware)
		(MF der wievielte)[01;31m)[00m)
Step:Unary
{'subtrees': ['PX'], 'family': ['LV', 'VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'CARD', 'NN', 'PDS', 'VAFIN', 'ART', 'NN'), 'right siblings': ['VF', 'LK', 'MF'], 'parent': 'SIMPX', 'auto preterminal span': (0, 7), 'span': (0, 3), 'left siblings': [], 'label': 'LV', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	[01;31m(SIMPX[00m
		(PX in zwei wochen)
		(VF das)
		(LK ware)
		(MF der wievielte)[01;31m)[00m)
Step:Unary
{'subtrees': ['PX', 'VF', 'LK', 'MF'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'CARD', 'NN', 'PDS', 'VAFIN', 'ART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 7), 'span': (0, 7), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP in zwei wochen das ware der wievielte)

Sentence 1014:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1015:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1016:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1017:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1018:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1019:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1020:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1021:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1022:
2 Initial errors
0 on fringe, 2 iterations
1 Error:Unary
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM okay)
	[01;31m(PX[00m
		[01;36m(DM[00m
			(ADVX
				(ADV also))[01;36m)[00m
		(PX am zwanzigsten)[01;31m)[00m)
Step:Unary
{'subtrees': ['ADVX'], 'family': ['DM', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV',), 'right siblings': [(PX (APPRART am) (NX (NN zwanzigsten)))], 'left siblings': [], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'PX', 'label': 'DM', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM okay)
	[01;31m(PX[00m
		(DM also)
		(PX am zwanzigsten)[01;31m)[00m)
Step:PP Attachment
{'subtrees': ['DM', 'PX'], 'family': ['DM', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADV', 'APPRART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 4), 'span': (1, 4), 'left siblings': ['DM'], 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP okay also am zwanzigsten)

Sentence 1023:
5 Initial errors
0 on fringe, 2 iterations
4 Error:NP Attachment
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			(VF was)
			(LK meinen)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX
					(PPER sie))[01;31m)[00m[01;31m)[00m
		[01;31m(NX[00m
			(ADVX eher)
			(NX flug)[01;31m)[00m) [01;33mMF)[00m[01;36m)[00m
Step:NP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'NX'], 'mover info': [('NX', (3, 5))], 'old_family': ['SIMPX', 'NX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('PWS', 'VVFIN', 'PPER', 'ADV', 'NN'), 'start right siblings': [], 'end left siblings': ['NX'], 'auto preterminal span': (0, 5), 'movers': ['NX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(VF was)
		(LK meinen)
		(MF
			(NX sie)
			[01;31m(NX[00m
				(ADVX eher)
				(NX flug)[01;31m)[00m)))
Step:UNSET remove
{'subtrees': ['ADVX', 'NX'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'NN'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 5), 'span': (3, 5), 'left siblings': ['NX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP was meinen sie eher flug)

Sentence 1024:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1025:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1026:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1027:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1028:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1029:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1030:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1031:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1032:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1033:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1034:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1035:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1036:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1037:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1038:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1039:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF da)
		(LK konnten)
		(MF wir den)
		(VC nehmen)
		[01;36m(PX[00m
			(NF
				(PX um zwolf uhr funfundvierzig)
				(PX zum beispiel))[01;36m)[00m))
Step:Unary
{'subtrees': ['NF'], 'family': ['VF', 'LK', 'MF', 'VC', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'CARD', 'NN', 'CARD', 'APPRART', 'NN'), 'right siblings': [], 'left siblings': [(VF (ADVX (ADV da))), (LK (VXFIN (VMFIN konnten))), (MF (NX (PPER wir)) (NX (PDS den))), (VC (VXINF (VVINF nehmen)))], 'auto preterminal span': (5, 11), 'span': (5, 11), 'parent': 'SIMPX', 'label': 'PX', 'classified_type': 'Unary', 'type': 'add'}
(TOP da konnten wir den nehmen um zwolf uhr funfundvierzig zum beispiel)

Sentence 1040:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1041:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1042:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1043:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1044:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1045:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1046:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1047:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF sie)
		(LK rauchen)
		(SIMPX glaube ich)
		[01;31m(MF[00m
			(ADVX auch)
			(ADVX nicht)[01;31m)[00m)
	(DM frau meurer))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX'], 'family': ['VF', 'LK', 'SIMPX', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'VVFIN', 'PPER', 'ADV', 'PTKNEG'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 6), 'span': (4, 6), 'left siblings': ['VF', 'LK', 'SIMPX'], 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP sie rauchen glaube ich auch nicht frau meurer)

Sentence 1048:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1049:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1050:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1051:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1052:
3 Initial errors
0 on fringe, 2 iterations
2 Error:Different label
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		[01;36m(KOORD[00m [01;31m(VF[00m
			[01;31m(ADVX[00m
				(ADV aber)[01;31m)[00m[01;31m)[00m[01;36m)[00m
		(LK gehen)
		(MF wir doch dann sonntag abend noch ins theater)))
Step:Different label
{'family': ['KOORD', 'LK', 'MF'], 'auto preterminal span': (1, 2), 'span': (1, 2), 'subtrees': ['ADVX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('ADV',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('VF', 'KOORD')}
(TOP
	(DM ja)
	(SIMPX
		(KOORD
			[01;31m(ADVX[00m
				(ADV aber)[01;31m)[00m)
		(LK gehen)
		(MF wir doch dann sonntag abend noch ins theater)))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV',), 'right siblings': [], 'parent': 'KOORD', 'auto preterminal span': (1, 2), 'span': (1, 2), 'left siblings': [], 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP ja aber gehen wir doch dann sonntag abend noch ins theater)

Sentence 1053:
3 Initial errors
0 on fringe, 3 iterations
1 Error:Unary
1 Error:Co-ordination
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		(VF ich)
		(LK kann)
		(MF ja mal im reiseburo)
		(VC anrufen)[01;31m)[00m
	(KON oder)
	(APPRART im)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK mussen)
		(MF uns eh noch)
		(VC uberlegen)
		(NF
			(SIMPX
				[01;36m(NF[00m
					(SIMPX
						(C wo)
						(MF wir)
						(VC schlafen wollen))[01;36m)[00m
				(SIMPX ob wir ein hotel nehmen oder pension)))[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['NF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PWAV', 'PPER', 'VVINF', 'VMFIN'), 'right siblings': [(SIMPX (C (KOUS ob)) (MF (NX (PPER wir)) (NX (ART ein) (NN hotel))) (VC (VXFIN (VVFIN nehmen))) (NF (NX (KON oder) (NX (NN pension)))))], 'left siblings': [], 'auto preterminal span': (16, 20), 'span': (16, 20), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM ja)
	[01;31m(SIMPX[00m
		(VF ich)
		(LK kann)
		(MF ja mal im reiseburo)
		(VC anrufen)[01;31m)[00m
	(KON oder)
	(APPRART im)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK mussen)
		(MF uns eh noch)
		(VC uberlegen)
		(NF wo wir schlafen wollen ob wir ein hotel nehmen oder pension)[01;31m)[00m)
Step:Co-ordination
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['DM', 'SIMPX', 'KON', 'APPRART', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'VMFIN', 'ADV', 'ADV', 'APPRART', 'NN', 'VVINF', 'KON', 'APPRART', 'PPER', 'VMFIN', 'PRF', 'ADV', 'ADV', 'VVINF', 'PWAV', 'PPER', 'VVINF', 'VMFIN', 'KOUS', 'PPER', 'ART', 'NN', 'VVFIN', 'KON', 'NN'), 'right siblings': ['KON', 'APPRART', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 27), 'span': (1, 8), 'left siblings': ['DM'], 'label': 'SIMPX', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP
	(DM ja)
	(VF ich)
	(LK kann)
	(MF ja mal im reiseburo)
	(VC anrufen)
	(KON oder)
	(APPRART im)
	[01;31m(SIMPX[00m
		(VF wir)
		(LK mussen)
		(MF uns eh noch)
		(VC uberlegen)
		(NF wo wir schlafen wollen ob wir ein hotel nehmen oder pension)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'VC', 'NF'], 'family': ['DM', 'VF', 'LK', 'MF', 'VC', 'KON', 'APPRART', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'VMFIN', 'ADV', 'ADV', 'APPRART', 'NN', 'VVINF', 'KON', 'APPRART', 'PPER', 'VMFIN', 'PRF', 'ADV', 'ADV', 'VVINF', 'PWAV', 'PPER', 'VVINF', 'VMFIN', 'KOUS', 'PPER', 'ART', 'NN', 'VVFIN', 'KON', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 27), 'span': (10, 27), 'left siblings': ['DM', 'VF', 'LK', 'MF', 'VC', 'KON', 'APPRART'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ja ich kann ja mal im reiseburo anrufen oder im wir mussen uns eh noch uberlegen wo wir schlafen wollen ob wir ein hotel nehmen oder pension)

Sentence 1054:
5 Initial errors
0 on fringe, 5 iterations
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF da)
		(LK kann)
		(MF ich ja mal)
		[01;31m(FKOORD[00m [01;33m(VXINF (VC[00m
			[01;31m(VC[00m
				(VXINF
					(VVINF anrufen))[01;31m)[00m
			(KON und)
			[01;31m(VCN[00m
				(VC fragen) [01;33mVC) VXINF)[00m
				(NF ob die ein programm haben fur theater)[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['VXINF'], 'family': ['VC', 'KON', 'VCN'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVINF', 'KON', 'VVINF', 'KOUS', 'PDS', 'ART', 'NN', 'VAFIN', 'APPR', 'NN'), 'right siblings': ['KON', 'VCN'], 'parent': 'FKOORD', 'auto preterminal span': (5, 15), 'span': (5, 6), 'left siblings': [], 'label': 'VC', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(VF da)
		(LK kann)
		(MF ich ja mal)
		[01;31m(FKOORD[00m [01;33m(VXINF (VC[00m
			(VXINF anrufen)
			(KON und)
			[01;31m(VCN[00m
				(VC fragen) [01;33mVC) VXINF)[00m
				(NF ob die ein programm haben fur theater)[01;31m)[00m[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['VXINF', 'KON', 'VCN'], 'family': ['VF', 'LK', 'MF', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'VVINF', 'KON', 'VVINF', 'KOUS', 'PDS', 'ART', 'NN', 'VAFIN', 'APPR', 'NN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 15), 'span': (5, 15), 'left siblings': ['VF', 'LK', 'MF'], 'label': 'FKOORD', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX
		(VF da)
		(LK kann)
		(MF ich ja mal)
		[01;33m(VXINF (VC[00m (VXINF anrufen)
		(KON und)
		[01;31m(VCN[00m
			(VC fragen) [01;33mVC) VXINF)[00m
			(NF ob die ein programm haben fur theater)[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['VC', 'NF'], 'family': ['VF', 'LK', 'MF', 'VXINF', 'KON', 'VCN'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'VVINF', 'KON', 'VVINF', 'KOUS', 'PDS', 'ART', 'NN', 'VAFIN', 'APPR', 'NN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 15), 'span': (7, 15), 'left siblings': ['VF', 'LK', 'MF', 'VXINF', 'KON'], 'label': 'VCN', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX
		(VF da)
		(LK kann)
		(MF ich ja mal)
		[01;36m(VXINF[00m
			[01;36m(VC[00m
				(VXINF anrufen)
				(KON und)
				(VC fragen)[01;36m)[00m[01;36m)[00m
		(NF ob die ein programm haben fur theater)))
Step:UNSET add
{'subtrees': ['VXINF', 'KON', 'VC'], 'family': ['VF', 'LK', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVINF', 'KON', 'VVINF'), 'right siblings': [(NF (SIMPX (C (KOUS ob)) (MF (NX (PDS die)) (NX (ART ein) (NN programm))) (VC (VXFIN (VAFIN haben))) (NF (PX (APPR fur) (NX (NN theater))))))], 'left siblings': [(VF (ADVX (ADV da))), (LK (VXFIN (VMFIN kann))), (MF (NX (PPER ich)) (ADVX (ADV ja)) (ADVX (ADV mal)))], 'auto preterminal span': (5, 8), 'span': (5, 8), 'parent': 'SIMPX', 'label': 'VC', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(VF da)
		(LK kann)
		(MF ich ja mal)
		[01;36m(VXINF[00m
			(VC
				(VXINF anrufen)
				(KON und)
				(VC fragen))[01;36m)[00m
		(NF ob die ein programm haben fur theater)))
Step:Unary
{'subtrees': ['VC'], 'family': ['VF', 'LK', 'MF', 'VXINF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVINF', 'KON', 'VVINF'), 'right siblings': [(NF (SIMPX (C (KOUS ob)) (MF (NX (PDS die)) (NX (ART ein) (NN programm))) (VC (VXFIN (VAFIN haben))) (NF (PX (APPR fur) (NX (NN theater))))))], 'left siblings': [(VF (ADVX (ADV da))), (LK (VXFIN (VMFIN kann))), (MF (NX (PPER ich)) (ADVX (ADV ja)) (ADVX (ADV mal)))], 'auto preterminal span': (5, 8), 'span': (5, 8), 'parent': 'SIMPX', 'label': 'VXINF', 'classified_type': 'Unary', 'type': 'add'}
(TOP da kann ich ja mal anrufen und fragen ob die ein programm haben fur theater)

Sentence 1055:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1056:
1 Initial errors
0 on fringe, 1 iterations
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		(VF ich)
		(LK war)[01;31m)[00m
	(SIMPX das letzte mal war ich im intercityhotel))
Step:UNSET remove
{'subtrees': ['VF', 'LK'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ART', 'ADJA', 'NN', 'VAFIN', 'PPER', 'APPRART', 'NE'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 9), 'span': (0, 2), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ich war das letzte mal war ich im intercityhotel)

Sentence 1057:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX das ist ziemlich zentral)
		(KON und)
		(DM ja)
		(DM okay)
		(SIMPX es hat einen konferenzraum)[01;31m)[00m
	(SIMPX aber das brauchen wir eigentlich nicht))
Step:Clause Attachment
{'subtrees': ['SIMPX', 'KON', 'DM', 'DM', 'SIMPX'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'VAFIN', 'ADV', 'ADJD', 'KON', 'PTKANT', 'ITJ', 'PPER', 'VAFIN', 'ART', 'NN', 'KON', 'PDS', 'VVFIN', 'PPER', 'ADV', 'PTKNEG'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 17), 'span': (0, 11), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP das ist ziemlich zentral und ja okay es hat einen konferenzraum aber das brauchen wir eigentlich nicht)

Sentence 1058:
6 Initial errors
0 on fringe, 3 iterations
3 Error:Clause Attachment
2 Error:Different label
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP [01;33m(SIMPX[00m
		[01;31m(SIMPX[00m
			(VF da)
			(LK war)[01;31m)[00m
		[01;31m(SIMPX[00m
			[01;36m(MF[00m [01;31m(VF[00m
				(NX
					(ART das)
					(NN einzelzimmer))[01;31m)[00m [01;33mSIMPX)[00m[01;36m)[00m
			(LK hat)
			(MF ungefahr zweihundert mark)
			(VC gekostet)[01;31m)[00m)[01;36m)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'VF', 'LK', 'MF', 'VC'], 'mover info': [('SIMPX', (0, 2))], 'old_family': ['SIMPX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'VAFIN', 'ART', 'NN', 'VAFIN', 'ADV', 'CARD', 'NN', 'VVPP'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 9), 'adding node already present': False, 'movers': ['SIMPX'], 'old_parent': 'TOP', 'added and moved': True, 'end right siblings': ['VF', 'LK', 'MF', 'VC'], 'classified_type': 'Clause Attachment', 'type': 'move', 'added label': 'MF'}
(TOP
	(SIMPX
		(SIMPX
			[01;31m(SIMPX[00m
				(VF da)
				(LK war)[01;31m)[00m
			[01;36m(MF[00m [01;31m(VF[00m
				(NX
					(ART das)
					(NN einzelzimmer))[01;31m)[00m[01;36m)[00m)
		(LK hat)
		(MF ungefahr zweihundert mark)
		(VC gekostet)))
Step:Different label
{'family': ['SIMPX', 'MF'], 'auto preterminal span': (2, 4), 'span': (2, 4), 'subtrees': ['NX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('ART', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('VF', 'MF')}
(TOP
	(SIMPX
		(SIMPX
			[01;31m(SIMPX[00m
				(VF da)
				(LK war)[01;31m)[00m
			(MF das einzelzimmer))
		(LK hat)
		(MF ungefahr zweihundert mark)
		(VC gekostet)))
Step:UNSET remove
{'subtrees': ['VF', 'LK'], 'family': ['SIMPX', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'ART', 'NN'), 'right siblings': ['MF'], 'parent': 'SIMPX', 'auto preterminal span': (0, 4), 'span': (0, 2), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP da war das einzelzimmer hat ungefahr zweihundert mark gekostet)

Sentence 1059:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1060:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1061:
5 Initial errors
0 on fringe, 2 iterations
4 Error:Clause Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(LK meinen)
			(MF sie)
			[01;31m(NF[00m [01;33m(SIMPX[00m
				[01;31m(SIMPX[00m
					(VF die)
					(LK wissen)
					(MF das bei der bahn)[01;31m)[00m[01;31m)[00m[01;31m)[00m
		(SIMPX wenn ich da) [01;33mSIMPX)[00m[01;36m)[00m
	(SIMPX oder ich gehe ins reiseburo)
	(SIMPX und da kann ich ja auch bahntickets kaufen))
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'SIMPX'], 'mover info': [('SIMPX', (8, 11))], 'old_family': ['SIMPX', 'SIMPX', 'SIMPX', 'SIMPX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('VVFIN', 'PPER', 'PDS', 'VVFIN', 'PDS', 'APPR', 'ART', 'NN', 'KOUS', 'PPER', 'ADV', 'KON', 'PPER', 'VVFIN', 'APPRART', 'NN', 'KON', 'ADV', 'VMFIN', 'PPER', 'ADV', 'ADV', 'NN', 'VVINF'), 'start right siblings': ['SIMPX', 'SIMPX'], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 24), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(LK meinen)
		(MF sie)
		[01;31m(NF[00m
			(SIMPX
				(VF die)
				(LK wissen)
				(MF das bei der bahn)
				(SIMPX wenn ich da))[01;31m)[00m)
	(SIMPX oder ich gehe ins reiseburo)
	(SIMPX und da kann ich ja auch bahntickets kaufen))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'PDS', 'VVFIN', 'PDS', 'APPR', 'ART', 'NN', 'KOUS', 'PPER', 'ADV'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 11), 'span': (2, 11), 'left siblings': ['LK', 'MF'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP meinen sie die wissen das bei der bahn wenn ich da oder ich gehe ins reiseburo und da kann ich ja auch bahntickets kaufen)

Sentence 1062:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1063:
8 Initial errors
0 on fringe, 8 iterations
1 Error:Clause Attachment
1 Error:Modifier Attachment
1 Error:Unary
1 Error:Single Word Phrase
1 Error:Co-ordination
1 Error:UNSET add
1 Error:Unary
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX
			(C das)
			(MF
				[01;31m(NX[00m
					(PDS die)[01;31m)[00m
				[01;36m(MF[00m
					(NX mir)
					(ADVX da)[01;36m)[00m))
		[01;36m(NF[00m
			(SIMPX
				(C das)
				[01;31m(FKOORD[00m
					[01;31m(MVCN[00m
						(MF die da)
						(VC anrufen)
						[01;33m(SIMPX (NF[00m (NF vielleicht)[01;31m)[00m
					(KON und)
					(MVCN zwei zimmer reservieren fur eine termine)[01;31m)[00m)[01;36m)[00m) [01;33mNF) SIMPX)[00m[01;36m)[00m
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PDS', 'PPER', 'ADV', 'KOUS', 'PDS', 'ADV', 'VVFIN', 'ADV', 'KON', 'CARD', 'NN', 'VVFIN', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [], 'auto preterminal span': (0, 16), 'span': (0, 16), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(C das)
			(MF
				[01;31m(NX[00m
					(PDS die)[01;31m)[00m
				[01;36m(MF[00m
					(NX mir)
					(ADVX da)[01;36m)[00m))
		[01;36m(NF[00m
			(SIMPX
				(C das)
				[01;31m(FKOORD[00m
					[01;31m(MVCN[00m
						(MF die da)
						(VC anrufen)
						[01;33m(SIMPX (NF[00m (NF vielleicht)[01;31m)[00m
					(KON und)
					(MVCN zwei zimmer reservieren fur eine termine)[01;31m)[00m)[01;36m)[00m)) [01;33mNF) SIMPX)[00m
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX'], 'family': ['NX', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV'), 'right siblings': [], 'left siblings': [(NX (PDS die))], 'auto preterminal span': (2, 4), 'span': (2, 4), 'parent': 'MF', 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(C das)
			(MF
				[01;31m(NX[00m
					(PDS die)[01;31m)[00m
				(MF mir da)))
		[01;36m(NF[00m
			(SIMPX
				(C das)
				[01;31m(FKOORD[00m
					[01;31m(MVCN[00m
						(MF die da)
						(VC anrufen)
						[01;33m(SIMPX (NF[00m (NF vielleicht)[01;31m)[00m
					(KON und)
					(MVCN zwei zimmer reservieren fur eine termine)[01;31m)[00m)[01;36m)[00m)) [01;33mNF) SIMPX)[00m
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PDS', 'ADV', 'VVFIN', 'ADV', 'KON', 'CARD', 'NN', 'VVFIN', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(SIMPX (C (KOUS das)) (MF (NX (PDS die)) (MF (NX (PPER mir)) (ADVX (ADV da)))))], 'auto preterminal span': (4, 16), 'span': (4, 16), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(C das)
			(MF
				[01;31m(NX[00m
					(PDS die)[01;31m)[00m
				(MF mir da)))
		(NF
			(SIMPX
				(C das)
				[01;31m(FKOORD[00m
					[01;31m(MVCN[00m
						(MF die da)
						(VC anrufen)
						[01;33m(SIMPX (NF[00m (NF vielleicht)[01;31m)[00m
					(KON und)
					(MVCN zwei zimmer reservieren fur eine termine)[01;31m)[00m)))) [01;33mNF) SIMPX)[00m
Step:Single Word Phrase
{'subtrees': ['PDS'], 'family': ['NX', 'MF'], 'over_word': True, 'over words': True, 'auto preterminals': ('PDS', 'PPER', 'ADV'), 'right siblings': ['MF'], 'parent': 'MF', 'auto preterminal span': (1, 4), 'span': (1, 2), 'left siblings': [], 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(SIMPX
		(SIMPX das die mir da)
		(NF
			(SIMPX
				(C das)
				[01;31m(FKOORD[00m
					[01;31m(MVCN[00m
						(MF die da)
						(VC anrufen)
						[01;33m(SIMPX (NF[00m (NF vielleicht)[01;31m)[00m
					(KON und)
					(MVCN zwei zimmer reservieren fur eine termine)[01;31m)[00m)))) [01;33mNF) SIMPX)[00m
Step:Co-ordination
{'subtrees': ['MF', 'VC', 'NF'], 'family': ['MVCN', 'KON', 'MVCN'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'ADV', 'VVFIN', 'ADV', 'KON', 'CARD', 'NN', 'VVFIN', 'APPR', 'ART', 'NN'), 'right siblings': ['KON', 'MVCN'], 'parent': 'FKOORD', 'auto preterminal span': (5, 16), 'span': (5, 9), 'left siblings': [], 'label': 'MVCN', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP
	(SIMPX
		(SIMPX das die mir da)
		(NF
			(SIMPX
				(C das)
				[01;31m(FKOORD[00m
					(MF die da)
					(VC anrufen)
					[01;36m(SIMPX[00m
						[01;36m(NF[00m
							(NF vielleicht)
							(KON und)
							(MVCN zwei zimmer reservieren fur eine termine)[01;36m)[00m[01;36m)[00m[01;31m)[00m))))
Step:UNSET add
{'subtrees': ['NF', 'KON', 'MVCN'], 'family': ['MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'KON', 'CARD', 'NN', 'VVFIN', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(MF (NX (PDS die)) (ADVX (ADV da))), (VC (VXFIN (VVFIN anrufen)))], 'auto preterminal span': (8, 16), 'span': (8, 16), 'parent': 'FKOORD', 'label': 'NF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX das die mir da)
		(NF
			(SIMPX
				(C das)
				[01;31m(FKOORD[00m
					(MF die da)
					(VC anrufen)
					[01;36m(SIMPX[00m
						(NF
							(NF vielleicht)
							(KON und)
							(MVCN zwei zimmer reservieren fur eine termine))[01;36m)[00m[01;31m)[00m))))
Step:Unary
{'subtrees': ['NF'], 'family': ['MF', 'VC', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'KON', 'CARD', 'NN', 'VVFIN', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(MF (NX (PDS die)) (ADVX (ADV da))), (VC (VXFIN (VVFIN anrufen)))], 'auto preterminal span': (8, 16), 'span': (8, 16), 'parent': 'FKOORD', 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX das die mir da)
		(NF
			(SIMPX
				(C das)
				[01;31m(FKOORD[00m
					(MF die da)
					(VC anrufen)
					(SIMPX vielleicht und zwei zimmer reservieren fur eine termine)[01;31m)[00m))))
Step:Clause Attachment
{'subtrees': ['MF', 'VC', 'SIMPX'], 'family': ['C', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PDS', 'ADV', 'VVFIN', 'ADV', 'KON', 'CARD', 'NN', 'VVFIN', 'APPR', 'ART', 'NN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (4, 16), 'span': (5, 16), 'left siblings': ['C'], 'label': 'FKOORD', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP das die mir da das die da anrufen vielleicht und zwei zimmer reservieren fur eine termine)

Sentence 1064:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1065:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1066:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK kenne)
		(MF
			[01;31m(NX[00m
				(NX ein theater)
				(PX in hannover)[01;31m)[00m))
	(SIMPX das heist ballhof oder so))
Step:Unary
{'subtrees': ['NX', 'PX'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'NE'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 6), 'span': (2, 6), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP ich kenne ein theater in hannover das heist ballhof oder so)

Sentence 1067:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(P
		(SIMPX vielleicht haben die auch eine gute inszenierung)
		(KOUS weil)
		(SIMPX
			(VF das letzte mal)
			(LK haben)
			(MF
				(NX die)
				[01;31m(ADJX[00m
					(ADVX wirklich)
					[01;36m(ADJX[00m
						(ADJD gut)[01;36m)[00m[01;31m)[00m)
			(VC gespielt))))
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'ADJX'], 'mover info': [('ADVX', (13, 14))], 'old_family': ['ADVX', 'ADJD'], 'start left siblings': [], 'auto preterminals': ('PDS', 'ADV', 'ADJD'), 'start right siblings': ['ADJD'], 'end left siblings': ['NX'], 'auto preterminal span': (12, 15), 'movers': ['ADVX'], 'old_parent': 'ADJX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ADJX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP vielleicht haben die auch eine gute inszenierung weil das letzte mal haben die wirklich gut gespielt)

Sentence 1068:
1 Initial errors
0 on fringe, 1 iterations
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ansonsten)
		(LK weis)
		(MF ich gar nicht)
		(NF
			(SIMPX
				(C was)
				(MF
					[01;36m(PX[00m
						(PX im moment)
						(PX in hannover)[01;36m)[00m
					(ADVX so)
					(ADVX los))
				(VC ist)))))
Step:PP Attachment
{'subtrees': ['PX', 'PX'], 'family': ['PX', 'ADVX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'NN', 'APPR', 'NE'), 'right siblings': [(ADVX (ADV so)), (ADVX (ADV los))], 'left siblings': [], 'auto preterminal span': (6, 10), 'span': (6, 10), 'parent': 'MF', 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP ansonsten weis ich gar nicht was im moment in hannover so los ist)

Sentence 1069:
15 Initial errors
0 on fringe, 8 iterations
6 Error:UNSET move
2 Error:Different label
2 Error:NP Attachment
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET remove
1 Error:Clause Attachment
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		(LK wissen)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(NX
					(PPER sie))[01;36m)[00m
			[01;36m(C[00m
				(NX
					(PIS was))[01;36m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;36m(MF[00m [01;31m(VF[00m
			(NX
				(PPER ich))[01;31m)[00m[01;36m)[00m
		(FKOORD [01;33m(FKOORD[00m
			(LKMVC rufe im reiseburo an)
			(KON und)
			[01;36m(LKM[00m
				[01;31m(LKM[00m
					(LK klare)
					[01;31m(MF[00m [01;33m(NX (MF[00m
						[01;31m(NX[00m
							(NX das)
							(NX alles)[01;31m)[00m[01;31m)[00m[01;31m)[00m
				[01;31m(LKM[00m
					(LK kaufe)
					(MF die tickets)[01;31m)[00m[01;36m)[00m)[01;31m)[00m [01;33mMF) NX)[00m
	(SIMPX und dann rufe ich sie noch mal an wegen dem programm im ballhaus)) [01;33mFKOORD)[00m
Step:UNSET move
{'new_parent': 'NX', 'new_family': ['NX', 'NX', 'LKM'], 'mover info': [('LKM', (12, 15))], 'old_family': ['LKMVC', 'KON', 'LKM', 'LKM'], 'start left siblings': ['LKMVC', 'KON', 'LKM'], 'auto preterminals': ('VVFIN', 'APPRART', 'NN', 'PTKVZ', 'KON', 'VVFIN', 'PDS', 'PIS', 'VVFIN', 'ART', 'NN'), 'start right siblings': [], 'end left siblings': ['NX', 'NX'], 'auto preterminal span': (4, 15), 'movers': ['LKM'], 'old_parent': 'FKOORD', 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		(LK wissen)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(NX
					(PPER sie))[01;36m)[00m
			[01;36m(C[00m
				(NX
					(PIS was))[01;36m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;36m(MF[00m [01;31m(VF[00m
			(NX
				(PPER ich))[01;31m)[00m[01;36m)[00m
		(FKOORD [01;33m(FKOORD[00m
			(LKMVC rufe im reiseburo an)
			(KON und)
			(LKM
				(LK klare)
				(MF
					(NX
						(NX das)
						(NX alles)
						[01;31m(LKM[00m
							(LK kaufe)
							(MF die tickets)[01;31m)[00m))))[01;31m)[00m
	(SIMPX und dann rufe ich sie noch mal an wegen dem programm im ballhaus)) [01;33mFKOORD)[00m
Step:Different label
{'family': ['MF', 'FKOORD'], 'auto preterminal span': (3, 4), 'span': (3, 4), 'subtrees': ['NX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('PPER',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('VF', 'MF')}
(TOP
	[01;31m(SIMPX[00m
		(LK wissen)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(NX
					(PPER sie))[01;36m)[00m
			[01;36m(C[00m
				(NX
					(PIS was))[01;36m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		(MF ich)
		(FKOORD [01;33m(FKOORD[00m
			(LKMVC rufe im reiseburo an)
			(KON und)
			(LKM
				(LK klare)
				(MF
					(NX
						(NX das)
						(NX alles)
						[01;31m(LKM[00m
							(LK kaufe)
							(MF die tickets)[01;31m)[00m))))[01;31m)[00m
	(SIMPX und dann rufe ich sie noch mal an wegen dem programm im ballhaus)) [01;33mFKOORD)[00m
Step:NP Attachment
{'new_parent': 'SIMPX', 'new_family': ['NX', 'MF', 'FKOORD'], 'mover info': [('NX', (2, 3))], 'old_family': ['NX', 'NX'], 'start left siblings': ['NX'], 'auto preterminals': ('VVFIN', 'PPER', 'PIS', 'PPER', 'VVFIN', 'APPRART', 'NN', 'PTKVZ', 'KON', 'VVFIN', 'PDS', 'PIS', 'VVFIN', 'ART', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'PPER', 'ADV', 'ADV', 'PTKVZ', 'APPR', 'ART', 'NN', 'APPRART', 'NE'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (0, 28), 'movers': ['NX'], 'old_parent': 'MF', 'POS confusion': ('PIS', 'PIS'), 'end right siblings': ['MF', 'FKOORD'], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		(LK wissen)
		(MF sie)[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;36m(C[00m
			(NX
				(PIS was))[01;36m)[00m
		(MF ich)
		(FKOORD [01;33m(FKOORD[00m
			(LKMVC rufe im reiseburo an)
			(KON und)
			(LKM
				(LK klare)
				(MF
					(NX
						(NX das)
						(NX alles)
						[01;31m(LKM[00m
							(LK kaufe)
							(MF die tickets)[01;31m)[00m))))[01;31m)[00m
	(SIMPX und dann rufe ich sie noch mal an wegen dem programm im ballhaus)) [01;33mFKOORD)[00m
Step:Unary
{'subtrees': ['NX'], 'family': ['C', 'MF', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('PIS',), 'right siblings': [(MF (NX (PPER ich))), (FKOORD (LKMVC (LK (VXFIN (VVFIN rufe))) (MF (PX (APPRART im) (NX (NN reiseburo)))) (VC (PTKVZ an))) (KON und) (LKM (LK (VXFIN (VVFIN klare))) (MF (NX (NX (PDS das)) (NX (PIS alles)) (LKM (LK (VXFIN (VVFIN kaufe))) (MF (NX (ART die) (NN tickets))))))))], 'left siblings': [], 'auto preterminal span': (2, 3), 'span': (2, 3), 'parent': 'SIMPX', 'label': 'C', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(LK wissen)
		(MF sie)[01;31m)[00m
	[01;31m(SIMPX[00m
		(C was)
		(MF ich)
		(FKOORD [01;33m(FKOORD[00m
			(LKMVC rufe im reiseburo an)
			(KON und)
			(LKM
				(LK klare)
				(MF
					(NX
						(NX das)
						(NX alles)
						[01;31m(LKM[00m
							(LK kaufe)
							(MF die tickets)[01;31m)[00m))))[01;31m)[00m
	(SIMPX und dann rufe ich sie noch mal an wegen dem programm im ballhaus)) [01;33mFKOORD)[00m
Step:UNSET remove
{'subtrees': ['LK', 'MF'], 'family': ['SIMPX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'PIS', 'PPER', 'VVFIN', 'APPRART', 'NN', 'PTKVZ', 'KON', 'VVFIN', 'PDS', 'PIS', 'VVFIN', 'ART', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'PPER', 'ADV', 'ADV', 'PTKVZ', 'APPR', 'ART', 'NN', 'APPRART', 'NE'), 'right siblings': ['SIMPX', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 28), 'span': (0, 2), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(LK wissen)
	(MF sie)
	[01;31m(SIMPX[00m
		(C was)
		(MF ich)
		(FKOORD [01;33m(FKOORD[00m
			(LKMVC rufe im reiseburo an)
			(KON und)
			(LKM
				(LK klare)
				(MF
					(NX
						(NX das)
						(NX alles)
						[01;31m(LKM[00m
							(LK kaufe)
							(MF die tickets)[01;31m)[00m))))[01;31m)[00m
	(SIMPX und dann rufe ich sie noch mal an wegen dem programm im ballhaus)) [01;33mFKOORD)[00m
Step:UNSET remove
{'subtrees': ['C', 'MF', 'FKOORD'], 'family': ['LK', 'MF', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'PIS', 'PPER', 'VVFIN', 'APPRART', 'NN', 'PTKVZ', 'KON', 'VVFIN', 'PDS', 'PIS', 'VVFIN', 'ART', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'PPER', 'ADV', 'ADV', 'PTKVZ', 'APPR', 'ART', 'NN', 'APPRART', 'NE'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 28), 'span': (2, 15), 'left siblings': ['LK', 'MF'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(LK wissen)
	(MF sie)
	(C was)
	(MF ich)
	[01;36m(FKOORD[00m
		(FKOORD
			(LKMVC rufe im reiseburo an)
			(KON und)
			(LKM
				(LK klare)
				(MF
					(NX
						(NX das)
						(NX alles)
						[01;31m(LKM[00m
							(LK kaufe)
							(MF die tickets)[01;31m)[00m))))
		(SIMPX und dann rufe ich sie noch mal an wegen dem programm im ballhaus)[01;36m)[00m)
Step:Clause Attachment
{'subtrees': ['FKOORD', 'SIMPX'], 'family': ['LK', 'MF', 'C', 'MF', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'APPRART', 'NN', 'PTKVZ', 'KON', 'VVFIN', 'PDS', 'PIS', 'VVFIN', 'ART', 'NN', 'KON', 'ADV', 'VVFIN', 'PPER', 'PPER', 'ADV', 'ADV', 'PTKVZ', 'APPR', 'ART', 'NN', 'APPRART', 'NE'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VVFIN wissen))), (MF (NX (PPER sie))), (C (NX (PIS was))), (MF (NX (PPER ich)))], 'auto preterminal span': (4, 28), 'span': (4, 28), 'parent': 'TOP', 'label': 'FKOORD', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(LK wissen)
	(MF sie)
	(C was)
	(MF ich)
	(FKOORD
		(FKOORD
			(LKMVC rufe im reiseburo an)
			(KON und)
			(LKM
				(LK klare)
				(MF
					(NX
						(NX das)
						(NX alles)
						[01;31m(LKM[00m
							(LK kaufe)
							(MF die tickets)[01;31m)[00m))))
		(SIMPX und dann rufe ich sie noch mal an wegen dem programm im ballhaus)))
Step:UNSET remove
{'subtrees': ['LK', 'MF'], 'family': ['NX', 'NX', 'LKM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PDS', 'PIS', 'VVFIN', 'ART', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (10, 15), 'span': (12, 15), 'left siblings': ['NX', 'NX'], 'label': 'LKM', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP wissen sie was ich rufe im reiseburo an und klare das alles kaufe die tickets und dann rufe ich sie noch mal an wegen dem programm im ballhaus)

Sentence 1070:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1071:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF da)
		(LK rufe)
		(MF
			(NX ich)
			(NX sie)
			(ADVX
				(NX ein paar tage)
				[01;36m(ADVX[00m
					(ADV vorher)[01;36m)[00m)
			(ADVX noch)
			(ADVX mal))
		(VC an))
	(SIMPX ansonsten sehen wir uns ja vielleicht im in der firma))
Step:Single Word Phrase
{'subtrees': ['ADV'], 'family': ['NX', 'ADVX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADV',), 'right siblings': [], 'left siblings': [(NX (ART ein) (ADJX (PIDAT paar)) (NN tage))], 'auto preterminal span': (7, 8), 'span': (7, 8), 'parent': 'ADVX', 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP da rufe ich sie ein paar tage vorher noch mal an ansonsten sehen wir uns ja vielleicht im in der firma)

Sentence 1072:
13 Initial errors
0 on fringe, 9 iterations
2 Error:Different label
2 Error:Single Word Phrase
2 Error:Modifier Attachment
2 Error:VP Attachment
1 Error:Unary
1 Error:Modifier Attachment
1 Error:UNSET add
1 Error:Unary
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(P[00m
			(SIMPX
				(VF wir)
				(LK brauchten)
				[01;31m(MF[00m
					(ADVX vielleicht)
					(ADVX vorher)
					(ADVX noch)
					[01;31m(NX[00m
						(ADVX ungefahr)
						[01;36m(NX[00m
							(ART [01;33m(SIMPX (NF[00m einen)
							(NN zug)[01;36m)[00m[01;31m)[00m[01;31m)[00m
				(NF mit dem wir zuruckfahren)) [01;33mNF) SIMPX)[00m
			(KOUS weil)
			(SIMPX
				(VF ich)
				(LK mus)
				(APPRART am)
				(DM nee)
				(DM nee)
				[01;31m(MF[00m
					(PX
						(PX am vierundzwanzigsten)
						[01;31m(PX[00m
							[01;36m(VC[00m [01;36m(VXINF[00m [01;31m(ADVX[00m
								(ADV ungefahr)[01;31m)[00m[01;36m)[00m[01;36m)[00m
							[01;36m(PX[00m
								(APPR um)
								(NX vier uhr)[01;36m)[00m[01;31m)[00m)
					(ADVX wieder)
					(ADVX hier)[01;31m)[00m
				(VC sein)
				(NF weil ich einen termin habe))[01;31m)[00m)[01;36m)[00m
Step:Different label
{'family': ['SIMPX'], 'auto preterminal span': (0, 32), 'span': (0, 32), 'subtrees': ['SIMPX', 'KOUS', 'SIMPX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ADV', 'ADV', 'ADV', 'ART', 'NN', 'APPR', 'PRELS', 'PPER', 'VVFIN', 'KOUS', 'PPER', 'VMFIN', 'APPRART', 'PTKANT', 'PTKANT', 'APPRART', 'NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'ADV', 'VAINF', 'KOUS', 'PPER', 'ART', 'NN', 'VAFIN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('P', 'SIMPX')}
(TOP
	(SIMPX
		(SIMPX
			(VF wir)
			(LK brauchten)
			[01;31m(MF[00m
				(ADVX vielleicht)
				(ADVX vorher)
				(ADVX noch)
				[01;31m(NX[00m
					(ADVX ungefahr)
					[01;36m(NX[00m
						(ART [01;33m(SIMPX (NF[00m einen)
						(NN zug)[01;36m)[00m[01;31m)[00m[01;31m)[00m
			(NF mit dem wir zuruckfahren)) [01;33mNF) SIMPX)[00m
		(KOUS weil)
		(SIMPX
			(VF ich)
			(LK mus)
			(APPRART am)
			(DM nee)
			(DM nee)
			[01;31m(MF[00m
				(PX
					(PX am vierundzwanzigsten)
					[01;31m(PX[00m
						[01;36m(VC[00m [01;36m(VXINF[00m [01;31m(ADVX[00m
							(ADV ungefahr)[01;31m)[00m[01;36m)[00m[01;36m)[00m
						[01;36m(PX[00m
							(APPR um)
							(NX vier uhr)[01;36m)[00m[01;31m)[00m)
				(ADVX wieder)
				(ADVX hier)[01;31m)[00m
			(VC sein)
			(NF weil ich einen termin habe))))
Step:Single Word Phrase
{'family': ['VXINF', 'APPR', 'NX'], 'auto preterminal span': (20, 21), 'span': (20, 21), 'subtrees': ['ADV'], 'parent': 'PX', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'VXINF')}
(TOP
	(SIMPX
		(SIMPX
			(VF wir)
			(LK brauchten)
			[01;31m(MF[00m
				(ADVX vielleicht)
				(ADVX vorher)
				(ADVX noch)
				[01;31m(NX[00m
					(ADVX ungefahr)
					[01;36m(NX[00m
						(ART [01;33m(SIMPX (NF[00m einen)
						(NN zug)[01;36m)[00m[01;31m)[00m[01;31m)[00m
			(NF mit dem wir zuruckfahren)) [01;33mNF) SIMPX)[00m
		(KOUS weil)
		(SIMPX
			(VF ich)
			(LK mus)
			(APPRART am)
			(DM nee)
			(DM nee)
			[01;31m(MF[00m
				(PX
					(PX am vierundzwanzigsten)
					[01;31m(PX[00m
						[01;36m(VC[00m
							(VXINF
								(ADV ungefahr))[01;36m)[00m
						[01;36m(PX[00m
							(APPR um)
							(NX vier uhr)[01;36m)[00m[01;31m)[00m)
				(ADVX wieder)
				(ADVX hier)[01;31m)[00m
			(VC sein)
			(NF weil ich einen termin habe))))
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'ADVX', 'ADVX', 'ADVX', 'NX'], 'mover info': [('ADVX', (5, 6))], 'old_family': ['ADVX', 'ART', 'NN'], 'start left siblings': [], 'auto preterminals': ('ADV', 'ADV', 'ADV', 'ADV', 'ART', 'NN'), 'start right siblings': ['ART', 'NN'], 'end left siblings': ['ADVX', 'ADVX', 'ADVX'], 'auto preterminal span': (2, 8), 'movers': ['ADVX'], 'old_parent': 'NX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['NX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(SIMPX
			(VF wir)
			(LK brauchten)
			[01;31m(MF[00m
				(ADVX vielleicht)
				(ADVX vorher)
				(ADVX noch)
				(ADVX ungefahr)
				[01;33m(SIMPX (NF[00m (NX einen zug)[01;31m)[00m
			(NF mit dem wir zuruckfahren)) [01;33mNF) SIMPX)[00m
		(KOUS weil)
		(SIMPX
			(VF ich)
			(LK mus)
			(APPRART am)
			(DM nee)
			(DM nee)
			[01;31m(MF[00m
				(PX
					(PX am vierundzwanzigsten)
					[01;31m(PX[00m
						[01;36m(VC[00m
							(VXINF
								(ADV ungefahr))[01;36m)[00m
						[01;36m(PX[00m
							(APPR um)
							(NX vier uhr)[01;36m)[00m[01;31m)[00m)
				(ADVX wieder)
				(ADVX hier)[01;31m)[00m
			(VC sein)
			(NF weil ich einen termin habe))))
Step:VP Attachment
{'new_parent': 'PX', 'new_family': ['PX', 'VXINF', 'PX'], 'mover info': [('VXINF', (20, 21))], 'old_family': ['VXINF', 'APPR', 'NX'], 'start left siblings': [], 'auto preterminals': ('APPRART', 'NN', 'ADV', 'APPR', 'CARD', 'NN'), 'start right siblings': ['APPR', 'NX'], 'end left siblings': ['PX'], 'auto preterminal span': (18, 24), 'movers': ['VXINF'], 'old_parent': 'PX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['PX'], 'classified_type': 'VP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(SIMPX
			(VF wir)
			(LK brauchten)
			[01;31m(MF[00m
				(ADVX vielleicht)
				(ADVX vorher)
				(ADVX noch)
				(ADVX ungefahr)
				[01;33m(SIMPX (NF[00m (NX einen zug)[01;31m)[00m
			(NF mit dem wir zuruckfahren)) [01;33mNF) SIMPX)[00m
		(KOUS weil)
		(SIMPX
			(VF ich)
			(LK mus)
			(APPRART am)
			(DM nee)
			(DM nee)
			[01;31m(MF[00m
				(PX
					(PX am vierundzwanzigsten)
					[01;36m(VC[00m
						(VXINF
							(ADV ungefahr))[01;36m)[00m
					(PX um vier uhr))
				(ADVX wieder)
				(ADVX hier)[01;31m)[00m
			(VC sein)
			(NF weil ich einen termin habe))))
Step:Unary
{'subtrees': ['VXINF'], 'family': ['PX', 'VC', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV',), 'right siblings': [(PX (APPR um) (NX (ADJX (CARD vier)) (NN uhr)))], 'left siblings': [(PX (APPRART am) (NX (NN vierundzwanzigsten)))], 'auto preterminal span': (20, 21), 'span': (20, 21), 'parent': 'PX', 'label': 'VC', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(VF wir)
			(LK brauchten)
			[01;31m(MF[00m
				(ADVX vielleicht)
				(ADVX vorher)
				(ADVX noch)
				(ADVX ungefahr)
				[01;33m(SIMPX (NF[00m (NX einen zug)[01;31m)[00m
			(NF mit dem wir zuruckfahren)) [01;33mNF) SIMPX)[00m
		(KOUS weil)
		(SIMPX
			(VF ich)
			(LK mus)
			(APPRART am)
			(DM nee)
			(DM nee)
			[01;31m(MF[00m
				(PX am vierundzwanzigsten ungefahr um vier uhr)
				(ADVX wieder)
				(ADVX hier)[01;31m)[00m
			(VC sein)
			(NF weil ich einen termin habe))))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX', 'ADVX', 'ADVX', 'NX'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ADV', 'ADV', 'ADV', 'ART', 'NN', 'APPR', 'PRELS', 'PPER', 'VVFIN'), 'right siblings': ['NF'], 'parent': 'SIMPX', 'auto preterminal span': (0, 12), 'span': (2, 8), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX
		(SIMPX
			(VF wir)
			(LK brauchten)
			(ADVX vielleicht)
			(ADVX vorher)
			(ADVX noch)
			(ADVX ungefahr)
			[01;36m(NF[00m
				[01;36m(SIMPX[00m
					(NX einen zug)
					(NF mit dem wir zuruckfahren)[01;36m)[00m[01;36m)[00m)
		(KOUS weil)
		(SIMPX
			(VF ich)
			(LK mus)
			(APPRART am)
			(DM nee)
			(DM nee)
			[01;31m(MF[00m
				(PX am vierundzwanzigsten ungefahr um vier uhr)
				(ADVX wieder)
				(ADVX hier)[01;31m)[00m
			(VC sein)
			(NF weil ich einen termin habe))))
Step:UNSET add
{'subtrees': ['NX', 'NF'], 'family': ['VF', 'LK', 'ADVX', 'ADVX', 'ADVX', 'ADVX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'PRELS', 'PPER', 'VVFIN'), 'right siblings': [], 'left siblings': [(VF (NX (PPER wir))), (LK (VXFIN (VVFIN brauchten))), (ADVX (ADV vielleicht)), (ADVX (ADV vorher)), (ADVX (ADV noch)), (ADVX (ADV ungefahr))], 'auto preterminal span': (6, 12), 'span': (6, 12), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX
			(VF wir)
			(LK brauchten)
			(ADVX vielleicht)
			(ADVX vorher)
			(ADVX noch)
			(ADVX ungefahr)
			[01;36m(NF[00m
				(SIMPX
					(NX einen zug)
					(NF mit dem wir zuruckfahren))[01;36m)[00m)
		(KOUS weil)
		(SIMPX
			(VF ich)
			(LK mus)
			(APPRART am)
			(DM nee)
			(DM nee)
			[01;31m(MF[00m
				(PX am vierundzwanzigsten ungefahr um vier uhr)
				(ADVX wieder)
				(ADVX hier)[01;31m)[00m
			(VC sein)
			(NF weil ich einen termin habe))))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VF', 'LK', 'ADVX', 'ADVX', 'ADVX', 'ADVX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'PRELS', 'PPER', 'VVFIN'), 'right siblings': [], 'left siblings': [(VF (NX (PPER wir))), (LK (VXFIN (VVFIN brauchten))), (ADVX (ADV vielleicht)), (ADVX (ADV vorher)), (ADVX (ADV noch)), (ADVX (ADV ungefahr))], 'auto preterminal span': (6, 12), 'span': (6, 12), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX wir brauchten vielleicht vorher noch ungefahr einen zug mit dem wir zuruckfahren)
		(KOUS weil)
		(SIMPX
			(VF ich)
			(LK mus)
			(APPRART am)
			(DM nee)
			(DM nee)
			[01;31m(MF[00m
				(PX am vierundzwanzigsten ungefahr um vier uhr)
				(ADVX wieder)
				(ADVX hier)[01;31m)[00m
			(VC sein)
			(NF weil ich einen termin habe))))
Step:Modifier Attachment
{'subtrees': ['PX', 'ADVX', 'ADVX'], 'family': ['VF', 'LK', 'APPRART', 'DM', 'DM', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'APPRART', 'PTKANT', 'PTKANT', 'APPRART', 'NN', 'ADV', 'APPR', 'CARD', 'NN', 'ADV', 'ADV', 'VAINF', 'KOUS', 'PPER', 'ART', 'NN', 'VAFIN'), 'right siblings': ['VC', 'NF'], 'parent': 'SIMPX', 'auto preterminal span': (13, 32), 'span': (18, 26), 'left siblings': ['VF', 'LK', 'APPRART', 'DM', 'DM'], 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP wir brauchten vielleicht vorher noch ungefahr einen zug mit dem wir zuruckfahren weil ich mus am nee nee am vierundzwanzigsten ungefahr um vier uhr wieder hier sein weil ich einen termin habe)

Sentence 1073:
6 Initial errors
0 on fringe, 4 iterations
2 Error:PP Attachment
2 Error:Modifier Attachment
1 Error:PP Attachment
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK sehe)
		(MF grade)
		(NF
			(SIMPX
				(VF ab hannover)
				(LK geht)
				[01;31m(MF[00m
					[01;36m(MF[00m
						(ADJX stundlich)
						(NX ein zug)[01;36m)[00m
					[01;36m(PX[00m
						(ADVX zuruck)
						(PX von bonn)[01;36m)[00m[01;31m)[00m
				[01;31m(NF[00m
					[01;31m(PX[00m
						(ADVX immer)
						[01;36m(PX[00m
							(APPR um)
							(NX achtundfunfzig)[01;36m)[00m[01;31m)[00m[01;31m)[00m))))
Step:PP Attachment
{'new_parent': 'NF', 'new_family': ['ADVX', 'PX', 'PX'], 'mover info': [('ADVX', (9, 10)), ('PX', (10, 12))], 'old_family': ['ADJX', 'NX', 'ADVX', 'PX'], 'start left siblings': ['ADJX', 'NX'], 'auto preterminals': ('APPR', 'NE', 'VVFIN', 'ADJD', 'ART', 'NN', 'ADV', 'APPR', 'NE', 'ADV', 'APPR', 'CARD'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (3, 15), 'movers': ['ADVX', 'PX'], 'old_parent': 'MF', 'end right siblings': ['PX'], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(VF ich)
		(LK sehe)
		(MF grade)
		(NF
			(SIMPX
				(VF ab hannover)
				(LK geht)
				(MF stundlich ein zug)
				[01;31m(NF[00m
					[01;36m(PX[00m
						(ADVX zuruck)
						(PX von bonn)[01;36m)[00m
					[01;31m(PX[00m
						(ADVX immer)
						[01;36m(PX[00m
							(APPR um)
							(NX achtundfunfzig)[01;36m)[00m[01;31m)[00m[01;31m)[00m))))
Step:Modifier Attachment
{'new_parent': 'NF', 'new_family': ['ADVX', 'PX', 'ADVX', 'PX'], 'mover info': [('ADVX', (12, 13))], 'old_family': ['ADVX', 'APPR', 'NX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'APPR', 'NE', 'ADV', 'APPR', 'CARD'), 'start right siblings': ['APPR', 'NX'], 'end left siblings': ['ADVX', 'PX'], 'auto preterminal span': (9, 15), 'movers': ['ADVX'], 'old_parent': 'PX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['PX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(VF ich)
		(LK sehe)
		(MF grade)
		(NF
			(SIMPX
				(VF ab hannover)
				(LK geht)
				(MF stundlich ein zug)
				[01;31m(NF[00m
					[01;36m(PX[00m
						(ADVX zuruck)
						(PX von bonn)[01;36m)[00m
					(ADVX immer)
					(PX um achtundfunfzig)[01;31m)[00m))))
Step:PP Attachment
{'subtrees': ['ADVX', 'PX'], 'family': ['PX', 'ADVX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'APPR', 'NE'), 'right siblings': [(ADVX (ADV immer)), (PX (APPR um) (NX (CARD achtundfunfzig)))], 'left siblings': [], 'auto preterminal span': (9, 12), 'span': (9, 12), 'parent': 'NF', 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(SIMPX
		(VF ich)
		(LK sehe)
		(MF grade)
		(NF
			(SIMPX
				(VF ab hannover)
				(LK geht)
				(MF stundlich ein zug)
				[01;31m(NF[00m
					(PX zuruck von bonn)
					(ADVX immer)
					(PX um achtundfunfzig)[01;31m)[00m))))
Step:PP Attachment
{'subtrees': ['PX', 'ADVX', 'PX'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'NE', 'VVFIN', 'ADJD', 'ART', 'NN', 'ADV', 'APPR', 'NE', 'ADV', 'APPR', 'CARD'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (3, 15), 'span': (9, 15), 'left siblings': ['VF', 'LK', 'MF'], 'label': 'NF', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP ich sehe grade ab hannover geht stundlich ein zug zuruck von bonn immer um achtundfunfzig)

Sentence 1074:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1075:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1076:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1077:
7 Initial errors
0 on fringe, 3 iterations
4 Error:Modifier Attachment
2 Error:Single Word Phrase
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK konnen)
		(MF
			(NX wir)
			[01;36m(PX[00m
				[01;31m(PX[00m
					(ADVX ganz)
					(APPR nach)
					[01;31m(NX[00m [01;33m(NX[00m
						(NX lust)
						(KON und)
						[01;36m(ADJX[00m [01;31m(NX[00m
							(NN laune)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;31m)[00m
				[01;31m(ADJX[00m
					(ADJD stundlich)[01;31m)[00m [01;33mNX)[00m[01;36m)[00m
			(NX uns)
			(NX einen zug))
		(VC aussuchen)
		(NF fur die ruckfahrt)))
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'KON', 'NX', 'ADJX'], 'mover info': [('ADJX', (9, 10))], 'old_family': ['NX', 'PX', 'ADJX', 'NX', 'NX'], 'start left siblings': ['NX', 'PX'], 'auto preterminals': ('PPER', 'ADV', 'APPR', 'NN', 'KON', 'NN', 'ADJD', 'PRF', 'ART', 'NN'), 'start right siblings': ['NX', 'NX'], 'end left siblings': ['NX', 'KON', 'NX'], 'auto preterminal span': (3, 13), 'movers': ['ADJX'], 'old_parent': 'MF', 'POS confusion': ('ADJD', 'ADJD'), 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK konnen)
		(MF
			(NX wir)
			(PX
				(ADVX ganz)
				(APPR nach)
				(NX
					(NX lust)
					(KON und)
					[01;36m(ADJX[00m [01;31m(NX[00m
						(NN laune)[01;31m)[00m[01;36m)[00m
					[01;31m(ADJX[00m
						(ADJD stundlich)[01;31m)[00m))
			(NX uns)
			(NX einen zug))
		(VC aussuchen)
		(NF fur die ruckfahrt)))
Step:Single Word Phrase
{'family': ['NX', 'KON', 'ADJX', 'ADJX'], 'auto preterminal span': (8, 9), 'span': (8, 9), 'subtrees': ['NN'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('NN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK konnen)
		(MF
			(NX wir)
			(PX
				(ADVX ganz)
				(APPR nach)
				(NX
					(NX lust)
					(KON und)
					(ADJX laune)
					[01;31m(ADJX[00m
						(ADJD stundlich)[01;31m)[00m))
			(NX uns)
			(NX einen zug))
		(VC aussuchen)
		(NF fur die ruckfahrt)))
Step:Single Word Phrase
{'subtrees': ['ADJD'], 'family': ['NX', 'KON', 'ADJX', 'ADJX'], 'over_word': True, 'over words': True, 'auto preterminals': ('NN', 'KON', 'NN', 'ADJD'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (6, 10), 'span': (9, 10), 'left siblings': ['NX', 'KON', 'ADJX'], 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP und dann konnen wir ganz nach lust und laune stundlich uns einen zug aussuchen fur die ruckfahrt)

Sentence 1078:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1079:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1080:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1081:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1082:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1083:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1084:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1085:
11 Initial errors
0 on fringe, 5 iterations
6 Error:NP Attachment
2 Error:Single Word Phrase
1 Error:Single Word Phrase
1 Error:UNSET remove
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM guten tag)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF hier)
		(LK ist)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;36m(MF[00m
					[01;36m(NX[00m
						(ART das)
						[01;31m(ADJX[00m
							(ADJA stadtische)[01;31m)[00m [01;33mSIMPX)[00m[01;36m)[00m[01;36m)[00m
				(NX reiseburo bonn)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	[01;31m(DM[00m
		(NX
			[01;36m(ADJX[00m [01;31m(NX[00m
				(NE bergmann)[01;31m)[00m[01;36m)[00m
			[01;31m(NX[00m
				(NN apparat)[01;31m)[00m)[01;31m)[00m
	(SIMPX wie kann ich ihnen helfen))
Step:NP Attachment
{'new_parent': 'DM', 'new_family': ['NX', 'NX'], 'mover info': [('NX', (6, 8))], 'old_family': ['ART', 'ADJX', 'NX'], 'start left siblings': ['ART', 'ADJX'], 'auto preterminals': ('ADJA', 'NN', 'ADV', 'VAFIN', 'ART', 'ADJA', 'NN', 'NE', 'NE', 'NN', 'PWAV', 'VMFIN', 'PPER', 'PPER', 'VVINF'), 'start right siblings': [], 'end left siblings': [], 'auto preterminal span': (0, 15), 'movers': ['NX'], 'old_parent': 'NX', 'end right siblings': ['NX'], 'classified_type': 'NP Attachment', 'type': 'move'}
(TOP
	(DM guten tag)
	(SIMPX
		(VF hier)
		(LK ist)
		(MF
			(NX
				(ART das)
				[01;31m(ADJX[00m
					(ADJA stadtische)[01;31m)[00m)))
	[01;31m(DM[00m
		(NX reiseburo bonn)
		(NX
			[01;36m(ADJX[00m [01;31m(NX[00m
				(NE bergmann)[01;31m)[00m[01;36m)[00m
			[01;31m(NX[00m
				(NN apparat)[01;31m)[00m)[01;31m)[00m
	(SIMPX wie kann ich ihnen helfen))
Step:Single Word Phrase
{'family': ['ADJX', 'NX'], 'auto preterminal span': (8, 9), 'span': (8, 9), 'subtrees': ['NE'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('NE',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP
	(DM guten tag)
	(SIMPX
		(VF hier)
		(LK ist)
		(MF
			(NX
				(ART das)
				[01;31m(ADJX[00m
					(ADJA stadtische)[01;31m)[00m)))
	[01;31m(DM[00m
		(NX reiseburo bonn)
		(NX
			(ADJX bergmann)
			[01;31m(NX[00m
				(NN apparat)[01;31m)[00m)[01;31m)[00m
	(SIMPX wie kann ich ihnen helfen))
Step:Single Word Phrase
{'subtrees': ['ADJA'], 'family': ['ART', 'ADJX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ART', 'ADJA'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (4, 6), 'span': (5, 6), 'left siblings': ['ART'], 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP
	(DM guten tag)
	(SIMPX hier ist das stadtische)
	[01;31m(DM[00m
		(NX reiseburo bonn)
		(NX
			(ADJX bergmann)
			[01;31m(NX[00m
				(NN apparat)[01;31m)[00m)[01;31m)[00m
	(SIMPX wie kann ich ihnen helfen))
Step:UNSET remove
{'subtrees': ['NX', 'NX'], 'family': ['DM', 'SIMPX', 'DM', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJA', 'NN', 'ADV', 'VAFIN', 'ART', 'ADJA', 'NN', 'NE', 'NE', 'NN', 'PWAV', 'VMFIN', 'PPER', 'PPER', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 15), 'span': (6, 10), 'left siblings': ['DM', 'SIMPX'], 'label': 'DM', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM guten tag)
	(SIMPX hier ist das stadtische)
	(NX reiseburo bonn)
	(NX
		(ADJX bergmann)
		[01;31m(NX[00m
			(NN apparat)[01;31m)[00m)
	(SIMPX wie kann ich ihnen helfen))
Step:Single Word Phrase
{'subtrees': ['NN'], 'family': ['ADJX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('NE', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (8, 10), 'span': (9, 10), 'left siblings': ['ADJX'], 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP guten tag hier ist das stadtische reiseburo bonn bergmann apparat wie kann ich ihnen helfen)

Sentence 1086:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1087:
12 Initial errors
0 on fringe, 9 iterations
2 Error:Modifier Attachment
2 Error:PP Attachment
2 Error:PP Attachment
1 Error:Single Word Phrase
1 Error:Unary
1 Error:Single Word Phrase
1 Error:PP Attachment
1 Error:UNSET remove
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		[01;31m(MF[00m [01;33m(NX (MF[00m
			[01;31m(NX[00m
				(ART ein)
				(ADJX paar)
				[01;31m(NX[00m
					[01;31m(NX[00m
						(NN fragen) [01;33mMF) NX)[00m
						[01;31m(PX[00m
							[01;36m(VC[00m
								(APPR an)[01;36m)[00m
							[01;33m(SIMPX (NF[00m (NX sie)[01;31m)[00m[01;31m)[00m
					[01;31m(PX[00m
						[01;36m(ADVX[00m
							(APPR bezuglich)[01;36m)[00m
						(NX einer geschaftsreise nach hannover)[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m)) [01;33mNF) SIMPX)[00m
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['ART', 'ADJX', 'NN', 'PX'], 'mover info': [('ART', (2, 3)), ('ADJX', (3, 4))], 'old_family': ['ART', 'ADJX', 'NX'], 'start left siblings': [], 'auto preterminals': ('ART', 'PIDAT', 'NN', 'APPR', 'PPER', 'APPR', 'ART', 'NN', 'APPR', 'NE'), 'start right siblings': ['NX'], 'end left siblings': [], 'auto preterminal span': (2, 12), 'adding node already present': False, 'movers': ['ART', 'ADJX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': ['NN', 'PX'], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'ADVX'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;31m(NX[00m
					[01;36m(NX[00m
						(MF
							(ART ein)
							(ADJX paar)
							(NN fragen))[01;36m)[00m
					[01;31m(PX[00m
						[01;36m(VC[00m
							(APPR an)[01;36m)[00m
						[01;33m(SIMPX (NF[00m (NX sie)[01;31m)[00m[01;31m)[00m
				[01;31m(PX[00m
					[01;36m(ADVX[00m
						(APPR bezuglich)[01;36m)[00m
					(NX einer geschaftsreise nach hannover)[01;31m)[00m[01;31m)[00m[01;31m)[00m)) [01;33mNF) SIMPX)[00m
Step:PP Attachment
{'new_parent': 'PX', 'new_family': ['APPR', 'NX', 'PX'], 'mover info': [('PX', (7, 12))], 'old_family': ['NX', 'PX'], 'start left siblings': ['NX'], 'auto preterminals': ('ART', 'PIDAT', 'NN', 'APPR', 'PPER', 'APPR', 'ART', 'NN', 'APPR', 'NE'), 'start right siblings': [], 'end left siblings': ['APPR', 'NX'], 'auto preterminal span': (2, 12), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'ADVX'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		[01;31m(MF[00m
			[01;31m(NX[00m
				[01;36m(NX[00m
					(MF
						(ART ein)
						(ADJX paar)
						(NN fragen))[01;36m)[00m
				[01;31m(PX[00m
					[01;36m(VC[00m
						(APPR an)[01;36m)[00m
					[01;36m(NF[00m
						(SIMPX
							(NX sie)
							[01;31m(PX[00m
								[01;36m(ADVX[00m
									(APPR bezuglich)[01;36m)[00m
								(NX einer geschaftsreise nach hannover)[01;31m)[00m)[01;36m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m))
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'PX'], 'mover info': [('PX', (5, 12))], 'old_family': ['MF', 'PX'], 'start left siblings': ['MF'], 'auto preterminals': ('ART', 'PIDAT', 'NN', 'APPR', 'PPER', 'APPR', 'ART', 'NN', 'APPR', 'NE'), 'start right siblings': [], 'end left siblings': ['NX'], 'auto preterminal span': (2, 12), 'movers': ['PX'], 'old_parent': 'NX', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		[01;31m(MF[00m
			(NX ein paar fragen)
			[01;31m(PX[00m
				[01;36m(VC[00m
					(APPR an)[01;36m)[00m
				[01;36m(NF[00m
					(SIMPX
						(NX sie)
						[01;31m(PX[00m
							[01;36m(ADVX[00m
								(APPR bezuglich)[01;36m)[00m
							(NX einer geschaftsreise nach hannover)[01;31m)[00m)[01;36m)[00m[01;31m)[00m[01;31m)[00m))
Step:Single Word Phrase
{'subtrees': ['APPR'], 'family': ['VC', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('APPR',), 'right siblings': [(SIMPX (NX (PPER sie)) (PX (APPR bezuglich) (NX (NX (ART einer) (NN geschaftsreise)) (PX (APPR nach) (NX (NE hannover))))))], 'left siblings': [], 'auto preterminal span': (5, 6), 'span': (5, 6), 'parent': 'PX', 'label': 'VC', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		[01;31m(MF[00m
			(NX ein paar fragen)
			[01;31m(PX[00m
				(VC an)
				[01;36m(NF[00m
					(SIMPX
						(NX sie)
						[01;31m(PX[00m
							[01;36m(ADVX[00m
								(APPR bezuglich)[01;36m)[00m
							(NX einer geschaftsreise nach hannover)[01;31m)[00m)[01;36m)[00m[01;31m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'APPR', 'ART', 'NN', 'APPR', 'NE'), 'right siblings': [], 'left siblings': [(VC (APPR an))], 'auto preterminal span': (6, 12), 'span': (6, 12), 'parent': 'PX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		[01;31m(MF[00m
			(NX ein paar fragen)
			[01;31m(PX[00m
				(VC an)
				(NF
					(SIMPX
						(NX sie)
						[01;31m(PX[00m
							[01;36m(ADVX[00m
								(APPR bezuglich)[01;36m)[00m
							(NX einer geschaftsreise nach hannover)[01;31m)[00m))[01;31m)[00m[01;31m)[00m))
Step:Single Word Phrase
{'subtrees': ['APPR'], 'family': ['ADVX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('APPR',), 'right siblings': [(NX (NX (ART einer) (NN geschaftsreise)) (PX (APPR nach) (NX (NE hannover))))], 'left siblings': [], 'auto preterminal span': (7, 8), 'span': (7, 8), 'parent': 'PX', 'label': 'ADVX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		[01;31m(MF[00m
			(NX ein paar fragen)
			[01;31m(PX[00m
				(VC an)
				(NF
					(SIMPX
						(NX sie)
						[01;31m(PX[00m
							(ADVX bezuglich)
							(NX einer geschaftsreise nach hannover)[01;31m)[00m))[01;31m)[00m[01;31m)[00m))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ART', 'PIDAT', 'NN', 'APPR', 'PPER', 'APPR', 'ART', 'NN', 'APPR', 'NE'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 12), 'span': (2, 12), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		(NX ein paar fragen)
		[01;31m(PX[00m
			(VC an)
			(NF
				(SIMPX
					(NX sie)
					[01;31m(PX[00m
						(ADVX bezuglich)
						(NX einer geschaftsreise nach hannover)[01;31m)[00m))[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['VC', 'NF'], 'family': ['VF', 'LK', 'NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ART', 'PIDAT', 'NN', 'APPR', 'PPER', 'APPR', 'ART', 'NN', 'APPR', 'NE'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 12), 'span': (5, 12), 'left siblings': ['VF', 'LK', 'NX'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		(NX ein paar fragen)
		(VC an)
		(NF
			(SIMPX
				(NX sie)
				[01;31m(PX[00m
					(ADVX bezuglich)
					(NX einer geschaftsreise nach hannover)[01;31m)[00m))))
Step:UNSET remove
{'subtrees': ['ADVX', 'NX'], 'family': ['NX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'APPR', 'ART', 'NN', 'APPR', 'NE'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (6, 12), 'span': (7, 12), 'left siblings': ['NX'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ich habe ein paar fragen an sie bezuglich einer geschaftsreise nach hannover)

Sentence 1088:
11 Initial errors
0 on fringe, 6 iterations
3 Error:Modifier Attachment
2 Error:Single Word Phrase
2 Error:Single Word Phrase
2 Error:Modifier Attachment
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;36m(VF[00m
			(ADVX
				(ADVX erst)
				(ADVX mal))[01;36m)[00m
		[01;31m(SIMPX[00m
			(LK ist)
			[01;31m(MF[00m
				[01;36m(MF[00m
					(NX es)
					[01;36m(ADJX[00m [01;31m(ADVX[00m
						(ADV grundsatzlich)[01;31m)[00m[01;36m)[00m[01;36m)[00m
				[01;36m(ADVX[00m [01;31m(ADJX[00m [01;33m(SIMPX (NF[00m
					(ADJD moglich)[01;31m)[00m[01;36m)[00m[01;31m)[00m
			(NF mit dem flugzeug nach hannover zu fliegen)[01;31m)[00m) [01;33mNF) SIMPX)[00m[01;36m)[00m
Step:Modifier Attachment
{'new_parent': 'SIMPX', 'new_family': ['LK', 'MF', 'ADJX', 'NF'], 'mover info': [('ADJX', (5, 6))], 'old_family': ['NX', 'ADVX', 'ADJX'], 'start left siblings': ['NX', 'ADVX'], 'auto preterminals': ('VAFIN', 'PPER', 'ADV', 'ADJD', 'APPR', 'ART', 'NN', 'APPR', 'NE', 'PTKZU', 'VVINF'), 'start right siblings': [], 'end left siblings': ['LK', 'MF'], 'auto preterminal span': (2, 13), 'adding node already present': False, 'movers': ['ADJX'], 'old_parent': 'MF', 'POS confusion': ('ADJD', 'ADJD'), 'added and moved': True, 'end right siblings': ['NF'], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'NF'}
[01;36m(SIMPX[00m
	(TOP
		[01;36m(VF[00m
			(ADVX
				(ADVX erst)
				(ADVX mal))[01;36m)[00m
		[01;31m(SIMPX[00m
			(LK ist)
			(MF
				(NX es)
				[01;36m(ADJX[00m [01;31m(ADVX[00m
					(ADV grundsatzlich)[01;31m)[00m[01;36m)[00m)
			[01;36m(NF[00m
				(SIMPX
					[01;36m(ADVX[00m [01;31m(ADJX[00m
						(ADJD moglich)[01;31m)[00m[01;36m)[00m
					(NF mit dem flugzeug nach hannover zu fliegen))[01;36m)[00m[01;31m)[00m)[01;36m)[00m
Step:Single Word Phrase
{'family': ['NX', 'ADJX'], 'auto preterminal span': (4, 5), 'span': (4, 5), 'subtrees': ['ADV'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('ADV',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADVX', 'ADJX')}
[01;36m(SIMPX[00m
	(TOP
		[01;36m(VF[00m
			(ADVX
				(ADVX erst)
				(ADVX mal))[01;36m)[00m
		[01;31m(SIMPX[00m
			(LK ist)
			(MF es grundsatzlich)
			[01;36m(NF[00m
				(SIMPX
					[01;36m(ADVX[00m [01;31m(ADJX[00m
						(ADJD moglich)[01;31m)[00m[01;36m)[00m
					(NF mit dem flugzeug nach hannover zu fliegen))[01;36m)[00m[01;31m)[00m)[01;36m)[00m
Step:Single Word Phrase
{'family': ['ADVX', 'NF'], 'auto preterminal span': (5, 6), 'span': (5, 6), 'subtrees': ['ADJD'], 'parent': 'SIMPX', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'ADVX')}
[01;36m(SIMPX[00m
	(TOP
		[01;36m(VF[00m
			(ADVX
				(ADVX erst)
				(ADVX mal))[01;36m)[00m
		[01;31m(SIMPX[00m
			(LK ist)
			(MF es grundsatzlich)
			[01;36m(NF[00m
				(SIMPX
					(ADVX moglich)
					(NF mit dem flugzeug nach hannover zu fliegen))[01;36m)[00m[01;31m)[00m)[01;36m)[00m
Step:Modifier Attachment
{'new_parent': 'SIMPX', 'new_family': ['ADVX', 'LK', 'MF', 'SIMPX'], 'mover info': [('ADVX', (0, 2))], 'old_family': ['ADVX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'ADV', 'VAFIN', 'PPER', 'ADV', 'ADJD', 'APPR', 'ART', 'NN', 'APPR', 'NE', 'PTKZU', 'VVINF'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 13), 'movers': ['ADVX'], 'old_parent': 'TOP', 'end right siblings': ['LK', 'MF', 'SIMPX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(SIMPX
		[01;36m(VF[00m
			(ADVX
				(ADVX erst)
				(ADVX mal))[01;36m)[00m
		(LK ist)
		(MF es grundsatzlich)
		[01;36m(NF[00m
			(SIMPX
				(ADVX moglich)
				(NF mit dem flugzeug nach hannover zu fliegen))[01;36m)[00m))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['VF', 'LK', 'MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV'), 'right siblings': [(LK (VXFIN (VAFIN ist))), (MF (NX (PPER es)) (ADJX (ADV grundsatzlich))), (SIMPX (ADVX (ADJD moglich)) (NF (SIMPX (MF (PX (APPR mit) (NX (ART dem) (NN flugzeug))) (PX (APPR nach) (NX (NE hannover)))) (VC (VXINF (PTKZU zu) (VVINF fliegen))))))], 'left siblings': [], 'auto preterminal span': (0, 2), 'span': (0, 2), 'parent': 'SIMPX', 'label': 'VF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX
		(VF erst mal)
		(LK ist)
		(MF es grundsatzlich)
		[01;36m(NF[00m
			(SIMPX
				(ADVX moglich)
				(NF mit dem flugzeug nach hannover zu fliegen))[01;36m)[00m))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VF', 'LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJD', 'APPR', 'ART', 'NN', 'APPR', 'NE', 'PTKZU', 'VVINF'), 'right siblings': [], 'left siblings': [(VF (ADVX (ADVX (ADV erst)) (ADVX (ADV mal)))), (LK (VXFIN (VAFIN ist))), (MF (NX (PPER es)) (ADJX (ADV grundsatzlich)))], 'auto preterminal span': (5, 13), 'span': (5, 13), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP erst mal ist es grundsatzlich moglich mit dem flugzeug nach hannover zu fliegen)

Sentence 1089:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1090:
13 Initial errors
0 on fringe, 11 iterations
2 Error:Clause Attachment
2 Error:Modifier Attachment
1 Error:UNSET remove
1 Error:Unary
1 Error:Clause Attachment
1 Error:UNSET add
1 Error:Clause Attachment
1 Error:PP Attachment
1 Error:PP Attachment
1 Error:Modifier Attachment
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX (SIMPX[00m
	[01;31m(SIMPX[00m
		(VF ich)
		(LK mus)
		(MF nur dazu)
		(VC sagen)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(C das)
				[01;31m(MF[00m
					[01;36m(MF[00m
						(NX das)
						(PX von kolnbonn) [01;33mSIMPX)[00m[01;36m)[00m
					(SIMPX wenn sie von kolnbonn fliegen wollen) [01;33mSIMPX)[00m
					[01;31m(ADVX[00m
						[01;31m(ADVX[00m
							(ADVX nur)
							[01;36m(ADVX[00m
								(ADV einmal)[01;36m)[00m[01;31m)[00m
						(PX am tag)[01;31m)[00m
					(ADJX moglich)[01;31m)[00m
				(VC ist)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(DM und zwar)
	[01;31m(PX[00m [01;33m(PX[00m
		(PX um sieben uhr zehn)
		(KON und)
		[01;31m(PX[00m
			(PX am wochenende) [01;33mPX)[00m
			(ADVX leider)
			(ADVX gar nicht)[01;31m)[00m[01;31m)[00m)
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['C', 'MF', 'SIMPX', 'ADVX', 'ADJX', 'VC'], 'mover info': [('SIMPX', (9, 15)), ('ADVX', (15, 19)), ('ADJX', (19, 20))], 'old_family': ['NX', 'PX', 'SIMPX', 'ADVX', 'ADJX'], 'start left siblings': ['NX', 'PX'], 'auto preterminals': ('KOUS', 'PDS', 'APPR', 'NE', 'KOUS', 'PPER', 'APPR', 'NE', 'VVINF', 'VMFIN', 'ADV', 'ADV', 'APPRART', 'NN', 'ADJD', 'VAFIN'), 'start right siblings': [], 'end left siblings': ['C', 'MF'], 'auto preterminal span': (5, 21), 'movers': ['SIMPX', 'ADVX', 'ADJX'], 'old_parent': 'MF', 'end right siblings': ['VC'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP [01;33m(SIMPX (SIMPX[00m
	[01;31m(SIMPX[00m
		(VF ich)
		(LK mus)
		(MF nur dazu)
		(VC sagen)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(C das)
				(MF das von kolnbonn) [01;33mSIMPX)[00m
				(SIMPX wenn sie von kolnbonn fliegen wollen) [01;33mSIMPX)[00m
				[01;31m(ADVX[00m
					[01;31m(ADVX[00m
						(ADVX nur)
						[01;36m(ADVX[00m
							(ADV einmal)[01;36m)[00m[01;31m)[00m
					(PX am tag)[01;31m)[00m
				(ADJX moglich)
				(VC ist)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(DM und zwar)
	[01;31m(PX[00m [01;33m(PX[00m
		(PX um sieben uhr zehn)
		(KON und)
		[01;31m(PX[00m
			(PX am wochenende) [01;33mPX)[00m
			(ADVX leider)
			(ADVX gar nicht)[01;31m)[00m[01;31m)[00m)
Step:Modifier Attachment
{'new_parent': 'ADVX', 'new_family': ['ADVX', 'ADVX', 'PX'], 'mover info': [('ADVX', (15, 16))], 'old_family': ['ADVX', 'ADV'], 'start left siblings': [], 'auto preterminals': ('ADV', 'ADV', 'APPRART', 'NN'), 'start right siblings': ['ADV'], 'end left siblings': [], 'auto preterminal span': (15, 19), 'movers': ['ADVX'], 'old_parent': 'ADVX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ADVX', 'PX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP [01;33m(SIMPX (SIMPX[00m
	[01;31m(SIMPX[00m
		(VF ich)
		(LK mus)
		(MF nur dazu)
		(VC sagen)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				(C das)
				(MF das von kolnbonn) [01;33mSIMPX)[00m
				(SIMPX wenn sie von kolnbonn fliegen wollen) [01;33mSIMPX)[00m
				[01;31m(ADVX[00m
					(ADVX nur)
					(ADVX einmal)
					(PX am tag)[01;31m)[00m
				(ADJX moglich)
				(VC ist)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(DM und zwar)
	[01;31m(PX[00m [01;33m(PX[00m
		(PX um sieben uhr zehn)
		(KON und)
		[01;31m(PX[00m
			(PX am wochenende) [01;33mPX)[00m
			(ADVX leider)
			(ADVX gar nicht)[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'VC', 'NF'], 'family': ['SIMPX', 'DM', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'PROP', 'VVINF', 'KOUS', 'PDS', 'APPR', 'NE', 'KOUS', 'PPER', 'APPR', 'NE', 'VVINF', 'VMFIN', 'ADV', 'ADV', 'APPRART', 'NN', 'ADJD', 'VAFIN', 'KON', 'ADV', 'APPR', 'CARD', 'NN', 'CARD', 'KON', 'APPRART', 'NN', 'ADV', 'ADV', 'PTKNEG'), 'right siblings': ['DM', 'PX'], 'parent': 'TOP', 'auto preterminal span': (0, 33), 'span': (0, 21), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(VF ich)
	(LK mus)
	(MF nur dazu)
	(VC sagen)
	[01;31m(NF[00m
		[01;31m(SIMPX[00m
			(C das)
			(MF das von kolnbonn) [01;33mSIMPX)[00m
			(SIMPX wenn sie von kolnbonn fliegen wollen) [01;33mSIMPX)[00m
			[01;31m(ADVX[00m
				(ADVX nur)
				(ADVX einmal)
				(PX am tag)[01;31m)[00m
			(ADJX moglich)
			(VC ist)[01;31m)[00m[01;31m)[00m
	(DM und zwar)
	[01;31m(PX[00m [01;33m(PX[00m
		(PX um sieben uhr zehn)
		(KON und)
		[01;31m(PX[00m
			(PX am wochenende) [01;33mPX)[00m
			(ADVX leider)
			(ADVX gar nicht)[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VF', 'LK', 'MF', 'VC', 'NF', 'DM', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'PROP', 'VVINF', 'KOUS', 'PDS', 'APPR', 'NE', 'KOUS', 'PPER', 'APPR', 'NE', 'VVINF', 'VMFIN', 'ADV', 'ADV', 'APPRART', 'NN', 'ADJD', 'VAFIN', 'KON', 'ADV', 'APPR', 'CARD', 'NN', 'CARD', 'KON', 'APPRART', 'NN', 'ADV', 'ADV', 'PTKNEG'), 'right siblings': ['DM', 'PX'], 'parent': 'TOP', 'auto preterminal span': (0, 33), 'span': (5, 21), 'left siblings': ['VF', 'LK', 'MF', 'VC'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP [01;33m(SIMPX (SIMPX[00m
	(VF ich)
	(LK mus)
	(MF nur dazu)
	(VC sagen)
	[01;31m(SIMPX[00m
		(C das)
		(MF das von kolnbonn) [01;33mSIMPX)[00m
		(SIMPX wenn sie von kolnbonn fliegen wollen) [01;33mSIMPX)[00m
		[01;31m(ADVX[00m
			(ADVX nur)
			(ADVX einmal)
			(PX am tag)[01;31m)[00m
		(ADJX moglich)
		(VC ist)[01;31m)[00m
	(DM und zwar)
	[01;31m(PX[00m [01;33m(PX[00m
		(PX um sieben uhr zehn)
		(KON und)
		[01;31m(PX[00m
			(PX am wochenende) [01;33mPX)[00m
			(ADVX leider)
			(ADVX gar nicht)[01;31m)[00m[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['C', 'MF', 'SIMPX', 'ADVX', 'ADJX', 'VC'], 'family': ['VF', 'LK', 'MF', 'VC', 'SIMPX', 'DM', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'PROP', 'VVINF', 'KOUS', 'PDS', 'APPR', 'NE', 'KOUS', 'PPER', 'APPR', 'NE', 'VVINF', 'VMFIN', 'ADV', 'ADV', 'APPRART', 'NN', 'ADJD', 'VAFIN', 'KON', 'ADV', 'APPR', 'CARD', 'NN', 'CARD', 'KON', 'APPRART', 'NN', 'ADV', 'ADV', 'PTKNEG'), 'right siblings': ['DM', 'PX'], 'parent': 'TOP', 'auto preterminal span': (0, 33), 'span': (5, 21), 'left siblings': ['VF', 'LK', 'MF', 'VC'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	[01;36m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF ich)
			(LK mus)
			(MF nur dazu)
			(VC sagen)
			(C das)
			(MF das von kolnbonn)[01;36m)[00m
		(SIMPX wenn sie von kolnbonn fliegen wollen)[01;36m)[00m
	[01;31m(ADVX[00m
		(ADVX nur)
		(ADVX einmal)
		(PX am tag)[01;31m)[00m
	(ADJX moglich)
	(VC ist)
	(DM und zwar)
	[01;31m(PX[00m [01;33m(PX[00m
		(PX um sieben uhr zehn)
		(KON und)
		[01;31m(PX[00m
			(PX am wochenende) [01;33mPX)[00m
			(ADVX leider)
			(ADVX gar nicht)[01;31m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC', 'C', 'MF'], 'family': ['SIMPX', 'SIMPX', 'ADVX', 'ADJX', 'VC', 'DM', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'PROP', 'VVINF', 'KOUS', 'PDS', 'APPR', 'NE'), 'right siblings': [(SIMPX (C (KOUS wenn)) (MF (NX (PPER sie)) (PX (APPR von) (NX (NE kolnbonn)))) (VC (VXINF (VVINF fliegen)) (VXFIN (VMFIN wollen)))), (ADVX (ADVX (ADV nur)) (ADVX (ADV einmal)) (PX (APPRART am) (NX (NN tag)))), (ADJX (ADJD moglich)), (VC (VXFIN (VAFIN ist))), (DM (KON und) (ADVX (ADV zwar))), (PX (PX (APPR um) (NX (NX (ADJX (CARD sieben)) (NN uhr)) (ADJX (CARD zehn)))) (KON und) (PX (PX (APPRART am) (NX (NN wochenende))) (ADVX (ADV leider)) (ADVX (ADVX (ADV gar)) (PTKNEG nicht))))], 'left siblings': [], 'auto preterminal span': (0, 9), 'span': (0, 9), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;36m(SIMPX[00m
		(SIMPX ich mus nur dazu sagen das das von kolnbonn)
		(SIMPX wenn sie von kolnbonn fliegen wollen)[01;36m)[00m
	[01;31m(ADVX[00m
		(ADVX nur)
		(ADVX einmal)
		(PX am tag)[01;31m)[00m
	(ADJX moglich)
	(VC ist)
	(DM und zwar)
	[01;31m(PX[00m [01;33m(PX[00m
		(PX um sieben uhr zehn)
		(KON und)
		[01;31m(PX[00m
			(PX am wochenende) [01;33mPX)[00m
			(ADVX leider)
			(ADVX gar nicht)[01;31m)[00m[01;31m)[00m)
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX', 'ADVX', 'ADJX', 'VC', 'DM', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'PROP', 'VVINF', 'KOUS', 'PDS', 'APPR', 'NE', 'KOUS', 'PPER', 'APPR', 'NE', 'VVINF', 'VMFIN'), 'right siblings': [(ADVX (ADVX (ADV nur)) (ADVX (ADV einmal)) (PX (APPRART am) (NX (NN tag)))), (ADJX (ADJD moglich)), (VC (VXFIN (VAFIN ist))), (DM (KON und) (ADVX (ADV zwar))), (PX (PX (APPR um) (NX (NX (ADJX (CARD sieben)) (NN uhr)) (ADJX (CARD zehn)))) (KON und) (PX (PX (APPRART am) (NX (NN wochenende))) (ADVX (ADV leider)) (ADVX (ADVX (ADV gar)) (PTKNEG nicht))))], 'left siblings': [], 'auto preterminal span': (0, 15), 'span': (0, 15), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP
	(SIMPX ich mus nur dazu sagen das das von kolnbonn wenn sie von kolnbonn fliegen wollen)
	[01;31m(ADVX[00m
		(ADVX nur)
		(ADVX einmal)
		(PX am tag)[01;31m)[00m
	(ADJX moglich)
	(VC ist)
	(DM und zwar)
	[01;31m(PX[00m [01;33m(PX[00m
		(PX um sieben uhr zehn)
		(KON und)
		[01;31m(PX[00m
			(PX am wochenende) [01;33mPX)[00m
			(ADVX leider)
			(ADVX gar nicht)[01;31m)[00m[01;31m)[00m)
Step:PP Attachment
{'subtrees': ['ADVX', 'ADVX', 'PX'], 'family': ['SIMPX', 'ADVX', 'ADJX', 'VC', 'DM', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'PROP', 'VVINF', 'KOUS', 'PDS', 'APPR', 'NE', 'KOUS', 'PPER', 'APPR', 'NE', 'VVINF', 'VMFIN', 'ADV', 'ADV', 'APPRART', 'NN', 'ADJD', 'VAFIN', 'KON', 'ADV', 'APPR', 'CARD', 'NN', 'CARD', 'KON', 'APPRART', 'NN', 'ADV', 'ADV', 'PTKNEG'), 'right siblings': ['ADJX', 'VC', 'DM', 'PX'], 'parent': 'TOP', 'auto preterminal span': (0, 33), 'span': (15, 19), 'left siblings': ['SIMPX'], 'label': 'ADVX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(SIMPX ich mus nur dazu sagen das das von kolnbonn wenn sie von kolnbonn fliegen wollen)
	(ADVX nur)
	(ADVX einmal)
	(PX am tag)
	(ADJX moglich)
	(VC ist)
	(DM und zwar)
	[01;31m(PX[00m [01;33m(PX[00m
		(PX um sieben uhr zehn)
		(KON und)
		[01;31m(PX[00m
			(PX am wochenende) [01;33mPX)[00m
			(ADVX leider)
			(ADVX gar nicht)[01;31m)[00m[01;31m)[00m)
Step:PP Attachment
{'subtrees': ['PX', 'KON', 'PX'], 'family': ['SIMPX', 'ADVX', 'ADVX', 'PX', 'ADJX', 'VC', 'DM', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'PROP', 'VVINF', 'KOUS', 'PDS', 'APPR', 'NE', 'KOUS', 'PPER', 'APPR', 'NE', 'VVINF', 'VMFIN', 'ADV', 'ADV', 'APPRART', 'NN', 'ADJD', 'VAFIN', 'KON', 'ADV', 'APPR', 'CARD', 'NN', 'CARD', 'KON', 'APPRART', 'NN', 'ADV', 'ADV', 'PTKNEG'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 33), 'span': (23, 33), 'left siblings': ['SIMPX', 'ADVX', 'ADVX', 'PX', 'ADJX', 'VC', 'DM'], 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP
	(SIMPX ich mus nur dazu sagen das das von kolnbonn wenn sie von kolnbonn fliegen wollen)
	(ADVX nur)
	(ADVX einmal)
	(PX am tag)
	(ADJX moglich)
	(VC ist)
	(DM und zwar)
	[01;33m(PX[00m (PX um sieben uhr zehn)
	(KON und)
	[01;31m(PX[00m
		(PX am wochenende) [01;33mPX)[00m
		(ADVX leider)
		(ADVX gar nicht)[01;31m)[00m)
Step:Modifier Attachment
{'subtrees': ['PX', 'ADVX', 'ADVX'], 'family': ['SIMPX', 'ADVX', 'ADVX', 'PX', 'ADJX', 'VC', 'DM', 'PX', 'KON', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'PROP', 'VVINF', 'KOUS', 'PDS', 'APPR', 'NE', 'KOUS', 'PPER', 'APPR', 'NE', 'VVINF', 'VMFIN', 'ADV', 'ADV', 'APPRART', 'NN', 'ADJD', 'VAFIN', 'KON', 'ADV', 'APPR', 'CARD', 'NN', 'CARD', 'KON', 'APPRART', 'NN', 'ADV', 'ADV', 'PTKNEG'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 33), 'span': (28, 33), 'left siblings': ['SIMPX', 'ADVX', 'ADVX', 'PX', 'ADJX', 'VC', 'DM', 'PX', 'KON'], 'label': 'PX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX ich mus nur dazu sagen das das von kolnbonn wenn sie von kolnbonn fliegen wollen)
	(ADVX nur)
	(ADVX einmal)
	(PX am tag)
	(ADJX moglich)
	(VC ist)
	(DM und zwar)
	[01;36m(PX[00m
		(PX um sieben uhr zehn)
		(KON und)
		(PX am wochenende)[01;36m)[00m
	(ADVX leider)
	(ADVX gar nicht))
Step:PP Attachment
{'subtrees': ['PX', 'KON', 'PX'], 'family': ['SIMPX', 'ADVX', 'ADVX', 'PX', 'ADJX', 'VC', 'DM', 'PX', 'ADVX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'CARD', 'NN', 'CARD', 'KON', 'APPRART', 'NN'), 'right siblings': [(ADVX (ADV leider)), (ADVX (ADVX (ADV gar)) (PTKNEG nicht))], 'left siblings': [(SIMPX (SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VMFIN mus))) (MF (ADVX (ADV nur)) (PX (PROP dazu))) (VC (VXINF (VVINF sagen))) (C (KOUS das)) (MF (NX (PDS das)) (PX (APPR von) (NX (NE kolnbonn))))) (SIMPX (C (KOUS wenn)) (MF (NX (PPER sie)) (PX (APPR von) (NX (NE kolnbonn)))) (VC (VXINF (VVINF fliegen)) (VXFIN (VMFIN wollen))))), (ADVX (ADV nur)), (ADVX (ADV einmal)), (PX (APPRART am) (NX (NN tag))), (ADJX (ADJD moglich)), (VC (VXFIN (VAFIN ist))), (DM (KON und) (ADVX (ADV zwar)))], 'auto preterminal span': (23, 30), 'span': (23, 30), 'parent': 'TOP', 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP ich mus nur dazu sagen das das von kolnbonn wenn sie von kolnbonn fliegen wollen nur einmal am tag moglich ist und zwar um sieben uhr zehn und am wochenende leider gar nicht)

Sentence 1091:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1092:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1093:
5 Initial errors
0 on fringe, 2 iterations
4 Error:Modifier Attachment
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX ware die frage)
		(SIMPX
			(VF ich)
			(LK brauchte)
			(MF ein hotel)
			(NF
				(R
					(C was)
					(MF
						[01;31m(ADJX[00m
							[01;31m(ADVX[00m
								(ADVX moglichst)
								[01;36m(ADVX[00m
									(ADV [01;33m(ADJX[00m zentral)[01;36m)[00m[01;31m)[00m
							(ADJD gelegen)[01;31m)[00m) [01;33mADJX)[00m
					(VC ist)))))[01;36m)[00m
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'ADJX'], 'mover info': [('ADVX', (8, 9))], 'old_family': ['ADVX', 'ADV'], 'start left siblings': [], 'auto preterminals': ('ADV', 'ADV', 'ADJD'), 'start right siblings': ['ADV'], 'end left siblings': [], 'auto preterminal span': (8, 11), 'movers': ['ADVX'], 'old_parent': 'ADVX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ADJX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX ware die frage)
		(SIMPX ich brauchte ein hotel was moglichst zentral gelegen ist))[01;36m)[00m
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'ART', 'NN', 'PPER', 'VVFIN', 'ART', 'NN', 'PRELS', 'ADV', 'ADV', 'ADJD', 'VAFIN'), 'right siblings': [], 'left siblings': [], 'auto preterminal span': (0, 12), 'span': (0, 12), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP ware die frage ich brauchte ein hotel was moglichst zentral gelegen ist)

Sentence 1094:
3 Initial errors
0 on fringe, 1 iterations
3 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wie lange)
		(LK ware)
		(MF
			(ADVX ungefahr)
			[01;31m(NX[00m [01;33m(NX[00m
				(NX die transferzeit)
				[01;31m(PX[00m
					(PX vom flughafen) [01;33mNX)[00m
					(PX zum hotel)[01;31m)[00m[01;31m)[00m)))
Step:PP Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'NX', 'PX'], 'mover info': [('PX', (8, 10))], 'old_family': ['PX', 'PX'], 'start left siblings': ['PX'], 'auto preterminals': ('ADV', 'ART', 'NN', 'APPRART', 'NN', 'APPRART', 'NN'), 'start right siblings': [], 'end left siblings': ['ADVX', 'NX'], 'auto preterminal span': (3, 10), 'movers': ['PX'], 'old_parent': 'PX', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP wie lange ware ungefahr die transferzeit vom flughafen zum hotel)

Sentence 1095:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1096:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1097:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1098:
13 Initial errors
0 on fringe, 9 iterations
2 Error:Single Word Phrase
2 Error:Clause Attachment
2 Error:Modifier Attachment
2 Error:UNSET move
1 Error:UNSET remove
1 Error:Unary
1 Error:Unary
1 Error:UNSET remove
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(VF dann)
		(LK ware)
		[01;31m(MF[00m [01;33m(MF[00m
			(NX
				(PPER ich))[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;31m(SIMPX[00m
			[01;31m(VF[00m
				(PX
					(APPR um)
					(NX sieben uhr zehn))[01;31m)[00m [01;33mMF)[00m
			(LK wurde)
			(MF ich)
			(VC losfliegen)[01;31m)[00m [01;33mSIMPX)[00m
		(KON und)
		[01;31m(SIMPX[00m
			(VF acht uhr zehn)
			(LK ware)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX ich)
				(ADVX dann)
				[01;31m(PX[00m
					(PX in hannover)
					(PX am flughafen)[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	[01;36m(ADJX[00m [01;31m(DM[00m
		(ITJ richtig)[01;31m)[00m[01;36m)[00m) [01;33mMF)[00m
Step:Single Word Phrase
{'family': ['SIMPX', 'SIMPX', 'ADJX'], 'auto preterminal span': (21, 22), 'span': (21, 22), 'subtrees': ['ITJ'], 'parent': 'TOP', 'over_word': True, 'auto preterminals': ('ITJ',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('DM', 'ADJX')}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(VF dann)
		(LK ware)
		[01;31m(MF[00m [01;33m(MF[00m
			(NX
				(PPER ich))[01;31m)[00m[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;31m(SIMPX[00m
			[01;31m(VF[00m
				(PX
					(APPR um)
					(NX sieben uhr zehn))[01;31m)[00m [01;33mMF)[00m
			(LK wurde)
			(MF ich)
			(VC losfliegen)[01;31m)[00m [01;33mSIMPX)[00m
		(KON und)
		[01;31m(SIMPX[00m
			(VF acht uhr zehn)
			(LK ware)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX ich)
				(ADVX dann)
				[01;31m(PX[00m
					(PX in hannover)
					(PX am flughafen)[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(ADJX richtig)) [01;33mMF)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'VF', 'LK', 'MF', 'VC'], 'mover info': [('SIMPX', (0, 3))], 'old_family': ['SIMPX', 'SIMPX', 'ADJX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'APPR', 'CARD', 'NN', 'CARD', 'VAFIN', 'PPER', 'VVINF', 'KON', 'CARD', 'NN', 'CARD', 'VAFIN', 'PPER', 'ADV', 'APPR', 'NE', 'APPRART', 'NN', 'ITJ'), 'start right siblings': ['SIMPX', 'ADJX'], 'end left siblings': [], 'auto preterminal span': (0, 22), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': ['VF', 'LK', 'MF', 'VC'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX
			[01;31m(SIMPX[00m
				(VF dann)
				(LK ware)
				[01;31m(MF[00m [01;33m(MF[00m
					(NX
						(PPER ich))[01;31m)[00m[01;31m)[00m
			[01;31m(VF[00m
				(PX
					(APPR um)
					(NX sieben uhr zehn))[01;31m)[00m [01;33mMF)[00m
			(LK wurde)
			(MF ich)
			(VC losfliegen))
		(KON und)
		[01;31m(SIMPX[00m
			(VF acht uhr zehn)
			(LK ware)
			[01;31m(MF[00m [01;33m(MF[00m
				(NX ich)
				(ADVX dann)
				[01;31m(PX[00m
					(PX in hannover)
					(PX am flughafen)[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(ADJX richtig)) [01;33mMF)[00m
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'PX', 'ADJX'], 'mover info': [('ADJX', (21, 22))], 'old_family': ['SIMPX', 'ADJX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'APPR', 'CARD', 'NN', 'CARD', 'VAFIN', 'PPER', 'VVINF', 'KON', 'CARD', 'NN', 'CARD', 'VAFIN', 'PPER', 'ADV', 'APPR', 'NE', 'APPRART', 'NN', 'ITJ'), 'start right siblings': [], 'end left siblings': ['NX', 'ADVX', 'PX'], 'auto preterminal span': (0, 22), 'movers': ['ADJX'], 'old_parent': 'TOP', 'POS confusion': ('ITJ', 'ITJ'), 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX
			[01;31m(SIMPX[00m
				(VF dann)
				(LK ware)
				[01;31m(MF[00m [01;33m(MF[00m
					(NX
						(PPER ich))[01;31m)[00m[01;31m)[00m
			[01;31m(VF[00m
				(PX
					(APPR um)
					(NX sieben uhr zehn))[01;31m)[00m [01;33mMF)[00m
			(LK wurde)
			(MF ich)
			(VC losfliegen))
		(KON und)
		[01;31m(SIMPX[00m
			(VF acht uhr zehn)
			(LK ware)
			(MF
				(NX ich)
				(ADVX dann)
				[01;31m(PX[00m
					(PX in hannover)
					(PX am flughafen)[01;31m)[00m
				(ADJX richtig))[01;31m)[00m[01;31m)[00m)
Step:UNSET move
{'new_parent': 'MF', 'new_family': ['NX', 'VF'], 'mover info': [('VF', (3, 7))], 'old_family': ['SIMPX', 'VF', 'LK', 'MF', 'VC'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'APPR', 'CARD', 'NN', 'CARD', 'VAFIN', 'PPER', 'VVINF'), 'start right siblings': ['LK', 'MF', 'VC'], 'end left siblings': ['NX'], 'auto preterminal span': (0, 10), 'movers': ['VF'], 'old_parent': 'SIMPX', 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX
			[01;31m(SIMPX[00m
				(VF dann)
				(LK ware)
				(MF
					(NX ich)
					[01;31m(VF[00m
						(PX
							(APPR um)
							(NX sieben uhr zehn))[01;31m)[00m)[01;31m)[00m
			(LK wurde)
			(MF ich)
			(VC losfliegen))
		(KON und)
		[01;31m(SIMPX[00m
			(VF acht uhr zehn)
			(LK ware)
			(MF
				(NX ich)
				(ADVX dann)
				[01;31m(PX[00m
					(PX in hannover)
					(PX am flughafen)[01;31m)[00m
				(ADJX richtig))[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'LK', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'APPR', 'CARD', 'NN', 'CARD', 'VAFIN', 'PPER', 'VVINF'), 'right siblings': ['LK', 'MF', 'VC'], 'parent': 'SIMPX', 'auto preterminal span': (0, 10), 'span': (0, 7), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX
			(VF dann)
			(LK ware)
			(MF
				(NX ich)
				[01;31m(VF[00m
					(PX
						(APPR um)
						(NX sieben uhr zehn))[01;31m)[00m)
			(LK wurde)
			(MF ich)
			(VC losfliegen))
		(KON und)
		[01;31m(SIMPX[00m
			(VF acht uhr zehn)
			(LK ware)
			(MF
				(NX ich)
				(ADVX dann)
				[01;31m(PX[00m
					(PX in hannover)
					(PX am flughafen)[01;31m)[00m
				(ADJX richtig))[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX', 'KON', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'APPR', 'CARD', 'NN', 'CARD', 'VAFIN', 'PPER', 'VVINF', 'KON', 'CARD', 'NN', 'CARD', 'VAFIN', 'PPER', 'ADV', 'APPR', 'NE', 'APPRART', 'NN', 'ITJ'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 22), 'span': (0, 22), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(VF dann)
		(LK ware)
		(MF
			(NX ich)
			[01;31m(VF[00m
				(PX
					(APPR um)
					(NX sieben uhr zehn))[01;31m)[00m)
		(LK wurde)
		(MF ich)
		(VC losfliegen))
	(KON und)
	[01;31m(SIMPX[00m
		(VF acht uhr zehn)
		(LK ware)
		(MF
			(NX ich)
			(ADVX dann)
			[01;31m(PX[00m
				(PX in hannover)
				(PX am flughafen)[01;31m)[00m
			(ADJX richtig))[01;31m)[00m)
Step:Unary
{'subtrees': ['PX'], 'family': ['NX', 'VF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'APPR', 'CARD', 'NN', 'CARD'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (2, 7), 'span': (3, 7), 'left siblings': ['NX'], 'label': 'VF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX dann ware ich um sieben uhr zehn wurde ich losfliegen)
	(KON und)
	[01;31m(SIMPX[00m
		(VF acht uhr zehn)
		(LK ware)
		(MF
			(NX ich)
			(ADVX dann)
			[01;31m(PX[00m
				(PX in hannover)
				(PX am flughafen)[01;31m)[00m
			(ADJX richtig))[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'KON', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VAFIN', 'PPER', 'APPR', 'CARD', 'NN', 'CARD', 'VAFIN', 'PPER', 'VVINF', 'KON', 'CARD', 'NN', 'CARD', 'VAFIN', 'PPER', 'ADV', 'APPR', 'NE', 'APPRART', 'NN', 'ITJ'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 22), 'span': (11, 22), 'left siblings': ['SIMPX', 'KON'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX dann ware ich um sieben uhr zehn wurde ich losfliegen)
	(KON und)
	(VF acht uhr zehn)
	(LK ware)
	(MF
		(NX ich)
		(ADVX dann)
		[01;31m(PX[00m
			(PX in hannover)
			(PX am flughafen)[01;31m)[00m
		(ADJX richtig)))
Step:PP Attachment
{'subtrees': ['PX', 'PX'], 'family': ['NX', 'ADVX', 'PX', 'ADJX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'ADV', 'APPR', 'NE', 'APPRART', 'NN', 'ITJ'), 'right siblings': ['ADJX'], 'parent': 'MF', 'auto preterminal span': (15, 22), 'span': (17, 21), 'left siblings': ['NX', 'ADVX'], 'label': 'PX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP dann ware ich um sieben uhr zehn wurde ich losfliegen und acht uhr zehn ware ich dann in hannover am flughafen richtig)

Sentence 1099:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1100:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1101:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1102:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1103:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX das ich am siebten juli)
		[01;31m(SIMPX[00m
			(VF das)
			(LK ist)
			(MF montags)[01;31m)[00m)[01;36m)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'VF', 'LK', 'MF'], 'mover info': [('SIMPX', (0, 5))], 'old_family': ['SIMPX', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('KOUS', 'PPER', 'APPRART', 'ADJA', 'NN', 'PDS', 'VAFIN', 'ADV'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 8), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': ['VF', 'LK', 'MF'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP das ich am siebten juli das ist montags)

Sentence 1104:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1105:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1106:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1107:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1108:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1109:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1110:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1111:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1112:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1113:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1114:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1115:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1116:
3 Initial errors
0 on fringe, 2 iterations
2 Error:Single Word Phrase
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(NX
		(NX
			[01;36m(NX[00m [01;31m(ADJX[00m
				(ADJA siebten)[01;31m)[00m[01;36m)[00m
			[01;36m(NX[00m
				(NN siebten)[01;36m)[00m)
		(APPR bis)
		(PX zum zehnten juli)))
Step:Single Word Phrase
{'family': ['NX', 'NN'], 'auto preterminal span': (0, 1), 'span': (0, 1), 'subtrees': ['ADJA'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('ADJA',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'NX')}
(TOP
	(NX
		(NX
			(NX siebten)
			[01;36m(NX[00m
				(NN siebten)[01;36m)[00m)
		(APPR bis)
		(PX zum zehnten juli)))
Step:Single Word Phrase
{'subtrees': ['NN'], 'family': ['NX', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('NN',), 'right siblings': [], 'left siblings': [(NX (ADJA siebten))], 'auto preterminal span': (1, 2), 'span': (1, 2), 'parent': 'NX', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP siebten siebten bis zum zehnten juli)

Sentence 1117:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1118:
7 Initial errors
0 on fringe, 4 iterations
2 Error:Different label
2 Error:Different label
2 Error:UNSET move
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;36m(PX[00m [01;36m(VF[00m [01;31m(ADJX[00m
			(PX am zehnten juli)
			[01;36m(PX[00m [01;31m(ADJX[00m
				(PX von hannover)
				(ADVX zuruck)[01;31m)[00m[01;36m)[00m[01;31m)[00m[01;36m)[00m[01;36m)[00m
		[01;31m(SIMPX[00m
			(LK ginge)
			(MF das denn dann ab achtzehn uhr)[01;31m)[00m)[01;36m)[00m
Step:Different label
{'family': ['VF', 'SIMPX'], 'auto preterminal span': (0, 6), 'span': (0, 6), 'subtrees': ['PX', 'ADJX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('APPRART', 'ADJA', 'NN', 'APPR', 'NE', 'ADV'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('ADJX', 'VF')}
[01;36m(SIMPX[00m
	(TOP
		[01;36m(PX[00m
			(VF
				(PX am zehnten juli)
				[01;36m(PX[00m [01;31m(ADJX[00m
					(PX von hannover)
					(ADVX zuruck)[01;31m)[00m[01;36m)[00m)[01;36m)[00m
		[01;31m(SIMPX[00m
			(LK ginge)
			(MF das denn dann ab achtzehn uhr)[01;31m)[00m)[01;36m)[00m
Step:Different label
{'family': ['PX', 'PX'], 'auto preterminal span': (3, 6), 'span': (3, 6), 'subtrees': ['PX', 'ADVX'], 'parent': 'VF', 'over_word': False, 'auto preterminals': ('APPR', 'NE', 'ADV'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('ADJX', 'PX')}
[01;36m(SIMPX[00m
	(TOP
		[01;36m(PX[00m
			(VF
				(PX am zehnten juli)
				(PX von hannover zuruck))[01;36m)[00m
		[01;31m(SIMPX[00m
			(LK ginge)
			(MF das denn dann ab achtzehn uhr)[01;31m)[00m)[01;36m)[00m
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF'], 'mover info': [('VF', (0, 6))], 'old_family': ['VF', 'SIMPX'], 'start left siblings': [], 'auto preterminals': ('APPRART', 'ADJA', 'NN', 'APPR', 'NE', 'ADV', 'VVFIN', 'PDS', 'ADV', 'ADV', 'APPR', 'CARD', 'NN'), 'start right siblings': ['SIMPX'], 'end left siblings': [], 'auto preterminal span': (0, 13), 'movers': ['VF'], 'old_parent': 'TOP', 'end right siblings': ['LK', 'MF'], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		[01;36m(PX[00m
			(VF
				(PX am zehnten juli)
				(PX von hannover zuruck))[01;36m)[00m
		(LK ginge)
		(MF das denn dann ab achtzehn uhr)))
Step:Unary
{'subtrees': ['VF'], 'family': ['PX', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPRART', 'ADJA', 'NN', 'APPR', 'NE', 'ADV'), 'right siblings': [(LK (VXFIN (VVFIN ginge))), (MF (NX (PDS das)) (ADVX (ADV denn)) (ADVX (ADV dann)) (PX (APPR ab) (NX (ADJX (CARD achtzehn)) (NN uhr))))], 'left siblings': [], 'auto preterminal span': (0, 6), 'span': (0, 6), 'parent': 'SIMPX', 'label': 'PX', 'classified_type': 'Unary', 'type': 'add'}
(TOP am zehnten juli von hannover zuruck ginge das denn dann ab achtzehn uhr)

Sentence 1119:
5 Initial errors
0 on fringe, 5 iterations
1 Error:Single Word Phrase
1 Error:Unary
1 Error:Single Word Phrase
1 Error:Clause Attachment
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM tja)
	[01;31m(P[00m
		(SIMPX
			(VF da)
			(LK bin)
			(MF
				(NX ich)
				(ADVX gerade)
				(ADVX ja)
				(ADVX nicht)
				(ADJX
					(ADJX so gut)
					[01;36m(VXINF[00m
						[01;36m(VC[00m
							(ADJD informiert)[01;36m)[00m[01;36m)[00m)))
		[01;36m(KOORD[00m
			(KON aber)[01;36m)[00m
		[01;31m(SIMPX[00m
			(VF da)
			(LK wird)
			(MF es einen flug)
			(VC geben)[01;31m)[00m[01;31m)[00m
	(SIMPX und ich denke auch das der vielleicht abends ist))
Step:Single Word Phrase
{'subtrees': ['ADJD'], 'family': ['ADJX', 'VC'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADJD',), 'right siblings': [], 'left siblings': [(ADJX (ADVX (ADV so)) (ADJD gut))], 'auto preterminal span': (9, 10), 'span': (9, 10), 'parent': 'ADJX', 'label': 'VC', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM tja)
	[01;31m(P[00m
		(SIMPX
			(VF da)
			(LK bin)
			(MF
				(NX ich)
				(ADVX gerade)
				(ADVX ja)
				(ADVX nicht)
				(ADJX
					(ADJX so gut)
					[01;36m(VXINF[00m
						(VC
							(ADJD informiert))[01;36m)[00m)))
		[01;36m(KOORD[00m
			(KON aber)[01;36m)[00m
		[01;31m(SIMPX[00m
			(VF da)
			(LK wird)
			(MF es einen flug)
			(VC geben)[01;31m)[00m[01;31m)[00m
	(SIMPX und ich denke auch das der vielleicht abends ist))
Step:Unary
{'subtrees': ['VC'], 'family': ['ADJX', 'VXINF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJD',), 'right siblings': [], 'left siblings': [(ADJX (ADVX (ADV so)) (ADJD gut))], 'auto preterminal span': (9, 10), 'span': (9, 10), 'parent': 'ADJX', 'label': 'VXINF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM tja)
	[01;31m(P[00m
		(SIMPX da bin ich gerade ja nicht so gut informiert)
		[01;36m(KOORD[00m
			(KON aber)[01;36m)[00m
		[01;31m(SIMPX[00m
			(VF da)
			(LK wird)
			(MF es einen flug)
			(VC geben)[01;31m)[00m[01;31m)[00m
	(SIMPX und ich denke auch das der vielleicht abends ist))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON',), 'right siblings': [(SIMPX (VF (ADVX (ADV da))) (LK (VXFIN (VAFIN wird))) (MF (NX (PPER es)) (NX (ART einen) (NN flug))) (VC (VXINF (VVINF geben))))], 'left siblings': [(SIMPX (VF (ADVX (ADV da))) (LK (VXFIN (VAFIN bin))) (MF (NX (PPER ich)) (ADVX (ADV gerade)) (ADVX (ADV ja)) (ADVX (PTKNEG nicht)) (ADJX (ADJX (ADVX (ADV so)) (ADJD gut)) (VXINF (VC (ADJD informiert))))))], 'auto preterminal span': (10, 11), 'span': (10, 11), 'parent': 'P', 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM tja)
	[01;31m(P[00m
		(SIMPX da bin ich gerade ja nicht so gut informiert)
		(KOORD aber)
		[01;31m(SIMPX[00m
			(VF da)
			(LK wird)
			(MF es einen flug)
			(VC geben)[01;31m)[00m[01;31m)[00m
	(SIMPX und ich denke auch das der vielleicht abends ist))
Step:Clause Attachment
{'subtrees': ['SIMPX', 'KOORD', 'SIMPX'], 'family': ['DM', 'P', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADV', 'VAFIN', 'PPER', 'ADV', 'ADV', 'PTKNEG', 'ADV', 'ADJD', 'ADJD', 'KON', 'ADV', 'VAFIN', 'PPER', 'ART', 'NN', 'VVINF', 'KON', 'PPER', 'VVFIN', 'ADV', 'KOUS', 'PDS', 'ADV', 'ADV', 'VAFIN'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 26), 'span': (1, 17), 'left siblings': ['DM'], 'label': 'P', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(DM tja)
	(SIMPX da bin ich gerade ja nicht so gut informiert)
	(KOORD aber)
	[01;31m(SIMPX[00m
		(VF da)
		(LK wird)
		(MF es einen flug)
		(VC geben)[01;31m)[00m
	(SIMPX und ich denke auch das der vielleicht abends ist))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['DM', 'SIMPX', 'KOORD', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ITJ', 'ADV', 'VAFIN', 'PPER', 'ADV', 'ADV', 'PTKNEG', 'ADV', 'ADJD', 'ADJD', 'KON', 'ADV', 'VAFIN', 'PPER', 'ART', 'NN', 'VVINF', 'KON', 'PPER', 'VVFIN', 'ADV', 'KOUS', 'PDS', 'ADV', 'ADV', 'VAFIN'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 26), 'span': (11, 17), 'left siblings': ['DM', 'SIMPX', 'KOORD'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP tja da bin ich gerade ja nicht so gut informiert aber da wird es einen flug geben und ich denke auch das der vielleicht abends ist)

Sentence 1120:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1121:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1122:
3 Initial errors
0 on fringe, 3 iterations
1 Error:Modifier Attachment
1 Error:Unary
1 Error:PP Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(ADVX[00m
		(ADVX ansonsten)
		(ADVX vielleicht)
		(ADVX auch)
		[01;36m(PX[00m
			(PX mit dem zug)
			(ADVX abends)[01;36m)[00m
		(ADVX zuruck)[01;31m)[00m
	[01;36m(NF[00m
		(SIMPX
			(C wenn)
			(MF das mit dem flugzeug))[01;36m)[00m)
Step:Modifier Attachment
{'subtrees': ['PX', 'ADVX'], 'family': ['ADVX', 'ADVX', 'ADVX', 'PX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NN', 'ADV'), 'right siblings': [(ADVX (ADV zuruck))], 'left siblings': [(ADVX (ADV ansonsten)), (ADVX (ADV vielleicht)), (ADVX (ADV auch))], 'auto preterminal span': (3, 7), 'span': (3, 7), 'parent': 'ADVX', 'label': 'PX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	[01;31m(ADVX[00m
		(ADVX ansonsten)
		(ADVX vielleicht)
		(ADVX auch)
		(PX mit dem zug abends)
		(ADVX zuruck)[01;31m)[00m
	[01;36m(NF[00m
		(SIMPX
			(C wenn)
			(MF das mit dem flugzeug))[01;36m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['ADVX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PDS', 'APPR', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(ADVX (ADVX (ADV ansonsten)) (ADVX (ADV vielleicht)) (ADVX (ADV auch)) (PX (PX (APPR mit) (NX (ART dem) (NN zug))) (ADVX (ADV abends))) (ADVX (ADV zuruck)))], 'auto preterminal span': (8, 13), 'span': (8, 13), 'parent': 'TOP', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	[01;31m(ADVX[00m
		(ADVX ansonsten)
		(ADVX vielleicht)
		(ADVX auch)
		(PX mit dem zug abends)
		(ADVX zuruck)[01;31m)[00m
	(NF wenn das mit dem flugzeug))
Step:PP Attachment
{'subtrees': ['ADVX', 'ADVX', 'ADVX', 'PX', 'ADVX'], 'family': ['ADVX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'ADV', 'ADV', 'KOUS', 'PDS', 'APPR', 'ART', 'NN'), 'right siblings': ['NF'], 'parent': 'TOP', 'auto preterminal span': (0, 13), 'span': (0, 8), 'left siblings': [], 'label': 'ADVX', 'classified_type': 'PP Attachment', 'type': 'remove'}
(TOP ansonsten vielleicht auch mit dem zug abends zuruck wenn das mit dem flugzeug)

Sentence 1123:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1124:
11 Initial errors
0 on fringe, 7 iterations
3 Error:NP Attachment
2 Error:Single Word Phrase
2 Error:Single Word Phrase
1 Error:Unary
1 Error:Modifier Attachment
1 Error:Modifier Attachment
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX das ist)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(VF stundlich)
			[01;33m(SIMPX[00m (LK fahrt)
			(MF [01;33m(MF[00m
				(NX ein zug)
				(PX
					(APPR um)
					[01;36m(ADJX[00m [01;31m(NX[00m
						(CARD achtundfunfzig)[01;31m)[00m[01;36m)[00m))[01;31m)[00m
		[01;31m(NX[00m
			[01;31m(NX[00m
				(NX die volle stunde)
				(ADVX immer)[01;31m)[00m [01;33mMF)[00m
			[01;36m(VC[00m [01;36m(VXINF[00m [01;31m(NX[00m
				(CARD achtundfunfzig)[01;31m)[00m[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;36m)[00m) [01;33mSIMPX)[00m
Step:NP Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'NX'], 'mover info': [('NX', (8, 13))], 'old_family': ['SIMPX', 'SIMPX', 'NX'], 'start left siblings': ['SIMPX', 'SIMPX'], 'auto preterminals': ('PDS', 'VAFIN', 'ADJD', 'VVFIN', 'ART', 'NN', 'APPR', 'CARD', 'ART', 'ADJA', 'NN', 'ADV', 'CARD'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 13), 'adding node already present': False, 'movers': ['NX'], 'old_parent': 'TOP', 'added and moved': True, 'end right siblings': [], 'classified_type': 'NP Attachment', 'type': 'move', 'added label': 'VC'}
(TOP
	(SIMPX das ist)
	(SIMPX
		(VF stundlich)
		(SIMPX
			(LK fahrt)
			(MF [01;33m(MF[00m
				(NX ein zug)
				(PX
					(APPR um)
					[01;36m(ADJX[00m [01;31m(NX[00m
						(CARD achtundfunfzig)[01;31m)[00m[01;36m)[00m))
			[01;31m(NX[00m
				[01;31m(NX[00m
					(NX die volle stunde)
					(ADVX immer)[01;31m)[00m [01;33mMF)[00m
				[01;36m(VC[00m [01;36m(VXINF[00m [01;31m(NX[00m
					(CARD achtundfunfzig)[01;31m)[00m[01;36m)[00m[01;36m)[00m[01;31m)[00m)))
Step:Single Word Phrase
{'family': ['APPR', 'ADJX'], 'auto preterminal span': (7, 8), 'span': (7, 8), 'subtrees': ['CARD'], 'parent': 'PX', 'over_word': True, 'auto preterminals': ('CARD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP
	(SIMPX das ist)
	(SIMPX
		(VF stundlich)
		(SIMPX
			(LK fahrt)
			[01;33m(MF[00m (MF ein zug um achtundfunfzig)
			[01;31m(NX[00m
				[01;31m(NX[00m
					(NX die volle stunde)
					(ADVX immer)[01;31m)[00m [01;33mMF)[00m
				[01;36m(VC[00m [01;36m(VXINF[00m [01;31m(NX[00m
					(CARD achtundfunfzig)[01;31m)[00m[01;36m)[00m[01;36m)[00m[01;31m)[00m)))
Step:Single Word Phrase
{'family': ['NX', 'VXINF'], 'auto preterminal span': (12, 13), 'span': (12, 13), 'subtrees': ['CARD'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('CARD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'VXINF')}
(TOP
	(SIMPX das ist)
	(SIMPX
		(VF stundlich)
		(SIMPX
			(LK fahrt)
			[01;33m(MF[00m (MF ein zug um achtundfunfzig)
			[01;31m(NX[00m
				[01;31m(NX[00m
					(NX die volle stunde)
					(ADVX immer)[01;31m)[00m [01;33mMF)[00m
				[01;36m(VC[00m
					(VXINF
						(CARD achtundfunfzig))[01;36m)[00m[01;31m)[00m)))
Step:Unary
{'subtrees': ['VXINF'], 'family': ['NX', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('CARD',), 'right siblings': [], 'left siblings': [(NX (NX (ART die) (ADJX (ADJA volle)) (NN stunde)) (ADVX (ADV immer)))], 'auto preterminal span': (12, 13), 'span': (12, 13), 'parent': 'NX', 'label': 'VC', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX das ist)
	(SIMPX
		(VF stundlich)
		(SIMPX
			(LK fahrt)
			[01;33m(MF[00m (MF ein zug um achtundfunfzig)
			[01;31m(NX[00m
				[01;31m(NX[00m
					(NX die volle stunde)
					(ADVX immer)[01;31m)[00m [01;33mMF)[00m
				(VC achtundfunfzig)[01;31m)[00m)))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX'], 'family': ['NX', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'ADJA', 'NN', 'ADV', 'CARD'), 'right siblings': ['VC'], 'parent': 'NX', 'auto preterminal span': (8, 13), 'span': (8, 12), 'left siblings': [], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX das ist)
	(SIMPX
		(VF stundlich)
		(SIMPX
			(LK fahrt)
			[01;33m(MF[00m (MF ein zug um achtundfunfzig)
			[01;31m(NX[00m
				(NX die volle stunde)
				(ADVX immer) [01;33mMF)[00m
				(VC achtundfunfzig)[01;31m)[00m)))
Step:Modifier Attachment
{'subtrees': ['NX', 'ADVX', 'VC'], 'family': ['LK', 'MF', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'ART', 'NN', 'APPR', 'CARD', 'ART', 'ADJA', 'NN', 'ADV', 'CARD'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (3, 13), 'span': (8, 13), 'left siblings': ['LK', 'MF'], 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(SIMPX das ist)
	(SIMPX
		(VF stundlich)
		(SIMPX
			(LK fahrt)
			[01;36m(MF[00m
				(MF ein zug um achtundfunfzig)
				(NX die volle stunde)
				(ADVX immer)[01;36m)[00m
			(VC achtundfunfzig))))
Step:Modifier Attachment
{'subtrees': ['MF', 'NX', 'ADVX'], 'family': ['LK', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'CARD', 'ART', 'ADJA', 'NN', 'ADV'), 'right siblings': [(VC (VXINF (CARD achtundfunfzig)))], 'left siblings': [(LK (VXFIN (VVFIN fahrt)))], 'auto preterminal span': (4, 12), 'span': (4, 12), 'parent': 'SIMPX', 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP das ist stundlich fahrt ein zug um achtundfunfzig die volle stunde immer achtundfunfzig)

Sentence 1125:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1126:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1127:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1128:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1129:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1130:
6 Initial errors
0 on fringe, 3 iterations
2 Error:Different label
2 Error:Modifier Attachment
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX
		(VF es)
		(LK ware)
		(MF
			(ADVX ja)
			[01;31m(ADJX[00m
				[01;31m(ADJX[00m
					(ADVX dreimal)
					[01;36m(ADJX[00m
						[01;33m(ADJX[00m (ADVX so)
						(ADJD lang)[01;36m)[00m[01;31m)[00m
				[01;36m(ADJX[00m [01;31m(NX[00m
					(KOKOM wie)
					(NN fliegen)[01;31m)[00m[01;36m)[00m[01;31m)[00m))) [01;33mADJX)[00m
Step:Different label
{'family': ['ADJX', 'ADJX'], 'auto preterminal span': (7, 9), 'span': (7, 9), 'subtrees': ['KOKOM', 'NN'], 'parent': 'ADJX', 'over_word': False, 'auto preterminals': ('KOKOM', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('NX', 'ADJX')}
(TOP
	(DM also)
	(SIMPX
		(VF es)
		(LK ware)
		(MF
			(ADVX ja)
			[01;31m(ADJX[00m
				[01;31m(ADJX[00m
					(ADVX dreimal)
					[01;36m(ADJX[00m
						[01;33m(ADJX[00m (ADVX so)
						(ADJD lang)[01;36m)[00m[01;31m)[00m
				(ADJX wie fliegen)[01;31m)[00m))) [01;33mADJX)[00m
Step:Modifier Attachment
{'new_parent': 'ADJX', 'new_family': ['ADVX', 'ADJX', 'ADJX'], 'mover info': [('ADVX', (4, 5))], 'old_family': ['ADVX', 'ADVX', 'ADJD'], 'start left siblings': [], 'auto preterminals': ('ADV', 'ADV', 'ADJD', 'KOKOM', 'NN'), 'start right siblings': ['ADVX', 'ADJD'], 'end left siblings': [], 'auto preterminal span': (4, 9), 'movers': ['ADVX'], 'old_parent': 'ADJX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ADJX', 'ADJX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	(DM also)
	(SIMPX
		(VF es)
		(LK ware)
		(MF
			(ADVX ja)
			[01;31m(ADJX[00m
				(ADVX dreimal)
				[01;36m(ADJX[00m
					(ADJX so lang)
					(ADJX wie fliegen)[01;36m)[00m[01;31m)[00m)))
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'ADVX', 'ADJX'], 'mover info': [('ADVX', (4, 5))], 'old_family': ['ADVX', 'ADJX', 'ADJX'], 'start left siblings': [], 'auto preterminals': ('ADV', 'ADV', 'ADV', 'ADJD', 'KOKOM', 'NN'), 'start right siblings': ['ADJX', 'ADJX'], 'end left siblings': ['ADVX'], 'auto preterminal span': (3, 9), 'movers': ['ADVX'], 'old_parent': 'ADJX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ADJX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP also es ware ja dreimal so lang wie fliegen)

Sentence 1131:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1132:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF wann)
		(LK konnten)
		(MF sie denn genau)
		(VC sagen)
		(NF
			(SIMPX
				(C ob)
				(MF
					(NX ich)
					(PX an dem abend)
					[01;36m(ADVX[00m [01;31m(ADJX[00m
						(ADJD exakt)[01;31m)[00m[01;36m)[00m
					(PX nach hause))
				(VC fahren kann)))))
Step:Single Word Phrase
{'family': ['NX', 'PX', 'ADVX', 'PX'], 'auto preterminal span': (11, 12), 'span': (11, 12), 'subtrees': ['ADJD'], 'parent': 'MF', 'over_word': True, 'auto preterminals': ('ADJD',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('ADJX', 'ADVX')}
(TOP wann konnten sie denn genau sagen ob ich an dem abend exakt nach hause fahren kann)

Sentence 1133:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1134:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1135:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1136:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		(SIMPX sieht das mit dem hotel aus)
		(SIMPX konnen sie das auch buchen fur mich))[01;36m)[00m
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PDS', 'APPR', 'ART', 'NN', 'PTKVZ', 'VMFIN', 'PPER', 'PDS', 'ADV', 'VVINF', 'APPR', 'PPER'), 'right siblings': [], 'left siblings': [], 'auto preterminal span': (0, 13), 'span': (0, 13), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP sieht das mit dem hotel aus konnen sie das auch buchen fur mich)

Sentence 1137:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1138:
2 Initial errors
0 on fringe, 2 iterations
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		[01;36m(SIMPX[00m
			(VF sie)
			(LK sagten)
			(MF jetzt eben)[01;36m)[00m
		[01;31m(NF[00m
			(SIMPX
				(VF sie)
				(LK mochten)
				(MF zentral))[01;31m)[00m))
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ADV'), 'right siblings': [(NF (SIMPX (VF (NX (PPER sie))) (LK (VXFIN (VMFIN mochten))) (MF (ADJX (ADJD zentral)))))], 'left siblings': [], 'auto preterminal span': (0, 4), 'span': (0, 4), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(SIMPX sie sagten jetzt eben)
		[01;31m(NF[00m
			(SIMPX
				(VF sie)
				(LK mochten)
				(MF zentral))[01;31m)[00m))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ADV', 'PPER', 'VMFIN', 'ADJD'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (0, 7), 'span': (4, 7), 'left siblings': ['SIMPX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP sie sagten jetzt eben sie mochten zentral)

Sentence 1139:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1140:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Different label
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(PX[00m
	(TOP
		[01;31m(ADJX[00m
			(ADJX zentral)
			(PX zum stadtzentrum oder zu ihrem kongresort)[01;31m)[00m)[01;36m)[00m
Step:Different label
{'family': ['PX'], 'auto preterminal span': (0, 7), 'span': (0, 7), 'subtrees': ['ADJX', 'PX'], 'parent': 'TOP', 'over_word': False, 'auto preterminals': ('ADJD', 'APPRART', 'NN', 'KON', 'APPR', 'PPOSAT', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('ADJX', 'PX')}
(TOP zentral zum stadtzentrum oder zu ihrem kongresort)

Sentence 1141:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1142:
3 Initial errors
0 on fringe, 2 iterations
2 Error:PP Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(SIMPX
		(KOORD und)
		(LK wissen)
		(MF sie schon)
		(NF
			(SIMPX
				[01;31m(MF[00m
					[01;36m(C[00m
						(PX
							(APPR in)
							(NX welcher preiskategorie))[01;36m)[00m
					[01;36m(MF[00m
						(NX
							(PDS das))[01;36m)[00m[01;31m)[00m
				(VC liegen sollte)))))
Step:PP Attachment
{'new_parent': 'SIMPX', 'new_family': ['PX', 'MF', 'VC'], 'mover info': [('PX', (5, 8))], 'old_family': ['PX', 'NX'], 'start left siblings': [], 'auto preterminals': ('APPR', 'PWAT', 'NN', 'PDS', 'VVINF', 'VMFIN'), 'start right siblings': ['NX'], 'end left siblings': [], 'auto preterminal span': (5, 11), 'movers': ['PX'], 'old_parent': 'MF', 'end right siblings': ['MF', 'VC'], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		(KOORD und)
		(LK wissen)
		(MF sie schon)
		(NF
			(SIMPX
				[01;36m(C[00m
					(PX
						(APPR in)
						(NX welcher preiskategorie))[01;36m)[00m
				(MF das)
				(VC liegen sollte)))))
Step:Unary
{'subtrees': ['PX'], 'family': ['C', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'PWAT', 'NN'), 'right siblings': [(MF (NX (PDS das))), (VC (VXINF (VVINF liegen)) (VXFIN (VMFIN sollte)))], 'left siblings': [], 'auto preterminal span': (5, 8), 'span': (5, 8), 'parent': 'SIMPX', 'label': 'C', 'classified_type': 'Unary', 'type': 'add'}
(TOP ja und wissen sie schon in welcher preiskategorie das liegen sollte)

Sentence 1143:
3 Initial errors
0 on fringe, 2 iterations
2 Error:PP Attachment
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX
		(VF es)
		(LK sollte)
		(MF
			(NX
				(NX
					[01;31m(ADVX[00m
						(ADVX so)
						(ADV ungefahr)[01;31m)[00m
					(ADJX hundert)
					(NN mark))
				(PX [01;33m(PX[00m
					(APPR pro)
					[01;31m(NX[00m
						(NX ubernachtung) [01;33mPX)[00m
						(PX mit fruhstuck)[01;31m)[00m)))))
Step:PP Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'PX', 'PX'], 'mover info': [('PX', (10, 12))], 'old_family': ['NX', 'PX'], 'start left siblings': ['NX'], 'auto preterminals': ('ADV', 'ADV', 'CARD', 'NN', 'APPR', 'NN', 'APPR', 'NN'), 'start right siblings': [], 'end left siblings': ['NX', 'PX'], 'auto preterminal span': (4, 12), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'NX', 'added and moved': True, 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX
		(VF es)
		(LK sollte)
		(MF
			(NX
				(NX
					[01;31m(ADVX[00m
						(ADVX so)
						(ADV ungefahr)[01;31m)[00m
					(ADJX hundert)
					(NN mark))
				(PX pro ubernachtung mit fruhstuck)))))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADV'], 'family': ['ADVX', 'ADJX', 'NN'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV', 'CARD', 'NN'), 'right siblings': ['ADJX', 'NN'], 'parent': 'NX', 'auto preterminal span': (4, 8), 'span': (4, 6), 'left siblings': [], 'label': 'ADVX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP ja also es sollte so ungefahr hundert mark pro ubernachtung mit fruhstuck)

Sentence 1144:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1145:
4 Initial errors
0 on fringe, 3 iterations
2 Error:Different label
1 Error:Modifier Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK sehe)
		(MF
			[01;36m(ADVX[00m
				(ADVX jetzt)
				(ADVX hier)[01;36m)[00m
			(ADVX gerade)))
	(SIMPX habe ich einmal das hotel am thielenplatz)
	(SIMPX
		(VF das)
		[01;36m(FKOORD[00m [01;31m(LKMN[00m
			(LKM liegt sehr zentral)
			(KON und)
			(LKM hat auch einen konferenzraum)[01;31m)[00m[01;36m)[00m)
	(SIMPX
		(KOORD und)
		(VF da)
		(LK ware)
		[01;36m(NX[00m
			(MF
				(NX die preiskategorie fur ein einzelzimmer)
				(PX zwischen funfundachtzig und hundert dreisig mark))[01;36m)[00m))
Step:Different label
{'family': ['VF', 'FKOORD'], 'auto preterminal span': (14, 22), 'span': (14, 22), 'subtrees': ['LKM', 'KON', 'LKM'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('VVFIN', 'ADV', 'ADJD', 'KON', 'VAFIN', 'ADV', 'ART', 'NN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('LKMN', 'FKOORD')}
(TOP
	(DM also)
	(SIMPX
		(VF ich)
		(LK sehe)
		(MF
			[01;36m(ADVX[00m
				(ADVX jetzt)
				(ADVX hier)[01;36m)[00m
			(ADVX gerade)))
	(SIMPX habe ich einmal das hotel am thielenplatz)
	(SIMPX das liegt sehr zentral und hat auch einen konferenzraum)
	(SIMPX
		(KOORD und)
		(VF da)
		(LK ware)
		[01;36m(NX[00m
			(MF
				(NX die preiskategorie fur ein einzelzimmer)
				(PX zwischen funfundachtzig und hundert dreisig mark))[01;36m)[00m))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX'], 'family': ['ADVX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ADV'), 'right siblings': [(ADVX (ADV gerade))], 'left siblings': [], 'auto preterminal span': (3, 5), 'span': (3, 5), 'parent': 'MF', 'label': 'ADVX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(DM also)
	(SIMPX ich sehe jetzt hier gerade)
	(SIMPX habe ich einmal das hotel am thielenplatz)
	(SIMPX das liegt sehr zentral und hat auch einen konferenzraum)
	(SIMPX
		(KOORD und)
		(VF da)
		(LK ware)
		[01;36m(NX[00m
			(MF
				(NX die preiskategorie fur ein einzelzimmer)
				(PX zwischen funfundachtzig und hundert dreisig mark))[01;36m)[00m))
Step:Unary
{'subtrees': ['MF'], 'family': ['KOORD', 'VF', 'LK', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'APPR', 'ART', 'NN', 'APPR', 'CARD', 'KON', 'CARD', 'CARD', 'NN'), 'right siblings': [], 'left siblings': [(KOORD (KON und)), (VF (ADVX (ADV da))), (LK (VXFIN (VAFIN ware)))], 'auto preterminal span': (25, 36), 'span': (25, 36), 'parent': 'SIMPX', 'label': 'NX', 'classified_type': 'Unary', 'type': 'add'}
(TOP also ich sehe jetzt hier gerade habe ich einmal das hotel am thielenplatz das liegt sehr zentral und hat auch einen konferenzraum und da ware die preiskategorie fur ein einzelzimmer zwischen funfundachtzig und hundert dreisig mark)

Sentence 1146:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1147:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1148:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF das)
		(LK ware)
		(MF
			[01;36m(MF[00m
				(ADVX
					(ADV jetzt))[01;36m)[00m
			(ADVX ja)))
	(SIMPX das ist das billigste was ich ihnen jetzt gerade im moment anbieten konnte))
Step:Unary
{'subtrees': ['ADVX'], 'family': ['MF', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV',), 'right siblings': [(ADVX (ADV ja))], 'left siblings': [], 'auto preterminal span': (2, 3), 'span': (2, 3), 'parent': 'MF', 'label': 'MF', 'classified_type': 'Unary', 'type': 'add'}
(TOP das ware jetzt ja das ist das billigste was ich ihnen jetzt gerade im moment anbieten konnte)

Sentence 1149:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1150:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1151:
4 Initial errors
0 on fringe, 2 iterations
3 Error:UNSET move
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF das hotel)
		(LK heist)
		(MF
			[01;31m(NX[00m
				(NX hotel am thielenplatz)
				(PX
					(APPR mit)
					(NX [01;33m(NX[00m
						(NX t h)
						(KON und)
						[01;31m(NX[00m
							[01;36m(NX[00m
								(BS i) [01;33mNX)[00m[01;36m)[00m
							(BS e)[01;31m)[00m))[01;31m)[00m)))
Step:UNSET move
{'new_parent': 'PX', 'new_family': ['APPR', 'NX', 'BS'], 'mover info': [('BS', (11, 12))], 'old_family': ['BS', 'BS'], 'start left siblings': ['BS'], 'auto preterminals': ('APPR', 'BS', 'BS', 'KON', 'BS', 'BS'), 'start right siblings': [], 'end left siblings': ['APPR', 'NX'], 'auto preterminal span': (6, 12), 'adding node already present': False, 'movers': ['BS'], 'old_parent': 'NX', 'POS confusion': ('BS', 'BS'), 'added and moved': True, 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move', 'added label': 'NX'}
(TOP
	(SIMPX
		(VF das hotel)
		(LK heist)
		(MF
			[01;31m(NX[00m
				(NX hotel am thielenplatz)
				(PX mit t h und i e)[01;31m)[00m)))
Step:Unary
{'subtrees': ['NX', 'PX'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'APPRART', 'NE', 'APPR', 'BS', 'BS', 'KON', 'BS', 'BS'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (3, 12), 'span': (3, 12), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP das hotel heist hotel am thielenplatz mit t h und i e)

Sentence 1152:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1153:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1154:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1155:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1156:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1157:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1158:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1159:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1160:
5 Initial errors
0 on fringe, 2 iterations
3 Error:PP Attachment
2 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	(SIMPX
		(LK soll)
		(MF
			(NX ich)
			(ADVX jetzt)
			(PX fur sie)
			[01;36m(NX[00m
				[01;31m(NX[00m
					(NX den flug)
					[01;33m(PX[00m (PX vom kolnbonner flughafen)[01;31m)[00m
				(PX am siebten juli)[01;36m)[00m) [01;33mPX)[00m
		(VC buchen)
		(NF um sieben uhr zehn))
	(SIMPX sie sind dann um acht uhr zehn in hannover)
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK informiere)
		(MF ich mich noch)
		(NF
			(SIMPX
				(C ob)
				(MF
					(NX sie)
					[01;31m(PX[00m
						(ADVX abends)
						[01;36m(PX[00m
							(APPRART am)
							(NX zehnten juli)[01;36m)[00m[01;31m)[00m)
				(VC zuruckfliegen konnten)))))
Step:PP Attachment
{'new_parent': 'NX', 'new_family': ['NX', 'PX', 'PX'], 'mover info': [('PX', (11, 14))], 'old_family': ['NX', 'ADVX', 'PX', 'NX', 'PX'], 'start left siblings': ['NX', 'ADVX', 'PX', 'NX'], 'auto preterminals': ('PPER', 'ADV', 'APPR', 'PPER', 'ART', 'NN', 'APPRART', 'ADJA', 'NN', 'APPRART', 'ADJA', 'NN'), 'start right siblings': [], 'end left siblings': ['NX', 'PX'], 'auto preterminal span': (2, 14), 'adding node already present': False, 'movers': ['PX'], 'old_parent': 'MF', 'added and moved': True, 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move', 'added label': 'PX'}
(TOP
	(DM also)
	(SIMPX soll ich jetzt fur sie den flug vom kolnbonner flughafen am siebten juli buchen um sieben uhr zehn)
	(SIMPX sie sind dann um acht uhr zehn in hannover)
	(SIMPX
		(KOORD und)
		(VF dann)
		(LK informiere)
		(MF ich mich noch)
		(NF
			(SIMPX
				(C ob)
				(MF
					(NX sie)
					[01;31m(PX[00m
						(ADVX abends)
						[01;36m(PX[00m
							(APPRART am)
							(NX zehnten juli)[01;36m)[00m[01;31m)[00m)
				(VC zuruckfliegen konnten)))))
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['NX', 'ADVX', 'PX'], 'mover info': [('ADVX', (36, 37))], 'old_family': ['ADVX', 'APPRART', 'NX'], 'start left siblings': [], 'auto preterminals': ('PPER', 'ADV', 'APPRART', 'ADJA', 'NN'), 'start right siblings': ['APPRART', 'NX'], 'end left siblings': ['NX'], 'auto preterminal span': (35, 40), 'movers': ['ADVX'], 'old_parent': 'PX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['PX'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP also soll ich jetzt fur sie den flug vom kolnbonner flughafen am siebten juli buchen um sieben uhr zehn sie sind dann um acht uhr zehn in hannover und dann informiere ich mich noch ob sie abends am zehnten juli zuruckfliegen konnten)

Sentence 1161:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1162:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1163:
8 Initial errors
0 on fringe, 5 iterations
3 Error:Clause Attachment
2 Error:Modifier Attachment
1 Error:UNSET add
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(VF ich)
		(LK wurde)
		[01;31m(MF[00m
			[01;36m(MF[00m
				(NX sie)
				(ADVX dann) [01;33mSIMPX)[00m[01;36m)[00m
			[01;31m(SIMPX[00m [01;33m(SIMPX[00m
				(VF ich)
				(LK sage)
				[01;31m(MF[00m [01;33m(MF[00m
					(ADVX
						(ADV mal))[01;31m)[00m[01;31m)[00m
			(ADVX morgen)[01;31m)[00m [01;33mMF)[00m
		(VC zuruckrufen)
		(NF das wir alles festmachen)[01;31m)[00m) [01;33mSIMPX)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'SIMPX', 'ADVX', 'VC', 'NF'], 'mover info': [('SIMPX', (4, 7)), ('ADVX', (7, 8))], 'old_family': ['NX', 'ADVX', 'SIMPX', 'ADVX'], 'start left siblings': ['NX', 'ADVX'], 'auto preterminals': ('PPER', 'VAFIN', 'PPER', 'ADV', 'PPER', 'VVFIN', 'ADV', 'ADV', 'VVINF', 'KOUS', 'PPER', 'PIS', 'VVFIN'), 'start right siblings': [], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 13), 'adding node already present': False, 'movers': ['SIMPX', 'ADVX'], 'old_parent': 'MF', 'added and moved': True, 'end right siblings': ['VC', 'NF'], 'classified_type': 'Clause Attachment', 'type': 'move', 'added label': 'SIMPX'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF ich)
			(LK wurde)
			(MF sie dann)[01;36m)[00m
		(SIMPX
			[01;31m(SIMPX[00m
				(VF ich)
				(LK sage)
				[01;31m(MF[00m [01;33m(MF[00m
					(ADVX
						(ADV mal))[01;31m)[00m[01;31m)[00m
			(ADVX morgen) [01;33mMF)[00m
			(VC zuruckrufen)
			(NF das wir alles festmachen))[01;31m)[00m)
Step:Modifier Attachment
{'new_parent': 'MF', 'new_family': ['ADVX', 'ADVX'], 'mover info': [('ADVX', (7, 8))], 'old_family': ['SIMPX', 'ADVX', 'VC', 'NF'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ADV', 'VVINF', 'KOUS', 'PPER', 'PIS', 'VVFIN'), 'start right siblings': ['VC', 'NF'], 'end left siblings': ['ADVX'], 'auto preterminal span': (4, 13), 'movers': ['ADVX'], 'old_parent': 'SIMPX', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP
	[01;31m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF ich)
			(LK wurde)
			(MF sie dann)[01;36m)[00m
		(SIMPX
			[01;31m(SIMPX[00m
				(VF ich)
				(LK sage)
				(MF mal morgen)[01;31m)[00m
			(VC zuruckrufen)
			(NF das wir alles festmachen))[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'PPER', 'ADV'), 'right siblings': [(SIMPX (SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VVFIN sage))) (MF (ADVX (ADV mal)) (ADVX (ADV morgen)))) (VC (VXINF (VVINF zuruckrufen))) (NF (SIMPX (C (KOUS das)) (MF (NX (PPER wir)) (NX (PIS alles))) (VC (VXFIN (VVFIN festmachen))))))], 'left siblings': [], 'auto preterminal span': (0, 4), 'span': (0, 4), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX ich wurde sie dann)
		(SIMPX
			[01;31m(SIMPX[00m
				(VF ich)
				(LK sage)
				(MF mal morgen)[01;31m)[00m
			(VC zuruckrufen)
			(NF das wir alles festmachen))[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'PPER', 'ADV', 'PPER', 'VVFIN', 'ADV', 'ADV', 'VVINF', 'KOUS', 'PPER', 'PIS', 'VVFIN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 13), 'span': (0, 13), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX ich wurde sie dann)
	(SIMPX
		[01;31m(SIMPX[00m
			(VF ich)
			(LK sage)
			(MF mal morgen)[01;31m)[00m
		(VC zuruckrufen)
		(NF das wir alles festmachen)))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ADV', 'VVINF', 'KOUS', 'PPER', 'PIS', 'VVFIN'), 'right siblings': ['VC', 'NF'], 'parent': 'SIMPX', 'auto preterminal span': (4, 13), 'span': (4, 8), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ich wurde sie dann ich sage mal morgen zuruckrufen das wir alles festmachen)

Sentence 1164:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(LK gucke)
		(MF ich dann)
		(NF
			(SIMPX
				[01;36m(NF[00m
					(SIMPX
						(C wie)
						(MF das)
						(VC funktioniert)
						(NF mit dem hotel))[01;36m)[00m
				(SIMPX ob noch was frei ist)))))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['NF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PDS', 'VVFIN', 'APPR', 'ART', 'NN'), 'right siblings': [(SIMPX (C (KOUS ob)) (MF (ADVX (ADV noch)) (NX (PIS was)) (ADJX (ADJD frei))) (VC (VXFIN (VAFIN ist))))], 'left siblings': [], 'auto preterminal span': (3, 9), 'span': (3, 9), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP gucke ich dann wie das funktioniert mit dem hotel ob noch was frei ist)

Sentence 1165:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1166:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1167:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1168:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1169:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1170:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1171:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1172:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1173:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1174:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1175:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1176:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1177:
1 Initial errors
0 on fringe, 1 iterations
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM hallo)
	(DM frau offergeld)
	(SIMPX
		(VF wie)
		(LK machen)
		(MF wir das denn jetzt)
		(NF
			(SIMPX
				(C wenn)
				[01;31m(FKOORD[00m
					(MVC wir im am ersten juliwochenende nach hannover fliegen wollen)
					(KON oder)
					(MVC nach hannover fahren wollen)[01;31m)[00m))))
Step:UNSET remove
{'subtrees': ['MVC', 'KON', 'MVC'], 'family': ['C', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'APPRART', 'APPRART', 'ADJA', 'NN', 'APPR', 'NE', 'VVINF', 'VMFIN', 'KON', 'APPR', 'NE', 'VVINF', 'VMFIN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (9, 24), 'span': (10, 24), 'left siblings': ['C'], 'label': 'FKOORD', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP hallo frau offergeld wie machen wir das denn jetzt wenn wir im am ersten juliwochenende nach hannover fliegen wollen oder nach hannover fahren wollen)

Sentence 1178:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1179:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1180:
4 Initial errors
0 on fringe, 3 iterations
2 Error:PP Attachment
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	[01;36m(SIMPX[00m
		[01;31m(SIMPX[00m
			(LK ware)
			(MF vielleicht gar nicht so schlecht)[01;31m)[00m
		[01;36m(NF[00m
			(PX
				[01;36m(NF[00m
					(PX
						(APPR wegen)
						(NX der expo))[01;36m)[00m
				(ADVX dann))[01;36m)[00m[01;36m)[00m)
Step:PP Attachment
{'new_parent': 'SIMPX', 'new_family': ['LK', 'MF', 'PX'], 'mover info': [('PX', (7, 11))], 'old_family': ['DM', 'SIMPX', 'PX'], 'start left siblings': ['DM', 'SIMPX'], 'auto preterminals': ('PTKANT', 'VAFIN', 'ADV', 'ADV', 'PTKNEG', 'ADV', 'ADJD', 'APPR', 'ART', 'NE', 'ADV'), 'start right siblings': [], 'end left siblings': ['LK', 'MF'], 'auto preterminal span': (0, 11), 'movers': ['PX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'PP Attachment', 'type': 'move'}
(TOP
	(DM ja)
	(SIMPX
		(LK ware)
		(MF vielleicht gar nicht so schlecht)
		[01;36m(NF[00m
			(PX
				[01;36m(NF[00m
					(PX
						(APPR wegen)
						(NX der expo))[01;36m)[00m
				(ADVX dann))[01;36m)[00m))
Step:Unary
{'subtrees': ['PX'], 'family': ['NF', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NE'), 'right siblings': [(ADVX (ADV dann))], 'left siblings': [], 'auto preterminal span': (7, 10), 'span': (7, 10), 'parent': 'PX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(DM ja)
	(SIMPX
		(LK ware)
		(MF vielleicht gar nicht so schlecht)
		[01;36m(NF[00m
			(PX
				(NF wegen der expo)
				(ADVX dann))[01;36m)[00m))
Step:Unary
{'subtrees': ['PX'], 'family': ['LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('APPR', 'ART', 'NE', 'ADV'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VAFIN ware))), (MF (ADVX (ADV vielleicht)) (ADVX (ADVX (ADV gar)) (PTKNEG nicht)) (ADJX (ADVX (ADV so)) (ADJD schlecht)))], 'auto preterminal span': (7, 11), 'span': (7, 11), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP ja ware vielleicht gar nicht so schlecht wegen der expo dann)

Sentence 1181:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1182:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1183:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1184:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1185:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1186:
15 Initial errors
0 on fringe, 9 iterations
4 Error:UNSET move
2 Error:Single Word Phrase
2 Error:Different label
2 Error:Single Word Phrase
1 Error:UNSET add
1 Error:Unary
1 Error:UNSET add
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(VF ich)
		(LK habe)
		(MF jetzt hier den plan vor mir)[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;36m(VXINF[00m [01;36m(VC[00m [01;31m(VF[00m
			[01;31m(NX[00m
				(NN zugdauer)[01;31m)[00m[01;31m)[00m [01;33mSIMPX)[00m[01;36m)[00m[01;36m)[00m
		[01;36m(SIMPX[00m
			[01;33m(SIMPX[00m (LK dauert)
			(MF drei stunden zwanzig minuten)[01;36m)[00m[01;31m)[00m
	[01;31m(NX[00m
		(KON und)
		[01;36m(LKM[00m
			[01;36m(VXFIN[00m [01;36m(LK[00m [01;31m(NX[00m
				(NN fliegen)[01;31m)[00m[01;36m)[00m[01;36m)[00m
			[01;36m(MF[00m
				(NX
					(ART eine)
					(NN stunde))[01;36m)[00m[01;36m)[00m[01;31m)[00m) [01;33mSIMPX)[00m
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'VF'], 'mover info': [('VF', (8, 9))], 'old_family': ['VF', 'LK', 'MF'], 'start left siblings': [], 'auto preterminals': ('PPER', 'VAFIN', 'ADV', 'ADV', 'ART', 'NN', 'APPR', 'PRF', 'NN', 'VVFIN', 'CARD', 'NN', 'CARD', 'NN', 'KON', 'NN', 'ART', 'NN'), 'start right siblings': ['LK', 'MF'], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 18), 'movers': ['VF'], 'old_parent': 'SIMPX', 'POS confusion': ('NN', 'NN'), 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		(MF jetzt hier den plan vor mir)
		[01;36m(VXINF[00m [01;36m(VC[00m [01;31m(VF[00m
			[01;31m(NX[00m
				(NN zugdauer)[01;31m)[00m[01;31m)[00m[01;36m)[00m[01;36m)[00m)
	[01;36m(SIMPX[00m
		(SIMPX dauert drei stunden zwanzig minuten)
		[01;31m(NX[00m
			(KON und)
			[01;36m(LKM[00m
				[01;36m(VXFIN[00m [01;36m(LK[00m [01;31m(NX[00m
					(NN fliegen)[01;31m)[00m[01;36m)[00m[01;36m)[00m
				[01;36m(MF[00m
					(NX
						(ART eine)
						(NN stunde))[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;36m)[00m)
Step:Single Word Phrase
{'family': ['VC'], 'auto preterminal span': (8, 9), 'span': (8, 9), 'subtrees': ['NN'], 'parent': 'VF', 'over_word': True, 'auto preterminals': ('NN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'VC')}
(TOP
	(SIMPX
		(VF ich)
		(LK habe)
		(MF jetzt hier den plan vor mir)
		[01;36m(VXINF[00m [01;31m(VF[00m
			(VC
				(NN zugdauer))[01;31m)[00m[01;36m)[00m)
	[01;36m(SIMPX[00m
		(SIMPX dauert drei stunden zwanzig minuten)
		[01;31m(NX[00m
			(KON und)
			[01;36m(LKM[00m
				[01;36m(VXFIN[00m [01;36m(LK[00m [01;31m(NX[00m
					(NN fliegen)[01;31m)[00m[01;36m)[00m[01;36m)[00m
				[01;36m(MF[00m
					(NX
						(ART eine)
						(NN stunde))[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;36m)[00m)
Step:Different label
{'family': ['VF', 'LK', 'MF', 'VXINF'], 'auto preterminal span': (8, 9), 'span': (8, 9), 'subtrees': ['VC'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('NN',), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('VF', 'VXINF')}
(TOP
	(SIMPX ich habe jetzt hier den plan vor mir zugdauer)
	[01;36m(SIMPX[00m
		(SIMPX dauert drei stunden zwanzig minuten)
		[01;31m(NX[00m
			(KON und)
			[01;36m(LKM[00m
				[01;36m(VXFIN[00m [01;36m(LK[00m [01;31m(NX[00m
					(NN fliegen)[01;31m)[00m[01;36m)[00m[01;36m)[00m
				[01;36m(MF[00m
					(NX
						(ART eine)
						(NN stunde))[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;36m)[00m)
Step:Single Word Phrase
{'family': ['KON', 'LK', 'NX'], 'auto preterminal span': (15, 16), 'span': (15, 16), 'subtrees': ['NN'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('NN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'LK')}
(TOP
	(SIMPX ich habe jetzt hier den plan vor mir zugdauer)
	[01;36m(SIMPX[00m
		(SIMPX dauert drei stunden zwanzig minuten)
		[01;31m(NX[00m
			(KON und)
			[01;36m(LKM[00m
				[01;36m(VXFIN[00m
					(LK
						(NN fliegen))[01;36m)[00m
				[01;36m(MF[00m
					(NX
						(ART eine)
						(NN stunde))[01;36m)[00m[01;36m)[00m[01;31m)[00m[01;36m)[00m)
Step:UNSET add
{'subtrees': ['SIMPX', 'NX'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'CARD', 'NN', 'CARD', 'NN', 'KON', 'NN', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VAFIN habe))) (MF (ADVX (ADV jetzt)) (ADVX (ADV hier)) (NX (ART den) (NN plan)) (PX (APPR vor) (NX (PRF mir)))) (VXINF (VC (NN zugdauer))))], 'auto preterminal span': (9, 18), 'span': (9, 18), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX ich habe jetzt hier den plan vor mir zugdauer)
	(SIMPX
		(SIMPX dauert drei stunden zwanzig minuten)
		[01;31m(NX[00m
			(KON und)
			[01;36m(LKM[00m
				[01;36m(VXFIN[00m
					(LK
						(NN fliegen))[01;36m)[00m
				[01;36m(MF[00m
					(NX
						(ART eine)
						(NN stunde))[01;36m)[00m[01;36m)[00m[01;31m)[00m))
Step:Unary
{'subtrees': ['LK'], 'family': ['KON', 'VXFIN', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN',), 'right siblings': [(NX (ART eine) (NN stunde))], 'left siblings': [(KON und)], 'auto preterminal span': (15, 16), 'span': (15, 16), 'parent': 'NX', 'label': 'VXFIN', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX ich habe jetzt hier den plan vor mir zugdauer)
	(SIMPX
		(SIMPX dauert drei stunden zwanzig minuten)
		[01;31m(NX[00m
			(KON und)
			[01;36m(LKM[00m
				(VXFIN fliegen)
				[01;36m(MF[00m
					(NX
						(ART eine)
						(NN stunde))[01;36m)[00m[01;36m)[00m[01;31m)[00m))
Step:UNSET add
{'subtrees': ['VXFIN', 'NX'], 'family': ['KON', 'LKM'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'ART', 'NN'), 'right siblings': [], 'left siblings': [(KON und)], 'auto preterminal span': (15, 18), 'span': (15, 18), 'parent': 'NX', 'label': 'LKM', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX ich habe jetzt hier den plan vor mir zugdauer)
	(SIMPX
		(SIMPX dauert drei stunden zwanzig minuten)
		[01;31m(NX[00m
			(KON und)
			(LKM
				(VXFIN fliegen)
				[01;36m(MF[00m
					(NX
						(ART eine)
						(NN stunde))[01;36m)[00m)[01;31m)[00m))
Step:Unary
{'subtrees': ['NX'], 'family': ['VXFIN', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN'), 'right siblings': [], 'left siblings': [(VXFIN (LK (NN fliegen)))], 'auto preterminal span': (16, 18), 'span': (16, 18), 'parent': 'LKM', 'label': 'MF', 'classified_type': 'Unary', 'type': 'add'}
(TOP
	(SIMPX ich habe jetzt hier den plan vor mir zugdauer)
	(SIMPX
		(SIMPX dauert drei stunden zwanzig minuten)
		[01;31m(NX[00m
			(KON und)
			(LKM fliegen eine stunde)[01;31m)[00m))
Step:UNSET remove
{'subtrees': ['KON', 'LKM'], 'family': ['SIMPX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'CARD', 'NN', 'CARD', 'NN', 'KON', 'NN', 'ART', 'NN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (9, 18), 'span': (14, 18), 'left siblings': ['SIMPX'], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ich habe jetzt hier den plan vor mir zugdauer dauert drei stunden zwanzig minuten und fliegen eine stunde)

Sentence 1187:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1188:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1189:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF da)
		(LK geht)
		(MF uns auch nicht soviel zeit)
		[01;36m(VXINF[00m
			(VC
				(PTKVZ verloren))[01;36m)[00m))
Step:Unary
{'subtrees': ['VC'], 'family': ['VF', 'LK', 'MF', 'VXINF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKVZ',), 'right siblings': [], 'left siblings': [(VF (ADVX (ADV da))), (LK (VXFIN (VVFIN geht))), (MF (NX (PPER uns)) (ADVX (ADV auch)) (ADVX (PTKNEG nicht)) (NX (PIAT soviel) (NN zeit)))], 'auto preterminal span': (7, 8), 'span': (7, 8), 'parent': 'SIMPX', 'label': 'VXINF', 'classified_type': 'Unary', 'type': 'add'}
(TOP da geht uns auch nicht soviel zeit verloren)

Sentence 1190:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1191:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1192:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1193:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1194:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1195:
11 Initial errors
0 on fringe, 9 iterations
2 Error:Single Word Phrase
2 Error:Modifier Attachment
1 Error:Unary
1 Error:Clause Attachment
1 Error:Unary
1 Error:UNSET remove
1 Error:Co-ordination
1 Error:UNSET add
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX ich kann beim reiseburo anrufen)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(ADVX
				(ADV dann))[01;31m)[00m
		[01;31m(SIMPX[00m
			[01;36m(ADVX[00m [01;31m(LK[00m
				[01;31m(VXFIN[00m
					(VVFIN gucke)[01;31m)[00m[01;31m)[00m[01;36m)[00m
			(MF ich)[01;31m)[00m
		(FKOORD
			[01;31m(LKMN[00m
				(LK erkundige)
				[01;36m(MF[00m
					(MF ich mich)
					(DM ah)
					[01;31m(NX[00m
						(ADVX hier)
						(NX die fluge)[01;31m)[00m[01;36m)[00m
				[01;33m(SIMPX (NF[00m (NF wann die fluge stattfinden)[01;31m)[00m
			(KON und)
			(LKM buche dann fur uns beiden))[01;31m)[00m) [01;33mNF) SIMPX)[00m
Step:Single Word Phrase
{'family': ['ADVX'], 'auto preterminal span': (8, 9), 'span': (8, 9), 'subtrees': ['VVFIN'], 'parent': 'LK', 'over_word': True, 'auto preterminals': ('VVFIN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('VXFIN', 'ADVX')}
(TOP
	(DM ja)
	(DM also)
	(SIMPX ich kann beim reiseburo anrufen)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(ADVX
				(ADV dann))[01;31m)[00m
		[01;31m(SIMPX[00m
			[01;31m(LK[00m
				(ADVX
					(VVFIN gucke))[01;31m)[00m
			(MF ich)[01;31m)[00m
		(FKOORD
			[01;31m(LKMN[00m
				(LK erkundige)
				[01;36m(MF[00m
					(MF ich mich)
					(DM ah)
					[01;31m(NX[00m
						(ADVX hier)
						(NX die fluge)[01;31m)[00m[01;36m)[00m
				[01;33m(SIMPX (NF[00m (NF wann die fluge stattfinden)[01;31m)[00m
			(KON und)
			(LKM buche dann fur uns beiden))[01;31m)[00m) [01;33mNF) SIMPX)[00m
Step:Modifier Attachment
{'new_parent': 'LKMN', 'new_family': ['LK', 'MF', 'DM', 'ADVX', 'NX', 'NF'], 'mover info': [('ADVX', (14, 15))], 'old_family': ['ADVX', 'NX'], 'start left siblings': [], 'auto preterminals': ('VVFIN', 'PPER', 'PRF', 'ITJ', 'ADV', 'ART', 'NN', 'PWAV', 'ART', 'NN', 'VVFIN'), 'start right siblings': ['NX'], 'end left siblings': ['LK', 'MF', 'DM'], 'auto preterminal span': (10, 21), 'adding node already present': False, 'movers': ['ADVX'], 'old_parent': 'NX', 'POS confusion': ('ADV', 'ADV'), 'added and moved': True, 'end right siblings': ['NX', 'NF'], 'classified_type': 'Modifier Attachment', 'type': 'move', 'added label': 'MF'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX ich kann beim reiseburo anrufen)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(ADVX
				(ADV dann))[01;31m)[00m
		[01;31m(SIMPX[00m
			[01;31m(LK[00m
				(ADVX
					(VVFIN gucke))[01;31m)[00m
			(MF ich)[01;31m)[00m
		(FKOORD
			[01;31m(LKMN[00m
				(LK erkundige)
				(MF ich mich ah hier die fluge)
				[01;33m(SIMPX (NF[00m (NF wann die fluge stattfinden)[01;31m)[00m
			(KON und)
			(LKM buche dann fur uns beiden))[01;31m)[00m) [01;33mNF) SIMPX)[00m
Step:Unary
{'subtrees': ['ADVX'], 'family': ['VF', 'SIMPX', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VVFIN', 'PPER', 'VVFIN', 'PPER', 'PRF', 'ITJ', 'ADV', 'ART', 'NN', 'PWAV', 'ART', 'NN', 'VVFIN', 'KON', 'VVFIN', 'ADV', 'APPR', 'PPER', 'PIS'), 'right siblings': ['SIMPX', 'FKOORD'], 'parent': 'SIMPX', 'auto preterminal span': (7, 27), 'span': (7, 8), 'left siblings': [], 'label': 'VF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX ich kann beim reiseburo anrufen)
	[01;31m(SIMPX[00m
		(ADVX dann)
		[01;31m(SIMPX[00m
			[01;31m(LK[00m
				(ADVX
					(VVFIN gucke))[01;31m)[00m
			(MF ich)[01;31m)[00m
		(FKOORD
			[01;31m(LKMN[00m
				(LK erkundige)
				(MF ich mich ah hier die fluge)
				[01;33m(SIMPX (NF[00m (NF wann die fluge stattfinden)[01;31m)[00m
			(KON und)
			(LKM buche dann fur uns beiden))[01;31m)[00m) [01;33mNF) SIMPX)[00m
Step:Clause Attachment
{'subtrees': ['ADVX', 'SIMPX', 'FKOORD'], 'family': ['DM', 'DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'PPER', 'VMFIN', 'APPRART', 'NN', 'VVINF', 'ADV', 'VVFIN', 'PPER', 'VVFIN', 'PPER', 'PRF', 'ITJ', 'ADV', 'ART', 'NN', 'PWAV', 'ART', 'NN', 'VVFIN', 'KON', 'VVFIN', 'ADV', 'APPR', 'PPER', 'PIS'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 27), 'span': (7, 27), 'left siblings': ['DM', 'DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX ich kann beim reiseburo anrufen)
	(ADVX dann)
	[01;31m(SIMPX[00m
		[01;31m(LK[00m
			(ADVX
				(VVFIN gucke))[01;31m)[00m
		(MF ich)[01;31m)[00m
	(FKOORD
		[01;31m(LKMN[00m
			(LK erkundige)
			(MF ich mich ah hier die fluge)
			[01;33m(SIMPX (NF[00m (NF wann die fluge stattfinden)[01;31m)[00m
		(KON und)
		(LKM buche dann fur uns beiden))) [01;33mNF) SIMPX)[00m
Step:Unary
{'subtrees': ['ADVX'], 'family': ['LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER'), 'right siblings': ['MF'], 'parent': 'SIMPX', 'auto preterminal span': (8, 10), 'span': (8, 9), 'left siblings': [], 'label': 'LK', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX ich kann beim reiseburo anrufen)
	(ADVX dann)
	[01;31m(SIMPX[00m
		(ADVX gucke)
		(MF ich)[01;31m)[00m
	(FKOORD
		[01;31m(LKMN[00m
			(LK erkundige)
			(MF ich mich ah hier die fluge)
			[01;33m(SIMPX (NF[00m (NF wann die fluge stattfinden)[01;31m)[00m
		(KON und)
		(LKM buche dann fur uns beiden))) [01;33mNF) SIMPX)[00m
Step:UNSET remove
{'subtrees': ['ADVX', 'MF'], 'family': ['DM', 'DM', 'SIMPX', 'ADVX', 'SIMPX', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'ADV', 'PPER', 'VMFIN', 'APPRART', 'NN', 'VVINF', 'ADV', 'VVFIN', 'PPER', 'VVFIN', 'PPER', 'PRF', 'ITJ', 'ADV', 'ART', 'NN', 'PWAV', 'ART', 'NN', 'VVFIN', 'KON', 'VVFIN', 'ADV', 'APPR', 'PPER', 'PIS'), 'right siblings': ['FKOORD'], 'parent': 'TOP', 'auto preterminal span': (0, 27), 'span': (8, 10), 'left siblings': ['DM', 'DM', 'SIMPX', 'ADVX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX ich kann beim reiseburo anrufen)
	(ADVX dann)
	(ADVX gucke)
	(MF ich)
	(FKOORD
		[01;31m(LKMN[00m
			(LK erkundige)
			(MF ich mich ah hier die fluge)
			[01;33m(SIMPX (NF[00m (NF wann die fluge stattfinden)[01;31m)[00m
		(KON und)
		(LKM buche dann fur uns beiden))) [01;33mNF) SIMPX)[00m
Step:Co-ordination
{'subtrees': ['LK', 'MF', 'NF'], 'family': ['LKMN', 'KON', 'LKM'], 'over_word': False, 'over words': False, 'auto preterminals': ('VVFIN', 'PPER', 'PRF', 'ITJ', 'ADV', 'ART', 'NN', 'PWAV', 'ART', 'NN', 'VVFIN', 'KON', 'VVFIN', 'ADV', 'APPR', 'PPER', 'PIS'), 'right siblings': ['KON', 'LKM'], 'parent': 'FKOORD', 'auto preterminal span': (10, 27), 'span': (10, 21), 'left siblings': [], 'label': 'LKMN', 'classified_type': 'Co-ordination', 'type': 'remove'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX ich kann beim reiseburo anrufen)
	(ADVX dann)
	(ADVX gucke)
	(MF ich)
	(FKOORD
		(LK erkundige)
		(MF ich mich ah hier die fluge)
		[01;36m(SIMPX[00m
			[01;36m(NF[00m
				(NF wann die fluge stattfinden)
				(KON und)
				(LKM buche dann fur uns beiden)[01;36m)[00m[01;36m)[00m))
Step:UNSET add
{'subtrees': ['NF', 'KON', 'LKM'], 'family': ['LK', 'MF', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PWAV', 'ART', 'NN', 'VVFIN', 'KON', 'VVFIN', 'ADV', 'APPR', 'PPER', 'PIS'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VVFIN erkundige))), (MF (MF (NX (PPER ich)) (NX (PRF mich))) (DM (ITJ ah)) (ADVX (ADV hier)) (NX (ART die) (NN fluge)))], 'auto preterminal span': (17, 27), 'span': (17, 27), 'parent': 'FKOORD', 'label': 'NF', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX ich kann beim reiseburo anrufen)
	(ADVX dann)
	(ADVX gucke)
	(MF ich)
	(FKOORD
		(LK erkundige)
		(MF ich mich ah hier die fluge)
		[01;36m(SIMPX[00m
			(NF
				(NF wann die fluge stattfinden)
				(KON und)
				(LKM buche dann fur uns beiden))[01;36m)[00m))
Step:Unary
{'subtrees': ['NF'], 'family': ['LK', 'MF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PWAV', 'ART', 'NN', 'VVFIN', 'KON', 'VVFIN', 'ADV', 'APPR', 'PPER', 'PIS'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VVFIN erkundige))), (MF (MF (NX (PPER ich)) (NX (PRF mich))) (DM (ITJ ah)) (ADVX (ADV hier)) (NX (ART die) (NN fluge)))], 'auto preterminal span': (17, 27), 'span': (17, 27), 'parent': 'FKOORD', 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'add'}
(TOP ja also ich kann beim reiseburo anrufen dann gucke ich erkundige ich mich ah hier die fluge wann die fluge stattfinden und buche dann fur uns beiden)

Sentence 1196:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1197:
14 Initial errors
0 on fringe, 8 iterations
4 Error:Clause Attachment
2 Error:Different label
2 Error:Single Word Phrase
2 Error:Different label
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Unary
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK meine)
		[01;36m(NF[00m
			[01;36m(SIMPX[00m
				[01;31m(SIMPX[00m
					(VF wir)
					[01;33m(LKM[00m (LK hatten)[01;31m)[00m
				[01;31m(NF[00m
					[01;31m(SIMPX[00m
						[01;36m(MF[00m [01;31m(VF[00m
							[01;31m(NX[00m
								(NX letztes mal)
								(PX bei der expo)[01;31m)[00m[01;31m)[00m [01;33mLKM)[00m[01;36m)[00m
						(LK hatten)
						(MF
							(NX wir)
							[01;36m(PX[00m [01;31m(NX[00m
								[01;36m(ADVX[00m [01;31m(NX[00m
									(NN flugmoglichkeiten)[01;31m)[00m[01;36m)[00m
								[01;31m(PX[00m
									(APPR um)
									(NX sieben uhr zehn und acht uhr zehn)[01;31m)[00m[01;31m)[00m[01;36m)[00m)
						(VC gehabt)[01;31m)[00m[01;31m)[00m[01;36m)[00m[01;36m)[00m))
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['SIMPX', 'VF', 'LK', 'MF', 'VC'], 'mover info': [('SIMPX', (2, 4))], 'old_family': ['VF', 'LK', 'SIMPX', 'NF'], 'start left siblings': ['VF', 'LK'], 'auto preterminals': ('PPER', 'VVFIN', 'PPER', 'VAFIN', 'ADJA', 'NN', 'APPR', 'ART', 'NE', 'VAFIN', 'PPER', 'NN', 'APPR', 'CARD', 'NN', 'CARD', 'KON', 'CARD', 'NN', 'CARD', 'VAPP'), 'start right siblings': ['NF'], 'end left siblings': [], 'auto preterminal span': (0, 21), 'movers': ['SIMPX'], 'old_parent': 'SIMPX', 'end right siblings': ['VF', 'LK', 'MF', 'VC'], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(VF ich)
		(LK meine)
		(NF
			(SIMPX
				[01;31m(SIMPX[00m
					(VF wir)
					[01;33m(LKM[00m (LK hatten)[01;31m)[00m
				[01;36m(MF[00m [01;31m(VF[00m
					[01;31m(NX[00m
						(NX letztes mal)
						(PX bei der expo)[01;31m)[00m[01;31m)[00m [01;33mLKM)[00m[01;36m)[00m
				(LK hatten)
				(MF
					(NX wir)
					[01;36m(PX[00m [01;31m(NX[00m
						[01;36m(ADVX[00m [01;31m(NX[00m
							(NN flugmoglichkeiten)[01;31m)[00m[01;36m)[00m
						[01;31m(PX[00m
							(APPR um)
							(NX sieben uhr zehn und acht uhr zehn)[01;31m)[00m[01;31m)[00m[01;36m)[00m)
				(VC gehabt)))))
Step:Different label
{'family': ['SIMPX', 'MF', 'LK', 'MF', 'VC'], 'auto preterminal span': (4, 9), 'span': (4, 9), 'subtrees': ['NX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('ADJA', 'NN', 'APPR', 'ART', 'NE'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('VF', 'MF')}
(TOP
	(SIMPX
		(VF ich)
		(LK meine)
		(NF
			(SIMPX
				[01;31m(SIMPX[00m
					(VF wir)
					[01;33m(LKM[00m (LK hatten)[01;31m)[00m
				(MF
					[01;31m(NX[00m
						(NX letztes mal)
						(PX bei der expo)[01;31m)[00m) [01;33mLKM)[00m
				(LK hatten)
				(MF
					(NX wir)
					[01;36m(PX[00m [01;31m(NX[00m
						[01;36m(ADVX[00m [01;31m(NX[00m
							(NN flugmoglichkeiten)[01;31m)[00m[01;36m)[00m
						[01;31m(PX[00m
							(APPR um)
							(NX sieben uhr zehn und acht uhr zehn)[01;31m)[00m[01;31m)[00m[01;36m)[00m)
				(VC gehabt)))))
Step:Single Word Phrase
{'family': ['ADVX', 'PX'], 'auto preterminal span': (11, 12), 'span': (11, 12), 'subtrees': ['NN'], 'parent': 'NX', 'over_word': True, 'auto preterminals': ('NN',), 'classified_type': 'Single Word Phrase', 'type': 'relabel', 'change': ('NX', 'ADVX')}
(TOP
	(SIMPX
		(VF ich)
		(LK meine)
		(NF
			(SIMPX
				[01;31m(SIMPX[00m
					(VF wir)
					[01;33m(LKM[00m (LK hatten)[01;31m)[00m
				(MF
					[01;31m(NX[00m
						(NX letztes mal)
						(PX bei der expo)[01;31m)[00m) [01;33mLKM)[00m
				(LK hatten)
				(MF
					(NX wir)
					[01;36m(PX[00m [01;31m(NX[00m
						(ADVX flugmoglichkeiten)
						[01;31m(PX[00m
							(APPR um)
							(NX sieben uhr zehn und acht uhr zehn)[01;31m)[00m[01;31m)[00m[01;36m)[00m)
				(VC gehabt)))))
Step:Different label
{'family': ['NX', 'PX'], 'auto preterminal span': (11, 20), 'span': (11, 20), 'subtrees': ['ADVX', 'PX'], 'parent': 'MF', 'over_word': False, 'auto preterminals': ('NN', 'APPR', 'CARD', 'NN', 'CARD', 'KON', 'CARD', 'NN', 'CARD'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('NX', 'PX')}
(TOP
	(SIMPX
		(VF ich)
		(LK meine)
		(NF
			(SIMPX
				[01;31m(SIMPX[00m
					(VF wir)
					[01;33m(LKM[00m (LK hatten)[01;31m)[00m
				(MF
					[01;31m(NX[00m
						(NX letztes mal)
						(PX bei der expo)[01;31m)[00m) [01;33mLKM)[00m
				(LK hatten)
				(MF
					(NX wir)
					(PX
						(ADVX flugmoglichkeiten)
						[01;31m(PX[00m
							(APPR um)
							(NX sieben uhr zehn und acht uhr zehn)[01;31m)[00m))
				(VC gehabt)))))
Step:UNSET remove
{'subtrees': ['VF', 'LK'], 'family': ['SIMPX', 'MF', 'LK', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ADJA', 'NN', 'APPR', 'ART', 'NE', 'VAFIN', 'PPER', 'NN', 'APPR', 'CARD', 'NN', 'CARD', 'KON', 'CARD', 'NN', 'CARD', 'VAPP'), 'right siblings': ['MF', 'LK', 'MF', 'VC'], 'parent': 'SIMPX', 'auto preterminal span': (2, 21), 'span': (2, 4), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(SIMPX
		(VF ich)
		(LK meine)
		(NF
			(SIMPX
				(VF wir)
				[01;36m(LKM[00m
					(LK hatten)
					(MF
						[01;31m(NX[00m
							(NX letztes mal)
							(PX bei der expo)[01;31m)[00m)[01;36m)[00m
				(LK hatten)
				(MF
					(NX wir)
					(PX
						(ADVX flugmoglichkeiten)
						[01;31m(PX[00m
							(APPR um)
							(NX sieben uhr zehn und acht uhr zehn)[01;31m)[00m))
				(VC gehabt)))))
Step:UNSET add
{'subtrees': ['LK', 'MF'], 'family': ['VF', 'LKM', 'LK', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('VAFIN', 'ADJA', 'NN', 'APPR', 'ART', 'NE'), 'right siblings': [(LK (VXFIN (VAFIN hatten))), (MF (NX (PPER wir)) (PX (ADVX (NN flugmoglichkeiten)) (PX (APPR um) (NX (NX (NX (ADJX (CARD sieben)) (NN uhr)) (ADJX (CARD zehn))) (KON und) (NX (NX (ADJX (CARD acht)) (NN uhr)) (ADJX (CARD zehn))))))), (VC (VXINF (VAPP gehabt)))], 'left siblings': [(VF (NX (PPER wir)))], 'auto preterminal span': (3, 9), 'span': (3, 9), 'parent': 'SIMPX', 'label': 'LKM', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(VF ich)
		(LK meine)
		(NF
			(SIMPX
				(VF wir)
				(LKM
					(LK hatten)
					(MF
						[01;31m(NX[00m
							(NX letztes mal)
							(PX bei der expo)[01;31m)[00m))
				(LK hatten)
				(MF
					(NX wir)
					(PX
						(ADVX flugmoglichkeiten)
						[01;31m(PX[00m
							(APPR um)
							(NX sieben uhr zehn und acht uhr zehn)[01;31m)[00m))
				(VC gehabt)))))
Step:Unary
{'subtrees': ['NX', 'PX'], 'family': ['NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADJA', 'NN', 'APPR', 'ART', 'NE'), 'right siblings': [], 'parent': 'MF', 'auto preterminal span': (4, 9), 'span': (4, 9), 'left siblings': [], 'label': 'NX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(SIMPX
		(VF ich)
		(LK meine)
		(NF
			(SIMPX
				(VF wir)
				(LKM hatten letztes mal bei der expo)
				(LK hatten)
				(MF
					(NX wir)
					(PX
						(ADVX flugmoglichkeiten)
						[01;31m(PX[00m
							(APPR um)
							(NX sieben uhr zehn und acht uhr zehn)[01;31m)[00m))
				(VC gehabt)))))
Step:UNSET remove
{'subtrees': ['APPR', 'NX'], 'family': ['ADVX', 'PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('NN', 'APPR', 'CARD', 'NN', 'CARD', 'KON', 'CARD', 'NN', 'CARD'), 'right siblings': [], 'parent': 'PX', 'auto preterminal span': (11, 20), 'span': (12, 20), 'left siblings': ['ADVX'], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ich meine wir hatten letztes mal bei der expo hatten wir flugmoglichkeiten um sieben uhr zehn und acht uhr zehn gehabt)

Sentence 1198:
8 Initial errors
0 on fringe, 8 iterations
1 Error:Single Word Phrase
1 Error:Clause Attachment
1 Error:UNSET remove
1 Error:UNSET add
1 Error:Modifier Attachment
1 Error:UNSET remove
1 Error:Unary
1 Error:Modifier Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(NX wir)
	[01;31m(SIMPX[00m
		(SIMPX ich hatte mich auch informiert)
		[01;36m(KOORD[00m
			(KON [01;33m(SIMPX[00m und)[01;36m)[00m
		[01;31m(SIMPX[00m
			(VF das)
			(LK ist)
			[01;31m(MF[00m
				(ADVX immer)
				(ADVX noch)
				(ADVX so)[01;31m)[00m [01;33mSIMPX)[00m
			[01;31m(NF[00m
				[01;31m(PX[00m
					[01;31m(PX[00m
						(ADVX nur)
						(APPRART am)
						(NX wochenende)[01;31m)[00m
					(ADVX nicht)[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(SIMPX aber wir mussen ja auch sowieso nicht am wochenende fliegen))
Step:Single Word Phrase
{'subtrees': ['KON'], 'family': ['SIMPX', 'KOORD', 'SIMPX'], 'over_word': True, 'over words': True, 'auto preterminals': ('KON',), 'right siblings': [(SIMPX (VF (NX (PDS das))) (LK (VXFIN (VAFIN ist))) (MF (ADVX (ADV immer)) (ADVX (ADV noch)) (ADVX (ADV so))) (NF (PX (PX (ADVX (ADV nur)) (APPRART am) (NX (NN wochenende))) (ADVX (PTKNEG nicht)))))], 'left siblings': [(SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VAFIN hatte))) (MF (NX (PRF mich)) (ADVX (ADV auch))) (VC (VXINF (VVPP informiert))))], 'auto preterminal span': (7, 8), 'span': (7, 8), 'parent': 'SIMPX', 'label': 'KOORD', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(DM ja)
	(NX wir)
	[01;31m(SIMPX[00m
		(SIMPX ich hatte mich auch informiert)
		[01;33m(SIMPX[00m (KOORD und)
		[01;31m(SIMPX[00m
			(VF das)
			(LK ist)
			[01;31m(MF[00m
				(ADVX immer)
				(ADVX noch)
				(ADVX so)[01;31m)[00m [01;33mSIMPX)[00m
			[01;31m(NF[00m
				[01;31m(PX[00m
					[01;31m(PX[00m
						(ADVX nur)
						(APPRART am)
						(NX wochenende)[01;31m)[00m
					(ADVX nicht)[01;31m)[00m[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(SIMPX aber wir mussen ja auch sowieso nicht am wochenende fliegen))
Step:Clause Attachment
{'subtrees': ['SIMPX', 'KOORD', 'SIMPX'], 'family': ['DM', 'NX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'PPER', 'VAFIN', 'PRF', 'ADV', 'VVPP', 'KON', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADV', 'APPRART', 'NN', 'PTKNEG', 'KON', 'PPER', 'VMFIN', 'ADV', 'ADV', 'ADV', 'PTKNEG', 'APPRART', 'NN', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 27), 'span': (2, 17), 'left siblings': ['DM', 'NX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(NX wir)
	(SIMPX ich hatte mich auch informiert)
	[01;33m(SIMPX[00m (KOORD und)
	[01;31m(SIMPX[00m
		(VF das)
		(LK ist)
		[01;31m(MF[00m
			(ADVX immer)
			(ADVX noch)
			(ADVX so)[01;31m)[00m [01;33mSIMPX)[00m
		[01;31m(NF[00m
			[01;31m(PX[00m
				[01;31m(PX[00m
					(ADVX nur)
					(APPRART am)
					(NX wochenende)[01;31m)[00m
				(ADVX nicht)[01;31m)[00m[01;31m)[00m[01;31m)[00m
	(SIMPX aber wir mussen ja auch sowieso nicht am wochenende fliegen))
Step:UNSET remove
{'subtrees': ['VF', 'LK', 'MF', 'NF'], 'family': ['DM', 'NX', 'SIMPX', 'KOORD', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'PPER', 'VAFIN', 'PRF', 'ADV', 'VVPP', 'KON', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADV', 'APPRART', 'NN', 'PTKNEG', 'KON', 'PPER', 'VMFIN', 'ADV', 'ADV', 'ADV', 'PTKNEG', 'APPRART', 'NN', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 27), 'span': (8, 17), 'left siblings': ['DM', 'NX', 'SIMPX', 'KOORD'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(NX wir)
	(SIMPX ich hatte mich auch informiert)
	[01;36m(SIMPX[00m
		(KOORD und)
		(VF das)
		(LK ist)
		[01;31m(MF[00m
			(ADVX immer)
			(ADVX noch)
			(ADVX so)[01;31m)[00m[01;36m)[00m
	[01;31m(NF[00m
		[01;31m(PX[00m
			[01;31m(PX[00m
				(ADVX nur)
				(APPRART am)
				(NX wochenende)[01;31m)[00m
			(ADVX nicht)[01;31m)[00m[01;31m)[00m
	(SIMPX aber wir mussen ja auch sowieso nicht am wochenende fliegen))
Step:UNSET add
{'subtrees': ['KOORD', 'VF', 'LK', 'MF'], 'family': ['DM', 'NX', 'SIMPX', 'SIMPX', 'NF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV'), 'right siblings': [(NF (PX (PX (ADVX (ADV nur)) (APPRART am) (NX (NN wochenende))) (ADVX (PTKNEG nicht)))), (SIMPX (KOORD (KON aber)) (VF (NX (PPER wir))) (LK (VXFIN (VMFIN mussen))) (MF (ADVX (ADV ja)) (ADVX (ADV auch)) (ADVX (ADV sowieso)) (ADVX (PTKNEG nicht)) (PX (APPRART am) (NX (NN wochenende)))) (VC (VXINF (VVINF fliegen))))], 'left siblings': [(DM (PTKANT ja)), (NX (PPER wir)), (SIMPX (VF (NX (PPER ich))) (LK (VXFIN (VAFIN hatte))) (MF (NX (PRF mich)) (ADVX (ADV auch))) (VC (VXINF (VVPP informiert))))], 'auto preterminal span': (7, 13), 'span': (7, 13), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	(NX wir)
	(SIMPX ich hatte mich auch informiert)
	(SIMPX
		(KOORD und)
		(VF das)
		(LK ist)
		[01;31m(MF[00m
			(ADVX immer)
			(ADVX noch)
			(ADVX so)[01;31m)[00m)
	[01;31m(NF[00m
		[01;31m(PX[00m
			[01;31m(PX[00m
				(ADVX nur)
				(APPRART am)
				(NX wochenende)[01;31m)[00m
			(ADVX nicht)[01;31m)[00m[01;31m)[00m
	(SIMPX aber wir mussen ja auch sowieso nicht am wochenende fliegen))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'ADVX', 'ADVX'], 'family': ['KOORD', 'VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (7, 13), 'span': (10, 13), 'left siblings': ['KOORD', 'VF', 'LK'], 'label': 'MF', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP
	(DM ja)
	(NX wir)
	(SIMPX ich hatte mich auch informiert)
	(SIMPX und das ist immer noch so)
	[01;31m(NF[00m
		[01;31m(PX[00m
			[01;31m(PX[00m
				(ADVX nur)
				(APPRART am)
				(NX wochenende)[01;31m)[00m
			(ADVX nicht)[01;31m)[00m[01;31m)[00m
	(SIMPX aber wir mussen ja auch sowieso nicht am wochenende fliegen))
Step:UNSET remove
{'subtrees': ['ADVX', 'APPRART', 'NX'], 'family': ['PX', 'ADVX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'APPRART', 'NN', 'PTKNEG'), 'right siblings': ['ADVX'], 'parent': 'PX', 'auto preterminal span': (13, 17), 'span': (13, 16), 'left siblings': [], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(NX wir)
	(SIMPX ich hatte mich auch informiert)
	(SIMPX und das ist immer noch so)
	[01;31m(NF[00m
		[01;31m(PX[00m
			(ADVX nur)
			(APPRART am)
			(NX wochenende)
			(ADVX nicht)[01;31m)[00m[01;31m)[00m
	(SIMPX aber wir mussen ja auch sowieso nicht am wochenende fliegen))
Step:Unary
{'subtrees': ['PX'], 'family': ['DM', 'NX', 'SIMPX', 'SIMPX', 'NF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'PPER', 'VAFIN', 'PRF', 'ADV', 'VVPP', 'KON', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADV', 'APPRART', 'NN', 'PTKNEG', 'KON', 'PPER', 'VMFIN', 'ADV', 'ADV', 'ADV', 'PTKNEG', 'APPRART', 'NN', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 27), 'span': (13, 17), 'left siblings': ['DM', 'NX', 'SIMPX', 'SIMPX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(NX wir)
	(SIMPX ich hatte mich auch informiert)
	(SIMPX und das ist immer noch so)
	[01;31m(PX[00m
		(ADVX nur)
		(APPRART am)
		(NX wochenende)
		(ADVX nicht)[01;31m)[00m
	(SIMPX aber wir mussen ja auch sowieso nicht am wochenende fliegen))
Step:Modifier Attachment
{'subtrees': ['ADVX', 'APPRART', 'NX', 'ADVX'], 'family': ['DM', 'NX', 'SIMPX', 'SIMPX', 'PX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'PPER', 'PPER', 'VAFIN', 'PRF', 'ADV', 'VVPP', 'KON', 'PDS', 'VAFIN', 'ADV', 'ADV', 'ADV', 'ADV', 'APPRART', 'NN', 'PTKNEG', 'KON', 'PPER', 'VMFIN', 'ADV', 'ADV', 'ADV', 'PTKNEG', 'APPRART', 'NN', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 27), 'span': (13, 17), 'left siblings': ['DM', 'NX', 'SIMPX', 'SIMPX'], 'label': 'PX', 'classified_type': 'Modifier Attachment', 'type': 'remove'}
(TOP ja wir ich hatte mich auch informiert und das ist immer noch so nur am wochenende nicht aber wir mussen ja auch sowieso nicht am wochenende fliegen)

Sentence 1199:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1200:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1201:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1202:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1203:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1204:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1205:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1206:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Different label
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(DM also)
	(SIMPX
		[01;36m(VF[00m [01;31m(LV[00m
			(SIMPX
				(C wenn)
				(MF es ihnen da nicht)
				(VC past))[01;31m)[00m[01;36m)[00m
		(LK konnen)
		(MF wir auch am zweiten juliwochenende)
		(VC fahren)))
Step:Different label
{'family': ['VF', 'LK', 'MF', 'VC'], 'auto preterminal span': (2, 8), 'span': (2, 8), 'subtrees': ['SIMPX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('KOUS', 'PPER', 'PPER', 'ADV', 'PTKNEG', 'VVFIN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('LV', 'VF')}
(TOP ja also wenn es ihnen da nicht past konnen wir auch am zweiten juliwochenende fahren)

Sentence 1207:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1208:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1209:
5 Initial errors
0 on fringe, 3 iterations
2 Error:Different label
2 Error:UNSET move
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM also)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF das wochenende)
		(LK ware)
		(MF der funfte sechste)[01;31m)[00m
	[01;31m(SIMPX[00m
		[01;36m(NF[00m [01;31m(LV[00m
			(SIMPX
				(C wenn)
				(MF wir dann am montag)
				(VC starten))[01;31m)[00m [01;33mSIMPX)[00m[01;36m)[00m
		(DM genau)
		(LK ware)
		(MF das der siebte juli)[01;31m)[00m)
Step:Different label
{'family': ['NF', 'DM', 'LK', 'MF'], 'auto preterminal span': (7, 13), 'span': (7, 13), 'subtrees': ['SIMPX'], 'parent': 'SIMPX', 'over_word': False, 'auto preterminals': ('KOUS', 'PPER', 'ADV', 'APPRART', 'NN', 'VVFIN'), 'classified_type': 'Different label', 'type': 'relabel', 'change': ('LV', 'NF')}
(TOP
	(DM also)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF das wochenende)
		(LK ware)
		(MF der funfte sechste)[01;31m)[00m
	[01;31m(SIMPX[00m
		(NF wenn wir dann am montag starten) [01;33mSIMPX)[00m
		(DM genau)
		(LK ware)
		(MF das der siebte juli)[01;31m)[00m)
Step:UNSET move
{'new_parent': 'SIMPX', 'new_family': ['VF', 'LK', 'MF', 'NF'], 'mover info': [('NF', (7, 13))], 'old_family': ['NF', 'DM', 'LK', 'MF'], 'start left siblings': [], 'auto preterminals': ('ADV', 'ART', 'NN', 'VAFIN', 'ART', 'NN', 'NN', 'KOUS', 'PPER', 'ADV', 'APPRART', 'NN', 'VVFIN', 'ITJ', 'VAFIN', 'PDS', 'ART', 'ADJA', 'NN'), 'start right siblings': ['DM', 'LK', 'MF'], 'end left siblings': ['VF', 'LK', 'MF'], 'auto preterminal span': (0, 19), 'movers': ['NF'], 'old_parent': 'SIMPX', 'end right siblings': [], 'classified_type': 'UNSET move', 'type': 'move'}
(TOP
	(DM also)
	(SIMPX das wochenende ware der funfte sechste wenn wir dann am montag starten)
	[01;31m(SIMPX[00m
		(DM genau)
		(LK ware)
		(MF das der siebte juli)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['DM', 'LK', 'MF'], 'family': ['DM', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'ART', 'NN', 'VAFIN', 'ART', 'NN', 'NN', 'KOUS', 'PPER', 'ADV', 'APPRART', 'NN', 'VVFIN', 'ITJ', 'VAFIN', 'PDS', 'ART', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 19), 'span': (13, 19), 'left siblings': ['DM', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP also das wochenende ware der funfte sechste wenn wir dann am montag starten genau ware das der siebte juli)

Sentence 1210:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1211:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1212:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1213:
1 Initial errors
0 on fringe, 1 iterations
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF ich)
		(LK wurde)
		(VC sagen)
		(NF
			(ADJX
				(ADJX am besten)
				[01;36m(ADJX[00m
					(ADJD zentral)[01;36m)[00m))))
Step:Single Word Phrase
{'subtrees': ['ADJD'], 'family': ['ADJX', 'ADJX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ADJD',), 'right siblings': [], 'left siblings': [(ADJX (PTKA am) (ADJD besten))], 'auto preterminal span': (5, 6), 'span': (5, 6), 'parent': 'ADJX', 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP ich wurde sagen am besten zentral)

Sentence 1214:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1215:
7 Initial errors
0 on fringe, 3 iterations
4 Error:Modifier Attachment
2 Error:Clause Attachment
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			(LK mochte)
			(MF
				(ADVX auch)
				[01;36m(NX[00m
					[01;33m(NX[00m (ADVX so)
					[01;31m(NX[00m
						[01;31m(NX[00m
							(ART ein)
							(ADJX bischen)
							(PIS was)[01;31m)[00m [01;33mNX)[00m
						(PX von hannover)[01;31m)[00m[01;36m)[00m)
			(VC sehen)[01;31m)[00m
		[01;36m(NF[00m
			(SIMPX
				(VF das wir vielleicht auch ein paar sehenswurdigkeiten uns anschauen)
				(LK wurde)
				(MF ich)
				(VC sagen))[01;36m)[00m)[01;36m)[00m
Step:Modifier Attachment
{'new_parent': 'NX', 'new_family': ['ADVX', 'ART', 'ADJX', 'PIS'], 'mover info': [('ADVX', (2, 3))], 'old_family': ['ADVX', 'ADVX', 'NX'], 'start left siblings': ['ADVX'], 'auto preterminals': ('ADV', 'ADV', 'ART', 'PIDAT', 'PIS', 'APPR', 'NE'), 'start right siblings': ['NX'], 'end left siblings': [], 'auto preterminal span': (1, 8), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': ['ART', 'ADJX', 'PIS'], 'classified_type': 'Modifier Attachment', 'type': 'move'}
[01;36m(SIMPX[00m
	(TOP
		[01;31m(SIMPX[00m
			(LK mochte)
			(MF auch so ein bischen was von hannover)
			(VC sehen)[01;31m)[00m
		[01;36m(NF[00m
			(SIMPX
				(VF das wir vielleicht auch ein paar sehenswurdigkeiten uns anschauen)
				(LK wurde)
				(MF ich)
				(VC sagen))[01;36m)[00m)[01;36m)[00m
Step:Clause Attachment
{'new_parent': 'SIMPX', 'new_family': ['LK', 'MF', 'VC', 'SIMPX'], 'mover info': [('SIMPX', (9, 21))], 'old_family': ['SIMPX', 'SIMPX'], 'start left siblings': ['SIMPX'], 'auto preterminals': ('VMFIN', 'ADV', 'ADV', 'ART', 'PIDAT', 'PIS', 'APPR', 'NE', 'VVINF', 'KOUS', 'PPER', 'ADV', 'ADV', 'ART', 'PIDAT', 'NN', 'PRF', 'VVFIN', 'VAFIN', 'PPER', 'VVINF'), 'start right siblings': [], 'end left siblings': ['LK', 'MF', 'VC'], 'auto preterminal span': (0, 21), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP
	(SIMPX
		(LK mochte)
		(MF auch so ein bischen was von hannover)
		(VC sehen)
		[01;36m(NF[00m
			(SIMPX
				(VF das wir vielleicht auch ein paar sehenswurdigkeiten uns anschauen)
				(LK wurde)
				(MF ich)
				(VC sagen))[01;36m)[00m))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['LK', 'MF', 'VC', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('KOUS', 'PPER', 'ADV', 'ADV', 'ART', 'PIDAT', 'NN', 'PRF', 'VVFIN', 'VAFIN', 'PPER', 'VVINF'), 'right siblings': [], 'left siblings': [(LK (VXFIN (VMFIN mochte))), (MF (ADVX (ADV auch)) (NX (NX (ADVX (ADV so)) (ART ein) (ADJX (PIDAT bischen)) (PIS was)) (PX (APPR von) (NX (NE hannover))))), (VC (VXINF (VVINF sehen)))], 'auto preterminal span': (9, 21), 'span': (9, 21), 'parent': 'SIMPX', 'label': 'NF', 'classified_type': 'Unary', 'type': 'add'}
(TOP mochte auch so ein bischen was von hannover sehen das wir vielleicht auch ein paar sehenswurdigkeiten uns anschauen wurde ich sagen)

Sentence 1216:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1217:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1218:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1219:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1220:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1221:
3 Initial errors
0 on fringe, 3 iterations
1 Error:Unary
1 Error:UNSET remove
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	[01;31m(SIMPX[00m
		(VF es)
		[01;31m(FKOORD[00m
			(LKM liegt sehr zentral) [01;33mSIMPX)[00m
			(LKM hat einen konferenzraum)[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['VF', 'FKOORD'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ADJD', 'VAFIN', 'ART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 7), 'span': (0, 7), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP [01;33m(SIMPX[00m
	(VF es)
	[01;31m(FKOORD[00m
		(LKM liegt sehr zentral) [01;33mSIMPX)[00m
		(LKM hat einen konferenzraum)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['LKM', 'LKM'], 'family': ['VF', 'FKOORD'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ADJD', 'VAFIN', 'ART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 7), 'span': (1, 7), 'left siblings': ['VF'], 'label': 'FKOORD', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	[01;36m(SIMPX[00m
		(VF es)
		(LKM liegt sehr zentral)[01;36m)[00m
	(LKM hat einen konferenzraum))
Step:UNSET add
{'subtrees': ['VF', 'LKM'], 'family': ['SIMPX', 'LKM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ADJD'), 'right siblings': [(LKM (LK (VXFIN (VAFIN hat))) (MF (NX (ART einen) (NN konferenzraum))))], 'left siblings': [], 'auto preterminal span': (0, 4), 'span': (0, 4), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP es liegt sehr zentral hat einen konferenzraum)

Sentence 1222:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1223:
6 Initial errors
0 on fringe, 5 iterations
2 Error:NP Internal Structure
1 Error:Modifier Attachment
1 Error:PP Attachment
1 Error:Single Word Phrase
1 Error:Single Word Phrase
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(ADVX
		(ADVX auch)
		(SIMPX
			(C wenn)
			(MF
				(NX wir)
				(ADVX noch)
				(NX [01;33m(NX[00m
					[01;36m(NX[00m
						(ART ein)
						[01;31m(ADJX[00m
							(PIDAT paar)[01;31m)[00m[01;36m)[00m
					(APPR [01;33m(PX[00m mit)
					[01;31m(NX[00m
						[01;36m(NX[00m
							(NN teilnehmer) [01;33mPX) NX)[00m[01;36m)[00m
						(NX der messe)[01;31m)[00m)
				(ADVX mit))
			(VC einladen))))
Step:NP Internal Structure
{'new_parent': 'NX', 'new_family': ['ART', 'ADJX', 'APPR', 'NN', 'NX'], 'mover info': [('NN', (7, 8))], 'old_family': ['NN', 'NX'], 'start left siblings': [], 'auto preterminals': ('ART', 'PIDAT', 'APPR', 'NN', 'ART', 'NN'), 'start right siblings': ['NX'], 'end left siblings': ['ART', 'ADJX', 'APPR'], 'auto preterminal span': (4, 10), 'adding node already present': False, 'movers': ['NN'], 'old_parent': 'NX', 'POS confusion': ('NN', 'NN'), 'added and moved': True, 'end right siblings': ['NX'], 'classified_type': 'NP Internal Structure', 'type': 'move', 'added label': 'NX'}
(TOP
	(ADVX
		(ADVX auch)
		(SIMPX
			(C wenn)
			(MF
				(NX wir)
				(ADVX noch)
				(NX
					[01;36m(NX[00m
						[01;36m(NX[00m
							(ART ein)
							[01;31m(ADJX[00m
								(PIDAT paar)[01;31m)[00m[01;36m)[00m
						(PX
							(APPR mit)
							[01;36m(NX[00m
								(NN teilnehmer)[01;36m)[00m)[01;36m)[00m
					(NX der messe))
				(ADVX mit))
			(VC einladen))))
Step:Modifier Attachment
{'subtrees': ['ART', 'ADJX'], 'family': ['NX', 'PX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'PIDAT'), 'right siblings': [(PX (APPR mit) (NN teilnehmer)), (NX (ART der) (NN messe))], 'left siblings': [], 'auto preterminal span': (4, 6), 'span': (4, 6), 'parent': 'NX', 'label': 'NX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(ADVX
		(ADVX auch)
		(SIMPX
			(C wenn)
			(MF
				(NX wir)
				(ADVX noch)
				(NX
					[01;36m(NX[00m
						(NX
							(ART ein)
							[01;31m(ADJX[00m
								(PIDAT paar)[01;31m)[00m)
						(PX
							(APPR mit)
							[01;36m(NX[00m
								(NN teilnehmer)[01;36m)[00m)[01;36m)[00m
					(NX der messe))
				(ADVX mit))
			(VC einladen))))
Step:PP Attachment
{'subtrees': ['NX', 'PX'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'PIDAT', 'APPR', 'NN'), 'right siblings': [(NX (ART der) (NN messe))], 'left siblings': [], 'auto preterminal span': (4, 8), 'span': (4, 8), 'parent': 'NX', 'label': 'NX', 'classified_type': 'PP Attachment', 'type': 'add'}
(TOP
	(ADVX
		(ADVX auch)
		(SIMPX
			(C wenn)
			(MF
				(NX wir)
				(ADVX noch)
				(NX
					(NX
						(NX
							(ART ein)
							[01;31m(ADJX[00m
								(PIDAT paar)[01;31m)[00m)
						(PX
							(APPR mit)
							[01;36m(NX[00m
								(NN teilnehmer)[01;36m)[00m))
					(NX der messe))
				(ADVX mit))
			(VC einladen))))
Step:Single Word Phrase
{'subtrees': ['NN'], 'family': ['APPR', 'NX'], 'over_word': True, 'over words': True, 'auto preterminals': ('NN',), 'right siblings': [], 'left siblings': [(APPR mit)], 'auto preterminal span': (7, 8), 'span': (7, 8), 'parent': 'PX', 'label': 'NX', 'classified_type': 'Single Word Phrase', 'type': 'add'}
(TOP
	(ADVX
		(ADVX auch)
		(SIMPX
			(C wenn)
			(MF
				(NX wir)
				(ADVX noch)
				(NX
					(NX
						(NX
							(ART ein)
							[01;31m(ADJX[00m
								(PIDAT paar)[01;31m)[00m)
						(PX mit teilnehmer))
					(NX der messe))
				(ADVX mit))
			(VC einladen))))
Step:Single Word Phrase
{'subtrees': ['PIDAT'], 'family': ['ART', 'ADJX'], 'over_word': True, 'over words': True, 'auto preterminals': ('ART', 'PIDAT'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (4, 6), 'span': (5, 6), 'left siblings': ['ART'], 'label': 'ADJX', 'classified_type': 'Single Word Phrase', 'type': 'remove'}
(TOP auch wenn wir noch ein paar mit teilnehmer der messe mit einladen)

Sentence 1224:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1225:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1226:
3 Initial errors
0 on fringe, 3 iterations
1 Error:UNSET add
1 Error:Unary
1 Error:Unary
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(SIMPX
				(KOORD und)
				(C was)
				(MF naturlich auch sehr komfortabel)
				(VC ist))[01;31m)[00m
		[01;36m(SIMPX[00m
			(VF es)
			(LK hat)
			(MF eine eigene sauna)[01;36m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['LV', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VAFIN', 'ART', 'ADJA', 'NN'), 'right siblings': [], 'left siblings': [(LV (SIMPX (KOORD (KON und)) (C (NX (PWS was))) (MF (ADVX (ADV naturlich)) (ADVX (ADV auch)) (ADJX (ADVX (ADV sehr)) (ADJD komfortabel))) (VC (VXFIN (VAFIN ist)))))], 'auto preterminal span': (7, 12), 'span': (7, 12), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	[01;31m(SIMPX[00m
		[01;31m(LV[00m
			(SIMPX
				(KOORD und)
				(C was)
				(MF naturlich auch sehr komfortabel)
				(VC ist))[01;31m)[00m
		(SIMPX es hat eine eigene sauna)[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['LV', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PWS', 'ADV', 'ADV', 'ADV', 'ADJD', 'VAFIN', 'PPER', 'VAFIN', 'ART', 'ADJA', 'NN'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (0, 12), 'span': (0, 7), 'left siblings': [], 'label': 'LV', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	[01;31m(SIMPX[00m
		(SIMPX und was naturlich auch sehr komfortabel ist)
		(SIMPX es hat eine eigene sauna)[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'PWS', 'ADV', 'ADV', 'ADV', 'ADJD', 'VAFIN', 'PPER', 'VAFIN', 'ART', 'ADJA', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 12), 'span': (0, 12), 'left siblings': [], 'label': 'SIMPX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP und was naturlich auch sehr komfortabel ist es hat eine eigene sauna)

Sentence 1227:
2 Initial errors
0 on fringe, 1 iterations
2 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
[01;36m(NX[00m
	(TOP
		[01;31m(NX[00m
			(KON und)
			(NX ein hallenbad)[01;31m)[00m
		(SIMPX wie ich grade sehe))[01;36m)[00m
Step:Clause Attachment
{'new_parent': 'NX', 'new_family': ['KON', 'NX', 'SIMPX'], 'mover info': [('SIMPX', (3, 7))], 'old_family': ['NX', 'SIMPX'], 'start left siblings': ['NX'], 'auto preterminals': ('KON', 'ART', 'NN', 'KOUS', 'PPER', 'ADV', 'VVFIN'), 'start right siblings': [], 'end left siblings': ['KON', 'NX'], 'auto preterminal span': (0, 7), 'movers': ['SIMPX'], 'old_parent': 'TOP', 'end right siblings': [], 'classified_type': 'Clause Attachment', 'type': 'move'}
(TOP und ein hallenbad wie ich grade sehe)

Sentence 1228:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1229:
10 Initial errors
0 on fringe, 9 iterations
2 Error:Modifier Attachment
1 Error:Unary
1 Error:UNSET remove
1 Error:Clause Attachment
1 Error:NP Internal Structure
1 Error:UNSET remove
1 Error:UNSET add
1 Error:UNSET add
1 Error:UNSET add
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	[01;31m(NX[00m
		(ART die)
		(NN kosten)[01;31m)[00m
	(ART der)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF
			(NX
				(NX die frage)
				[01;31m(NX[00m
					(ART der)
					(NN kosten)[01;31m)[00m))
		[01;31m(SIMPX[00m
			(LK konnen)
			[01;31m(MF[00m
				[01;36m(MF[00m
					(NX
						(PPER wir)) [01;33mSIMPX) SIMPX)[00m[01;36m)[00m
				[01;36m(VF[00m
					(ADVX [01;33m(SIMPX[00m
						(ADV dann))[01;36m)[00m[01;31m)[00m[01;31m)[00m
		(LK kann)
		(MF ich mit unserem vorgesetzten)
		(VC abchecken)[01;31m)[00m) [01;33mSIMPX)[00m
Step:Modifier Attachment
{'new_parent': 'SIMPX', 'new_family': ['LK', 'MF', 'ADVX'], 'mover info': [('ADVX', (9, 10))], 'old_family': ['NX', 'ADVX'], 'start left siblings': ['NX'], 'auto preterminals': ('VMFIN', 'PPER', 'ADV'), 'start right siblings': [], 'end left siblings': ['LK', 'MF'], 'auto preterminal span': (7, 10), 'movers': ['ADVX'], 'old_parent': 'MF', 'POS confusion': ('ADV', 'ADV'), 'end right siblings': [], 'classified_type': 'Modifier Attachment', 'type': 'move'}
(TOP [01;33m(SIMPX[00m
	[01;31m(NX[00m
		(ART die)
		(NN kosten)[01;31m)[00m
	(ART der)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF
			(NX
				(NX die frage)
				[01;31m(NX[00m
					(ART der)
					(NN kosten)[01;31m)[00m))
		[01;31m(SIMPX[00m
			(LK konnen)
			(MF wir) [01;33mSIMPX) SIMPX)[00m
			[01;36m(VF[00m
				(ADVX [01;33m(SIMPX[00m
					(ADV dann))[01;36m)[00m[01;31m)[00m
		(LK kann)
		(MF ich mit unserem vorgesetzten)
		(VC abchecken)[01;31m)[00m) [01;33mSIMPX)[00m
Step:Unary
{'subtrees': ['ADVX'], 'family': ['LK', 'MF', 'VF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV',), 'right siblings': [], 'left siblings': [(LK (VXFIN (VMFIN konnen))), (MF (NX (PPER wir)))], 'auto preterminal span': (9, 10), 'span': (9, 10), 'parent': 'SIMPX', 'label': 'VF', 'classified_type': 'Unary', 'type': 'add'}
(TOP [01;33m(SIMPX[00m
	[01;31m(NX[00m
		(ART die)
		(NN kosten)[01;31m)[00m
	(ART der)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF
			(NX
				(NX die frage)
				[01;31m(NX[00m
					(ART der)
					(NN kosten)[01;31m)[00m))
		[01;31m(SIMPX[00m
			(LK konnen)
			(MF wir) [01;33mSIMPX) SIMPX)[00m
			[01;33m(SIMPX[00m (VF dann)[01;31m)[00m
		(LK kann)
		(MF ich mit unserem vorgesetzten)
		(VC abchecken)[01;31m)[00m) [01;33mSIMPX)[00m
Step:UNSET remove
{'subtrees': ['ART', 'NN'], 'family': ['NX', 'ART', 'SIMPX'], 'over_word': False, 'over words': True, 'auto preterminals': ('ART', 'NN', 'ART', 'ART', 'NN', 'ART', 'NN', 'VMFIN', 'PPER', 'ADV', 'VMFIN', 'PPER', 'APPR', 'PPOSAT', 'NN', 'VVINF'), 'right siblings': ['ART', 'SIMPX'], 'parent': 'TOP', 'auto preterminal span': (0, 16), 'span': (0, 2), 'left siblings': [], 'label': 'NX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP [01;33m(SIMPX[00m
	(ART die)
	(NN kosten)
	(ART der)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(VF
			(NX
				(NX die frage)
				[01;31m(NX[00m
					(ART der)
					(NN kosten)[01;31m)[00m))
		[01;31m(SIMPX[00m
			(LK konnen)
			(MF wir) [01;33mSIMPX) SIMPX)[00m
			[01;33m(SIMPX[00m (VF dann)[01;31m)[00m
		(LK kann)
		(MF ich mit unserem vorgesetzten)
		(VC abchecken)[01;31m)[00m) [01;33mSIMPX)[00m
Step:Clause Attachment
{'subtrees': ['VF', 'SIMPX', 'LK', 'MF', 'VC'], 'family': ['ART', 'NN', 'ART', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'ART', 'ART', 'NN', 'ART', 'NN', 'VMFIN', 'PPER', 'ADV', 'VMFIN', 'PPER', 'APPR', 'PPOSAT', 'NN', 'VVINF'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 16), 'span': (3, 16), 'left siblings': ['ART', 'NN', 'ART'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP [01;33m(SIMPX[00m
	(ART die)
	(NN kosten)
	(ART der)
	(VF [01;33m(SIMPX[00m
		(NX
			(NX die frage)
			[01;31m(NX[00m
				(ART der)
				(NN kosten)[01;31m)[00m))
	[01;31m(SIMPX[00m
		(LK konnen)
		(MF wir) [01;33mSIMPX) SIMPX)[00m
		[01;33m(SIMPX[00m (VF dann)[01;31m)[00m
	(LK kann)
	(MF ich mit unserem vorgesetzten)
	(VC abchecken)) [01;33mSIMPX)[00m
Step:NP Internal Structure
{'subtrees': ['ART', 'NN'], 'family': ['NX', 'NX'], 'over_word': False, 'over words': True, 'auto preterminals': ('ART', 'NN', 'ART', 'NN'), 'right siblings': [], 'parent': 'NX', 'auto preterminal span': (3, 7), 'span': (5, 7), 'left siblings': ['NX'], 'label': 'NX', 'classified_type': 'NP Internal Structure', 'type': 'remove'}
(TOP [01;33m(SIMPX[00m
	(ART die)
	(NN kosten)
	(ART der)
	[01;33m(SIMPX[00m (VF die frage der kosten)
	[01;31m(SIMPX[00m
		(LK konnen)
		(MF wir) [01;33mSIMPX) SIMPX)[00m
		[01;33m(SIMPX[00m (VF dann)[01;31m)[00m
	(LK kann)
	(MF ich mit unserem vorgesetzten)
	(VC abchecken)) [01;33mSIMPX)[00m
Step:UNSET remove
{'subtrees': ['LK', 'MF', 'VF'], 'family': ['ART', 'NN', 'ART', 'VF', 'SIMPX', 'LK', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'ART', 'ART', 'NN', 'ART', 'NN', 'VMFIN', 'PPER', 'ADV', 'VMFIN', 'PPER', 'APPR', 'PPOSAT', 'NN', 'VVINF'), 'right siblings': ['LK', 'MF', 'VC'], 'parent': 'TOP', 'auto preterminal span': (0, 16), 'span': (7, 10), 'left siblings': ['ART', 'NN', 'ART', 'VF'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	[01;36m(SIMPX[00m
		(ART die)
		(NN kosten)
		(ART der)
		[01;36m(SIMPX[00m
			(VF die frage der kosten)
			(LK konnen)
			(MF wir)[01;36m)[00m[01;36m)[00m
	[01;36m(SIMPX[00m
		(VF dann)
		(LK kann)
		(MF ich mit unserem vorgesetzten)
		(VC abchecken)[01;36m)[00m)
Step:UNSET add
{'subtrees': ['ART', 'NN', 'ART', 'VF', 'LK', 'MF'], 'family': ['SIMPX', 'VF', 'LK', 'MF', 'VC'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'ART', 'ART', 'NN', 'ART', 'NN', 'VMFIN', 'PPER'), 'right siblings': [(VF (ADVX (ADV dann))), (LK (VXFIN (VMFIN kann))), (MF (NX (PPER ich)) (PX (APPR mit) (NX (PPOSAT unserem) (NN vorgesetzten)))), (VC (VXINF (VVINF abchecken)))], 'left siblings': [], 'auto preterminal span': (0, 9), 'span': (0, 9), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX
		(ART die)
		(NN kosten)
		(ART der)
		[01;36m(SIMPX[00m
			(VF die frage der kosten)
			(LK konnen)
			(MF wir)[01;36m)[00m)
	[01;36m(SIMPX[00m
		(VF dann)
		(LK kann)
		(MF ich mit unserem vorgesetzten)
		(VC abchecken)[01;36m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['ART', 'NN', 'ART', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ART', 'NN', 'ART', 'NN', 'VMFIN', 'PPER'), 'right siblings': [], 'left siblings': [(ART die), (NN kosten), (ART der)], 'auto preterminal span': (3, 9), 'span': (3, 9), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(SIMPX die kosten der die frage der kosten konnen wir)
	[01;36m(SIMPX[00m
		(VF dann)
		(LK kann)
		(MF ich mit unserem vorgesetzten)
		(VC abchecken)[01;36m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF', 'VC'], 'family': ['SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'VMFIN', 'PPER', 'APPR', 'PPOSAT', 'NN', 'VVINF'), 'right siblings': [], 'left siblings': [(SIMPX (ART die) (NN kosten) (ART der) (SIMPX (VF (NX (NX (ART die) (NN frage)) (ART der) (NN kosten))) (LK (VXFIN (VMFIN konnen))) (MF (NX (PPER wir)))))], 'auto preterminal span': (9, 16), 'span': (9, 16), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP die kosten der die frage der kosten konnen wir dann kann ich mit unserem vorgesetzten abchecken)

Sentence 1230:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1231:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1232:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1233:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1234:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1235:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1236:
4 Initial errors
0 on fringe, 4 iterations
1 Error:UNSET add
1 Error:Unary
1 Error:Clause Attachment
1 Error:Clause Attachment
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP [01;33m(SIMPX[00m
	(SIMPX ich konnte ja mal nachfragen)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(SIMPX
				(KOORD und)
				(C wenn)
				(MF nicht))[01;31m)[00m [01;33mSIMPX)[00m
		[01;36m(SIMPX[00m
			(LK konnen)
			(MF wir ja)
			(VC weitersehen)[01;36m)[00m[01;31m)[00m
	(DM ja))
Step:UNSET add
{'subtrees': ['LK', 'MF', 'VC'], 'family': ['VF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('VMFIN', 'PPER', 'ADV', 'VVINF'), 'right siblings': [], 'left siblings': [(VF (SIMPX (KOORD (KON und)) (C (KOUS wenn)) (MF (ADVX (PTKNEG nicht)))))], 'auto preterminal span': (8, 12), 'span': (8, 12), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP [01;33m(SIMPX[00m
	(SIMPX ich konnte ja mal nachfragen)
	[01;31m(SIMPX[00m
		[01;31m(VF[00m
			(SIMPX
				(KOORD und)
				(C wenn)
				(MF nicht))[01;31m)[00m [01;33mSIMPX)[00m
		(SIMPX konnen wir ja weitersehen)[01;31m)[00m
	(DM ja))
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['VF', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('KON', 'KOUS', 'PTKNEG', 'VMFIN', 'PPER', 'ADV', 'VVINF'), 'right siblings': ['SIMPX'], 'parent': 'SIMPX', 'auto preterminal span': (5, 12), 'span': (5, 8), 'left siblings': [], 'label': 'VF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP [01;33m(SIMPX[00m
	(SIMPX ich konnte ja mal nachfragen)
	[01;31m(SIMPX[00m
		(SIMPX und wenn nicht) [01;33mSIMPX)[00m
		(SIMPX konnen wir ja weitersehen)[01;31m)[00m
	(DM ja))
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX', 'SIMPX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'ADV', 'VVINF', 'KON', 'KOUS', 'PTKNEG', 'VMFIN', 'PPER', 'ADV', 'VVINF', 'PTKANT'), 'right siblings': ['DM'], 'parent': 'TOP', 'auto preterminal span': (0, 13), 'span': (5, 12), 'left siblings': ['SIMPX'], 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'remove'}
(TOP
	[01;36m(SIMPX[00m
		(SIMPX ich konnte ja mal nachfragen)
		(SIMPX und wenn nicht)[01;36m)[00m
	(SIMPX konnen wir ja weitersehen)
	(DM ja))
Step:Clause Attachment
{'subtrees': ['SIMPX', 'SIMPX'], 'family': ['SIMPX', 'SIMPX', 'DM'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VMFIN', 'ADV', 'ADV', 'VVINF', 'KON', 'KOUS', 'PTKNEG'), 'right siblings': [(SIMPX (LK (VXFIN (VMFIN konnen))) (MF (NX (PPER wir)) (ADVX (ADV ja))) (VC (VXINF (VVINF weitersehen)))), (DM (PTKANT ja))], 'left siblings': [], 'auto preterminal span': (0, 8), 'span': (0, 8), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Clause Attachment', 'type': 'add'}
(TOP ich konnte ja mal nachfragen und wenn nicht konnen wir ja weitersehen ja)

Sentence 1237:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1238:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1239:
10 Initial errors
0 on fringe, 10 iterations
1 Error:UNSET add
1 Error:UNSET remove
1 Error:Unary
1 Error:UNSET remove
1 Error:Unary
1 Error:UNSET remove
1 Error:Unary
1 Error:UNSET remove
1 Error:Modifier Attachment
1 Error:UNSET remove
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(DM ja)
	(PX mit den veranstaltungen)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		[01;36m(SIMPX[00m
			(VF ich)
			(LK sehe)
			[01;31m(MF[00m
				(ADVX
					(ADV gerade))[01;31m)[00m[01;36m)[00m
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(VF[00m
					[01;31m(PX[00m
						[01;31m(PX[00m
							(ADVX genau)
							(APPR in)
							(NX der woche)[01;31m)[00m
						[01;31m(R[00m
							(C in der)
							(MF wir da)
							(VC sein werden)[01;31m)[00m[01;31m)[00m[01;31m)[00m [01;33mSIMPX)[00m
				(LK ist)
				(MF das schutzenfest)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:UNSET add
{'subtrees': ['VF', 'LK', 'MF'], 'family': ['SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV'), 'right siblings': [(NF (SIMPX (VF (PX (PX (ADVX (ADV genau)) (APPR in) (NX (ART der) (NN woche))) (R (C (PX (APPR in) (NX (PRELS der)))) (MF (NX (PPER wir)) (ADVX (ADV da))) (VC (VXINF (VAINF sein)) (VXFIN (VAFIN werden)))))) (LK (VXFIN (VAFIN ist))) (MF (NX (ART das) (NN schutzenfest)))))], 'left siblings': [], 'auto preterminal span': (4, 7), 'span': (4, 7), 'parent': 'SIMPX', 'label': 'SIMPX', 'classified_type': 'UNSET add', 'type': 'add'}
(TOP
	(DM ja)
	(PX mit den veranstaltungen)
	[01;31m(SIMPX[00m [01;33m(SIMPX[00m
		(SIMPX
			(VF ich)
			(LK sehe)
			[01;31m(MF[00m
				(ADVX
					(ADV gerade))[01;31m)[00m)
		[01;31m(NF[00m
			[01;31m(SIMPX[00m
				[01;31m(VF[00m
					[01;31m(PX[00m
						[01;31m(PX[00m
							(ADVX genau)
							(APPR in)
							(NX der woche)[01;31m)[00m
						[01;31m(R[00m
							(C in der)
							(MF wir da)
							(VC sein werden)[01;31m)[00m[01;31m)[00m[01;31m)[00m [01;33mSIMPX)[00m
				(LK ist)
				(MF das schutzenfest)[01;31m)[00m[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['SIMPX', 'NF'], 'family': ['DM', 'PX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'APPR', 'ART', 'NN', 'PPER', 'VVFIN', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'APPR', 'PRELS', 'PPER', 'ADV', 'VAINF', 'VAFIN', 'VAFIN', 'ART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 20), 'span': (4, 20), 'left siblings': ['DM', 'PX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(PX mit den veranstaltungen)
	(SIMPX [01;33m(SIMPX[00m
		(VF ich)
		(LK sehe)
		[01;31m(MF[00m
			(ADVX
				(ADV gerade))[01;31m)[00m)
	[01;31m(NF[00m
		[01;31m(SIMPX[00m
			[01;31m(VF[00m
				[01;31m(PX[00m
					[01;31m(PX[00m
						(ADVX genau)
						(APPR in)
						(NX der woche)[01;31m)[00m
					[01;31m(R[00m
						(C in der)
						(MF wir da)
						(VC sein werden)[01;31m)[00m[01;31m)[00m[01;31m)[00m [01;33mSIMPX)[00m
			(LK ist)
			(MF das schutzenfest)[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['ADVX'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (4, 7), 'span': (6, 7), 'left siblings': ['VF', 'LK'], 'label': 'MF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(PX mit den veranstaltungen)
	[01;33m(SIMPX[00m (SIMPX ich sehe gerade)
	[01;31m(NF[00m
		[01;31m(SIMPX[00m
			[01;31m(VF[00m
				[01;31m(PX[00m
					[01;31m(PX[00m
						(ADVX genau)
						(APPR in)
						(NX der woche)[01;31m)[00m
					[01;31m(R[00m
						(C in der)
						(MF wir da)
						(VC sein werden)[01;31m)[00m[01;31m)[00m[01;31m)[00m [01;33mSIMPX)[00m
			(LK ist)
			(MF das schutzenfest)[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['ADVX', 'APPR', 'NX'], 'family': ['PX', 'R'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'APPR', 'ART', 'NN', 'APPR', 'PRELS', 'PPER', 'ADV', 'VAINF', 'VAFIN'), 'right siblings': ['R'], 'parent': 'PX', 'auto preterminal span': (7, 17), 'span': (7, 11), 'left siblings': [], 'label': 'PX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(PX mit den veranstaltungen)
	[01;33m(SIMPX[00m (SIMPX ich sehe gerade)
	[01;31m(NF[00m
		[01;31m(SIMPX[00m
			[01;31m(VF[00m
				[01;31m(PX[00m
					(ADVX genau)
					(APPR in)
					(NX der woche)
					[01;31m(R[00m
						(C in der)
						(MF wir da)
						(VC sein werden)[01;31m)[00m[01;31m)[00m[01;31m)[00m [01;33mSIMPX)[00m
			(LK ist)
			(MF das schutzenfest)[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['ADVX', 'APPR', 'NX', 'R'], 'family': ['PX'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'APPR', 'ART', 'NN', 'APPR', 'PRELS', 'PPER', 'ADV', 'VAINF', 'VAFIN'), 'right siblings': [], 'parent': 'VF', 'auto preterminal span': (7, 17), 'span': (7, 17), 'left siblings': [], 'label': 'PX', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(PX mit den veranstaltungen)
	[01;33m(SIMPX[00m (SIMPX ich sehe gerade)
	[01;31m(NF[00m
		[01;31m(SIMPX[00m
			[01;31m(VF[00m
				(ADVX genau)
				(APPR in)
				(NX der woche)
				[01;31m(R[00m
					(C in der)
					(MF wir da)
					(VC sein werden)[01;31m)[00m[01;31m)[00m [01;33mSIMPX)[00m
			(LK ist)
			(MF das schutzenfest)[01;31m)[00m[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['ADVX', 'APPR', 'NX', 'R'], 'family': ['VF', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('ADV', 'APPR', 'ART', 'NN', 'APPR', 'PRELS', 'PPER', 'ADV', 'VAINF', 'VAFIN', 'VAFIN', 'ART', 'NN'), 'right siblings': ['LK', 'MF'], 'parent': 'SIMPX', 'auto preterminal span': (7, 20), 'span': (7, 17), 'left siblings': [], 'label': 'VF', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(PX mit den veranstaltungen)
	[01;33m(SIMPX[00m (SIMPX ich sehe gerade)
	[01;31m(NF[00m
		[01;31m(SIMPX[00m
			(ADVX genau)
			(APPR in)
			(NX der woche)
			[01;31m(R[00m
				(C in der)
				(MF wir da)
				(VC sein werden)[01;31m)[00m [01;33mSIMPX)[00m
			(LK ist)
			(MF das schutzenfest)[01;31m)[00m[01;31m)[00m)
Step:Unary
{'subtrees': ['SIMPX'], 'family': ['DM', 'PX', 'SIMPX', 'NF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'APPR', 'ART', 'NN', 'PPER', 'VVFIN', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'APPR', 'PRELS', 'PPER', 'ADV', 'VAINF', 'VAFIN', 'VAFIN', 'ART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 20), 'span': (7, 20), 'left siblings': ['DM', 'PX', 'SIMPX'], 'label': 'NF', 'classified_type': 'Unary', 'type': 'remove'}
(TOP
	(DM ja)
	(PX mit den veranstaltungen)
	[01;33m(SIMPX[00m (SIMPX ich sehe gerade)
	[01;31m(SIMPX[00m
		(ADVX genau)
		(APPR in)
		(NX der woche)
		[01;31m(R[00m
			(C in der)
			(MF wir da)
			(VC sein werden)[01;31m)[00m [01;33mSIMPX)[00m
		(LK ist)
		(MF das schutzenfest)[01;31m)[00m)
Step:UNSET remove
{'subtrees': ['ADVX', 'APPR', 'NX', 'R', 'LK', 'MF'], 'family': ['DM', 'PX', 'SIMPX', 'SIMPX'], 'over_word': False, 'over words': False, 'auto preterminals': ('PTKANT', 'APPR', 'ART', 'NN', 'PPER', 'VVFIN', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'APPR', 'PRELS', 'PPER', 'ADV', 'VAINF', 'VAFIN', 'VAFIN', 'ART', 'NN'), 'right siblings': [], 'parent': 'TOP', 'auto preterminal span': (0, 20), 'span': (7, 20), 'left siblings': ['DM', 'PX', 'SIMPX'], 'label': 'SIMPX', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP
	(DM ja)
	(PX mit den veranstaltungen)
	[01;36m(SIMPX[00m
		(SIMPX ich sehe gerade)
		(ADVX genau)
		(APPR in)
		(NX der woche)
		[01;31m(R[00m
			(C in der)
			(MF wir da)
			(VC sein werden)[01;31m)[00m[01;36m)[00m
	(LK ist)
	(MF das schutzenfest))
Step:Modifier Attachment
{'subtrees': ['SIMPX', 'ADVX', 'APPR', 'NX', 'R'], 'family': ['DM', 'PX', 'SIMPX', 'LK', 'MF'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'APPR', 'PRELS', 'PPER', 'ADV', 'VAINF', 'VAFIN'), 'right siblings': [(LK (VXFIN (VAFIN ist))), (MF (NX (ART das) (NN schutzenfest)))], 'left siblings': [(DM (PTKANT ja)), (PX (APPR mit) (NX (ART den) (NN veranstaltungen)))], 'auto preterminal span': (4, 17), 'span': (4, 17), 'parent': 'TOP', 'label': 'SIMPX', 'classified_type': 'Modifier Attachment', 'type': 'add'}
(TOP
	(DM ja)
	(PX mit den veranstaltungen)
	(SIMPX
		(SIMPX ich sehe gerade)
		(ADVX genau)
		(APPR in)
		(NX der woche)
		[01;31m(R[00m
			(C in der)
			(MF wir da)
			(VC sein werden)[01;31m)[00m)
	(LK ist)
	(MF das schutzenfest))
Step:UNSET remove
{'subtrees': ['C', 'MF', 'VC'], 'family': ['SIMPX', 'ADVX', 'APPR', 'NX', 'R'], 'over_word': False, 'over words': False, 'auto preterminals': ('PPER', 'VVFIN', 'ADV', 'ADV', 'APPR', 'ART', 'NN', 'APPR', 'PRELS', 'PPER', 'ADV', 'VAINF', 'VAFIN'), 'right siblings': [], 'parent': 'SIMPX', 'auto preterminal span': (4, 17), 'span': (11, 17), 'left siblings': ['SIMPX', 'ADVX', 'APPR', 'NX'], 'label': 'R', 'classified_type': 'UNSET remove', 'type': 'remove'}
(TOP ja mit den veranstaltungen ich sehe gerade genau in der woche in der wir da sein werden ist das schutzenfest)

Sentence 1240:
2 Initial errors
0 on fringe, 1 iterations
2 Error:NP Internal Structure
Step:UNSET init
{'classified_type': 'UNSET init', 'type': 'init'}
(TOP
	(SIMPX
		(VF das)
		(LK wird)
		(MF
			(NX
				[01;36m(NX[00m
					(KOKOM als)
					[01;31m(NX[00m
						(ADJX grostes)
						(NN schutzenfest)[01;31m)[00m[01;36m)[00m
				(NX der welt)))
		(VC deklariert)))
Step:NP Internal Structure
{'new_parent': 'NX', 'new_family': ['KOKOM', 'ADJX', 'NN'], 'mover info': [('KOKOM', (2, 3))], 'old_family': ['KOKOM', 'NX', 'NX'], 'start left siblings': [], 'auto preterminals': ('KOKOM', 'ADJA', 'NN', 'ART', 'NN'), 'start right siblings': ['NX', 'NX'], 'end left siblings': [], 'auto preterminal span': (2, 7), 'movers': ['KOKOM'], 'old_parent': 'NX', 'POS confusion': ('KOKOM', 'KOKOM'), 'end right siblings': ['ADJX', 'NN'], 'classified_type': 'NP Internal Structure', 'type': 'move'}
(TOP das wird als grostes schutzenfest der welt deklariert)

Sentence 1241:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1242:
0 Initial errors
0 on fringe, 0 iterations

Sentence 1243:
0 Initial errors
0 on fringe, 0 iterations

